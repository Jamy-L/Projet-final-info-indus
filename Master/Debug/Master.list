
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e768  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002124  0800e938  0800e938  0001e938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a5c  08010a5c  000300c4  2**0
                  CONTENTS
  4 .ARM          00000008  08010a5c  08010a5c  00020a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a64  08010a64  000300c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a64  08010a64  00020a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a68  08010a68  00020a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08010a6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004964  200000c4  08010b30  000300c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a28  08010b30  00034a28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034395  00000000  00000000  000300f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060eb  00000000  00000000  00064489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002728  00000000  00000000  0006a578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000024b0  00000000  00000000  0006cca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f142  00000000  00000000  0006f150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031707  00000000  00000000  0009e292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118452  00000000  00000000  000cf999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e7deb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ab20  00000000  00000000  001e7e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e920 	.word	0x0800e920

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c8 	.word	0x200000c8
 800020c:	0800e920 	.word	0x0800e920

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <vApplicationGetIdleTaskMemory+0x30>)
 80005be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	200000e0 	.word	0x200000e0
 80005d8:	20000194 	.word	0x20000194

080005dc <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005e6:	20c8      	movs	r0, #200	; 0xc8
 80005e8:	f002 fa60 	bl	8002aac <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005ec:	f000 f9b4 	bl	8000958 <ft5336_I2C_InitializeIfRequired>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b084      	sub	sp, #16
 8000612:	af00      	add	r7, sp, #0
 8000614:	4603      	mov	r3, r0
 8000616:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000620:	2300      	movs	r3, #0
 8000622:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000624:	f000 f998 	bl	8000958 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	e010      	b.n	8000650 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	21a8      	movs	r1, #168	; 0xa8
 8000634:	4618      	mov	r0, r3
 8000636:	f002 fa1b 	bl	8002a70 <TS_IO_Read>
 800063a:	4603      	mov	r3, r0
 800063c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800063e:	7b7b      	ldrb	r3, [r7, #13]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b51      	cmp	r3, #81	; 0x51
 8000644:	d101      	bne.n	800064a <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000646:	2301      	movs	r3, #1
 8000648:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	3301      	adds	r3, #1
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d802      	bhi.n	800065c <ft5336_ReadID+0x4e>
 8000656:	7bbb      	ldrb	r3, [r7, #14]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0e8      	beq.n	800062e <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 800065c:	7b7b      	ldrb	r3, [r7, #13]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	b29b      	uxth	r3, r3
}
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	4603      	mov	r3, r0
 8000672:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	4618      	mov	r0, r3
 8000678:	f000 f97e 	bl	8000978 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f932 	bl	80008e8 <ft5336_TS_DisableIT>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2102      	movs	r1, #2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 f9e5 	bl	8002a70 <TS_IO_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 030f 	and.w	r3, r3, #15
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	2b05      	cmp	r3, #5
 80006bc:	d901      	bls.n	80006c2 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <ft5336_TS_DetectTouch+0x50>)
 80006c8:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <ft5336_TS_DetectTouch+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	b2db      	uxtb	r3, r3
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000394 	.word	0x20000394

080006e0 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000702:	4b6d      	ldr	r3, [pc, #436]	; (80008b8 <ft5336_TS_GetXY+0x1d8>)
 8000704:	789a      	ldrb	r2, [r3, #2]
 8000706:	4b6c      	ldr	r3, [pc, #432]	; (80008b8 <ft5336_TS_GetXY+0x1d8>)
 8000708:	785b      	ldrb	r3, [r3, #1]
 800070a:	429a      	cmp	r2, r3
 800070c:	f080 80cf 	bcs.w	80008ae <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000710:	4b69      	ldr	r3, [pc, #420]	; (80008b8 <ft5336_TS_GetXY+0x1d8>)
 8000712:	789b      	ldrb	r3, [r3, #2]
 8000714:	2b09      	cmp	r3, #9
 8000716:	d871      	bhi.n	80007fc <ft5336_TS_GetXY+0x11c>
 8000718:	a201      	add	r2, pc, #4	; (adr r2, 8000720 <ft5336_TS_GetXY+0x40>)
 800071a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071e:	bf00      	nop
 8000720:	08000749 	.word	0x08000749
 8000724:	0800075b 	.word	0x0800075b
 8000728:	0800076d 	.word	0x0800076d
 800072c:	0800077f 	.word	0x0800077f
 8000730:	08000791 	.word	0x08000791
 8000734:	080007a3 	.word	0x080007a3
 8000738:	080007b5 	.word	0x080007b5
 800073c:	080007c7 	.word	0x080007c7
 8000740:	080007d9 	.word	0x080007d9
 8000744:	080007eb 	.word	0x080007eb
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000748:	2304      	movs	r3, #4
 800074a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 800074c:	2303      	movs	r3, #3
 800074e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000750:	2306      	movs	r3, #6
 8000752:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000754:	2305      	movs	r3, #5
 8000756:	753b      	strb	r3, [r7, #20]
      break;
 8000758:	e051      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800075a:	230a      	movs	r3, #10
 800075c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800075e:	2309      	movs	r3, #9
 8000760:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000762:	230c      	movs	r3, #12
 8000764:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000766:	230b      	movs	r3, #11
 8000768:	753b      	strb	r3, [r7, #20]
      break;
 800076a:	e048      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 800076c:	2310      	movs	r3, #16
 800076e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000770:	230f      	movs	r3, #15
 8000772:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000774:	2312      	movs	r3, #18
 8000776:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000778:	2311      	movs	r3, #17
 800077a:	753b      	strb	r3, [r7, #20]
      break;
 800077c:	e03f      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800077e:	2316      	movs	r3, #22
 8000780:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000782:	2315      	movs	r3, #21
 8000784:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000786:	2318      	movs	r3, #24
 8000788:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800078a:	2317      	movs	r3, #23
 800078c:	753b      	strb	r3, [r7, #20]
      break;
 800078e:	e036      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000790:	231c      	movs	r3, #28
 8000792:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000794:	231b      	movs	r3, #27
 8000796:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000798:	231e      	movs	r3, #30
 800079a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 800079c:	231d      	movs	r3, #29
 800079e:	753b      	strb	r3, [r7, #20]
      break;
 80007a0:	e02d      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007a2:	2322      	movs	r3, #34	; 0x22
 80007a4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007a6:	2321      	movs	r3, #33	; 0x21
 80007a8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007aa:	2324      	movs	r3, #36	; 0x24
 80007ac:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007ae:	2323      	movs	r3, #35	; 0x23
 80007b0:	753b      	strb	r3, [r7, #20]
      break;
 80007b2:	e024      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007b4:	2328      	movs	r3, #40	; 0x28
 80007b6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007b8:	2327      	movs	r3, #39	; 0x27
 80007ba:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007bc:	232a      	movs	r3, #42	; 0x2a
 80007be:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007c0:	2329      	movs	r3, #41	; 0x29
 80007c2:	753b      	strb	r3, [r7, #20]
      break;
 80007c4:	e01b      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80007c6:	232e      	movs	r3, #46	; 0x2e
 80007c8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80007ca:	232d      	movs	r3, #45	; 0x2d
 80007cc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007ce:	2330      	movs	r3, #48	; 0x30
 80007d0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007d2:	232f      	movs	r3, #47	; 0x2f
 80007d4:	753b      	strb	r3, [r7, #20]
      break;
 80007d6:	e012      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007d8:	2334      	movs	r3, #52	; 0x34
 80007da:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007dc:	2333      	movs	r3, #51	; 0x33
 80007de:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007e0:	2336      	movs	r3, #54	; 0x36
 80007e2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007e4:	2335      	movs	r3, #53	; 0x35
 80007e6:	753b      	strb	r3, [r7, #20]
      break;
 80007e8:	e009      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007ea:	233a      	movs	r3, #58	; 0x3a
 80007ec:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007ee:	2339      	movs	r3, #57	; 0x39
 80007f0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007f2:	233c      	movs	r3, #60	; 0x3c
 80007f4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007f6:	233b      	movs	r3, #59	; 0x3b
 80007f8:	753b      	strb	r3, [r7, #20]
      break;
 80007fa:	e000      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007fc:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	7dfa      	ldrb	r2, [r7, #23]
 8000804:	4611      	mov	r1, r2
 8000806:	4618      	mov	r0, r3
 8000808:	f002 f932 	bl	8002a70 <TS_IO_Read>
 800080c:	4603      	mov	r3, r0
 800080e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000810:	7cfb      	ldrb	r3, [r7, #19]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	b29a      	uxth	r2, r3
 8000816:	4b29      	ldr	r3, [pc, #164]	; (80008bc <ft5336_TS_GetXY+0x1dc>)
 8000818:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800081a:	89fb      	ldrh	r3, [r7, #14]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	7dba      	ldrb	r2, [r7, #22]
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f002 f924 	bl	8002a70 <TS_IO_Read>
 8000828:	4603      	mov	r3, r0
 800082a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800082c:	7cfb      	ldrb	r3, [r7, #19]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	021b      	lsls	r3, r3, #8
 8000832:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000836:	b21a      	sxth	r2, r3
 8000838:	4b20      	ldr	r3, [pc, #128]	; (80008bc <ft5336_TS_GetXY+0x1dc>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21b      	sxth	r3, r3
 8000842:	b29a      	uxth	r2, r3
 8000844:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <ft5336_TS_GetXY+0x1dc>)
 8000846:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <ft5336_TS_GetXY+0x1dc>)
 800084a:	881a      	ldrh	r2, [r3, #0]
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000850:	89fb      	ldrh	r3, [r7, #14]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	7d7a      	ldrb	r2, [r7, #21]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f002 f909 	bl	8002a70 <TS_IO_Read>
 800085e:	4603      	mov	r3, r0
 8000860:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000862:	7cfb      	ldrb	r3, [r7, #19]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	b29a      	uxth	r2, r3
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <ft5336_TS_GetXY+0x1dc>)
 800086a:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800086c:	89fb      	ldrh	r3, [r7, #14]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	7d3a      	ldrb	r2, [r7, #20]
 8000872:	4611      	mov	r1, r2
 8000874:	4618      	mov	r0, r3
 8000876:	f002 f8fb 	bl	8002a70 <TS_IO_Read>
 800087a:	4603      	mov	r3, r0
 800087c:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800087e:	7cfb      	ldrb	r3, [r7, #19]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	021b      	lsls	r3, r3, #8
 8000884:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000888:	b21a      	sxth	r2, r3
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <ft5336_TS_GetXY+0x1dc>)
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	b21b      	sxth	r3, r3
 8000890:	4313      	orrs	r3, r2
 8000892:	b21b      	sxth	r3, r3
 8000894:	b29a      	uxth	r2, r3
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <ft5336_TS_GetXY+0x1dc>)
 8000898:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <ft5336_TS_GetXY+0x1dc>)
 800089c:	881a      	ldrh	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <ft5336_TS_GetXY+0x1d8>)
 80008a4:	789b      	ldrb	r3, [r3, #2]
 80008a6:	3301      	adds	r3, #1
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <ft5336_TS_GetXY+0x1d8>)
 80008ac:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000394 	.word	0x20000394
 80008bc:	20000398 	.word	0x20000398

080008c0 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ce:	2301      	movs	r3, #1
 80008d0:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008d2:	88fb      	ldrh	r3, [r7, #6]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	7bfa      	ldrb	r2, [r7, #15]
 80008d8:	21a4      	movs	r1, #164	; 0xa4
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 f8ae 	bl	8002a3c <TS_IO_Write>
}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	7bfa      	ldrb	r2, [r7, #15]
 8000900:	21a4      	movs	r1, #164	; 0xa4
 8000902:	4618      	mov	r0, r3
 8000904:	f002 f89a 	bl	8002a3c <TS_IO_Write>
}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000944:	4b03      	ldr	r3, [pc, #12]	; (8000954 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000946:	781b      	ldrb	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000394 	.word	0x20000394

08000958 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800095c:	f7ff fff0 	bl	8000940 <ft5336_Get_I2C_InitializedStatus>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d104      	bne.n	8000970 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000966:	f002 f85f 	bl	8002a28 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800096a:	4b02      	ldr	r3, [pc, #8]	; (8000974 <ft5336_I2C_InitializeIfRequired+0x1c>)
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
  }
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000394 	.word	0x20000394

08000978 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <test_hitbox>:
uint8_t direction_ennemi = 6; //se réferer au pavé numérique pour la direction
uint8_t score1 = 0;
uint8_t score2 = 0;


int test_hitbox(int x1, int y1, int x2, int y2){
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	603b      	str	r3, [r7, #0]
	if ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)<=400){
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	68f9      	ldr	r1, [r7, #12]
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	1a8a      	subs	r2, r1, r2
 80009ae:	fb02 f203 	mul.w	r2, r2, r3
 80009b2:	68b9      	ldr	r1, [r7, #8]
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	1acb      	subs	r3, r1, r3
 80009b8:	68b8      	ldr	r0, [r7, #8]
 80009ba:	6839      	ldr	r1, [r7, #0]
 80009bc:	1a41      	subs	r1, r0, r1
 80009be:	fb01 f303 	mul.w	r3, r1, r3
 80009c2:	4413      	add	r3, r2
 80009c4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80009c8:	dc01      	bgt.n	80009ce <test_hitbox+0x3a>
		return 1;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <test_hitbox+0x3c>
	}
	else
		return 0;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009dc:	b5b0      	push	{r4, r5, r7, lr}
 80009de:	b0c0      	sub	sp, #256	; 0x100
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e2:	f004 f8a4 	bl	8004b2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e6:	f000 f96b 	bl	8000cc0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009ea:	f000 f9db 	bl	8000da4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ee:	f000 ff79 	bl	80018e4 <MX_GPIO_Init>
  MX_ADC3_Init();
 80009f2:	f000 fa55 	bl	8000ea0 <MX_ADC3_Init>
  MX_DMA2D_Init();
 80009f6:	f000 facf 	bl	8000f98 <MX_DMA2D_Init>
  MX_FMC_Init();
 80009fa:	f000 ff23 	bl	8001844 <MX_FMC_Init>
  MX_I2C1_Init();
 80009fe:	f000 fafd 	bl	8000ffc <MX_I2C1_Init>
  MX_I2C3_Init();
 8000a02:	f000 fb3b 	bl	800107c <MX_I2C3_Init>
  MX_LTDC_Init();
 8000a06:	f000 fb79 	bl	80010fc <MX_LTDC_Init>
  MX_RTC_Init();
 8000a0a:	f000 fc0d 	bl	8001228 <MX_RTC_Init>
  MX_TIM1_Init();
 8000a0e:	f000 fcef 	bl	80013f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a12:	f000 fd41 	bl	8001498 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a16:	f000 fd8d 	bl	8001534 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000a1a:	f000 fdd9 	bl	80015d0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000a1e:	f000 fe25 	bl	800166c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000a22:	f000 fea7 	bl	8001774 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000a26:	f000 fedd 	bl	80017e4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000a2a:	f000 f9e7 	bl	8000dfc <MX_ADC1_Init>
  MX_DAC_Init();
 8000a2e:	f000 fa89 	bl	8000f44 <MX_DAC_Init>
  MX_UART7_Init();
 8000a32:	f000 fe6f 	bl	8001714 <MX_UART7_Init>
  MX_SPI2_Init();
 8000a36:	f000 fc9d 	bl	8001374 <MX_SPI2_Init>
  MX_RNG_Init();
 8000a3a:	f000 fbe1 	bl	8001200 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000a3e:	f002 f841 	bl	8002ac4 <BSP_LCD_Init>
BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000a42:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000a46:	2000      	movs	r0, #0
 8000a48:	f002 f8d4 	bl	8002bf4 <BSP_LCD_LayerDefaultInit>
BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000a4c:	f002 f8aa 	bl	8002ba4 <BSP_LCD_GetXSize>
 8000a50:	4604      	mov	r4, r0
 8000a52:	f002 f8bb 	bl	8002bcc <BSP_LCD_GetYSize>
 8000a56:	4603      	mov	r3, r0
 8000a58:	fb03 f304 	mul.w	r3, r3, r4
 8000a5c:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4619      	mov	r1, r3
 8000a64:	2001      	movs	r0, #1
 8000a66:	f002 f8c5 	bl	8002bf4 <BSP_LCD_LayerDefaultInit>
BSP_LCD_DisplayOn();
 8000a6a:	f002 fd95 	bl	8003598 <BSP_LCD_DisplayOn>
BSP_LCD_SelectLayer(0);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f002 f920 	bl	8002cb4 <BSP_LCD_SelectLayer>
BSP_LCD_SelectLayer(1);
 8000a74:	2001      	movs	r0, #1
 8000a76:	f002 f91d 	bl	8002cb4 <BSP_LCD_SelectLayer>
BSP_LCD_Clear(00);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f002 f95c 	bl	8002d38 <BSP_LCD_Clear>
BSP_LCD_SetFont(&Font12);
 8000a80:	4873      	ldr	r0, [pc, #460]	; (8000c50 <main+0x274>)
 8000a82:	f002 f93f 	bl	8002d04 <BSP_LCD_SetFont>


BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000a86:	f002 f88d 	bl	8002ba4 <BSP_LCD_GetXSize>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	b29c      	uxth	r4, r3
 8000a8e:	f002 f89d 	bl	8002bcc <BSP_LCD_GetYSize>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	4619      	mov	r1, r3
 8000a98:	4620      	mov	r0, r4
 8000a9a:	f003 f94b 	bl	8003d34 <BSP_TS_Init>

pData_transmit[0] = x_viseur1;
 8000a9e:	4b6d      	ldr	r3, [pc, #436]	; (8000c54 <main+0x278>)
 8000aa0:	881a      	ldrh	r2, [r3, #0]
 8000aa2:	4b6d      	ldr	r3, [pc, #436]	; (8000c58 <main+0x27c>)
 8000aa4:	801a      	strh	r2, [r3, #0]
pData_transmit[1] = y_viseur1;
 8000aa6:	4b6d      	ldr	r3, [pc, #436]	; (8000c5c <main+0x280>)
 8000aa8:	881a      	ldrh	r2, [r3, #0]
 8000aaa:	4b6b      	ldr	r3, [pc, #428]	; (8000c58 <main+0x27c>)
 8000aac:	805a      	strh	r2, [r3, #2]
pData_transmit[2] = x_ennemi;
 8000aae:	4b6c      	ldr	r3, [pc, #432]	; (8000c60 <main+0x284>)
 8000ab0:	881a      	ldrh	r2, [r3, #0]
 8000ab2:	4b69      	ldr	r3, [pc, #420]	; (8000c58 <main+0x27c>)
 8000ab4:	809a      	strh	r2, [r3, #4]
pData_transmit[3] = y_ennemi;
 8000ab6:	4b6b      	ldr	r3, [pc, #428]	; (8000c64 <main+0x288>)
 8000ab8:	881a      	ldrh	r2, [r3, #0]
 8000aba:	4b67      	ldr	r3, [pc, #412]	; (8000c58 <main+0x27c>)
 8000abc:	80da      	strh	r2, [r3, #6]
HAL_SPI_TransmitReceive_IT(&hspi2, pData_transmit, pData_receive, Size);
 8000abe:	4b6a      	ldr	r3, [pc, #424]	; (8000c68 <main+0x28c>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	4a6a      	ldr	r2, [pc, #424]	; (8000c6c <main+0x290>)
 8000ac4:	4964      	ldr	r1, [pc, #400]	; (8000c58 <main+0x27c>)
 8000ac6:	486a      	ldr	r0, [pc, #424]	; (8000c70 <main+0x294>)
 8000ac8:	f008 ff00 	bl	80098cc <HAL_SPI_TransmitReceive_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Mutex_Ecran */
  osSemaphoreDef(Mutex_Ecran);
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  Mutex_EcranHandle = osSemaphoreCreate(osSemaphore(Mutex_Ecran), 1);
 8000ad8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000adc:	2101      	movs	r1, #1
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f00a fe35 	bl	800b74e <osSemaphoreCreate>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	4a63      	ldr	r2, [pc, #396]	; (8000c74 <main+0x298>)
 8000ae8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Queue_Tir */
  osMessageQDef(Queue_Tir, 16, uint16_t);
 8000aea:	4b63      	ldr	r3, [pc, #396]	; (8000c78 <main+0x29c>)
 8000aec:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 8000af0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000af2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_TirHandle = osMessageCreate(osMessageQ(Queue_Tir), NULL);
 8000af6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f00a fe58 	bl	800b7b2 <osMessageCreate>
 8000b02:	4603      	mov	r3, r0
 8000b04:	4a5d      	ldr	r2, [pc, #372]	; (8000c7c <main+0x2a0>)
 8000b06:	6013      	str	r3, [r2, #0]

  /* definition and creation of Queue_hit */
  osMessageQDef(Queue_hit, 16, uint16_t);
 8000b08:	4b5b      	ldr	r3, [pc, #364]	; (8000c78 <main+0x29c>)
 8000b0a:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8000b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_hitHandle = osMessageCreate(osMessageQ(Queue_hit), NULL);
 8000b14:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f00a fe49 	bl	800b7b2 <osMessageCreate>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a57      	ldr	r2, [pc, #348]	; (8000c80 <main+0x2a4>)
 8000b24:	6013      	str	r3, [r2, #0]

  /* definition and creation of Queue_receive */
  osMessageQDef(Queue_receive, 16, uint16_t);
 8000b26:	4b54      	ldr	r3, [pc, #336]	; (8000c78 <main+0x29c>)
 8000b28:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000b2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_receiveHandle = osMessageCreate(osMessageQ(Queue_receive), NULL);
 8000b32:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f00a fe3a 	bl	800b7b2 <osMessageCreate>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4a50      	ldr	r2, [pc, #320]	; (8000c84 <main+0x2a8>)
 8000b42:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b44:	4b50      	ldr	r3, [pc, #320]	; (8000c88 <main+0x2ac>)
 8000b46:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000b4a:	461d      	mov	r5, r3
 8000b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b58:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f00a fd95 	bl	800b68e <osThreadCreate>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4a49      	ldr	r2, [pc, #292]	; (8000c8c <main+0x2b0>)
 8000b68:	6013      	str	r3, [r2, #0]

  /* definition and creation of viseur */
  osThreadDef(viseur, Task_Viseur, osPriorityBelowNormal, 0, 128);
 8000b6a:	4b49      	ldr	r3, [pc, #292]	; (8000c90 <main+0x2b4>)
 8000b6c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000b70:	461d      	mov	r5, r3
 8000b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  viseurHandle = osThreadCreate(osThread(viseur), NULL);
 8000b7e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00a fd82 	bl	800b68e <osThreadCreate>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	4a41      	ldr	r2, [pc, #260]	; (8000c94 <main+0x2b8>)
 8000b8e:	6013      	str	r3, [r2, #0]

  /* definition and creation of tir */
  osThreadDef(tir, Task_Tir, osPriorityNormal, 0, 128);
 8000b90:	4b41      	ldr	r3, [pc, #260]	; (8000c98 <main+0x2bc>)
 8000b92:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000b96:	461d      	mov	r5, r3
 8000b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tirHandle = osThreadCreate(osThread(tir), NULL);
 8000ba4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f00a fd6f 	bl	800b68e <osThreadCreate>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <main+0x2c0>)
 8000bb4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Ennemi */
  osThreadDef(Ennemi, Task_Ennemi, osPriorityLow, 0, 128);
 8000bb6:	4b3a      	ldr	r3, [pc, #232]	; (8000ca0 <main+0x2c4>)
 8000bb8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000bbc:	461d      	mov	r5, r3
 8000bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EnnemiHandle = osThreadCreate(osThread(Ennemi), NULL);
 8000bca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f00a fd5c 	bl	800b68e <osThreadCreate>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4a32      	ldr	r2, [pc, #200]	; (8000ca4 <main+0x2c8>)
 8000bda:	6013      	str	r3, [r2, #0]

  /* definition and creation of Led */
  osThreadDef(Led, Task_Tir, osPriorityAboveNormal, 0, 128);
 8000bdc:	4b32      	ldr	r3, [pc, #200]	; (8000ca8 <main+0x2cc>)
 8000bde:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000be2:	461d      	mov	r5, r3
 8000be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LedHandle = osThreadCreate(osThread(Led), NULL);
 8000bf0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f00a fd49 	bl	800b68e <osThreadCreate>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4a2b      	ldr	r2, [pc, #172]	; (8000cac <main+0x2d0>)
 8000c00:	6013      	str	r3, [r2, #0]

  /* definition and creation of Affichage */
  osThreadDef(Affichage, Task_Affichage, osPriorityHigh, 0, 128);
 8000c02:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <main+0x2d4>)
 8000c04:	f107 0420 	add.w	r4, r7, #32
 8000c08:	461d      	mov	r5, r3
 8000c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AffichageHandle = osThreadCreate(osThread(Affichage), NULL);
 8000c16:	f107 0320 	add.w	r3, r7, #32
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f00a fd36 	bl	800b68e <osThreadCreate>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4a23      	ldr	r2, [pc, #140]	; (8000cb4 <main+0x2d8>)
 8000c26:	6013      	str	r3, [r2, #0]

  /* definition and creation of share */
  osThreadDef(share, Task_Share, osPriorityRealtime, 0, 128);
 8000c28:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <main+0x2dc>)
 8000c2a:	1d3c      	adds	r4, r7, #4
 8000c2c:	461d      	mov	r5, r3
 8000c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  shareHandle = osThreadCreate(osThread(share), NULL);
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f00a fd25 	bl	800b68e <osThreadCreate>
 8000c44:	4603      	mov	r3, r0
 8000c46:	4a1d      	ldr	r2, [pc, #116]	; (8000cbc <main+0x2e0>)
 8000c48:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c4a:	f00a fd19 	bl	800b680 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <main+0x272>
 8000c50:	20000044 	.word	0x20000044
 8000c54:	2000002e 	.word	0x2000002e
 8000c58:	200046fc 	.word	0x200046fc
 8000c5c:	20000030 	.word	0x20000030
 8000c60:	20000036 	.word	0x20000036
 8000c64:	20000038 	.word	0x20000038
 8000c68:	2000002c 	.word	0x2000002c
 8000c6c:	20004494 	.word	0x20004494
 8000c70:	20004314 	.word	0x20004314
 8000c74:	20004534 	.word	0x20004534
 8000c78:	0800e970 	.word	0x0800e970
 8000c7c:	2000485c 	.word	0x2000485c
 8000c80:	200046f8 	.word	0x200046f8
 8000c84:	200048e8 	.word	0x200048e8
 8000c88:	0800e980 	.word	0x0800e980
 8000c8c:	200042c0 	.word	0x200042c0
 8000c90:	0800e99c 	.word	0x0800e99c
 8000c94:	200048e0 	.word	0x200048e0
 8000c98:	0800e9b8 	.word	0x0800e9b8
 8000c9c:	20004858 	.word	0x20004858
 8000ca0:	0800e9d4 	.word	0x0800e9d4
 8000ca4:	20004670 	.word	0x20004670
 8000ca8:	0800e9f0 	.word	0x0800e9f0
 8000cac:	200042bc 	.word	0x200042bc
 8000cb0:	0800ea0c 	.word	0x0800ea0c
 8000cb4:	20004310 	.word	0x20004310
 8000cb8:	0800ea28 	.word	0x0800ea28
 8000cbc:	200048e4 	.word	0x200048e4

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	; 0x50
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	2230      	movs	r2, #48	; 0x30
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f00d f996 	bl	800e000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ce4:	f006 ff62 	bl	8007bac <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <SystemClock_Config+0xdc>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a2b      	ldr	r2, [pc, #172]	; (8000d9c <SystemClock_Config+0xdc>)
 8000cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <SystemClock_Config+0xdc>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <SystemClock_Config+0xe0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a26      	ldr	r2, [pc, #152]	; (8000da0 <SystemClock_Config+0xe0>)
 8000d06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <SystemClock_Config+0xe0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000d18:	2309      	movs	r3, #9
 8000d1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d22:	2301      	movs	r3, #1
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d26:	2302      	movs	r3, #2
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d30:	2319      	movs	r3, #25
 8000d32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000d34:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000d38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000d3e:	2309      	movs	r3, #9
 8000d40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d42:	f107 0320 	add.w	r3, r7, #32
 8000d46:	4618      	mov	r0, r3
 8000d48:	f006 ff90 	bl	8007c6c <HAL_RCC_OscConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d52:	f001 fd0d 	bl	8002770 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d56:	f006 ff39 	bl	8007bcc <HAL_PWREx_EnableOverDrive>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000d60:	f001 fd06 	bl	8002770 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d64:	230f      	movs	r3, #15
 8000d66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	2106      	movs	r1, #6
 8000d82:	4618      	mov	r0, r3
 8000d84:	f007 fa16 	bl	80081b4 <HAL_RCC_ClockConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d8e:	f001 fcef 	bl	8002770 <Error_Handler>
  }
}
 8000d92:	bf00      	nop
 8000d94:	3750      	adds	r7, #80	; 0x50
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40007000 	.word	0x40007000

08000da4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0a2      	sub	sp, #136	; 0x88
 8000da8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2284      	movs	r2, #132	; 0x84
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f00d f925 	bl	800e000 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_CLK48;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <PeriphCommonClock_Config+0x54>)
 8000db8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000dba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000dbe:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000dc0:	2305      	movs	r3, #5
 8000dc2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000dd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	4618      	mov	r0, r3
 8000de2:	f007 fbef 	bl	80085c4 <HAL_RCCEx_PeriphCLKConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 8000dec:	f001 fcc0 	bl	8002770 <Error_Handler>
  }
}
 8000df0:	bf00      	nop
 8000df2:	3788      	adds	r7, #136	; 0x88
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	00200008 	.word	0x00200008

08000dfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e02:	463b      	mov	r3, r7
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e0e:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e10:	4a21      	ldr	r2, [pc, #132]	; (8000e98 <MX_ADC1_Init+0x9c>)
 8000e12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e3e:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <MX_ADC1_Init+0xa0>)
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e5e:	f003 feb7 	bl	8004bd0 <HAL_ADC_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e68:	f001 fc82 	bl	8002770 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e7e:	f004 f851 	bl	8004f24 <HAL_ADC_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e88:	f001 fc72 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200045e0 	.word	0x200045e0
 8000e98:	40012000 	.word	0x40012000
 8000e9c:	0f000001 	.word	0x0f000001

08000ea0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <MX_ADC3_Init+0x98>)
 8000eb4:	4a21      	ldr	r2, [pc, #132]	; (8000f3c <MX_ADC3_Init+0x9c>)
 8000eb6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <MX_ADC3_Init+0x98>)
 8000eba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ebe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_ADC3_Init+0x98>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_ADC3_Init+0x98>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_ADC3_Init+0x98>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_ADC3_Init+0x98>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_ADC3_Init+0x98>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_ADC3_Init+0x98>)
 8000ee2:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <MX_ADC3_Init+0xa0>)
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_ADC3_Init+0x98>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_ADC3_Init+0x98>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_ADC3_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_ADC3_Init+0x98>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <MX_ADC3_Init+0x98>)
 8000f02:	f003 fe65 	bl	8004bd0 <HAL_ADC_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000f0c:	f001 fc30 	bl	8002770 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f10:	2306      	movs	r3, #6
 8000f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f14:	2301      	movs	r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_ADC3_Init+0x98>)
 8000f22:	f003 ffff 	bl	8004f24 <HAL_ADC_ConfigChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000f2c:	f001 fc20 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20004628 	.word	0x20004628
 8000f3c:	40012200 	.word	0x40012200
 8000f40:	0f000001 	.word	0x0f000001

08000f44 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_DAC_Init+0x4c>)
 8000f54:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <MX_DAC_Init+0x50>)
 8000f56:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f58:	480d      	ldr	r0, [pc, #52]	; (8000f90 <MX_DAC_Init+0x4c>)
 8000f5a:	f004 fb15 	bl	8005588 <HAL_DAC_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f64:	f001 fc04 	bl	8002770 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f70:	463b      	mov	r3, r7
 8000f72:	2200      	movs	r2, #0
 8000f74:	4619      	mov	r1, r3
 8000f76:	4806      	ldr	r0, [pc, #24]	; (8000f90 <MX_DAC_Init+0x4c>)
 8000f78:	f004 fb8c 	bl	8005694 <HAL_DAC_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f82:	f001 fbf5 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20004704 	.word	0x20004704
 8000f94:	40007400 	.word	0x40007400

08000f98 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <MX_DMA2D_Init+0x5c>)
 8000f9e:	4a16      	ldr	r2, [pc, #88]	; (8000ff8 <MX_DMA2D_Init+0x60>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_DMA2D_Init+0x5c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <MX_DMA2D_Init+0x5c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_DMA2D_Init+0x5c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_DMA2D_Init+0x5c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_DMA2D_Init+0x5c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_DMA2D_Init+0x5c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_DMA2D_Init+0x5c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <MX_DMA2D_Init+0x5c>)
 8000fce:	f004 fd9b 	bl	8005b08 <HAL_DMA2D_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000fd8:	f001 fbca 	bl	8002770 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000fdc:	2101      	movs	r1, #1
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_DMA2D_Init+0x5c>)
 8000fe0:	f005 f800 	bl	8005fe4 <HAL_DMA2D_ConfigLayer>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000fea:	f001 fbc1 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20004818 	.word	0x20004818
 8000ff8:	4002b000 	.word	0x4002b000

08000ffc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <MX_I2C1_Init+0x74>)
 8001002:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <MX_I2C1_Init+0x78>)
 8001004:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_I2C1_Init+0x74>)
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <MX_I2C1_Init+0x7c>)
 800100a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <MX_I2C1_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_I2C1_Init+0x74>)
 8001014:	2201      	movs	r2, #1
 8001016:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_I2C1_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_I2C1_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MX_I2C1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_I2C1_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_I2C1_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001036:	480e      	ldr	r0, [pc, #56]	; (8001070 <MX_I2C1_Init+0x74>)
 8001038:	f005 fc06 	bl	8006848 <HAL_I2C_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001042:	f001 fb95 	bl	8002770 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001046:	2100      	movs	r1, #0
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <MX_I2C1_Init+0x74>)
 800104a:	f006 f99f 	bl	800738c <HAL_I2CEx_ConfigAnalogFilter>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001054:	f001 fb8c 	bl	8002770 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001058:	2100      	movs	r1, #0
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_I2C1_Init+0x74>)
 800105c:	f006 f9e1 	bl	8007422 <HAL_I2CEx_ConfigDigitalFilter>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001066:	f001 fb83 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20004448 	.word	0x20004448
 8001074:	40005400 	.word	0x40005400
 8001078:	00c0eaff 	.word	0x00c0eaff

0800107c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <MX_I2C3_Init+0x74>)
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <MX_I2C3_Init+0x78>)
 8001084:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_I2C3_Init+0x74>)
 8001088:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <MX_I2C3_Init+0x7c>)
 800108a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_I2C3_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <MX_I2C3_Init+0x74>)
 8001094:	2201      	movs	r2, #1
 8001096:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_I2C3_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_I2C3_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_I2C3_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_I2C3_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_I2C3_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <MX_I2C3_Init+0x74>)
 80010b8:	f005 fbc6 	bl	8006848 <HAL_I2C_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80010c2:	f001 fb55 	bl	8002770 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <MX_I2C3_Init+0x74>)
 80010ca:	f006 f95f 	bl	800738c <HAL_I2CEx_ConfigAnalogFilter>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80010d4:	f001 fb4c 	bl	8002770 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80010d8:	2100      	movs	r1, #0
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_I2C3_Init+0x74>)
 80010dc:	f006 f9a1 	bl	8007422 <HAL_I2CEx_ConfigDigitalFilter>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80010e6:	f001 fb43 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200042c4 	.word	0x200042c4
 80010f4:	40005c00 	.word	0x40005c00
 80010f8:	00c0eaff 	.word	0x00c0eaff

080010fc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08e      	sub	sp, #56	; 0x38
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2234      	movs	r2, #52	; 0x34
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f00c ff79 	bl	800e000 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800110e:	4b3a      	ldr	r3, [pc, #232]	; (80011f8 <MX_LTDC_Init+0xfc>)
 8001110:	4a3a      	ldr	r2, [pc, #232]	; (80011fc <MX_LTDC_Init+0x100>)
 8001112:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001114:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <MX_LTDC_Init+0xfc>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800111a:	4b37      	ldr	r3, [pc, #220]	; (80011f8 <MX_LTDC_Init+0xfc>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001120:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <MX_LTDC_Init+0xfc>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001126:	4b34      	ldr	r3, [pc, #208]	; (80011f8 <MX_LTDC_Init+0xfc>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800112c:	4b32      	ldr	r3, [pc, #200]	; (80011f8 <MX_LTDC_Init+0xfc>)
 800112e:	2228      	movs	r2, #40	; 0x28
 8001130:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001132:	4b31      	ldr	r3, [pc, #196]	; (80011f8 <MX_LTDC_Init+0xfc>)
 8001134:	2209      	movs	r2, #9
 8001136:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001138:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <MX_LTDC_Init+0xfc>)
 800113a:	2235      	movs	r2, #53	; 0x35
 800113c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800113e:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <MX_LTDC_Init+0xfc>)
 8001140:	220b      	movs	r2, #11
 8001142:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001144:	4b2c      	ldr	r3, [pc, #176]	; (80011f8 <MX_LTDC_Init+0xfc>)
 8001146:	f240 2215 	movw	r2, #533	; 0x215
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800114c:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <MX_LTDC_Init+0xfc>)
 800114e:	f240 121b 	movw	r2, #283	; 0x11b
 8001152:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001154:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <MX_LTDC_Init+0xfc>)
 8001156:	f240 2235 	movw	r2, #565	; 0x235
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <MX_LTDC_Init+0xfc>)
 800115e:	f240 121d 	movw	r2, #285	; 0x11d
 8001162:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <MX_LTDC_Init+0xfc>)
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800116c:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <MX_LTDC_Init+0xfc>)
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MX_LTDC_Init+0xfc>)
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800117c:	481e      	ldr	r0, [pc, #120]	; (80011f8 <MX_LTDC_Init+0xfc>)
 800117e:	f006 f99d 	bl	80074bc <HAL_LTDC_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001188:	f001 faf2 	bl	8002770 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001190:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001194:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800119a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800119e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80011a0:	2302      	movs	r3, #2
 80011a2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80011a4:	23ff      	movs	r3, #255	; 0xff
 80011a6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80011ac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011b0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80011b2:	2307      	movs	r3, #7
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80011b6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80011bc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80011c2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2200      	movs	r2, #0
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_LTDC_Init+0xfc>)
 80011e2:	f006 fafd 	bl	80077e0 <HAL_LTDC_ConfigLayer>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80011ec:	f001 fac0 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3738      	adds	r7, #56	; 0x38
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20004538 	.word	0x20004538
 80011fc:	40016800 	.word	0x40016800

08001200 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_RNG_Init+0x20>)
 8001206:	4a07      	ldr	r2, [pc, #28]	; (8001224 <MX_RNG_Init+0x24>)
 8001208:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_RNG_Init+0x20>)
 800120c:	f007 fdca 	bl	8008da4 <HAL_RNG_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001216:	f001 faab 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20004784 	.word	0x20004784
 8001224:	50060800 	.word	0x50060800

08001228 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b092      	sub	sp, #72	; 0x48
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800122e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
 800123e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001244:	463b      	mov	r3, r7
 8001246:	222c      	movs	r2, #44	; 0x2c
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f00c fed8 	bl	800e000 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001250:	4b46      	ldr	r3, [pc, #280]	; (800136c <MX_RTC_Init+0x144>)
 8001252:	4a47      	ldr	r2, [pc, #284]	; (8001370 <MX_RTC_Init+0x148>)
 8001254:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001256:	4b45      	ldr	r3, [pc, #276]	; (800136c <MX_RTC_Init+0x144>)
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800125c:	4b43      	ldr	r3, [pc, #268]	; (800136c <MX_RTC_Init+0x144>)
 800125e:	227f      	movs	r2, #127	; 0x7f
 8001260:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001262:	4b42      	ldr	r3, [pc, #264]	; (800136c <MX_RTC_Init+0x144>)
 8001264:	22ff      	movs	r2, #255	; 0xff
 8001266:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001268:	4b40      	ldr	r3, [pc, #256]	; (800136c <MX_RTC_Init+0x144>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800126e:	4b3f      	ldr	r3, [pc, #252]	; (800136c <MX_RTC_Init+0x144>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001274:	4b3d      	ldr	r3, [pc, #244]	; (800136c <MX_RTC_Init+0x144>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800127a:	483c      	ldr	r0, [pc, #240]	; (800136c <MX_RTC_Init+0x144>)
 800127c:	f007 fe12 	bl	8008ea4 <HAL_RTC_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001286:	f001 fa73 	bl	8002770 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800128a:	2300      	movs	r3, #0
 800128c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001290:	2300      	movs	r3, #0
 8001292:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001296:	2300      	movs	r3, #0
 8001298:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800129c:	2300      	movs	r3, #0
 800129e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a8:	2201      	movs	r2, #1
 80012aa:	4619      	mov	r1, r3
 80012ac:	482f      	ldr	r0, [pc, #188]	; (800136c <MX_RTC_Init+0x144>)
 80012ae:	f007 fe8b 	bl	8008fc8 <HAL_RTC_SetTime>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80012b8:	f001 fa5a 	bl	8002770 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80012bc:	2301      	movs	r3, #1
 80012be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80012c2:	2301      	movs	r3, #1
 80012c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d8:	2201      	movs	r2, #1
 80012da:	4619      	mov	r1, r3
 80012dc:	4823      	ldr	r0, [pc, #140]	; (800136c <MX_RTC_Init+0x144>)
 80012de:	f007 ff31 	bl	8009144 <HAL_RTC_SetDate>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80012e8:	f001 fa42 	bl	8002770 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001310:	2301      	movs	r3, #1
 8001312:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	2201      	movs	r2, #1
 8001320:	4619      	mov	r1, r3
 8001322:	4812      	ldr	r0, [pc, #72]	; (800136c <MX_RTC_Init+0x144>)
 8001324:	f007 ffb6 	bl	8009294 <HAL_RTC_SetAlarm>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800132e:	f001 fa1f 	bl	8002770 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	2201      	movs	r2, #1
 800133c:	4619      	mov	r1, r3
 800133e:	480b      	ldr	r0, [pc, #44]	; (800136c <MX_RTC_Init+0x144>)
 8001340:	f007 ffa8 	bl	8009294 <HAL_RTC_SetAlarm>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800134a:	f001 fa11 	bl	8002770 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800134e:	2202      	movs	r2, #2
 8001350:	2100      	movs	r1, #0
 8001352:	4806      	ldr	r0, [pc, #24]	; (800136c <MX_RTC_Init+0x144>)
 8001354:	f008 f928 	bl	80095a8 <HAL_RTCEx_SetTimeStamp>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800135e:	f001 fa07 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	3748      	adds	r7, #72	; 0x48
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20004718 	.word	0x20004718
 8001370:	40002800 	.word	0x40002800

08001374 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <MX_SPI2_Init+0x74>)
 800137a:	4a1c      	ldr	r2, [pc, #112]	; (80013ec <MX_SPI2_Init+0x78>)
 800137c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_SPI2_Init+0x74>)
 8001380:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001384:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <MX_SPI2_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_SPI2_Init+0x74>)
 800138e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001392:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_SPI2_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_SPI2_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_SPI2_Init+0x74>)
 80013a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_SPI2_Init+0x74>)
 80013aa:	2220      	movs	r2, #32
 80013ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_SPI2_Init+0x74>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_SPI2_Init+0x74>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_SPI2_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_SPI2_Init+0x74>)
 80013c2:	2207      	movs	r2, #7
 80013c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_SPI2_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_SPI2_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_SPI2_Init+0x74>)
 80013d4:	f008 f9cf 	bl	8009776 <HAL_SPI_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80013de:	f001 f9c7 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20004314 	.word	0x20004314
 80013ec:	40003800 	.word	0x40003800

080013f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <MX_TIM1_Init+0xa0>)
 8001410:	4a20      	ldr	r2, [pc, #128]	; (8001494 <MX_TIM1_Init+0xa4>)
 8001412:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <MX_TIM1_Init+0xa0>)
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <MX_TIM1_Init+0xa0>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <MX_TIM1_Init+0xa0>)
 8001422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001426:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MX_TIM1_Init+0xa0>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <MX_TIM1_Init+0xa0>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <MX_TIM1_Init+0xa0>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800143a:	4815      	ldr	r0, [pc, #84]	; (8001490 <MX_TIM1_Init+0xa0>)
 800143c:	f008 fef4 	bl	800a228 <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001446:	f001 f993 	bl	8002770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	4619      	mov	r1, r3
 8001456:	480e      	ldr	r0, [pc, #56]	; (8001490 <MX_TIM1_Init+0xa0>)
 8001458:	f009 f8d6 	bl	800a608 <HAL_TIM_ConfigClockSource>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001462:	f001 f985 	bl	8002770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	4619      	mov	r1, r3
 8001476:	4806      	ldr	r0, [pc, #24]	; (8001490 <MX_TIM1_Init+0xa0>)
 8001478:	f009 faf2 	bl	800aa60 <HAL_TIMEx_MasterConfigSynchronization>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001482:	f001 f975 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20004738 	.word	0x20004738
 8001494:	40010000 	.word	0x40010000

08001498 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <MX_TIM2_Init+0x98>)
 80014b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <MX_TIM2_Init+0x98>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_TIM2_Init+0x98>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <MX_TIM2_Init+0x98>)
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295
 80014d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MX_TIM2_Init+0x98>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_TIM2_Init+0x98>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014de:	4814      	ldr	r0, [pc, #80]	; (8001530 <MX_TIM2_Init+0x98>)
 80014e0:	f008 fea2 	bl	800a228 <HAL_TIM_Base_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014ea:	f001 f941 	bl	8002770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	4619      	mov	r1, r3
 80014fa:	480d      	ldr	r0, [pc, #52]	; (8001530 <MX_TIM2_Init+0x98>)
 80014fc:	f009 f884 	bl	800a608 <HAL_TIM_ConfigClockSource>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001506:	f001 f933 	bl	8002770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	4619      	mov	r1, r3
 8001516:	4806      	ldr	r0, [pc, #24]	; (8001530 <MX_TIM2_Init+0x98>)
 8001518:	f009 faa2 	bl	800aa60 <HAL_TIMEx_MasterConfigSynchronization>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001522:	f001 f925 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20004860 	.word	0x20004860

08001534 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <MX_TIM3_Init+0x94>)
 8001554:	4a1d      	ldr	r2, [pc, #116]	; (80015cc <MX_TIM3_Init+0x98>)
 8001556:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_TIM3_Init+0x94>)
 800155a:	2200      	movs	r2, #0
 800155c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <MX_TIM3_Init+0x94>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_TIM3_Init+0x94>)
 8001566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800156a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <MX_TIM3_Init+0x94>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MX_TIM3_Init+0x94>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001578:	4813      	ldr	r0, [pc, #76]	; (80015c8 <MX_TIM3_Init+0x94>)
 800157a:	f008 fe55 	bl	800a228 <HAL_TIM_Base_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001584:	f001 f8f4 	bl	8002770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	4619      	mov	r1, r3
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <MX_TIM3_Init+0x94>)
 8001596:	f009 f837 	bl	800a608 <HAL_TIM_ConfigClockSource>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80015a0:	f001 f8e6 	bl	8002770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_TIM3_Init+0x94>)
 80015b2:	f009 fa55 	bl	800aa60 <HAL_TIMEx_MasterConfigSynchronization>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80015bc:	f001 f8d8 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200044e8 	.word	0x200044e8
 80015cc:	40000400 	.word	0x40000400

080015d0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d6:	f107 0310 	add.w	r3, r7, #16
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_TIM5_Init+0x94>)
 80015f0:	4a1d      	ldr	r2, [pc, #116]	; (8001668 <MX_TIM5_Init+0x98>)
 80015f2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <MX_TIM5_Init+0x94>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_TIM5_Init+0x94>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MX_TIM5_Init+0x94>)
 8001602:	f04f 32ff 	mov.w	r2, #4294967295
 8001606:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <MX_TIM5_Init+0x94>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <MX_TIM5_Init+0x94>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001614:	4813      	ldr	r0, [pc, #76]	; (8001664 <MX_TIM5_Init+0x94>)
 8001616:	f008 fe07 	bl	800a228 <HAL_TIM_Base_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001620:	f001 f8a6 	bl	8002770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001628:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	4619      	mov	r1, r3
 8001630:	480c      	ldr	r0, [pc, #48]	; (8001664 <MX_TIM5_Init+0x94>)
 8001632:	f008 ffe9 	bl	800a608 <HAL_TIM_ConfigClockSource>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800163c:	f001 f898 	bl	8002770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_TIM5_Init+0x94>)
 800164e:	f009 fa07 	bl	800aa60 <HAL_TIMEx_MasterConfigSynchronization>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001658:	f001 f88a 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2000449c 	.word	0x2000449c
 8001668:	40000c00 	.word	0x40000c00

0800166c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001672:	f107 0310 	add.w	r3, r7, #16
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <MX_TIM8_Init+0xa0>)
 800168c:	4a20      	ldr	r2, [pc, #128]	; (8001710 <MX_TIM8_Init+0xa4>)
 800168e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001690:	4b1e      	ldr	r3, [pc, #120]	; (800170c <MX_TIM8_Init+0xa0>)
 8001692:	2200      	movs	r2, #0
 8001694:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001696:	4b1d      	ldr	r3, [pc, #116]	; (800170c <MX_TIM8_Init+0xa0>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <MX_TIM8_Init+0xa0>)
 800169e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <MX_TIM8_Init+0xa0>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <MX_TIM8_Init+0xa0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <MX_TIM8_Init+0xa0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016b6:	4815      	ldr	r0, [pc, #84]	; (800170c <MX_TIM8_Init+0xa0>)
 80016b8:	f008 fdb6 	bl	800a228 <HAL_TIM_Base_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80016c2:	f001 f855 	bl	8002770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	4619      	mov	r1, r3
 80016d2:	480e      	ldr	r0, [pc, #56]	; (800170c <MX_TIM8_Init+0xa0>)
 80016d4:	f008 ff98 	bl	800a608 <HAL_TIM_ConfigClockSource>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80016de:	f001 f847 	bl	8002770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	4619      	mov	r1, r3
 80016f2:	4806      	ldr	r0, [pc, #24]	; (800170c <MX_TIM8_Init+0xa0>)
 80016f4:	f009 f9b4 	bl	800aa60 <HAL_TIMEx_MasterConfigSynchronization>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80016fe:	f001 f837 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	3720      	adds	r7, #32
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200043fc 	.word	0x200043fc
 8001710:	40010400 	.word	0x40010400

08001714 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_UART7_Init+0x58>)
 800171a:	4a15      	ldr	r2, [pc, #84]	; (8001770 <MX_UART7_Init+0x5c>)
 800171c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <MX_UART7_Init+0x58>)
 8001720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001724:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_UART7_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_UART7_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_UART7_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_UART7_Init+0x58>)
 800173a:	220c      	movs	r2, #12
 800173c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <MX_UART7_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_UART7_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <MX_UART7_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_UART7_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001756:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_UART7_Init+0x58>)
 8001758:	f009 fa2e 	bl	800abb8 <HAL_UART_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001762:	f001 f805 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20004378 	.word	0x20004378
 8001770:	40007800 	.word	0x40007800

08001774 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <MX_USART1_UART_Init+0x68>)
 800177a:	4a19      	ldr	r2, [pc, #100]	; (80017e0 <MX_USART1_UART_Init+0x6c>)
 800177c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <MX_USART1_UART_Init+0x68>)
 8001780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001784:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <MX_USART1_UART_Init+0x68>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <MX_USART1_UART_Init+0x68>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_USART1_UART_Init+0x68>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <MX_USART1_UART_Init+0x68>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_USART1_UART_Init+0x68>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <MX_USART1_UART_Init+0x68>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_USART1_UART_Init+0x68>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <MX_USART1_UART_Init+0x68>)
 80017b2:	2230      	movs	r2, #48	; 0x30
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_USART1_UART_Init+0x68>)
 80017b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <MX_USART1_UART_Init+0x68>)
 80017c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_USART1_UART_Init+0x68>)
 80017c8:	f009 f9f6 	bl	800abb8 <HAL_UART_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 80017d2:	f000 ffcd 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20004674 	.word	0x20004674
 80017e0:	40011000 	.word	0x40011000

080017e4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_USART6_UART_Init+0x58>)
 80017ea:	4a15      	ldr	r2, [pc, #84]	; (8001840 <MX_USART6_UART_Init+0x5c>)
 80017ec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <MX_USART6_UART_Init+0x58>)
 80017f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_USART6_UART_Init+0x58>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_USART6_UART_Init+0x58>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_USART6_UART_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_USART6_UART_Init+0x58>)
 800180a:	220c      	movs	r2, #12
 800180c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <MX_USART6_UART_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_USART6_UART_Init+0x58>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <MX_USART6_UART_Init+0x58>)
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_USART6_UART_Init+0x58>)
 8001822:	2200      	movs	r2, #0
 8001824:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_USART6_UART_Init+0x58>)
 8001828:	f009 f9c6 	bl	800abb8 <HAL_UART_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001832:	f000 ff9d 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20004794 	.word	0x20004794
 8001840:	40011400 	.word	0x40011400

08001844 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
 8001858:	615a      	str	r2, [r3, #20]
 800185a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800185c:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <MX_FMC_Init+0x98>)
 800185e:	4a20      	ldr	r2, [pc, #128]	; (80018e0 <MX_FMC_Init+0x9c>)
 8001860:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <MX_FMC_Init+0x98>)
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <MX_FMC_Init+0x98>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <MX_FMC_Init+0x98>)
 8001870:	2204      	movs	r2, #4
 8001872:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <MX_FMC_Init+0x98>)
 8001876:	2210      	movs	r2, #16
 8001878:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <MX_FMC_Init+0x98>)
 800187c:	2240      	movs	r2, #64	; 0x40
 800187e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <MX_FMC_Init+0x98>)
 8001882:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001886:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <MX_FMC_Init+0x98>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <MX_FMC_Init+0x98>)
 8001890:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001894:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_FMC_Init+0x98>)
 8001898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800189c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <MX_FMC_Init+0x98>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80018a4:	2302      	movs	r3, #2
 80018a6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80018a8:	2307      	movs	r3, #7
 80018aa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80018ac:	2304      	movs	r3, #4
 80018ae:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80018b0:	2307      	movs	r3, #7
 80018b2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80018b4:	2303      	movs	r3, #3
 80018b6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80018bc:	2302      	movs	r3, #2
 80018be:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_FMC_Init+0x98>)
 80018c6:	f007 fec5 	bl	8009654 <HAL_SDRAM_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80018d0:	f000 ff4e 	bl	8002770 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80018d4:	bf00      	nop
 80018d6:	3720      	adds	r7, #32
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200048ac 	.word	0x200048ac
 80018e0:	a0000140 	.word	0xa0000140

080018e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b090      	sub	sp, #64	; 0x40
 80018e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018fa:	4baf      	ldr	r3, [pc, #700]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4aae      	ldr	r2, [pc, #696]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 8001900:	f043 0310 	orr.w	r3, r3, #16
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4bac      	ldr	r3, [pc, #688]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0310 	and.w	r3, r3, #16
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001910:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001912:	4ba9      	ldr	r3, [pc, #676]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4aa8      	ldr	r2, [pc, #672]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 8001918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4ba6      	ldr	r3, [pc, #664]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	4ba3      	ldr	r3, [pc, #652]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4aa2      	ldr	r2, [pc, #648]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4ba0      	ldr	r3, [pc, #640]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	623b      	str	r3, [r7, #32]
 8001940:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001942:	4b9d      	ldr	r3, [pc, #628]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a9c      	ldr	r2, [pc, #624]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b9a      	ldr	r3, [pc, #616]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	4b97      	ldr	r3, [pc, #604]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a96      	ldr	r2, [pc, #600]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b94      	ldr	r3, [pc, #592]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	4b91      	ldr	r3, [pc, #580]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a90      	ldr	r2, [pc, #576]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b8e      	ldr	r3, [pc, #568]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800198a:	4b8b      	ldr	r3, [pc, #556]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a8a      	ldr	r2, [pc, #552]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 8001990:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b88      	ldr	r3, [pc, #544]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80019a2:	4b85      	ldr	r3, [pc, #532]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a84      	ldr	r2, [pc, #528]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 80019a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b82      	ldr	r3, [pc, #520]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80019ba:	4b7f      	ldr	r3, [pc, #508]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a7e      	ldr	r2, [pc, #504]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 80019c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b7c      	ldr	r3, [pc, #496]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019d2:	4b79      	ldr	r3, [pc, #484]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a78      	ldr	r2, [pc, #480]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 80019d8:	f043 0320 	orr.w	r3, r3, #32
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b76      	ldr	r3, [pc, #472]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ea:	4b73      	ldr	r3, [pc, #460]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a72      	ldr	r2, [pc, #456]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 80019f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b70      	ldr	r3, [pc, #448]	; (8001bb8 <MX_GPIO_Init+0x2d4>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2160      	movs	r1, #96	; 0x60
 8001a06:	486d      	ldr	r0, [pc, #436]	; (8001bbc <MX_GPIO_Init+0x2d8>)
 8001a08:	f004 fed2 	bl	80067b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2120      	movs	r1, #32
 8001a10:	486b      	ldr	r0, [pc, #428]	; (8001bc0 <MX_GPIO_Init+0x2dc>)
 8001a12:	f004 fecd 	bl	80067b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2108      	movs	r1, #8
 8001a1a:	4869      	ldr	r0, [pc, #420]	; (8001bc0 <MX_GPIO_Init+0x2dc>)
 8001a1c:	f004 fec8 	bl	80067b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	2108      	movs	r1, #8
 8001a24:	4867      	ldr	r0, [pc, #412]	; (8001bc4 <MX_GPIO_Init+0x2e0>)
 8001a26:	f004 fec3 	bl	80067b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a30:	4865      	ldr	r0, [pc, #404]	; (8001bc8 <MX_GPIO_Init+0x2e4>)
 8001a32:	f004 febd 	bl	80067b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001a36:	2200      	movs	r2, #0
 8001a38:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001a3c:	4863      	ldr	r0, [pc, #396]	; (8001bcc <MX_GPIO_Init+0x2e8>)
 8001a3e:	f004 feb7 	bl	80067b0 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	21c8      	movs	r1, #200	; 0xc8
 8001a46:	4862      	ldr	r0, [pc, #392]	; (8001bd0 <MX_GPIO_Init+0x2ec>)
 8001a48:	f004 feb2 	bl	80067b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a50:	2300      	movs	r3, #0
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4857      	ldr	r0, [pc, #348]	; (8001bbc <MX_GPIO_Init+0x2d8>)
 8001a60:	f004 fbee 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001a64:	2304      	movs	r3, #4
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a74:	2309      	movs	r3, #9
 8001a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	484f      	ldr	r0, [pc, #316]	; (8001bbc <MX_GPIO_Init+0x2d8>)
 8001a80:	f004 fbde 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001a84:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a96:	230b      	movs	r3, #11
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	484b      	ldr	r0, [pc, #300]	; (8001bd0 <MX_GPIO_Init+0x2ec>)
 8001aa2:	f004 fbcd 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001aa6:	f643 0323 	movw	r3, #14371	; 0x3823
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ab8:	230a      	movs	r3, #10
 8001aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4844      	ldr	r0, [pc, #272]	; (8001bd4 <MX_GPIO_Init+0x2f0>)
 8001ac4:	f004 fbbc 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4837      	ldr	r0, [pc, #220]	; (8001bc0 <MX_GPIO_Init+0x2dc>)
 8001ae4:	f004 fbac 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001ae8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af6:	2303      	movs	r3, #3
 8001af8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001afa:	230c      	movs	r3, #12
 8001afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b02:	4619      	mov	r1, r3
 8001b04:	4834      	ldr	r0, [pc, #208]	; (8001bd8 <MX_GPIO_Init+0x2f4>)
 8001b06:	f004 fb9b 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|GPIO_PIN_6;
 8001b0a:	f248 0340 	movw	r3, #32832	; 0x8040
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b10:	2300      	movs	r3, #0
 8001b12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	482f      	ldr	r0, [pc, #188]	; (8001bdc <MX_GPIO_Init+0x2f8>)
 8001b20:	f004 fb8e 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001b24:	2360      	movs	r3, #96	; 0x60
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4820      	ldr	r0, [pc, #128]	; (8001bbc <MX_GPIO_Init+0x2d8>)
 8001b3c:	f004 fb80 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001b40:	2340      	movs	r3, #64	; 0x40
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b50:	230a      	movs	r3, #10
 8001b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b58:	4619      	mov	r1, r3
 8001b5a:	481e      	ldr	r0, [pc, #120]	; (8001bd4 <MX_GPIO_Init+0x2f0>)
 8001b5c:	f004 fb70 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b66:	2300      	movs	r3, #0
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b72:	4619      	mov	r1, r3
 8001b74:	481a      	ldr	r0, [pc, #104]	; (8001be0 <MX_GPIO_Init+0x2fc>)
 8001b76:	f004 fb63 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001b7a:	2340      	movs	r3, #64	; 0x40
 8001b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b7e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <MX_GPIO_Init+0x2dc>)
 8001b90:	f004 fb56 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8001b94:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ba6:	230a      	movs	r3, #10
 8001ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001baa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bae:	4619      	mov	r1, r3
 8001bb0:	480a      	ldr	r0, [pc, #40]	; (8001bdc <MX_GPIO_Init+0x2f8>)
 8001bb2:	f004 fb45 	bl	8006240 <HAL_GPIO_Init>
 8001bb6:	e015      	b.n	8001be4 <MX_GPIO_Init+0x300>
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40020c00 	.word	0x40020c00
 8001bc4:	40022800 	.word	0x40022800
 8001bc8:	40022000 	.word	0x40022000
 8001bcc:	40021c00 	.word	0x40021c00
 8001bd0:	40021800 	.word	0x40021800
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40022400 	.word	0x40022400

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001be4:	23f0      	movs	r3, #240	; 0xf0
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001bf4:	230a      	movs	r3, #10
 8001bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	489c      	ldr	r0, [pc, #624]	; (8001e70 <MX_GPIO_Init+0x58c>)
 8001c00:	f004 fb1e 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001c16:	230a      	movs	r3, #10
 8001c18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4894      	ldr	r0, [pc, #592]	; (8001e74 <MX_GPIO_Init+0x590>)
 8001c22:	f004 fb0d 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001c26:	2328      	movs	r3, #40	; 0x28
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	488e      	ldr	r0, [pc, #568]	; (8001e78 <MX_GPIO_Init+0x594>)
 8001c3e:	f004 faff 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c54:	4619      	mov	r1, r3
 8001c56:	4889      	ldr	r0, [pc, #548]	; (8001e7c <MX_GPIO_Init+0x598>)
 8001c58:	f004 faf2 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c70:	4619      	mov	r1, r3
 8001c72:	4883      	ldr	r0, [pc, #524]	; (8001e80 <MX_GPIO_Init+0x59c>)
 8001c74:	f004 fae4 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001c78:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4879      	ldr	r0, [pc, #484]	; (8001e74 <MX_GPIO_Init+0x590>)
 8001c8e:	f004 fad7 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c92:	2310      	movs	r3, #16
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c96:	2300      	movs	r3, #0
 8001c98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4874      	ldr	r0, [pc, #464]	; (8001e78 <MX_GPIO_Init+0x594>)
 8001ca6:	f004 facb 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001caa:	2304      	movs	r3, #4
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001cba:	230c      	movs	r3, #12
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	486c      	ldr	r0, [pc, #432]	; (8001e78 <MX_GPIO_Init+0x594>)
 8001cc6:	f004 fabb 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8001cca:	f24a 0304 	movw	r3, #40964	; 0xa004
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4869      	ldr	r0, [pc, #420]	; (8001e84 <MX_GPIO_Init+0x5a0>)
 8001ce0:	f004 faae 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	485c      	ldr	r0, [pc, #368]	; (8001e70 <MX_GPIO_Init+0x58c>)
 8001cfe:	f004 fa9f 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001d02:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d18:	4619      	mov	r1, r3
 8001d1a:	485a      	ldr	r0, [pc, #360]	; (8001e84 <MX_GPIO_Init+0x5a0>)
 8001d1c:	f004 fa90 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d34:	4619      	mov	r1, r3
 8001d36:	4854      	ldr	r0, [pc, #336]	; (8001e88 <MX_GPIO_Init+0x5a4>)
 8001d38:	f004 fa82 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d42:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d50:	4619      	mov	r1, r3
 8001d52:	4847      	ldr	r0, [pc, #284]	; (8001e70 <MX_GPIO_Init+0x58c>)
 8001d54:	f004 fa74 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001d58:	2310      	movs	r3, #16
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d64:	2303      	movs	r3, #3
 8001d66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d68:	230a      	movs	r3, #10
 8001d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d70:	4619      	mov	r1, r3
 8001d72:	4844      	ldr	r0, [pc, #272]	; (8001e84 <MX_GPIO_Init+0x5a0>)
 8001d74:	f004 fa64 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001d78:	23c8      	movs	r3, #200	; 0xc8
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4839      	ldr	r0, [pc, #228]	; (8001e74 <MX_GPIO_Init+0x590>)
 8001d90:	f004 fa56 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001d94:	2305      	movs	r3, #5
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001da4:	230a      	movs	r3, #10
 8001da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dac:	4619      	mov	r1, r3
 8001dae:	4833      	ldr	r0, [pc, #204]	; (8001e7c <MX_GPIO_Init+0x598>)
 8001db0:	f004 fa46 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001db4:	2332      	movs	r3, #50	; 0x32
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dc4:	230b      	movs	r3, #11
 8001dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dcc:	4619      	mov	r1, r3
 8001dce:	482b      	ldr	r0, [pc, #172]	; (8001e7c <MX_GPIO_Init+0x598>)
 8001dd0:	f004 fa36 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dd4:	2304      	movs	r3, #4
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001de4:	2309      	movs	r3, #9
 8001de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dec:	4619      	mov	r1, r3
 8001dee:	4827      	ldr	r0, [pc, #156]	; (8001e8c <MX_GPIO_Init+0x5a8>)
 8001df0:	f004 fa26 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001df4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e02:	2303      	movs	r3, #3
 8001e04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e06:	2309      	movs	r3, #9
 8001e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4819      	ldr	r0, [pc, #100]	; (8001e78 <MX_GPIO_Init+0x594>)
 8001e12:	f004 fa15 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e16:	2386      	movs	r3, #134	; 0x86
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e26:	230b      	movs	r3, #11
 8001e28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4815      	ldr	r0, [pc, #84]	; (8001e88 <MX_GPIO_Init+0x5a4>)
 8001e32:	f004 fa05 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001e36:	2328      	movs	r3, #40	; 0x28
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e42:	2303      	movs	r3, #3
 8001e44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e46:	230a      	movs	r3, #10
 8001e48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480d      	ldr	r0, [pc, #52]	; (8001e88 <MX_GPIO_Init+0x5a4>)
 8001e52:	f004 f9f5 	bl	8006240 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2105      	movs	r1, #5
 8001e5a:	2017      	movs	r0, #23
 8001e5c:	f003 fb6a 	bl	8005534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e60:	2017      	movs	r0, #23
 8001e62:	f003 fb83 	bl	800556c <HAL_NVIC_EnableIRQ>

}
 8001e66:	bf00      	nop
 8001e68:	3740      	adds	r7, #64	; 0x40
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40022000 	.word	0x40022000
 8001e74:	40021800 	.word	0x40021800
 8001e78:	40020c00 	.word	0x40020c00
 8001e7c:	40020800 	.word	0x40020800
 8001e80:	40022800 	.word	0x40022800
 8001e84:	40021c00 	.word	0x40021c00
 8001e88:	40020000 	.word	0x40020000
 8001e8c:	40020400 	.word	0x40020400

08001e90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	80fb      	strh	r3, [r7, #6]
	int Message = 1;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	60fb      	str	r3, [r7, #12]
	xQueueSendFromISR(Queue_TirHandle, &Message, 0);
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0x28>)
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	f107 010c 	add.w	r1, r7, #12
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f009 ffb3 	bl	800be14 <xQueueGenericSendFromISR>
}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	2000485c 	.word	0x2000485c

08001ebc <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	int Message = 1;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
	xQueueSendFromISR(Queue_receiveHandle, &Message, 0);
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_SPI_TxRxCpltCallback+0x24>)
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	f107 010c 	add.w	r1, r7, #12
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f009 ff9e 	bl	800be14 <xQueueGenericSendFromISR>
}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	200048e8 	.word	0x200048e8

08001ee4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED15_GPIO_Port,LED15_Pin);
 8001eec:	2140      	movs	r1, #64	; 0x40
 8001eee:	4803      	ldr	r0, [pc, #12]	; (8001efc <StartDefaultTask+0x18>)
 8001ef0:	f004 fc77 	bl	80067e2 <HAL_GPIO_TogglePin>
	  osDelay(100);
 8001ef4:	2064      	movs	r0, #100	; 0x64
 8001ef6:	f009 fc16 	bl	800b726 <osDelay>
	  HAL_GPIO_TogglePin(LED15_GPIO_Port,LED15_Pin);
 8001efa:	e7f7      	b.n	8001eec <StartDefaultTask+0x8>
 8001efc:	40021000 	.word	0x40021000

08001f00 <Task_Viseur>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Viseur */
void Task_Viseur(void const * argument)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Viseur */
	uint32_t joystick_h, joystick_v;

	ADC_ChannelConfTypeDef sConfig = {0};
 8001f08:	f107 0308 	add.w	r3, r7, #8
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f16:	2301      	movs	r3, #1
 8001f18:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
	sConfig.Channel = ADC_CHANNEL_8;
 8001f1e:	2308      	movs	r3, #8
 8001f20:	60bb      	str	r3, [r7, #8]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001f22:	f107 0308 	add.w	r3, r7, #8
 8001f26:	4619      	mov	r1, r3
 8001f28:	483b      	ldr	r0, [pc, #236]	; (8002018 <Task_Viseur+0x118>)
 8001f2a:	f002 fffb 	bl	8004f24 <HAL_ADC_ConfigChannel>

  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start(&hadc3);
 8001f2e:	483a      	ldr	r0, [pc, #232]	; (8002018 <Task_Viseur+0x118>)
 8001f30:	f002 fe92 	bl	8004c58 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001f34:	bf00      	nop
 8001f36:	2164      	movs	r1, #100	; 0x64
 8001f38:	4837      	ldr	r0, [pc, #220]	; (8002018 <Task_Viseur+0x118>)
 8001f3a:	f002 ff5b 	bl	8004df4 <HAL_ADC_PollForConversion>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f8      	bne.n	8001f36 <Task_Viseur+0x36>
	joystick_v = HAL_ADC_GetValue(&hadc3);
 8001f44:	4834      	ldr	r0, [pc, #208]	; (8002018 <Task_Viseur+0x118>)
 8001f46:	f002 ffe0 	bl	8004f0a <HAL_ADC_GetValue>
 8001f4a:	6278      	str	r0, [r7, #36]	; 0x24

	HAL_ADC_Start(&hadc1);
 8001f4c:	4833      	ldr	r0, [pc, #204]	; (800201c <Task_Viseur+0x11c>)
 8001f4e:	f002 fe83 	bl	8004c58 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8001f52:	bf00      	nop
 8001f54:	2164      	movs	r1, #100	; 0x64
 8001f56:	4831      	ldr	r0, [pc, #196]	; (800201c <Task_Viseur+0x11c>)
 8001f58:	f002 ff4c 	bl	8004df4 <HAL_ADC_PollForConversion>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f8      	bne.n	8001f54 <Task_Viseur+0x54>
	joystick_h = HAL_ADC_GetValue(&hadc1);
 8001f62:	482e      	ldr	r0, [pc, #184]	; (800201c <Task_Viseur+0x11c>)
 8001f64:	f002 ffd1 	bl	8004f0a <HAL_ADC_GetValue>
 8001f68:	6238      	str	r0, [r7, #32]


	int x = (2050-(int)joystick_h)*50/4100;
 8001f6a:	6a3a      	ldr	r2, [r7, #32]
 8001f6c:	f640 0302 	movw	r3, #2050	; 0x802
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	4a2b      	ldr	r2, [pc, #172]	; (8002020 <Task_Viseur+0x120>)
 8001f74:	fb82 1203 	smull	r1, r2, r2, r3
 8001f78:	1152      	asrs	r2, r2, #5
 8001f7a:	17db      	asrs	r3, r3, #31
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	61fb      	str	r3, [r7, #28]
	int y = (2050-(int)joystick_v)*50/4100;
 8001f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f82:	f640 0302 	movw	r3, #2050	; 0x802
 8001f86:	1a9b      	subs	r3, r3, r2
 8001f88:	4a25      	ldr	r2, [pc, #148]	; (8002020 <Task_Viseur+0x120>)
 8001f8a:	fb82 1203 	smull	r1, r2, r2, r3
 8001f8e:	1152      	asrs	r2, r2, #5
 8001f90:	17db      	asrs	r3, r3, #31
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	61bb      	str	r3, [r7, #24]

	xSemaphoreTake( Mutex_EcranHandle, portMAX_DELAY );
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <Task_Viseur+0x124>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f00a f8be 	bl	800c120 <xQueueSemaphoreTake>
	extern uint16_t x_viseur1;
	if ((x+x_viseur1>=1+10) && (x+x_viseur1<=480-10)){x_viseur1= x_viseur1 + x;};
 8001fa4:	4b20      	ldr	r3, [pc, #128]	; (8002028 <Task_Viseur+0x128>)
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	4413      	add	r3, r2
 8001fae:	2b0a      	cmp	r3, #10
 8001fb0:	dd0f      	ble.n	8001fd2 <Task_Viseur+0xd2>
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <Task_Viseur+0x128>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 8001fc0:	dc07      	bgt.n	8001fd2 <Task_Viseur+0xd2>
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <Task_Viseur+0x128>)
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <Task_Viseur+0x128>)
 8001fd0:	801a      	strh	r2, [r3, #0]

	extern uint16_t y_viseur1;
	if ((y+y_viseur1>=1+10)&&(y+y_viseur1<=272-10)){y_viseur1 = y_viseur1 + y;};
 8001fd2:	4b16      	ldr	r3, [pc, #88]	; (800202c <Task_Viseur+0x12c>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	4413      	add	r3, r2
 8001fdc:	2b0a      	cmp	r3, #10
 8001fde:	dd0f      	ble.n	8002000 <Task_Viseur+0x100>
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <Task_Viseur+0x12c>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8001fee:	dc07      	bgt.n	8002000 <Task_Viseur+0x100>
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <Task_Viseur+0x12c>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <Task_Viseur+0x12c>)
 8001ffe:	801a      	strh	r2, [r3, #0]

	xSemaphoreGive( Mutex_EcranHandle );
 8002000:	4b08      	ldr	r3, [pc, #32]	; (8002024 <Task_Viseur+0x124>)
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	2300      	movs	r3, #0
 8002006:	2200      	movs	r2, #0
 8002008:	2100      	movs	r1, #0
 800200a:	f009 fdfd 	bl	800bc08 <xQueueGenericSend>

    osDelay(50);
 800200e:	2032      	movs	r0, #50	; 0x32
 8002010:	f009 fb89 	bl	800b726 <osDelay>
  {
 8002014:	e78b      	b.n	8001f2e <Task_Viseur+0x2e>
 8002016:	bf00      	nop
 8002018:	20004628 	.word	0x20004628
 800201c:	200045e0 	.word	0x200045e0
 8002020:	63e7063f 	.word	0x63e7063f
 8002024:	20004534 	.word	0x20004534
 8002028:	2000002e 	.word	0x2000002e
 800202c:	20000030 	.word	0x20000030

08002030 <Task_Tir>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Tir */
void Task_Tir(void const * argument)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  {
	extern uint16_t x_viseur1;
	extern uint16_t y_viseur1;
	extern uint16_t x_ennemi;
	extern uint16_t y_ennemi;
	int Message = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
	xQueueReceive(Queue_TirHandle, &Message, 0);
 800203c:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <Task_Tir+0xc4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f107 0110 	add.w	r1, r7, #16
 8002044:	2200      	movs	r2, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f009 ff84 	bl	800bf54 <xQueueReceive>
	if (Message == 1){
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d14b      	bne.n	80020ea <Task_Tir+0xba>

		HAL_GPIO_TogglePin(LED11_GPIO_Port,LED11_Pin);
 8002052:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002056:	4828      	ldr	r0, [pc, #160]	; (80020f8 <Task_Tir+0xc8>)
 8002058:	f004 fbc3 	bl	80067e2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED12_GPIO_Port,LED12_Pin);
 800205c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002060:	4825      	ldr	r0, [pc, #148]	; (80020f8 <Task_Tir+0xc8>)
 8002062:	f004 fbbe 	bl	80067e2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED13_GPIO_Port,LED13_Pin);
 8002066:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800206a:	4823      	ldr	r0, [pc, #140]	; (80020f8 <Task_Tir+0xc8>)
 800206c:	f004 fbb9 	bl	80067e2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED14_GPIO_Port,LED14_Pin);
 8002070:	2120      	movs	r1, #32
 8002072:	4822      	ldr	r0, [pc, #136]	; (80020fc <Task_Tir+0xcc>)
 8002074:	f004 fbb5 	bl	80067e2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED14_GPIO_Port,LED15_Pin);
 8002078:	2140      	movs	r1, #64	; 0x40
 800207a:	4820      	ldr	r0, [pc, #128]	; (80020fc <Task_Tir+0xcc>)
 800207c:	f004 fbb1 	bl	80067e2 <HAL_GPIO_TogglePin>
		osDelay(100);
 8002080:	2064      	movs	r0, #100	; 0x64
 8002082:	f009 fb50 	bl	800b726 <osDelay>
		HAL_GPIO_TogglePin(LED11_GPIO_Port,LED11_Pin);
 8002086:	f44f 7100 	mov.w	r1, #512	; 0x200
 800208a:	481b      	ldr	r0, [pc, #108]	; (80020f8 <Task_Tir+0xc8>)
 800208c:	f004 fba9 	bl	80067e2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED12_GPIO_Port,LED12_Pin);
 8002090:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002094:	4818      	ldr	r0, [pc, #96]	; (80020f8 <Task_Tir+0xc8>)
 8002096:	f004 fba4 	bl	80067e2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED13_GPIO_Port,LED13_Pin);
 800209a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800209e:	4816      	ldr	r0, [pc, #88]	; (80020f8 <Task_Tir+0xc8>)
 80020a0:	f004 fb9f 	bl	80067e2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED14_GPIO_Port,LED14_Pin);
 80020a4:	2120      	movs	r1, #32
 80020a6:	4815      	ldr	r0, [pc, #84]	; (80020fc <Task_Tir+0xcc>)
 80020a8:	f004 fb9b 	bl	80067e2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED14_GPIO_Port,LED15_Pin);
 80020ac:	2140      	movs	r1, #64	; 0x40
 80020ae:	4813      	ldr	r0, [pc, #76]	; (80020fc <Task_Tir+0xcc>)
 80020b0:	f004 fb97 	bl	80067e2 <HAL_GPIO_TogglePin>

		int hit = test_hitbox(x_viseur1, y_viseur1, x_ennemi, y_ennemi);
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <Task_Tir+0xd0>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	4b12      	ldr	r3, [pc, #72]	; (8002104 <Task_Tir+0xd4>)
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	4619      	mov	r1, r3
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <Task_Tir+0xd8>)
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <Task_Tir+0xdc>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	f7fe fc63 	bl	8000994 <test_hitbox>
 80020ce:	6178      	str	r0, [r7, #20]
		int Message_hit = 1;
 80020d0:	2301      	movs	r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
		if (hit == 1){
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d107      	bne.n	80020ea <Task_Tir+0xba>
			xQueueSend(Queue_hitHandle, &Message_hit, 0);
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <Task_Tir+0xe0>)
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	f107 010c 	add.w	r1, r7, #12
 80020e2:	2300      	movs	r3, #0
 80020e4:	2200      	movs	r2, #0
 80020e6:	f009 fd8f 	bl	800bc08 <xQueueGenericSend>
			};
	}
    osDelay(100);
 80020ea:	2064      	movs	r0, #100	; 0x64
 80020ec:	f009 fb1b 	bl	800b726 <osDelay>
  {
 80020f0:	e7a2      	b.n	8002038 <Task_Tir+0x8>
 80020f2:	bf00      	nop
 80020f4:	2000485c 	.word	0x2000485c
 80020f8:	40021c00 	.word	0x40021c00
 80020fc:	40021000 	.word	0x40021000
 8002100:	2000002e 	.word	0x2000002e
 8002104:	20000030 	.word	0x20000030
 8002108:	20000036 	.word	0x20000036
 800210c:	20000038 	.word	0x20000038
 8002110:	200046f8 	.word	0x200046f8

08002114 <Task_Ennemi>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Ennemi */
void Task_Ennemi(void const * argument)
{
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	b09a      	sub	sp, #104	; 0x68
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Ennemi */
	extern uint16_t x_ennemi, y_ennemi;
	extern uint8_t direction_ennemi;

	uint32_t random_number;
	HAL_RNG_GenerateRandomNumber(&hrng, &random_number);
 800211c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002120:	4619      	mov	r1, r3
 8002122:	48aa      	ldr	r0, [pc, #680]	; (80023cc <Task_Ennemi+0x2b8>)
 8002124:	f006 fe68 	bl	8008df8 <HAL_RNG_GenerateRandomNumber>

	x_ennemi = (uint16_t) (20 + random_number%(480-2*20));
 8002128:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800212a:	08d3      	lsrs	r3, r2, #3
 800212c:	49a8      	ldr	r1, [pc, #672]	; (80023d0 <Task_Ennemi+0x2bc>)
 800212e:	fba1 1303 	umull	r1, r3, r1, r3
 8002132:	085b      	lsrs	r3, r3, #1
 8002134:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	b29b      	uxth	r3, r3
 8002140:	3314      	adds	r3, #20
 8002142:	b29a      	uxth	r2, r3
 8002144:	4ba3      	ldr	r3, [pc, #652]	; (80023d4 <Task_Ennemi+0x2c0>)
 8002146:	801a      	strh	r2, [r3, #0]
	y_ennemi = (uint16_t) (20 + random_number%(272-2*20));
 8002148:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800214a:	4ba3      	ldr	r3, [pc, #652]	; (80023d8 <Task_Ennemi+0x2c4>)
 800214c:	fba3 1302 	umull	r1, r3, r3, r2
 8002150:	09db      	lsrs	r3, r3, #7
 8002152:	21e8      	movs	r1, #232	; 0xe8
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	b29b      	uxth	r3, r3
 800215c:	3314      	adds	r3, #20
 800215e:	b29a      	uxth	r2, r3
 8002160:	4b9e      	ldr	r3, [pc, #632]	; (80023dc <Task_Ennemi+0x2c8>)
 8002162:	801a      	strh	r2, [r3, #0]
	direction_ennemi = (uint8_t) (1 + random_number%7);
 8002164:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002166:	4b9e      	ldr	r3, [pc, #632]	; (80023e0 <Task_Ennemi+0x2cc>)
 8002168:	fba3 1302 	umull	r1, r3, r3, r2
 800216c:	1ad1      	subs	r1, r2, r3
 800216e:	0849      	lsrs	r1, r1, #1
 8002170:	440b      	add	r3, r1
 8002172:	0899      	lsrs	r1, r3, #2
 8002174:	460b      	mov	r3, r1
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	1a5b      	subs	r3, r3, r1
 800217a:	1ad1      	subs	r1, r2, r3
 800217c:	b2cb      	uxtb	r3, r1
 800217e:	3301      	adds	r3, #1
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4b98      	ldr	r3, [pc, #608]	; (80023e4 <Task_Ennemi+0x2d0>)
 8002184:	701a      	strb	r2, [r3, #0]
	if (direction_ennemi >4){direction_ennemi++;}; // tirage d'un nombre entre 1 et 9, 6 exclu
 8002186:	4b97      	ldr	r3, [pc, #604]	; (80023e4 <Task_Ennemi+0x2d0>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b04      	cmp	r3, #4
 800218c:	d905      	bls.n	800219a <Task_Ennemi+0x86>
 800218e:	4b95      	ldr	r3, [pc, #596]	; (80023e4 <Task_Ennemi+0x2d0>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	3301      	adds	r3, #1
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4b93      	ldr	r3, [pc, #588]	; (80023e4 <Task_Ennemi+0x2d0>)
 8002198:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
	int Message_hit = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	663b      	str	r3, [r7, #96]	; 0x60
	xQueueReceive(Queue_hitHandle, &Message_hit, 0);
 800219e:	4b92      	ldr	r3, [pc, #584]	; (80023e8 <Task_Ennemi+0x2d4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80021a6:	2200      	movs	r2, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f009 fed3 	bl	800bf54 <xQueueReceive>

	if (Message_hit == 1){
 80021ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d11b      	bne.n	80021ec <Task_Ennemi+0xd8>
		extern uint8_t score1;
		score1 ++;
 80021b4:	4b8d      	ldr	r3, [pc, #564]	; (80023ec <Task_Ennemi+0x2d8>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4b8b      	ldr	r3, [pc, #556]	; (80023ec <Task_Ennemi+0x2d8>)
 80021be:	701a      	strb	r2, [r3, #0]
		osThreadDef(Ennemi, Task_Ennemi, osPriorityLow, 0, 128);
 80021c0:	4b8b      	ldr	r3, [pc, #556]	; (80023f0 <Task_Ennemi+0x2dc>)
 80021c2:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80021c6:	461d      	mov	r5, r3
 80021c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		EnnemiHandle = osThreadCreate(osThread(Ennemi), NULL);
 80021d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f009 fa57 	bl	800b68e <osThreadCreate>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4a84      	ldr	r2, [pc, #528]	; (80023f4 <Task_Ennemi+0x2e0>)
 80021e4:	6013      	str	r3, [r2, #0]
		vTaskDelete(NULL);
 80021e6:	2000      	movs	r0, #0
 80021e8:	f00a fb88 	bl	800c8fc <vTaskDelete>

	}
	if (Message_hit == 2){
 80021ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d11b      	bne.n	800222a <Task_Ennemi+0x116>
		extern uint8_t score2;
		score2++;
 80021f2:	4b81      	ldr	r3, [pc, #516]	; (80023f8 <Task_Ennemi+0x2e4>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	3301      	adds	r3, #1
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4b7f      	ldr	r3, [pc, #508]	; (80023f8 <Task_Ennemi+0x2e4>)
 80021fc:	701a      	strb	r2, [r3, #0]
		osThreadDef(Ennemi, Task_Ennemi, osPriorityLow, 0, 128);
 80021fe:	4b7c      	ldr	r3, [pc, #496]	; (80023f0 <Task_Ennemi+0x2dc>)
 8002200:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002204:	461d      	mov	r5, r3
 8002206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800220e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		EnnemiHandle = osThreadCreate(osThread(Ennemi), NULL);
 8002212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f009 fa38 	bl	800b68e <osThreadCreate>
 800221e:	4603      	mov	r3, r0
 8002220:	4a74      	ldr	r2, [pc, #464]	; (80023f4 <Task_Ennemi+0x2e0>)
 8002222:	6013      	str	r3, [r2, #0]
		vTaskDelete(NULL);
 8002224:	2000      	movs	r0, #0
 8002226:	f00a fb69 	bl	800c8fc <vTaskDelete>

	}
	//rebond
	if (x_ennemi==20){
 800222a:	4b6a      	ldr	r3, [pc, #424]	; (80023d4 <Task_Ennemi+0x2c0>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	2b14      	cmp	r3, #20
 8002230:	d116      	bne.n	8002260 <Task_Ennemi+0x14c>
		switch (direction_ennemi){
 8002232:	4b6c      	ldr	r3, [pc, #432]	; (80023e4 <Task_Ennemi+0x2d0>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b07      	cmp	r3, #7
 8002238:	d006      	beq.n	8002248 <Task_Ennemi+0x134>
 800223a:	2b07      	cmp	r3, #7
 800223c:	dc11      	bgt.n	8002262 <Task_Ennemi+0x14e>
 800223e:	2b01      	cmp	r3, #1
 8002240:	d00a      	beq.n	8002258 <Task_Ennemi+0x144>
 8002242:	2b04      	cmp	r3, #4
 8002244:	d004      	beq.n	8002250 <Task_Ennemi+0x13c>
 8002246:	e00c      	b.n	8002262 <Task_Ennemi+0x14e>
		case 7 :
			direction_ennemi = 9;
 8002248:	4b66      	ldr	r3, [pc, #408]	; (80023e4 <Task_Ennemi+0x2d0>)
 800224a:	2209      	movs	r2, #9
 800224c:	701a      	strb	r2, [r3, #0]
			break;
 800224e:	e008      	b.n	8002262 <Task_Ennemi+0x14e>
		case 4 :
			direction_ennemi=6;
 8002250:	4b64      	ldr	r3, [pc, #400]	; (80023e4 <Task_Ennemi+0x2d0>)
 8002252:	2206      	movs	r2, #6
 8002254:	701a      	strb	r2, [r3, #0]
			break;
 8002256:	e004      	b.n	8002262 <Task_Ennemi+0x14e>
		case 1:
			direction_ennemi=3;
 8002258:	4b62      	ldr	r3, [pc, #392]	; (80023e4 <Task_Ennemi+0x2d0>)
 800225a:	2203      	movs	r2, #3
 800225c:	701a      	strb	r2, [r3, #0]
			break;
 800225e:	e000      	b.n	8002262 <Task_Ennemi+0x14e>
		}
	}
 8002260:	bf00      	nop
	if (x_ennemi==480-20){
 8002262:	4b5c      	ldr	r3, [pc, #368]	; (80023d4 <Task_Ennemi+0x2c0>)
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800226a:	d116      	bne.n	800229a <Task_Ennemi+0x186>
		switch (direction_ennemi){
 800226c:	4b5d      	ldr	r3, [pc, #372]	; (80023e4 <Task_Ennemi+0x2d0>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b09      	cmp	r3, #9
 8002272:	d006      	beq.n	8002282 <Task_Ennemi+0x16e>
 8002274:	2b09      	cmp	r3, #9
 8002276:	dc11      	bgt.n	800229c <Task_Ennemi+0x188>
 8002278:	2b03      	cmp	r3, #3
 800227a:	d00a      	beq.n	8002292 <Task_Ennemi+0x17e>
 800227c:	2b06      	cmp	r3, #6
 800227e:	d004      	beq.n	800228a <Task_Ennemi+0x176>
 8002280:	e00c      	b.n	800229c <Task_Ennemi+0x188>
		case 9 :
			direction_ennemi = 7;
 8002282:	4b58      	ldr	r3, [pc, #352]	; (80023e4 <Task_Ennemi+0x2d0>)
 8002284:	2207      	movs	r2, #7
 8002286:	701a      	strb	r2, [r3, #0]
			break;
 8002288:	e008      	b.n	800229c <Task_Ennemi+0x188>
		case 6 :
			direction_ennemi=4;
 800228a:	4b56      	ldr	r3, [pc, #344]	; (80023e4 <Task_Ennemi+0x2d0>)
 800228c:	2204      	movs	r2, #4
 800228e:	701a      	strb	r2, [r3, #0]
			break;
 8002290:	e004      	b.n	800229c <Task_Ennemi+0x188>
		case 3:
			direction_ennemi=1;
 8002292:	4b54      	ldr	r3, [pc, #336]	; (80023e4 <Task_Ennemi+0x2d0>)
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
			break;
 8002298:	e000      	b.n	800229c <Task_Ennemi+0x188>
		}
	}
 800229a:	bf00      	nop
	if (y_ennemi==1+20){
 800229c:	4b4f      	ldr	r3, [pc, #316]	; (80023dc <Task_Ennemi+0x2c8>)
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	2b15      	cmp	r3, #21
 80022a2:	d116      	bne.n	80022d2 <Task_Ennemi+0x1be>
		switch (direction_ennemi){
 80022a4:	4b4f      	ldr	r3, [pc, #316]	; (80023e4 <Task_Ennemi+0x2d0>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b09      	cmp	r3, #9
 80022aa:	d00e      	beq.n	80022ca <Task_Ennemi+0x1b6>
 80022ac:	2b09      	cmp	r3, #9
 80022ae:	dc11      	bgt.n	80022d4 <Task_Ennemi+0x1c0>
 80022b0:	2b07      	cmp	r3, #7
 80022b2:	d002      	beq.n	80022ba <Task_Ennemi+0x1a6>
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d004      	beq.n	80022c2 <Task_Ennemi+0x1ae>
 80022b8:	e00c      	b.n	80022d4 <Task_Ennemi+0x1c0>
		case 7 :
			direction_ennemi = 1;
 80022ba:	4b4a      	ldr	r3, [pc, #296]	; (80023e4 <Task_Ennemi+0x2d0>)
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
			break;
 80022c0:	e008      	b.n	80022d4 <Task_Ennemi+0x1c0>
		case 8 :
			direction_ennemi=2;
 80022c2:	4b48      	ldr	r3, [pc, #288]	; (80023e4 <Task_Ennemi+0x2d0>)
 80022c4:	2202      	movs	r2, #2
 80022c6:	701a      	strb	r2, [r3, #0]
			break;
 80022c8:	e004      	b.n	80022d4 <Task_Ennemi+0x1c0>
		case 9:
			direction_ennemi=3;
 80022ca:	4b46      	ldr	r3, [pc, #280]	; (80023e4 <Task_Ennemi+0x2d0>)
 80022cc:	2203      	movs	r2, #3
 80022ce:	701a      	strb	r2, [r3, #0]
			break;
 80022d0:	e000      	b.n	80022d4 <Task_Ennemi+0x1c0>
		}
	}
 80022d2:	bf00      	nop
	if (y_ennemi==272-1-20){
 80022d4:	4b41      	ldr	r3, [pc, #260]	; (80023dc <Task_Ennemi+0x2c8>)
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	2bfb      	cmp	r3, #251	; 0xfb
 80022da:	d116      	bne.n	800230a <Task_Ennemi+0x1f6>
		switch (direction_ennemi){
 80022dc:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <Task_Ennemi+0x2d0>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d00e      	beq.n	8002302 <Task_Ennemi+0x1ee>
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	dc11      	bgt.n	800230c <Task_Ennemi+0x1f8>
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d002      	beq.n	80022f2 <Task_Ennemi+0x1de>
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d004      	beq.n	80022fa <Task_Ennemi+0x1e6>
 80022f0:	e00c      	b.n	800230c <Task_Ennemi+0x1f8>
		case 1 :
			direction_ennemi = 7;
 80022f2:	4b3c      	ldr	r3, [pc, #240]	; (80023e4 <Task_Ennemi+0x2d0>)
 80022f4:	2207      	movs	r2, #7
 80022f6:	701a      	strb	r2, [r3, #0]
			break;
 80022f8:	e008      	b.n	800230c <Task_Ennemi+0x1f8>
		case 2 :
			direction_ennemi=8;
 80022fa:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <Task_Ennemi+0x2d0>)
 80022fc:	2208      	movs	r2, #8
 80022fe:	701a      	strb	r2, [r3, #0]
			break;
 8002300:	e004      	b.n	800230c <Task_Ennemi+0x1f8>
		case 3:
			direction_ennemi=9;
 8002302:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <Task_Ennemi+0x2d0>)
 8002304:	2209      	movs	r2, #9
 8002306:	701a      	strb	r2, [r3, #0]
			break;
 8002308:	e000      	b.n	800230c <Task_Ennemi+0x1f8>
		}
	}
 800230a:	bf00      	nop

	if ((x_ennemi>=20)&&(x_ennemi<=480-20)&&(y_ennemi>20)&&(y_ennemi<=272-20)){
 800230c:	4b31      	ldr	r3, [pc, #196]	; (80023d4 <Task_Ennemi+0x2c0>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	2b13      	cmp	r3, #19
 8002312:	f240 809e 	bls.w	8002452 <Task_Ennemi+0x33e>
 8002316:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <Task_Ennemi+0x2c0>)
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800231e:	f200 8098 	bhi.w	8002452 <Task_Ennemi+0x33e>
 8002322:	4b2e      	ldr	r3, [pc, #184]	; (80023dc <Task_Ennemi+0x2c8>)
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	2b14      	cmp	r3, #20
 8002328:	f240 8093 	bls.w	8002452 <Task_Ennemi+0x33e>
 800232c:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <Task_Ennemi+0x2c8>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	2bfc      	cmp	r3, #252	; 0xfc
 8002332:	f200 808e 	bhi.w	8002452 <Task_Ennemi+0x33e>
		xSemaphoreTake( Mutex_EcranHandle, portMAX_DELAY );
 8002336:	4b31      	ldr	r3, [pc, #196]	; (80023fc <Task_Ennemi+0x2e8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f04f 31ff 	mov.w	r1, #4294967295
 800233e:	4618      	mov	r0, r3
 8002340:	f009 feee 	bl	800c120 <xQueueSemaphoreTake>
		switch (direction_ennemi){
 8002344:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <Task_Ennemi+0x2d0>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3b01      	subs	r3, #1
 800234a:	2b08      	cmp	r3, #8
 800234c:	f200 8097 	bhi.w	800247e <Task_Ennemi+0x36a>
 8002350:	a201      	add	r2, pc, #4	; (adr r2, 8002358 <Task_Ennemi+0x244>)
 8002352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002356:	bf00      	nop
 8002358:	0800237d 	.word	0x0800237d
 800235c:	08002397 	.word	0x08002397
 8002360:	080023a5 	.word	0x080023a5
 8002364:	080023bf 	.word	0x080023bf
 8002368:	0800247f 	.word	0x0800247f
 800236c:	08002401 	.word	0x08002401
 8002370:	0800240f 	.word	0x0800240f
 8002374:	08002429 	.word	0x08002429
 8002378:	08002437 	.word	0x08002437
		case 1:
			x_ennemi--;
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <Task_Ennemi+0x2c0>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <Task_Ennemi+0x2c0>)
 8002386:	801a      	strh	r2, [r3, #0]
			y_ennemi++;
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <Task_Ennemi+0x2c8>)
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <Task_Ennemi+0x2c8>)
 8002392:	801a      	strh	r2, [r3, #0]
			break;
 8002394:	e05c      	b.n	8002450 <Task_Ennemi+0x33c>
		case 2:
			y_ennemi++;
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <Task_Ennemi+0x2c8>)
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	3301      	adds	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <Task_Ennemi+0x2c8>)
 80023a0:	801a      	strh	r2, [r3, #0]
			break;
 80023a2:	e055      	b.n	8002450 <Task_Ennemi+0x33c>
		case 3:
			x_ennemi++;
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <Task_Ennemi+0x2c0>)
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	3301      	adds	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <Task_Ennemi+0x2c0>)
 80023ae:	801a      	strh	r2, [r3, #0]
			y_ennemi++;
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <Task_Ennemi+0x2c8>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <Task_Ennemi+0x2c8>)
 80023ba:	801a      	strh	r2, [r3, #0]
			break;
 80023bc:	e048      	b.n	8002450 <Task_Ennemi+0x33c>
		case 4:
			x_ennemi--;
 80023be:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <Task_Ennemi+0x2c0>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <Task_Ennemi+0x2c0>)
 80023c8:	801a      	strh	r2, [r3, #0]
			break;
 80023ca:	e041      	b.n	8002450 <Task_Ennemi+0x33c>
 80023cc:	20004784 	.word	0x20004784
 80023d0:	094f2095 	.word	0x094f2095
 80023d4:	20000036 	.word	0x20000036
 80023d8:	8d3dcb09 	.word	0x8d3dcb09
 80023dc:	20000038 	.word	0x20000038
 80023e0:	24924925 	.word	0x24924925
 80023e4:	2000003a 	.word	0x2000003a
 80023e8:	200046f8 	.word	0x200046f8
 80023ec:	2000039a 	.word	0x2000039a
 80023f0:	0800e9d4 	.word	0x0800e9d4
 80023f4:	20004670 	.word	0x20004670
 80023f8:	2000039b 	.word	0x2000039b
 80023fc:	20004534 	.word	0x20004534
		case 6:
			x_ennemi++;
 8002400:	4b24      	ldr	r3, [pc, #144]	; (8002494 <Task_Ennemi+0x380>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	4b22      	ldr	r3, [pc, #136]	; (8002494 <Task_Ennemi+0x380>)
 800240a:	801a      	strh	r2, [r3, #0]
			break;
 800240c:	e020      	b.n	8002450 <Task_Ennemi+0x33c>
		case 7:
			x_ennemi--;
 800240e:	4b21      	ldr	r3, [pc, #132]	; (8002494 <Task_Ennemi+0x380>)
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <Task_Ennemi+0x380>)
 8002418:	801a      	strh	r2, [r3, #0]
			y_ennemi--;
 800241a:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <Task_Ennemi+0x384>)
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <Task_Ennemi+0x384>)
 8002424:	801a      	strh	r2, [r3, #0]
			break;
 8002426:	e013      	b.n	8002450 <Task_Ennemi+0x33c>
		case 8:
			y_ennemi--;
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <Task_Ennemi+0x384>)
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <Task_Ennemi+0x384>)
 8002432:	801a      	strh	r2, [r3, #0]
			break;
 8002434:	e00c      	b.n	8002450 <Task_Ennemi+0x33c>
		case 9:
			x_ennemi++;
 8002436:	4b17      	ldr	r3, [pc, #92]	; (8002494 <Task_Ennemi+0x380>)
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	3301      	adds	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	4b15      	ldr	r3, [pc, #84]	; (8002494 <Task_Ennemi+0x380>)
 8002440:	801a      	strh	r2, [r3, #0]
			y_ennemi--;
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <Task_Ennemi+0x384>)
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <Task_Ennemi+0x384>)
 800244c:	801a      	strh	r2, [r3, #0]
			break;
 800244e:	bf00      	nop
		switch (direction_ennemi){
 8002450:	e015      	b.n	800247e <Task_Ennemi+0x36a>
		}
	}

	else{
		osThreadDef(Ennemi, Task_Ennemi, osPriorityLow, 0, 128);
 8002452:	4b12      	ldr	r3, [pc, #72]	; (800249c <Task_Ennemi+0x388>)
 8002454:	f107 040c 	add.w	r4, r7, #12
 8002458:	461d      	mov	r5, r3
 800245a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800245c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800245e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002462:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		EnnemiHandle = osThreadCreate(osThread(Ennemi), NULL);
 8002466:	f107 030c 	add.w	r3, r7, #12
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f009 f90e 	bl	800b68e <osThreadCreate>
 8002472:	4603      	mov	r3, r0
 8002474:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <Task_Ennemi+0x38c>)
 8002476:	6013      	str	r3, [r2, #0]
		vTaskDelete(NULL);
 8002478:	2000      	movs	r0, #0
 800247a:	f00a fa3f 	bl	800c8fc <vTaskDelete>
	}
	xSemaphoreGive( Mutex_EcranHandle );
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <Task_Ennemi+0x390>)
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	2300      	movs	r3, #0
 8002484:	2200      	movs	r2, #0
 8002486:	2100      	movs	r1, #0
 8002488:	f009 fbbe 	bl	800bc08 <xQueueGenericSend>
    osDelay(10);
 800248c:	200a      	movs	r0, #10
 800248e:	f009 f94a 	bl	800b726 <osDelay>
  {
 8002492:	e682      	b.n	800219a <Task_Ennemi+0x86>
 8002494:	20000036 	.word	0x20000036
 8002498:	20000038 	.word	0x20000038
 800249c:	0800e9d4 	.word	0x0800e9d4
 80024a0:	20004670 	.word	0x20004670
 80024a4:	20004534 	.word	0x20004534

080024a8 <Task_Affichage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Affichage */
void Task_Affichage(void const * argument)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b090      	sub	sp, #64	; 0x40
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Affichage */
	char text[50]={};
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	f107 0310 	add.w	r3, r7, #16
 80024b8:	222e      	movs	r2, #46	; 0x2e
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f00b fd9f 	bl	800e000 <memset>
	extern uint16_t y_viseur1;

	extern uint16_t x_ennemi;
	extern uint16_t y_ennemi;

	xSemaphoreTake( Mutex_EcranHandle, portMAX_DELAY );
 80024c2:	4b4c      	ldr	r3, [pc, #304]	; (80025f4 <Task_Affichage+0x14c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f04f 31ff 	mov.w	r1, #4294967295
 80024ca:	4618      	mov	r0, r3
 80024cc:	f009 fe28 	bl	800c120 <xQueueSemaphoreTake>
	BSP_LCD_Clear(LCD_COLOR_GRAY);
 80024d0:	4849      	ldr	r0, [pc, #292]	; (80025f8 <Task_Affichage+0x150>)
 80024d2:	f000 fc31 	bl	8002d38 <BSP_LCD_Clear>


	//ennemi
	BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 80024d6:	4849      	ldr	r0, [pc, #292]	; (80025fc <Task_Affichage+0x154>)
 80024d8:	f000 fbfc 	bl	8002cd4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(x_ennemi,y_ennemi, 20);
 80024dc:	4b48      	ldr	r3, [pc, #288]	; (8002600 <Task_Affichage+0x158>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	4a48      	ldr	r2, [pc, #288]	; (8002604 <Task_Affichage+0x15c>)
 80024e2:	8811      	ldrh	r1, [r2, #0]
 80024e4:	2214      	movs	r2, #20
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 ffb6 	bl	8003458 <BSP_LCD_FillCircle>


	//viseur1
	BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 80024ec:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 80024f0:	f000 fbf0 	bl	8002cd4 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(x_viseur1, y_viseur1+10, x_viseur1, y_viseur1-10);
 80024f4:	4b44      	ldr	r3, [pc, #272]	; (8002608 <Task_Affichage+0x160>)
 80024f6:	8818      	ldrh	r0, [r3, #0]
 80024f8:	4b44      	ldr	r3, [pc, #272]	; (800260c <Task_Affichage+0x164>)
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	330a      	adds	r3, #10
 80024fe:	b299      	uxth	r1, r3
 8002500:	4b41      	ldr	r3, [pc, #260]	; (8002608 <Task_Affichage+0x160>)
 8002502:	881a      	ldrh	r2, [r3, #0]
 8002504:	4b41      	ldr	r3, [pc, #260]	; (800260c <Task_Affichage+0x164>)
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	3b0a      	subs	r3, #10
 800250a:	b29b      	uxth	r3, r3
 800250c:	f000 fda6 	bl	800305c <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(x_viseur1+10, y_viseur1, x_viseur1-10, y_viseur1);
 8002510:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <Task_Affichage+0x160>)
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	330a      	adds	r3, #10
 8002516:	b298      	uxth	r0, r3
 8002518:	4b3c      	ldr	r3, [pc, #240]	; (800260c <Task_Affichage+0x164>)
 800251a:	8819      	ldrh	r1, [r3, #0]
 800251c:	4b3a      	ldr	r3, [pc, #232]	; (8002608 <Task_Affichage+0x160>)
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	3b0a      	subs	r3, #10
 8002522:	b29a      	uxth	r2, r3
 8002524:	4b39      	ldr	r3, [pc, #228]	; (800260c <Task_Affichage+0x164>)
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	f000 fd98 	bl	800305c <BSP_LCD_DrawLine>
	BSP_LCD_DrawCircle(x_viseur1, y_viseur1, 10);
 800252c:	4b36      	ldr	r3, [pc, #216]	; (8002608 <Task_Affichage+0x160>)
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	4a36      	ldr	r2, [pc, #216]	; (800260c <Task_Affichage+0x164>)
 8002532:	8811      	ldrh	r1, [r2, #0]
 8002534:	220a      	movs	r2, #10
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fe5c 	bl	80031f4 <BSP_LCD_DrawCircle>

	//viseur2
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTMAGENTA);
 800253c:	f46f 40fe 	mvn.w	r0, #32512	; 0x7f00
 8002540:	f000 fbc8 	bl	8002cd4 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(x_viseur2, y_viseur2+10, x_viseur2, y_viseur2-10);
 8002544:	4b32      	ldr	r3, [pc, #200]	; (8002610 <Task_Affichage+0x168>)
 8002546:	8818      	ldrh	r0, [r3, #0]
 8002548:	4b32      	ldr	r3, [pc, #200]	; (8002614 <Task_Affichage+0x16c>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	330a      	adds	r3, #10
 800254e:	b299      	uxth	r1, r3
 8002550:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <Task_Affichage+0x168>)
 8002552:	881a      	ldrh	r2, [r3, #0]
 8002554:	4b2f      	ldr	r3, [pc, #188]	; (8002614 <Task_Affichage+0x16c>)
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	3b0a      	subs	r3, #10
 800255a:	b29b      	uxth	r3, r3
 800255c:	f000 fd7e 	bl	800305c <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(x_viseur2+10, y_viseur2, x_viseur2-10, y_viseur2);
 8002560:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <Task_Affichage+0x168>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	330a      	adds	r3, #10
 8002566:	b298      	uxth	r0, r3
 8002568:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <Task_Affichage+0x16c>)
 800256a:	8819      	ldrh	r1, [r3, #0]
 800256c:	4b28      	ldr	r3, [pc, #160]	; (8002610 <Task_Affichage+0x168>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	3b0a      	subs	r3, #10
 8002572:	b29a      	uxth	r2, r3
 8002574:	4b27      	ldr	r3, [pc, #156]	; (8002614 <Task_Affichage+0x16c>)
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	f000 fd70 	bl	800305c <BSP_LCD_DrawLine>
	BSP_LCD_DrawCircle(x_viseur2, y_viseur2, 10);
 800257c:	4b24      	ldr	r3, [pc, #144]	; (8002610 <Task_Affichage+0x168>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	4a24      	ldr	r2, [pc, #144]	; (8002614 <Task_Affichage+0x16c>)
 8002582:	8811      	ldrh	r1, [r2, #0]
 8002584:	220a      	movs	r2, #10
 8002586:	4618      	mov	r0, r3
 8002588:	f000 fe34 	bl	80031f4 <BSP_LCD_DrawCircle>

	//score
	sprintf(text,"Score joueur 1 : %02u", score1);
 800258c:	4b22      	ldr	r3, [pc, #136]	; (8002618 <Task_Affichage+0x170>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	f107 030c 	add.w	r3, r7, #12
 8002596:	4921      	ldr	r1, [pc, #132]	; (800261c <Task_Affichage+0x174>)
 8002598:	4618      	mov	r0, r3
 800259a:	f00b fe0d 	bl	800e1b8 <siprintf>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800259e:	4820      	ldr	r0, [pc, #128]	; (8002620 <Task_Affichage+0x178>)
 80025a0:	f000 fb98 	bl	8002cd4 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(60,12,(uint8_t*) text,LEFT_MODE);
 80025a4:	f107 020c 	add.w	r2, r7, #12
 80025a8:	2303      	movs	r3, #3
 80025aa:	210c      	movs	r1, #12
 80025ac:	203c      	movs	r0, #60	; 0x3c
 80025ae:	f000 fc2f 	bl	8002e10 <BSP_LCD_DisplayStringAt>

	sprintf(text,"Score joueur 2 : %02u", score2);
 80025b2:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <Task_Affichage+0x17c>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	491a      	ldr	r1, [pc, #104]	; (8002628 <Task_Affichage+0x180>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f00b fdfa 	bl	800e1b8 <siprintf>
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTMAGENTA);
 80025c4:	f46f 40fe 	mvn.w	r0, #32512	; 0x7f00
 80025c8:	f000 fb84 	bl	8002cd4 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(260,12,(uint8_t*) text,LEFT_MODE);
 80025cc:	f107 020c 	add.w	r2, r7, #12
 80025d0:	2303      	movs	r3, #3
 80025d2:	210c      	movs	r1, #12
 80025d4:	f44f 7082 	mov.w	r0, #260	; 0x104
 80025d8:	f000 fc1a 	bl	8002e10 <BSP_LCD_DisplayStringAt>

	xSemaphoreGive( Mutex_EcranHandle );
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <Task_Affichage+0x14c>)
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	2300      	movs	r3, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	2100      	movs	r1, #0
 80025e6:	f009 fb0f 	bl	800bc08 <xQueueGenericSend>

    osDelay(40);
 80025ea:	2028      	movs	r0, #40	; 0x28
 80025ec:	f009 f89b 	bl	800b726 <osDelay>
  {
 80025f0:	e767      	b.n	80024c2 <Task_Affichage+0x1a>
 80025f2:	bf00      	nop
 80025f4:	20004534 	.word	0x20004534
 80025f8:	ff808080 	.word	0xff808080
 80025fc:	ffffa500 	.word	0xffffa500
 8002600:	20000036 	.word	0x20000036
 8002604:	20000038 	.word	0x20000038
 8002608:	2000002e 	.word	0x2000002e
 800260c:	20000030 	.word	0x20000030
 8002610:	20000032 	.word	0x20000032
 8002614:	20000034 	.word	0x20000034
 8002618:	2000039a 	.word	0x2000039a
 800261c:	0800ea44 	.word	0x0800ea44
 8002620:	ff0000ff 	.word	0xff0000ff
 8002624:	2000039b 	.word	0x2000039b
 8002628:	0800ea5c 	.word	0x0800ea5c

0800262c <Task_Share>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Share */
void Task_Share(void const * argument)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	extern uint16_t x_viseur1, y_viseur1;
	extern uint16_t x_viseur2, y_viseur2;
	extern uint16_t x_ennemi, y_ennemi;
	extern uint8_t score1, score2;

	vPortEnterCritical();
 8002634:	f00b f99a 	bl	800d96c <vPortEnterCritical>
	uint16_t pData_transmit[5];
	pData_transmit[0] = x_viseur1;
 8002638:	4b35      	ldr	r3, [pc, #212]	; (8002710 <Task_Share+0xe4>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	82bb      	strh	r3, [r7, #20]
	pData_transmit[1] = y_viseur1;
 800263e:	4b35      	ldr	r3, [pc, #212]	; (8002714 <Task_Share+0xe8>)
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	82fb      	strh	r3, [r7, #22]
	pData_transmit[2] = x_ennemi;
 8002644:	4b34      	ldr	r3, [pc, #208]	; (8002718 <Task_Share+0xec>)
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	833b      	strh	r3, [r7, #24]
	pData_transmit[3] = y_ennemi;
 800264a:	4b34      	ldr	r3, [pc, #208]	; (800271c <Task_Share+0xf0>)
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	837b      	strh	r3, [r7, #26]
	pData_transmit[4] = (uint16_t) ((score1<<8)+score2);
 8002650:	4b33      	ldr	r3, [pc, #204]	; (8002720 <Task_Share+0xf4>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	021b      	lsls	r3, r3, #8
 8002658:	b29a      	uxth	r2, r3
 800265a:	4b32      	ldr	r3, [pc, #200]	; (8002724 <Task_Share+0xf8>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	4413      	add	r3, r2
 8002662:	b29b      	uxth	r3, r3
 8002664:	83bb      	strh	r3, [r7, #28]

	HAL_SPI_TransmitReceive_IT(&hspi2, pData_transmit, pData_receive, Size);
 8002666:	4b30      	ldr	r3, [pc, #192]	; (8002728 <Task_Share+0xfc>)
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	f107 0114 	add.w	r1, r7, #20
 800266e:	4a2f      	ldr	r2, [pc, #188]	; (800272c <Task_Share+0x100>)
 8002670:	482f      	ldr	r0, [pc, #188]	; (8002730 <Task_Share+0x104>)
 8002672:	f007 f92b 	bl	80098cc <HAL_SPI_TransmitReceive_IT>
	vPortExitCritical();
 8002676:	f00b f9ad 	bl	800d9d4 <vPortExitCritical>

	int received_condition = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
	xQueueReceive(Queue_receiveHandle, &received_condition, 0);
 800267e:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <Task_Share+0x108>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f107 0110 	add.w	r1, r7, #16
 8002686:	2200      	movs	r2, #0
 8002688:	4618      	mov	r0, r3
 800268a:	f009 fc63 	bl	800bf54 <xQueueReceive>


	if (received_condition == 1){
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d137      	bne.n	8002704 <Task_Share+0xd8>
		xSemaphoreTake( Mutex_EcranHandle, portMAX_DELAY );
 8002694:	4b28      	ldr	r3, [pc, #160]	; (8002738 <Task_Share+0x10c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f04f 31ff 	mov.w	r1, #4294967295
 800269c:	4618      	mov	r0, r3
 800269e:	f009 fd3f 	bl	800c120 <xQueueSemaphoreTake>
		uint16_t x = pData_receive[0];
 80026a2:	4b22      	ldr	r3, [pc, #136]	; (800272c <Task_Share+0x100>)
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t y = pData_receive[1];
 80026a8:	4b20      	ldr	r3, [pc, #128]	; (800272c <Task_Share+0x100>)
 80026aa:	885b      	ldrh	r3, [r3, #2]
 80026ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		int hit = pData_receive[2];
 80026ae:	4b1f      	ldr	r3, [pc, #124]	; (800272c <Task_Share+0x100>)
 80026b0:	889b      	ldrh	r3, [r3, #4]
 80026b2:	623b      	str	r3, [r7, #32]
		if (hit == 1){
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d109      	bne.n	80026ce <Task_Share+0xa2>
				int message = 2;
 80026ba:	2302      	movs	r3, #2
 80026bc:	60fb      	str	r3, [r7, #12]
				xQueueSend(Queue_hitHandle, &message, 0);
 80026be:	4b1f      	ldr	r3, [pc, #124]	; (800273c <Task_Share+0x110>)
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	f107 010c 	add.w	r1, r7, #12
 80026c6:	2300      	movs	r3, #0
 80026c8:	2200      	movs	r2, #0
 80026ca:	f009 fa9d 	bl	800bc08 <xQueueGenericSend>
		}

		if ((x>=1+10) && (x<=480-10)){x_viseur2= x;};
 80026ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026d0:	2b0a      	cmp	r3, #10
 80026d2:	d906      	bls.n	80026e2 <Task_Share+0xb6>
 80026d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026d6:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 80026da:	d802      	bhi.n	80026e2 <Task_Share+0xb6>
 80026dc:	4a18      	ldr	r2, [pc, #96]	; (8002740 <Task_Share+0x114>)
 80026de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026e0:	8013      	strh	r3, [r2, #0]
		if ((y>=1+10)&&(y<=272-10)){y_viseur2 = y;};
 80026e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026e4:	2b0a      	cmp	r3, #10
 80026e6:	d906      	bls.n	80026f6 <Task_Share+0xca>
 80026e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026ea:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80026ee:	d802      	bhi.n	80026f6 <Task_Share+0xca>
 80026f0:	4a14      	ldr	r2, [pc, #80]	; (8002744 <Task_Share+0x118>)
 80026f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026f4:	8013      	strh	r3, [r2, #0]
		xSemaphoreGive( Mutex_EcranHandle );
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <Task_Share+0x10c>)
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	2300      	movs	r3, #0
 80026fc:	2200      	movs	r2, #0
 80026fe:	2100      	movs	r1, #0
 8002700:	f009 fa82 	bl	800bc08 <xQueueGenericSend>
	}
    osDelay(SPI_PERIOD);
 8002704:	4b10      	ldr	r3, [pc, #64]	; (8002748 <Task_Share+0x11c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f009 f80c 	bl	800b726 <osDelay>
  {
 800270e:	e791      	b.n	8002634 <Task_Share+0x8>
 8002710:	2000002e 	.word	0x2000002e
 8002714:	20000030 	.word	0x20000030
 8002718:	20000036 	.word	0x20000036
 800271c:	20000038 	.word	0x20000038
 8002720:	2000039a 	.word	0x2000039a
 8002724:	2000039b 	.word	0x2000039b
 8002728:	2000002c 	.word	0x2000002c
 800272c:	20004494 	.word	0x20004494
 8002730:	20004314 	.word	0x20004314
 8002734:	200048e8 	.word	0x200048e8
 8002738:	20004534 	.word	0x20004534
 800273c:	200046f8 	.word	0x200046f8
 8002740:	20000032 	.word	0x20000032
 8002744:	20000034 	.word	0x20000034
 8002748:	20000028 	.word	0x20000028

0800274c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a04      	ldr	r2, [pc, #16]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800275e:	f002 f9f3 	bl	8004b48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40001000 	.word	0x40001000

08002770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002774:	b672      	cpsid	i
}
 8002776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002778:	e7fe      	b.n	8002778 <Error_Handler+0x8>
	...

0800277c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a51      	ldr	r2, [pc, #324]	; (80028cc <I2Cx_MspInit+0x150>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d14d      	bne.n	8002828 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800278c:	4b50      	ldr	r3, [pc, #320]	; (80028d0 <I2Cx_MspInit+0x154>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	4a4f      	ldr	r2, [pc, #316]	; (80028d0 <I2Cx_MspInit+0x154>)
 8002792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002796:	6313      	str	r3, [r2, #48]	; 0x30
 8002798:	4b4d      	ldr	r3, [pc, #308]	; (80028d0 <I2Cx_MspInit+0x154>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80027a8:	2312      	movs	r3, #18
 80027aa:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80027b0:	2302      	movs	r3, #2
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80027b4:	2304      	movs	r3, #4
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	4619      	mov	r1, r3
 80027be:	4845      	ldr	r0, [pc, #276]	; (80028d4 <I2Cx_MspInit+0x158>)
 80027c0:	f003 fd3e 	bl	8006240 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80027c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80027ca:	f107 031c 	add.w	r3, r7, #28
 80027ce:	4619      	mov	r1, r3
 80027d0:	4840      	ldr	r0, [pc, #256]	; (80028d4 <I2Cx_MspInit+0x158>)
 80027d2:	f003 fd35 	bl	8006240 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80027d6:	4b3e      	ldr	r3, [pc, #248]	; (80028d0 <I2Cx_MspInit+0x154>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	4a3d      	ldr	r2, [pc, #244]	; (80028d0 <I2Cx_MspInit+0x154>)
 80027dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027e0:	6413      	str	r3, [r2, #64]	; 0x40
 80027e2:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <I2Cx_MspInit+0x154>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80027ee:	4b38      	ldr	r3, [pc, #224]	; (80028d0 <I2Cx_MspInit+0x154>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a37      	ldr	r2, [pc, #220]	; (80028d0 <I2Cx_MspInit+0x154>)
 80027f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027f8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80027fa:	4b35      	ldr	r3, [pc, #212]	; (80028d0 <I2Cx_MspInit+0x154>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	4a34      	ldr	r2, [pc, #208]	; (80028d0 <I2Cx_MspInit+0x154>)
 8002800:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002804:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	210f      	movs	r1, #15
 800280a:	2048      	movs	r0, #72	; 0x48
 800280c:	f002 fe92 	bl	8005534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002810:	2048      	movs	r0, #72	; 0x48
 8002812:	f002 feab 	bl	800556c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	210f      	movs	r1, #15
 800281a:	2049      	movs	r0, #73	; 0x49
 800281c:	f002 fe8a 	bl	8005534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002820:	2049      	movs	r0, #73	; 0x49
 8002822:	f002 fea3 	bl	800556c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002826:	e04d      	b.n	80028c4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002828:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <I2Cx_MspInit+0x154>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	4a28      	ldr	r2, [pc, #160]	; (80028d0 <I2Cx_MspInit+0x154>)
 800282e:	f043 0302 	orr.w	r3, r3, #2
 8002832:	6313      	str	r3, [r2, #48]	; 0x30
 8002834:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <I2Cx_MspInit+0x154>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002844:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002846:	2312      	movs	r3, #18
 8002848:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800284e:	2302      	movs	r3, #2
 8002850:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002852:	2304      	movs	r3, #4
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002856:	f107 031c 	add.w	r3, r7, #28
 800285a:	4619      	mov	r1, r3
 800285c:	481e      	ldr	r0, [pc, #120]	; (80028d8 <I2Cx_MspInit+0x15c>)
 800285e:	f003 fcef 	bl	8006240 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002862:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002866:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002868:	f107 031c 	add.w	r3, r7, #28
 800286c:	4619      	mov	r1, r3
 800286e:	481a      	ldr	r0, [pc, #104]	; (80028d8 <I2Cx_MspInit+0x15c>)
 8002870:	f003 fce6 	bl	8006240 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002874:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <I2Cx_MspInit+0x154>)
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <I2Cx_MspInit+0x154>)
 800287a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800287e:	6413      	str	r3, [r2, #64]	; 0x40
 8002880:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <I2Cx_MspInit+0x154>)
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <I2Cx_MspInit+0x154>)
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4a0f      	ldr	r2, [pc, #60]	; (80028d0 <I2Cx_MspInit+0x154>)
 8002892:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002896:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002898:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <I2Cx_MspInit+0x154>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	4a0c      	ldr	r2, [pc, #48]	; (80028d0 <I2Cx_MspInit+0x154>)
 800289e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028a2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	210f      	movs	r1, #15
 80028a8:	201f      	movs	r0, #31
 80028aa:	f002 fe43 	bl	8005534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80028ae:	201f      	movs	r0, #31
 80028b0:	f002 fe5c 	bl	800556c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80028b4:	2200      	movs	r2, #0
 80028b6:	210f      	movs	r1, #15
 80028b8:	2020      	movs	r0, #32
 80028ba:	f002 fe3b 	bl	8005534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80028be:	2020      	movs	r0, #32
 80028c0:	f002 fe54 	bl	800556c <HAL_NVIC_EnableIRQ>
}
 80028c4:	bf00      	nop
 80028c6:	3730      	adds	r7, #48	; 0x30
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	2000039c 	.word	0x2000039c
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40021c00 	.word	0x40021c00
 80028d8:	40020400 	.word	0x40020400

080028dc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f004 fa9d 	bl	8006e24 <HAL_I2C_GetState>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d125      	bne.n	800293c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a14      	ldr	r2, [pc, #80]	; (8002944 <I2Cx_Init+0x68>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d103      	bne.n	8002900 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a13      	ldr	r2, [pc, #76]	; (8002948 <I2Cx_Init+0x6c>)
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	e002      	b.n	8002906 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a12      	ldr	r2, [pc, #72]	; (800294c <I2Cx_Init+0x70>)
 8002904:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a11      	ldr	r2, [pc, #68]	; (8002950 <I2Cx_Init+0x74>)
 800290a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff ff23 	bl	800277c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f003 ff86 	bl	8006848 <HAL_I2C_Init>
  }
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	2000039c 	.word	0x2000039c
 8002948:	40005c00 	.word	0x40005c00
 800294c:	40005400 	.word	0x40005400
 8002950:	40912732 	.word	0x40912732

08002954 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	; 0x28
 8002958:	af04      	add	r7, sp, #16
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	4608      	mov	r0, r1
 800295e:	4611      	mov	r1, r2
 8002960:	461a      	mov	r2, r3
 8002962:	4603      	mov	r3, r0
 8002964:	72fb      	strb	r3, [r7, #11]
 8002966:	460b      	mov	r3, r1
 8002968:	813b      	strh	r3, [r7, #8]
 800296a:	4613      	mov	r3, r2
 800296c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002972:	7afb      	ldrb	r3, [r7, #11]
 8002974:	b299      	uxth	r1, r3
 8002976:	88f8      	ldrh	r0, [r7, #6]
 8002978:	893a      	ldrh	r2, [r7, #8]
 800297a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800297e:	9302      	str	r3, [sp, #8]
 8002980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	4603      	mov	r3, r0
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f004 f930 	bl	8006bf0 <HAL_I2C_Mem_Read>
 8002990:	4603      	mov	r3, r0
 8002992:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d004      	beq.n	80029a4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800299a:	7afb      	ldrb	r3, [r7, #11]
 800299c:	4619      	mov	r1, r3
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f832 	bl	8002a08 <I2Cx_Error>
  }
  return status;    
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b08a      	sub	sp, #40	; 0x28
 80029b2:	af04      	add	r7, sp, #16
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	4608      	mov	r0, r1
 80029b8:	4611      	mov	r1, r2
 80029ba:	461a      	mov	r2, r3
 80029bc:	4603      	mov	r3, r0
 80029be:	72fb      	strb	r3, [r7, #11]
 80029c0:	460b      	mov	r3, r1
 80029c2:	813b      	strh	r3, [r7, #8]
 80029c4:	4613      	mov	r3, r2
 80029c6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80029cc:	7afb      	ldrb	r3, [r7, #11]
 80029ce:	b299      	uxth	r1, r3
 80029d0:	88f8      	ldrh	r0, [r7, #6]
 80029d2:	893a      	ldrh	r2, [r7, #8]
 80029d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029d8:	9302      	str	r3, [sp, #8]
 80029da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	4603      	mov	r3, r0
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f003 ffef 	bl	80069c8 <HAL_I2C_Mem_Write>
 80029ea:	4603      	mov	r3, r0
 80029ec:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d004      	beq.n	80029fe <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80029f4:	7afb      	ldrb	r3, [r7, #11]
 80029f6:	4619      	mov	r1, r3
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 f805 	bl	8002a08 <I2Cx_Error>
  }
  return status;
 80029fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f003 ffa7 	bl	8006968 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ff5e 	bl	80028dc <I2Cx_Init>
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002a2c:	4802      	ldr	r0, [pc, #8]	; (8002a38 <TS_IO_Init+0x10>)
 8002a2e:	f7ff ff55 	bl	80028dc <I2Cx_Init>
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	2000039c 	.word	0x2000039c

08002a3c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
 8002a46:	460b      	mov	r3, r1
 8002a48:	71bb      	strb	r3, [r7, #6]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002a4e:	79bb      	ldrb	r3, [r7, #6]
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	79f9      	ldrb	r1, [r7, #7]
 8002a54:	2301      	movs	r3, #1
 8002a56:	9301      	str	r3, [sp, #4]
 8002a58:	1d7b      	adds	r3, r7, #5
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	4803      	ldr	r0, [pc, #12]	; (8002a6c <TS_IO_Write+0x30>)
 8002a60:	f7ff ffa5 	bl	80029ae <I2Cx_WriteMultiple>
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	2000039c 	.word	0x2000039c

08002a70 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	4603      	mov	r3, r0
 8002a78:	460a      	mov	r2, r1
 8002a7a:	71fb      	strb	r3, [r7, #7]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002a84:	79bb      	ldrb	r3, [r7, #6]
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	79f9      	ldrb	r1, [r7, #7]
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	9301      	str	r3, [sp, #4]
 8002a8e:	f107 030f 	add.w	r3, r7, #15
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	2301      	movs	r3, #1
 8002a96:	4804      	ldr	r0, [pc, #16]	; (8002aa8 <TS_IO_Read+0x38>)
 8002a98:	f7ff ff5c 	bl	8002954 <I2Cx_ReadMultiple>

  return read_value;
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	2000039c 	.word	0x2000039c

08002aac <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f002 f867 	bl	8004b88 <HAL_Delay>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002ac8:	4b31      	ldr	r3, [pc, #196]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002aca:	2228      	movs	r2, #40	; 0x28
 8002acc:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002ace:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002ad0:	2209      	movs	r2, #9
 8002ad2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002ad4:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002ad6:	2235      	movs	r2, #53	; 0x35
 8002ad8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002ada:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002adc:	220b      	movs	r2, #11
 8002ade:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002ae0:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002ae2:	f240 121b 	movw	r2, #283	; 0x11b
 8002ae6:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002ae8:	4b29      	ldr	r3, [pc, #164]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002aea:	f240 2215 	movw	r2, #533	; 0x215
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002af0:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002af2:	f240 121d 	movw	r2, #285	; 0x11d
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002af8:	4b25      	ldr	r3, [pc, #148]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002afa:	f240 2235 	movw	r2, #565	; 0x235
 8002afe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002b00:	2100      	movs	r1, #0
 8002b02:	4823      	ldr	r0, [pc, #140]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002b04:	f000 fe40 	bl	8003788 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002b08:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002b0a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b0e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002b10:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002b12:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002b16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002b18:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002b20:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002b28:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002b30:	4b17      	ldr	r3, [pc, #92]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002b36:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002b3c:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002b42:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002b4a:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <BSP_LCD_Init+0xd0>)
 8002b4c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002b4e:	4810      	ldr	r0, [pc, #64]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002b50:	f004 fe84 	bl	800785c <HAL_LTDC_GetState>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d103      	bne.n	8002b62 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	480c      	ldr	r0, [pc, #48]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002b5e:	f000 fd39 	bl	80035d4 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002b62:	480b      	ldr	r0, [pc, #44]	; (8002b90 <BSP_LCD_Init+0xcc>)
 8002b64:	f004 fcaa 	bl	80074bc <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b6e:	480a      	ldr	r0, [pc, #40]	; (8002b98 <BSP_LCD_Init+0xd4>)
 8002b70:	f003 fe1e 	bl	80067b0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002b74:	2201      	movs	r2, #1
 8002b76:	2108      	movs	r1, #8
 8002b78:	4808      	ldr	r0, [pc, #32]	; (8002b9c <BSP_LCD_Init+0xd8>)
 8002b7a:	f003 fe19 	bl	80067b0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002b7e:	f000 ff23 	bl	80039c8 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002b82:	4807      	ldr	r0, [pc, #28]	; (8002ba0 <BSP_LCD_Init+0xdc>)
 8002b84:	f000 f8be 	bl	8002d04 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	200048ec 	.word	0x200048ec
 8002b94:	40016800 	.word	0x40016800
 8002b98:	40022000 	.word	0x40022000
 8002b9c:	40022800 	.word	0x40022800
 8002ba0:	2000003c 	.word	0x2000003c

08002ba4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <BSP_LCD_GetXSize+0x20>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a06      	ldr	r2, [pc, #24]	; (8002bc8 <BSP_LCD_GetXSize+0x24>)
 8002bae:	2134      	movs	r1, #52	; 0x34
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3360      	adds	r3, #96	; 0x60
 8002bb8:	681b      	ldr	r3, [r3, #0]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	20000428 	.word	0x20000428
 8002bc8:	200048ec 	.word	0x200048ec

08002bcc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <BSP_LCD_GetYSize+0x20>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a06      	ldr	r2, [pc, #24]	; (8002bf0 <BSP_LCD_GetYSize+0x24>)
 8002bd6:	2134      	movs	r1, #52	; 0x34
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	3364      	adds	r3, #100	; 0x64
 8002be0:	681b      	ldr	r3, [r3, #0]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	20000428 	.word	0x20000428
 8002bf0:	200048ec 	.word	0x200048ec

08002bf4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b090      	sub	sp, #64	; 0x40
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	6039      	str	r1, [r7, #0]
 8002bfe:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002c04:	f7ff ffce 	bl	8002ba4 <BSP_LCD_GetXSize>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002c10:	f7ff ffdc 	bl	8002bcc <BSP_LCD_GetYSize>
 8002c14:	4603      	mov	r3, r0
 8002c16:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002c20:	23ff      	movs	r3, #255	; 0xff
 8002c22:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002c3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002c40:	2307      	movs	r3, #7
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002c44:	f7ff ffae 	bl	8002ba4 <BSP_LCD_GetXSize>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002c4c:	f7ff ffbe 	bl	8002bcc <BSP_LCD_GetYSize>
 8002c50:	4603      	mov	r3, r0
 8002c52:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002c54:	88fa      	ldrh	r2, [r7, #6]
 8002c56:	f107 030c 	add.w	r3, r7, #12
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4812      	ldr	r0, [pc, #72]	; (8002ca8 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002c5e:	f004 fdbf 	bl	80077e0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002c62:	88fa      	ldrh	r2, [r7, #6]
 8002c64:	4911      	ldr	r1, [pc, #68]	; (8002cac <BSP_LCD_LayerDefaultInit+0xb8>)
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	3304      	adds	r3, #4
 8002c72:	f04f 32ff 	mov.w	r2, #4294967295
 8002c76:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002c78:	88fa      	ldrh	r2, [r7, #6]
 8002c7a:	490c      	ldr	r1, [pc, #48]	; (8002cac <BSP_LCD_LayerDefaultInit+0xb8>)
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	3308      	adds	r3, #8
 8002c88:	4a09      	ldr	r2, [pc, #36]	; (8002cb0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002c8a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002c8c:	88fa      	ldrh	r2, [r7, #6]
 8002c8e:	4907      	ldr	r1, [pc, #28]	; (8002cac <BSP_LCD_LayerDefaultInit+0xb8>)
 8002c90:	4613      	mov	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002c9e:	601a      	str	r2, [r3, #0]
}
 8002ca0:	bf00      	nop
 8002ca2:	3740      	adds	r7, #64	; 0x40
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	200048ec 	.word	0x200048ec
 8002cac:	2000042c 	.word	0x2000042c
 8002cb0:	2000003c 	.word	0x2000003c

08002cb4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002cbc:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <BSP_LCD_SelectLayer+0x1c>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6013      	str	r3, [r2, #0]
} 
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000428 	.word	0x20000428

08002cd4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002cdc:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <BSP_LCD_SetTextColor+0x28>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4907      	ldr	r1, [pc, #28]	; (8002d00 <BSP_LCD_SetTextColor+0x2c>)
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	601a      	str	r2, [r3, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	20000428 	.word	0x20000428
 8002d00:	2000042c 	.word	0x2000042c

08002d04 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002d0c:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <BSP_LCD_SetFont+0x2c>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4908      	ldr	r1, [pc, #32]	; (8002d34 <BSP_LCD_SetFont+0x30>)
 8002d12:	4613      	mov	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3308      	adds	r3, #8
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	601a      	str	r2, [r3, #0]
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000428 	.word	0x20000428
 8002d34:	2000042c 	.word	0x2000042c

08002d38 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <BSP_LCD_Clear+0x48>)
 8002d42:	681c      	ldr	r4, [r3, #0]
 8002d44:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <BSP_LCD_Clear+0x48>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a0e      	ldr	r2, [pc, #56]	; (8002d84 <BSP_LCD_Clear+0x4c>)
 8002d4a:	2134      	movs	r1, #52	; 0x34
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	335c      	adds	r3, #92	; 0x5c
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461e      	mov	r6, r3
 8002d58:	f7ff ff24 	bl	8002ba4 <BSP_LCD_GetXSize>
 8002d5c:	4605      	mov	r5, r0
 8002d5e:	f7ff ff35 	bl	8002bcc <BSP_LCD_GetYSize>
 8002d62:	4602      	mov	r2, r0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	462a      	mov	r2, r5
 8002d70:	4631      	mov	r1, r6
 8002d72:	4620      	mov	r0, r4
 8002d74:	f000 fddc 	bl	8003930 <LL_FillBuffer>
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d80:	20000428 	.word	0x20000428
 8002d84:	200048ec 	.word	0x200048ec

08002d88 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	80fb      	strh	r3, [r7, #6]
 8002d92:	460b      	mov	r3, r1
 8002d94:	80bb      	strh	r3, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <BSP_LCD_DisplayChar+0x80>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	491b      	ldr	r1, [pc, #108]	; (8002e0c <BSP_LCD_DisplayChar+0x84>)
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	3308      	adds	r3, #8
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6819      	ldr	r1, [r3, #0]
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002db6:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <BSP_LCD_DisplayChar+0x80>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4c14      	ldr	r4, [pc, #80]	; (8002e0c <BSP_LCD_DisplayChar+0x84>)
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4423      	add	r3, r4
 8002dc6:	3308      	adds	r3, #8
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002dcc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <BSP_LCD_DisplayChar+0x80>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4c0d      	ldr	r4, [pc, #52]	; (8002e0c <BSP_LCD_DisplayChar+0x84>)
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4423      	add	r3, r4
 8002de0:	3308      	adds	r3, #8
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	889b      	ldrh	r3, [r3, #4]
 8002de6:	3307      	adds	r3, #7
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	da00      	bge.n	8002dee <BSP_LCD_DisplayChar+0x66>
 8002dec:	3307      	adds	r3, #7
 8002dee:	10db      	asrs	r3, r3, #3
 8002df0:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002df4:	18ca      	adds	r2, r1, r3
 8002df6:	88b9      	ldrh	r1, [r7, #4]
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fce0 	bl	80037c0 <DrawChar>
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd90      	pop	{r4, r7, pc}
 8002e08:	20000428 	.word	0x20000428
 8002e0c:	2000042c 	.word	0x2000042c

08002e10 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002e10:	b5b0      	push	{r4, r5, r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60ba      	str	r2, [r7, #8]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	81fb      	strh	r3, [r7, #14]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	81bb      	strh	r3, [r7, #12]
 8002e22:	4613      	mov	r3, r2
 8002e24:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002e26:	2301      	movs	r3, #1
 8002e28:	83fb      	strh	r3, [r7, #30]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002e3a:	e002      	b.n	8002e42 <BSP_LCD_DisplayStringAt+0x32>
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	617a      	str	r2, [r7, #20]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f6      	bne.n	8002e3c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002e4e:	f7ff fea9 	bl	8002ba4 <BSP_LCD_GetXSize>
 8002e52:	4601      	mov	r1, r0
 8002e54:	4b50      	ldr	r3, [pc, #320]	; (8002f98 <BSP_LCD_DisplayStringAt+0x188>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4850      	ldr	r0, [pc, #320]	; (8002f9c <BSP_LCD_DisplayStringAt+0x18c>)
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4403      	add	r3, r0
 8002e64:	3308      	adds	r3, #8
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	889b      	ldrh	r3, [r3, #4]
 8002e6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e6e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d01c      	beq.n	8002eb0 <BSP_LCD_DisplayStringAt+0xa0>
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	dc33      	bgt.n	8002ee2 <BSP_LCD_DisplayStringAt+0xd2>
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d002      	beq.n	8002e84 <BSP_LCD_DisplayStringAt+0x74>
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d019      	beq.n	8002eb6 <BSP_LCD_DisplayStringAt+0xa6>
 8002e82:	e02e      	b.n	8002ee2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	1ad1      	subs	r1, r2, r3
 8002e8a:	4b43      	ldr	r3, [pc, #268]	; (8002f98 <BSP_LCD_DisplayStringAt+0x188>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4843      	ldr	r0, [pc, #268]	; (8002f9c <BSP_LCD_DisplayStringAt+0x18c>)
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4403      	add	r3, r0
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	889b      	ldrh	r3, [r3, #4]
 8002ea0:	fb03 f301 	mul.w	r3, r3, r1
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	89fb      	ldrh	r3, [r7, #14]
 8002eaa:	4413      	add	r3, r2
 8002eac:	83fb      	strh	r3, [r7, #30]
      break;
 8002eae:	e01b      	b.n	8002ee8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002eb0:	89fb      	ldrh	r3, [r7, #14]
 8002eb2:	83fb      	strh	r3, [r7, #30]
      break;
 8002eb4:	e018      	b.n	8002ee8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	b299      	uxth	r1, r3
 8002ebe:	4b36      	ldr	r3, [pc, #216]	; (8002f98 <BSP_LCD_DisplayStringAt+0x188>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4836      	ldr	r0, [pc, #216]	; (8002f9c <BSP_LCD_DisplayStringAt+0x18c>)
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4403      	add	r3, r0
 8002ece:	3308      	adds	r3, #8
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	889b      	ldrh	r3, [r3, #4]
 8002ed4:	fb11 f303 	smulbb	r3, r1, r3
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	89fb      	ldrh	r3, [r7, #14]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	83fb      	strh	r3, [r7, #30]
      break;
 8002ee0:	e002      	b.n	8002ee8 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002ee2:	89fb      	ldrh	r3, [r7, #14]
 8002ee4:	83fb      	strh	r3, [r7, #30]
      break;
 8002ee6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002ee8:	8bfb      	ldrh	r3, [r7, #30]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <BSP_LCD_DisplayStringAt+0xe6>
 8002eee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	da1d      	bge.n	8002f32 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002efa:	e01a      	b.n	8002f32 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	781a      	ldrb	r2, [r3, #0]
 8002f00:	89b9      	ldrh	r1, [r7, #12]
 8002f02:	8bfb      	ldrh	r3, [r7, #30]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff3f 	bl	8002d88 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002f0a:	4b23      	ldr	r3, [pc, #140]	; (8002f98 <BSP_LCD_DisplayStringAt+0x188>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4923      	ldr	r1, [pc, #140]	; (8002f9c <BSP_LCD_DisplayStringAt+0x18c>)
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	3308      	adds	r3, #8
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	889a      	ldrh	r2, [r3, #4]
 8002f20:	8bfb      	ldrh	r3, [r7, #30]
 8002f22:	4413      	add	r3, r2
 8002f24:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	60bb      	str	r3, [r7, #8]
    i++;
 8002f2c:	8bbb      	ldrh	r3, [r7, #28]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	bf14      	ite	ne
 8002f3a:	2301      	movne	r3, #1
 8002f3c:	2300      	moveq	r3, #0
 8002f3e:	b2dc      	uxtb	r4, r3
 8002f40:	f7ff fe30 	bl	8002ba4 <BSP_LCD_GetXSize>
 8002f44:	8bb9      	ldrh	r1, [r7, #28]
 8002f46:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <BSP_LCD_DisplayStringAt+0x188>)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	4d14      	ldr	r5, [pc, #80]	; (8002f9c <BSP_LCD_DisplayStringAt+0x18c>)
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	442b      	add	r3, r5
 8002f56:	3308      	adds	r3, #8
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	889b      	ldrh	r3, [r3, #4]
 8002f5c:	fb03 f301 	mul.w	r3, r3, r1
 8002f60:	1ac3      	subs	r3, r0, r3
 8002f62:	b299      	uxth	r1, r3
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <BSP_LCD_DisplayStringAt+0x188>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	480c      	ldr	r0, [pc, #48]	; (8002f9c <BSP_LCD_DisplayStringAt+0x18c>)
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4403      	add	r3, r0
 8002f74:	3308      	adds	r3, #8
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	889b      	ldrh	r3, [r3, #4]
 8002f7a:	4299      	cmp	r1, r3
 8002f7c:	bf2c      	ite	cs
 8002f7e:	2301      	movcs	r3, #1
 8002f80:	2300      	movcc	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	4023      	ands	r3, r4
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1b7      	bne.n	8002efc <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	3720      	adds	r7, #32
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bdb0      	pop	{r4, r5, r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000428 	.word	0x20000428
 8002f9c:	2000042c 	.word	0x2000042c

08002fa0 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002fa0:	b5b0      	push	{r4, r5, r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af02      	add	r7, sp, #8
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	80fb      	strh	r3, [r7, #6]
 8002faa:	460b      	mov	r3, r1
 8002fac:	80bb      	strh	r3, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002fb6:	4b26      	ldr	r3, [pc, #152]	; (8003050 <BSP_LCD_DrawHLine+0xb0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a26      	ldr	r2, [pc, #152]	; (8003054 <BSP_LCD_DrawHLine+0xb4>)
 8002fbc:	2134      	movs	r1, #52	; 0x34
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3348      	adds	r3, #72	; 0x48
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d114      	bne.n	8002ff6 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002fcc:	4b20      	ldr	r3, [pc, #128]	; (8003050 <BSP_LCD_DrawHLine+0xb0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a20      	ldr	r2, [pc, #128]	; (8003054 <BSP_LCD_DrawHLine+0xb4>)
 8002fd2:	2134      	movs	r1, #52	; 0x34
 8002fd4:	fb01 f303 	mul.w	r3, r1, r3
 8002fd8:	4413      	add	r3, r2
 8002fda:	335c      	adds	r3, #92	; 0x5c
 8002fdc:	681c      	ldr	r4, [r3, #0]
 8002fde:	f7ff fde1 	bl	8002ba4 <BSP_LCD_GetXSize>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	88bb      	ldrh	r3, [r7, #4]
 8002fe6:	fb03 f202 	mul.w	r2, r3, r2
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	4413      	add	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4423      	add	r3, r4
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	e013      	b.n	800301e <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002ff6:	4b16      	ldr	r3, [pc, #88]	; (8003050 <BSP_LCD_DrawHLine+0xb0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a16      	ldr	r2, [pc, #88]	; (8003054 <BSP_LCD_DrawHLine+0xb4>)
 8002ffc:	2134      	movs	r1, #52	; 0x34
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	335c      	adds	r3, #92	; 0x5c
 8003006:	681c      	ldr	r4, [r3, #0]
 8003008:	f7ff fdcc 	bl	8002ba4 <BSP_LCD_GetXSize>
 800300c:	4602      	mov	r2, r0
 800300e:	88bb      	ldrh	r3, [r7, #4]
 8003010:	fb03 f202 	mul.w	r2, r3, r2
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4423      	add	r3, r4
 800301c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800301e:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <BSP_LCD_DrawHLine+0xb0>)
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	68f9      	ldr	r1, [r7, #12]
 8003024:	887c      	ldrh	r4, [r7, #2]
 8003026:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <BSP_LCD_DrawHLine+0xb0>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4d0b      	ldr	r5, [pc, #44]	; (8003058 <BSP_LCD_DrawHLine+0xb8>)
 800302c:	4613      	mov	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	442b      	add	r3, r5
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	2300      	movs	r3, #0
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	2301      	movs	r3, #1
 8003040:	4622      	mov	r2, r4
 8003042:	f000 fc75 	bl	8003930 <LL_FillBuffer>
}
 8003046:	bf00      	nop
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bdb0      	pop	{r4, r5, r7, pc}
 800304e:	bf00      	nop
 8003050:	20000428 	.word	0x20000428
 8003054:	200048ec 	.word	0x200048ec
 8003058:	2000042c 	.word	0x2000042c

0800305c <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800305c:	b590      	push	{r4, r7, lr}
 800305e:	b08b      	sub	sp, #44	; 0x2c
 8003060:	af00      	add	r7, sp, #0
 8003062:	4604      	mov	r4, r0
 8003064:	4608      	mov	r0, r1
 8003066:	4611      	mov	r1, r2
 8003068:	461a      	mov	r2, r3
 800306a:	4623      	mov	r3, r4
 800306c:	80fb      	strh	r3, [r7, #6]
 800306e:	4603      	mov	r3, r0
 8003070:	80bb      	strh	r3, [r7, #4]
 8003072:	460b      	mov	r3, r1
 8003074:	807b      	strh	r3, [r7, #2]
 8003076:	4613      	mov	r3, r2
 8003078:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 800307a:	2300      	movs	r3, #0
 800307c:	823b      	strh	r3, [r7, #16]
 800307e:	2300      	movs	r3, #0
 8003080:	81fb      	strh	r3, [r7, #14]
 8003082:	2300      	movs	r3, #0
 8003084:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003086:	2300      	movs	r3, #0
 8003088:	84bb      	strh	r3, [r7, #36]	; 0x24
 800308a:	2300      	movs	r3, #0
 800308c:	847b      	strh	r3, [r7, #34]	; 0x22
 800308e:	2300      	movs	r3, #0
 8003090:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8003092:	2300      	movs	r3, #0
 8003094:	83fb      	strh	r3, [r7, #30]
 8003096:	2300      	movs	r3, #0
 8003098:	83bb      	strh	r3, [r7, #28]
 800309a:	2300      	movs	r3, #0
 800309c:	837b      	strh	r3, [r7, #26]
 800309e:	2300      	movs	r3, #0
 80030a0:	833b      	strh	r3, [r7, #24]
 80030a2:	2300      	movs	r3, #0
 80030a4:	82fb      	strh	r3, [r7, #22]
 80030a6:	2300      	movs	r3, #0
 80030a8:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80030ae:	887a      	ldrh	r2, [r7, #2]
 80030b0:	88fb      	ldrh	r3, [r7, #6]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bfb8      	it	lt
 80030b8:	425b      	neglt	r3, r3
 80030ba:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80030bc:	883a      	ldrh	r2, [r7, #0]
 80030be:	88bb      	ldrh	r3, [r7, #4]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bfb8      	it	lt
 80030c6:	425b      	neglt	r3, r3
 80030c8:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 80030ce:	88bb      	ldrh	r3, [r7, #4]
 80030d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d304      	bcc.n	80030e4 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80030da:	2301      	movs	r3, #1
 80030dc:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80030de:	2301      	movs	r3, #1
 80030e0:	843b      	strh	r3, [r7, #32]
 80030e2:	e005      	b.n	80030f0 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80030e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030e8:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 80030ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ee:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 80030f0:	883a      	ldrh	r2, [r7, #0]
 80030f2:	88bb      	ldrh	r3, [r7, #4]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d304      	bcc.n	8003102 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80030f8:	2301      	movs	r3, #1
 80030fa:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80030fc:	2301      	movs	r3, #1
 80030fe:	83bb      	strh	r3, [r7, #28]
 8003100:	e005      	b.n	800310e <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003102:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003106:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800310c:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800310e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003112:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003116:	429a      	cmp	r2, r3
 8003118:	db11      	blt.n	800313e <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800311a:	2300      	movs	r3, #0
 800311c:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800311e:	2300      	movs	r3, #0
 8003120:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003122:	8a3b      	ldrh	r3, [r7, #16]
 8003124:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003126:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800312a:	2b00      	cmp	r3, #0
 800312c:	da00      	bge.n	8003130 <BSP_LCD_DrawLine+0xd4>
 800312e:	3301      	adds	r3, #1
 8003130:	105b      	asrs	r3, r3, #1
 8003132:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8003134:	89fb      	ldrh	r3, [r7, #14]
 8003136:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8003138:	8a3b      	ldrh	r3, [r7, #16]
 800313a:	82bb      	strh	r3, [r7, #20]
 800313c:	e010      	b.n	8003160 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800313e:	2300      	movs	r3, #0
 8003140:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003142:	2300      	movs	r3, #0
 8003144:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003146:	89fb      	ldrh	r3, [r7, #14]
 8003148:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 800314a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800314e:	2b00      	cmp	r3, #0
 8003150:	da00      	bge.n	8003154 <BSP_LCD_DrawLine+0xf8>
 8003152:	3301      	adds	r3, #1
 8003154:	105b      	asrs	r3, r3, #1
 8003156:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8003158:	8a3b      	ldrh	r3, [r7, #16]
 800315a:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 800315c:	89fb      	ldrh	r3, [r7, #14]
 800315e:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8003160:	2300      	movs	r3, #0
 8003162:	827b      	strh	r3, [r7, #18]
 8003164:	e037      	b.n	80031d6 <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8003166:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003168:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800316a:	4b20      	ldr	r3, [pc, #128]	; (80031ec <BSP_LCD_DrawLine+0x190>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	4c20      	ldr	r4, [pc, #128]	; (80031f0 <BSP_LCD_DrawLine+0x194>)
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4423      	add	r3, r4
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	f000 f923 	bl	80033c8 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8003182:	8b3a      	ldrh	r2, [r7, #24]
 8003184:	8afb      	ldrh	r3, [r7, #22]
 8003186:	4413      	add	r3, r2
 8003188:	b29b      	uxth	r3, r3
 800318a:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 800318c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003190:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003194:	429a      	cmp	r2, r3
 8003196:	db0e      	blt.n	80031b6 <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003198:	8b3a      	ldrh	r2, [r7, #24]
 800319a:	8b7b      	ldrh	r3, [r7, #26]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	b29b      	uxth	r3, r3
 80031a0:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 80031a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80031a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80031a6:	4413      	add	r3, r2
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 80031ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031ae:	8bfb      	ldrh	r3, [r7, #30]
 80031b0:	4413      	add	r3, r2
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 80031b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80031b8:	8c3b      	ldrh	r3, [r7, #32]
 80031ba:	4413      	add	r3, r2
 80031bc:	b29b      	uxth	r3, r3
 80031be:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 80031c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031c2:	8bbb      	ldrh	r3, [r7, #28]
 80031c4:	4413      	add	r3, r2
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80031ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3301      	adds	r3, #1
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	827b      	strh	r3, [r7, #18]
 80031d6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80031da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80031de:	429a      	cmp	r2, r3
 80031e0:	ddc1      	ble.n	8003166 <BSP_LCD_DrawLine+0x10a>
  }
}
 80031e2:	bf00      	nop
 80031e4:	bf00      	nop
 80031e6:	372c      	adds	r7, #44	; 0x2c
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd90      	pop	{r4, r7, pc}
 80031ec:	20000428 	.word	0x20000428
 80031f0:	2000042c 	.word	0x2000042c

080031f4 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	80fb      	strh	r3, [r7, #6]
 80031fe:	460b      	mov	r3, r1
 8003200:	80bb      	strh	r3, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003206:	887b      	ldrh	r3, [r7, #2]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	f1c3 0303 	rsb	r3, r3, #3
 800320e:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003214:	887b      	ldrh	r3, [r7, #2]
 8003216:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8003218:	e0c7      	b.n	80033aa <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	b29a      	uxth	r2, r3
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	4413      	add	r3, r2
 8003222:	b298      	uxth	r0, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	b29b      	uxth	r3, r3
 8003228:	88ba      	ldrh	r2, [r7, #4]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	b299      	uxth	r1, r3
 800322e:	4b64      	ldr	r3, [pc, #400]	; (80033c0 <BSP_LCD_DrawCircle+0x1cc>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4c64      	ldr	r4, [pc, #400]	; (80033c4 <BSP_LCD_DrawCircle+0x1d0>)
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4423      	add	r3, r4
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	f000 f8c1 	bl	80033c8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	b29b      	uxth	r3, r3
 800324a:	88fa      	ldrh	r2, [r7, #6]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	b298      	uxth	r0, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	b29b      	uxth	r3, r3
 8003254:	88ba      	ldrh	r2, [r7, #4]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	b299      	uxth	r1, r3
 800325a:	4b59      	ldr	r3, [pc, #356]	; (80033c0 <BSP_LCD_DrawCircle+0x1cc>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4c59      	ldr	r4, [pc, #356]	; (80033c4 <BSP_LCD_DrawCircle+0x1d0>)
 8003260:	4613      	mov	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4423      	add	r3, r4
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	f000 f8ab 	bl	80033c8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	b29a      	uxth	r2, r3
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	4413      	add	r3, r2
 800327a:	b298      	uxth	r0, r3
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	b29b      	uxth	r3, r3
 8003280:	88ba      	ldrh	r2, [r7, #4]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	b299      	uxth	r1, r3
 8003286:	4b4e      	ldr	r3, [pc, #312]	; (80033c0 <BSP_LCD_DrawCircle+0x1cc>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	4c4e      	ldr	r4, [pc, #312]	; (80033c4 <BSP_LCD_DrawCircle+0x1d0>)
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4423      	add	r3, r4
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	f000 f895 	bl	80033c8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	88fa      	ldrh	r2, [r7, #6]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	b298      	uxth	r0, r3
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	88ba      	ldrh	r2, [r7, #4]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	b299      	uxth	r1, r3
 80032b2:	4b43      	ldr	r3, [pc, #268]	; (80033c0 <BSP_LCD_DrawCircle+0x1cc>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	4c43      	ldr	r4, [pc, #268]	; (80033c4 <BSP_LCD_DrawCircle+0x1d0>)
 80032b8:	4613      	mov	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4423      	add	r3, r4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	f000 f87f 	bl	80033c8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	4413      	add	r3, r2
 80032d2:	b298      	uxth	r0, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	88bb      	ldrh	r3, [r7, #4]
 80032da:	4413      	add	r3, r2
 80032dc:	b299      	uxth	r1, r3
 80032de:	4b38      	ldr	r3, [pc, #224]	; (80033c0 <BSP_LCD_DrawCircle+0x1cc>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	4c38      	ldr	r4, [pc, #224]	; (80033c4 <BSP_LCD_DrawCircle+0x1d0>)
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4423      	add	r3, r4
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	f000 f869 	bl	80033c8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	88fa      	ldrh	r2, [r7, #6]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	b298      	uxth	r0, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	b29a      	uxth	r2, r3
 8003304:	88bb      	ldrh	r3, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	b299      	uxth	r1, r3
 800330a:	4b2d      	ldr	r3, [pc, #180]	; (80033c0 <BSP_LCD_DrawCircle+0x1cc>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4c2d      	ldr	r4, [pc, #180]	; (80033c4 <BSP_LCD_DrawCircle+0x1d0>)
 8003310:	4613      	mov	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4423      	add	r3, r4
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	f000 f853 	bl	80033c8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	b29a      	uxth	r2, r3
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	4413      	add	r3, r2
 800332a:	b298      	uxth	r0, r3
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	b29a      	uxth	r2, r3
 8003330:	88bb      	ldrh	r3, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	b299      	uxth	r1, r3
 8003336:	4b22      	ldr	r3, [pc, #136]	; (80033c0 <BSP_LCD_DrawCircle+0x1cc>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	4c22      	ldr	r4, [pc, #136]	; (80033c4 <BSP_LCD_DrawCircle+0x1d0>)
 800333c:	4613      	mov	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4423      	add	r3, r4
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	f000 f83d 	bl	80033c8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	b29b      	uxth	r3, r3
 8003352:	88fa      	ldrh	r2, [r7, #6]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	b298      	uxth	r0, r3
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	b29a      	uxth	r2, r3
 800335c:	88bb      	ldrh	r3, [r7, #4]
 800335e:	4413      	add	r3, r2
 8003360:	b299      	uxth	r1, r3
 8003362:	4b17      	ldr	r3, [pc, #92]	; (80033c0 <BSP_LCD_DrawCircle+0x1cc>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4c17      	ldr	r4, [pc, #92]	; (80033c4 <BSP_LCD_DrawCircle+0x1d0>)
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4423      	add	r3, r4
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	f000 f827 	bl	80033c8 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b00      	cmp	r3, #0
 800337e:	da06      	bge.n	800338e <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	009a      	lsls	r2, r3, #2
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	4413      	add	r3, r2
 8003388:	3306      	adds	r3, #6
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	e00a      	b.n	80033a4 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	009a      	lsls	r2, r3, #2
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	4413      	add	r3, r2
 800339a:	330a      	adds	r3, #10
 800339c:	617b      	str	r3, [r7, #20]
      current_y--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	3b01      	subs	r3, #1
 80033a2:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	3301      	adds	r3, #1
 80033a8:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	f67f af33 	bls.w	800321a <BSP_LCD_DrawCircle+0x26>
  } 
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd90      	pop	{r4, r7, pc}
 80033be:	bf00      	nop
 80033c0:	20000428 	.word	0x20000428
 80033c4:	2000042c 	.word	0x2000042c

080033c8 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80033c8:	b5b0      	push	{r4, r5, r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	603a      	str	r2, [r7, #0]
 80033d2:	80fb      	strh	r3, [r7, #6]
 80033d4:	460b      	mov	r3, r1
 80033d6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80033d8:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <BSP_LCD_DrawPixel+0x88>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1d      	ldr	r2, [pc, #116]	; (8003454 <BSP_LCD_DrawPixel+0x8c>)
 80033de:	2134      	movs	r1, #52	; 0x34
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	4413      	add	r3, r2
 80033e6:	3348      	adds	r3, #72	; 0x48
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d116      	bne.n	800341c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80033ee:	4b18      	ldr	r3, [pc, #96]	; (8003450 <BSP_LCD_DrawPixel+0x88>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a18      	ldr	r2, [pc, #96]	; (8003454 <BSP_LCD_DrawPixel+0x8c>)
 80033f4:	2134      	movs	r1, #52	; 0x34
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	4413      	add	r3, r2
 80033fc:	335c      	adds	r3, #92	; 0x5c
 80033fe:	681c      	ldr	r4, [r3, #0]
 8003400:	88bd      	ldrh	r5, [r7, #4]
 8003402:	f7ff fbcf 	bl	8002ba4 <BSP_LCD_GetXSize>
 8003406:	4603      	mov	r3, r0
 8003408:	fb03 f205 	mul.w	r2, r3, r5
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	4413      	add	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4423      	add	r3, r4
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	b292      	uxth	r2, r2
 8003418:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800341a:	e015      	b.n	8003448 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <BSP_LCD_DrawPixel+0x88>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0c      	ldr	r2, [pc, #48]	; (8003454 <BSP_LCD_DrawPixel+0x8c>)
 8003422:	2134      	movs	r1, #52	; 0x34
 8003424:	fb01 f303 	mul.w	r3, r1, r3
 8003428:	4413      	add	r3, r2
 800342a:	335c      	adds	r3, #92	; 0x5c
 800342c:	681c      	ldr	r4, [r3, #0]
 800342e:	88bd      	ldrh	r5, [r7, #4]
 8003430:	f7ff fbb8 	bl	8002ba4 <BSP_LCD_GetXSize>
 8003434:	4603      	mov	r3, r0
 8003436:	fb03 f205 	mul.w	r2, r3, r5
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4423      	add	r3, r4
 8003442:	461a      	mov	r2, r3
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6013      	str	r3, [r2, #0]
}
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bdb0      	pop	{r4, r5, r7, pc}
 8003450:	20000428 	.word	0x20000428
 8003454:	200048ec 	.word	0x200048ec

08003458 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	80fb      	strh	r3, [r7, #6]
 8003462:	460b      	mov	r3, r1
 8003464:	80bb      	strh	r3, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800346a:	887b      	ldrh	r3, [r7, #2]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	f1c3 0303 	rsb	r3, r3, #3
 8003472:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003478:	887b      	ldrh	r3, [r7, #2]
 800347a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800347c:	4b44      	ldr	r3, [pc, #272]	; (8003590 <BSP_LCD_FillCircle+0x138>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4944      	ldr	r1, [pc, #272]	; (8003594 <BSP_LCD_FillCircle+0x13c>)
 8003482:	4613      	mov	r3, r2
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fc20 	bl	8002cd4 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8003494:	e061      	b.n	800355a <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d021      	beq.n	80034e0 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	88fa      	ldrh	r2, [r7, #6]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	b298      	uxth	r0, r3
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	88bb      	ldrh	r3, [r7, #4]
 80034ac:	4413      	add	r3, r2
 80034ae:	b299      	uxth	r1, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	461a      	mov	r2, r3
 80034ba:	f7ff fd71 	bl	8002fa0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	88fa      	ldrh	r2, [r7, #6]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	b298      	uxth	r0, r3
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	88ba      	ldrh	r2, [r7, #4]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	b299      	uxth	r1, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	b29b      	uxth	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	f7ff fd60 	bl	8002fa0 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d021      	beq.n	800352a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	88fa      	ldrh	r2, [r7, #6]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	b298      	uxth	r0, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	88ba      	ldrh	r2, [r7, #4]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	b299      	uxth	r1, r3
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	b29b      	uxth	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	f7ff fd4c 	bl	8002fa0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	b29b      	uxth	r3, r3
 800350c:	88fa      	ldrh	r2, [r7, #6]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	b298      	uxth	r0, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	b29a      	uxth	r2, r3
 8003516:	88bb      	ldrh	r3, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	b299      	uxth	r1, r3
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	b29b      	uxth	r3, r3
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	b29b      	uxth	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	f7ff fd3b 	bl	8002fa0 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	da06      	bge.n	800353e <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	009a      	lsls	r2, r3, #2
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	4413      	add	r3, r2
 8003538:	3306      	adds	r3, #6
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	e00a      	b.n	8003554 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	009a      	lsls	r2, r3, #2
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	4413      	add	r3, r2
 800354a:	330a      	adds	r3, #10
 800354c:	617b      	str	r3, [r7, #20]
      current_y--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3b01      	subs	r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	3301      	adds	r3, #1
 8003558:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	429a      	cmp	r2, r3
 8003560:	d999      	bls.n	8003496 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <BSP_LCD_FillCircle+0x138>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	490b      	ldr	r1, [pc, #44]	; (8003594 <BSP_LCD_FillCircle+0x13c>)
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff fbad 	bl	8002cd4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800357a:	887a      	ldrh	r2, [r7, #2]
 800357c:	88b9      	ldrh	r1, [r7, #4]
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fe37 	bl	80031f4 <BSP_LCD_DrawCircle>
}
 8003586:	bf00      	nop
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20000428 	.word	0x20000428
 8003594:	2000042c 	.word	0x2000042c

08003598 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800359c:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <BSP_LCD_DisplayOn+0x30>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <BSP_LCD_DisplayOn+0x30>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80035ac:	2201      	movs	r2, #1
 80035ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035b2:	4806      	ldr	r0, [pc, #24]	; (80035cc <BSP_LCD_DisplayOn+0x34>)
 80035b4:	f003 f8fc 	bl	80067b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80035b8:	2201      	movs	r2, #1
 80035ba:	2108      	movs	r1, #8
 80035bc:	4804      	ldr	r0, [pc, #16]	; (80035d0 <BSP_LCD_DisplayOn+0x38>)
 80035be:	f003 f8f7 	bl	80067b0 <HAL_GPIO_WritePin>
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	200048ec 	.word	0x200048ec
 80035cc:	40022000 	.word	0x40022000
 80035d0:	40022800 	.word	0x40022800

080035d4 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b090      	sub	sp, #64	; 0x40
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80035de:	4b64      	ldr	r3, [pc, #400]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	4a63      	ldr	r2, [pc, #396]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 80035e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035e8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ea:	4b61      	ldr	r3, [pc, #388]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80035f6:	4b5e      	ldr	r3, [pc, #376]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	4a5d      	ldr	r2, [pc, #372]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 80035fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003600:	6313      	str	r3, [r2, #48]	; 0x30
 8003602:	4b5b      	ldr	r3, [pc, #364]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800360e:	4b58      	ldr	r3, [pc, #352]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	4a57      	ldr	r2, [pc, #348]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 8003614:	f043 0310 	orr.w	r3, r3, #16
 8003618:	6313      	str	r3, [r2, #48]	; 0x30
 800361a:	4b55      	ldr	r3, [pc, #340]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	623b      	str	r3, [r7, #32]
 8003624:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003626:	4b52      	ldr	r3, [pc, #328]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	4a51      	ldr	r2, [pc, #324]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 800362c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003630:	6313      	str	r3, [r2, #48]	; 0x30
 8003632:	4b4f      	ldr	r3, [pc, #316]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	61fb      	str	r3, [r7, #28]
 800363c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800363e:	4b4c      	ldr	r3, [pc, #304]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	4a4b      	ldr	r2, [pc, #300]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 8003644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003648:	6313      	str	r3, [r2, #48]	; 0x30
 800364a:	4b49      	ldr	r3, [pc, #292]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003656:	4b46      	ldr	r3, [pc, #280]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	4a45      	ldr	r2, [pc, #276]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 800365c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003660:	6313      	str	r3, [r2, #48]	; 0x30
 8003662:	4b43      	ldr	r3, [pc, #268]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800366e:	4b40      	ldr	r3, [pc, #256]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	4a3f      	ldr	r2, [pc, #252]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 8003674:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003678:	6313      	str	r3, [r2, #48]	; 0x30
 800367a:	4b3d      	ldr	r3, [pc, #244]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003686:	4b3a      	ldr	r3, [pc, #232]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	4a39      	ldr	r2, [pc, #228]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 800368c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003690:	6313      	str	r3, [r2, #48]	; 0x30
 8003692:	4b37      	ldr	r3, [pc, #220]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800369e:	4b34      	ldr	r3, [pc, #208]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	4a33      	ldr	r2, [pc, #204]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 80036a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036a8:	6313      	str	r3, [r2, #48]	; 0x30
 80036aa:	4b31      	ldr	r3, [pc, #196]	; (8003770 <BSP_LCD_MspInit+0x19c>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80036b6:	2310      	movs	r3, #16
 80036b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80036ba:	2302      	movs	r3, #2
 80036bc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80036c2:	2302      	movs	r3, #2
 80036c4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80036c6:	230e      	movs	r3, #14
 80036c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80036ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036ce:	4619      	mov	r1, r3
 80036d0:	4828      	ldr	r0, [pc, #160]	; (8003774 <BSP_LCD_MspInit+0x1a0>)
 80036d2:	f002 fdb5 	bl	8006240 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80036d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036da:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80036dc:	2302      	movs	r3, #2
 80036de:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80036e0:	2309      	movs	r3, #9
 80036e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80036e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036e8:	4619      	mov	r1, r3
 80036ea:	4823      	ldr	r0, [pc, #140]	; (8003778 <BSP_LCD_MspInit+0x1a4>)
 80036ec:	f002 fda8 	bl	8006240 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80036f0:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80036f6:	2302      	movs	r3, #2
 80036f8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80036fa:	230e      	movs	r3, #14
 80036fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80036fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003702:	4619      	mov	r1, r3
 8003704:	481d      	ldr	r0, [pc, #116]	; (800377c <BSP_LCD_MspInit+0x1a8>)
 8003706:	f002 fd9b 	bl	8006240 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800370a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800370e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003710:	2302      	movs	r3, #2
 8003712:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003714:	230e      	movs	r3, #14
 8003716:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003718:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800371c:	4619      	mov	r1, r3
 800371e:	4818      	ldr	r0, [pc, #96]	; (8003780 <BSP_LCD_MspInit+0x1ac>)
 8003720:	f002 fd8e 	bl	8006240 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003724:	23f7      	movs	r3, #247	; 0xf7
 8003726:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003728:	2302      	movs	r3, #2
 800372a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800372c:	230e      	movs	r3, #14
 800372e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003734:	4619      	mov	r1, r3
 8003736:	4813      	ldr	r0, [pc, #76]	; (8003784 <BSP_LCD_MspInit+0x1b0>)
 8003738:	f002 fd82 	bl	8006240 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800373c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003742:	2301      	movs	r3, #1
 8003744:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800374a:	4619      	mov	r1, r3
 800374c:	480b      	ldr	r0, [pc, #44]	; (800377c <BSP_LCD_MspInit+0x1a8>)
 800374e:	f002 fd77 	bl	8006240 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003752:	2308      	movs	r3, #8
 8003754:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003756:	2301      	movs	r3, #1
 8003758:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800375a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800375e:	4619      	mov	r1, r3
 8003760:	4808      	ldr	r0, [pc, #32]	; (8003784 <BSP_LCD_MspInit+0x1b0>)
 8003762:	f002 fd6d 	bl	8006240 <HAL_GPIO_Init>
}
 8003766:	bf00      	nop
 8003768:	3740      	adds	r7, #64	; 0x40
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800
 8003774:	40021000 	.word	0x40021000
 8003778:	40021800 	.word	0x40021800
 800377c:	40022000 	.word	0x40022000
 8003780:	40022400 	.word	0x40022400
 8003784:	40022800 	.word	0x40022800

08003788 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <BSP_LCD_ClockConfig+0x34>)
 8003794:	2208      	movs	r2, #8
 8003796:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <BSP_LCD_ClockConfig+0x34>)
 800379a:	22c0      	movs	r2, #192	; 0xc0
 800379c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800379e:	4b07      	ldr	r3, [pc, #28]	; (80037bc <BSP_LCD_ClockConfig+0x34>)
 80037a0:	2205      	movs	r2, #5
 80037a2:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <BSP_LCD_ClockConfig+0x34>)
 80037a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037aa:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80037ac:	4803      	ldr	r0, [pc, #12]	; (80037bc <BSP_LCD_ClockConfig+0x34>)
 80037ae:	f004 ff09 	bl	80085c4 <HAL_RCCEx_PeriphCLKConfig>
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000444 	.word	0x20000444

080037c0 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	603a      	str	r2, [r7, #0]
 80037ca:	80fb      	strh	r3, [r7, #6]
 80037cc:	460b      	mov	r3, r1
 80037ce:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	2300      	movs	r3, #0
 80037d6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80037d8:	4b53      	ldr	r3, [pc, #332]	; (8003928 <DrawChar+0x168>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4953      	ldr	r1, [pc, #332]	; (800392c <DrawChar+0x16c>)
 80037de:	4613      	mov	r3, r2
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	3308      	adds	r3, #8
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	88db      	ldrh	r3, [r3, #6]
 80037ee:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80037f0:	4b4d      	ldr	r3, [pc, #308]	; (8003928 <DrawChar+0x168>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	494d      	ldr	r1, [pc, #308]	; (800392c <DrawChar+0x16c>)
 80037f6:	4613      	mov	r3, r2
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	3308      	adds	r3, #8
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	889b      	ldrh	r3, [r3, #4]
 8003806:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003808:	8a3b      	ldrh	r3, [r7, #16]
 800380a:	3307      	adds	r3, #7
 800380c:	2b00      	cmp	r3, #0
 800380e:	da00      	bge.n	8003812 <DrawChar+0x52>
 8003810:	3307      	adds	r3, #7
 8003812:	10db      	asrs	r3, r3, #3
 8003814:	b2db      	uxtb	r3, r3
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	b2da      	uxtb	r2, r3
 800381a:	8a3b      	ldrh	r3, [r7, #16]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	e076      	b.n	8003916 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003828:	8a3b      	ldrh	r3, [r7, #16]
 800382a:	3307      	adds	r3, #7
 800382c:	2b00      	cmp	r3, #0
 800382e:	da00      	bge.n	8003832 <DrawChar+0x72>
 8003830:	3307      	adds	r3, #7
 8003832:	10db      	asrs	r3, r3, #3
 8003834:	461a      	mov	r2, r3
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	fb03 f302 	mul.w	r3, r3, r2
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	4413      	add	r3, r2
 8003840:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003842:	8a3b      	ldrh	r3, [r7, #16]
 8003844:	3307      	adds	r3, #7
 8003846:	2b00      	cmp	r3, #0
 8003848:	da00      	bge.n	800384c <DrawChar+0x8c>
 800384a:	3307      	adds	r3, #7
 800384c:	10db      	asrs	r3, r3, #3
 800384e:	2b01      	cmp	r3, #1
 8003850:	d002      	beq.n	8003858 <DrawChar+0x98>
 8003852:	2b02      	cmp	r3, #2
 8003854:	d004      	beq.n	8003860 <DrawChar+0xa0>
 8003856:	e00c      	b.n	8003872 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	617b      	str	r3, [r7, #20]
      break;
 800385e:	e016      	b.n	800388e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	021b      	lsls	r3, r3, #8
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	3201      	adds	r2, #1
 800386a:	7812      	ldrb	r2, [r2, #0]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
      break;
 8003870:	e00d      	b.n	800388e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	041a      	lsls	r2, r3, #16
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	3301      	adds	r3, #1
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	021b      	lsls	r3, r3, #8
 8003880:	4313      	orrs	r3, r2
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	3202      	adds	r2, #2
 8003886:	7812      	ldrb	r2, [r2, #0]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
      break;
 800388c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800388e:	2300      	movs	r3, #0
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	e036      	b.n	8003902 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003894:	8a3a      	ldrh	r2, [r7, #16]
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	1ad2      	subs	r2, r2, r3
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	4413      	add	r3, r2
 800389e:	3b01      	subs	r3, #1
 80038a0:	2201      	movs	r2, #1
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	461a      	mov	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d012      	beq.n	80038d6 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	4413      	add	r3, r2
 80038b8:	b298      	uxth	r0, r3
 80038ba:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <DrawChar+0x168>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	491b      	ldr	r1, [pc, #108]	; (800392c <DrawChar+0x16c>)
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	88bb      	ldrh	r3, [r7, #4]
 80038ce:	4619      	mov	r1, r3
 80038d0:	f7ff fd7a 	bl	80033c8 <BSP_LCD_DrawPixel>
 80038d4:	e012      	b.n	80038fc <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	b29a      	uxth	r2, r3
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	4413      	add	r3, r2
 80038de:	b298      	uxth	r0, r3
 80038e0:	4b11      	ldr	r3, [pc, #68]	; (8003928 <DrawChar+0x168>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	4911      	ldr	r1, [pc, #68]	; (800392c <DrawChar+0x16c>)
 80038e6:	4613      	mov	r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	3304      	adds	r3, #4
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	88bb      	ldrh	r3, [r7, #4]
 80038f6:	4619      	mov	r1, r3
 80038f8:	f7ff fd66 	bl	80033c8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	3301      	adds	r3, #1
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	8a3b      	ldrh	r3, [r7, #16]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	429a      	cmp	r2, r3
 8003908:	d3c4      	bcc.n	8003894 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800390a:	88bb      	ldrh	r3, [r7, #4]
 800390c:	3301      	adds	r3, #1
 800390e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	3301      	adds	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	8a7b      	ldrh	r3, [r7, #18]
 8003918:	69fa      	ldr	r2, [r7, #28]
 800391a:	429a      	cmp	r2, r3
 800391c:	d384      	bcc.n	8003828 <DrawChar+0x68>
  }
}
 800391e:	bf00      	nop
 8003920:	bf00      	nop
 8003922:	3720      	adds	r7, #32
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20000428 	.word	0x20000428
 800392c:	2000042c 	.word	0x2000042c

08003930 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800393e:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <LL_FillBuffer+0x88>)
 8003940:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003944:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003946:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <LL_FillBuffer+0x8c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <LL_FillBuffer+0x90>)
 800394c:	2134      	movs	r1, #52	; 0x34
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	4413      	add	r3, r2
 8003954:	3348      	adds	r3, #72	; 0x48
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d103      	bne.n	8003964 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800395c:	4b16      	ldr	r3, [pc, #88]	; (80039b8 <LL_FillBuffer+0x88>)
 800395e:	2202      	movs	r2, #2
 8003960:	609a      	str	r2, [r3, #8]
 8003962:	e002      	b.n	800396a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003964:	4b14      	ldr	r3, [pc, #80]	; (80039b8 <LL_FillBuffer+0x88>)
 8003966:	2200      	movs	r2, #0
 8003968:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800396a:	4a13      	ldr	r2, [pc, #76]	; (80039b8 <LL_FillBuffer+0x88>)
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003970:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <LL_FillBuffer+0x88>)
 8003972:	4a14      	ldr	r2, [pc, #80]	; (80039c4 <LL_FillBuffer+0x94>)
 8003974:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003976:	4810      	ldr	r0, [pc, #64]	; (80039b8 <LL_FillBuffer+0x88>)
 8003978:	f002 f8c6 	bl	8005b08 <HAL_DMA2D_Init>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d115      	bne.n	80039ae <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003982:	68f9      	ldr	r1, [r7, #12]
 8003984:	480c      	ldr	r0, [pc, #48]	; (80039b8 <LL_FillBuffer+0x88>)
 8003986:	f002 fb2d 	bl	8005fe4 <HAL_DMA2D_ConfigLayer>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10e      	bne.n	80039ae <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69f9      	ldr	r1, [r7, #28]
 800399a:	4807      	ldr	r0, [pc, #28]	; (80039b8 <LL_FillBuffer+0x88>)
 800399c:	f002 f8fe 	bl	8005b9c <HAL_DMA2D_Start>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d103      	bne.n	80039ae <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80039a6:	210a      	movs	r1, #10
 80039a8:	4803      	ldr	r0, [pc, #12]	; (80039b8 <LL_FillBuffer+0x88>)
 80039aa:	f002 f922 	bl	8005bf2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	200003e8 	.word	0x200003e8
 80039bc:	20000428 	.word	0x20000428
 80039c0:	200048ec 	.word	0x200048ec
 80039c4:	4002b000 	.word	0x4002b000

080039c8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80039cc:	4b29      	ldr	r3, [pc, #164]	; (8003a74 <BSP_SDRAM_Init+0xac>)
 80039ce:	4a2a      	ldr	r2, [pc, #168]	; (8003a78 <BSP_SDRAM_Init+0xb0>)
 80039d0:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80039d2:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <BSP_SDRAM_Init+0xb4>)
 80039d4:	2202      	movs	r2, #2
 80039d6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80039d8:	4b28      	ldr	r3, [pc, #160]	; (8003a7c <BSP_SDRAM_Init+0xb4>)
 80039da:	2207      	movs	r2, #7
 80039dc:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80039de:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <BSP_SDRAM_Init+0xb4>)
 80039e0:	2204      	movs	r2, #4
 80039e2:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80039e4:	4b25      	ldr	r3, [pc, #148]	; (8003a7c <BSP_SDRAM_Init+0xb4>)
 80039e6:	2207      	movs	r2, #7
 80039e8:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80039ea:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <BSP_SDRAM_Init+0xb4>)
 80039ec:	2202      	movs	r2, #2
 80039ee:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80039f0:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <BSP_SDRAM_Init+0xb4>)
 80039f2:	2202      	movs	r2, #2
 80039f4:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80039f6:	4b21      	ldr	r3, [pc, #132]	; (8003a7c <BSP_SDRAM_Init+0xb4>)
 80039f8:	2202      	movs	r2, #2
 80039fa:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80039fc:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <BSP_SDRAM_Init+0xac>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003a02:	4b1c      	ldr	r3, [pc, #112]	; (8003a74 <BSP_SDRAM_Init+0xac>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003a08:	4b1a      	ldr	r3, [pc, #104]	; (8003a74 <BSP_SDRAM_Init+0xac>)
 8003a0a:	2204      	movs	r2, #4
 8003a0c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003a0e:	4b19      	ldr	r3, [pc, #100]	; (8003a74 <BSP_SDRAM_Init+0xac>)
 8003a10:	2210      	movs	r2, #16
 8003a12:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003a14:	4b17      	ldr	r3, [pc, #92]	; (8003a74 <BSP_SDRAM_Init+0xac>)
 8003a16:	2240      	movs	r2, #64	; 0x40
 8003a18:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003a1a:	4b16      	ldr	r3, [pc, #88]	; (8003a74 <BSP_SDRAM_Init+0xac>)
 8003a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a20:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003a22:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <BSP_SDRAM_Init+0xac>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003a28:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <BSP_SDRAM_Init+0xac>)
 8003a2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a2e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003a30:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <BSP_SDRAM_Init+0xac>)
 8003a32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003a38:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <BSP_SDRAM_Init+0xac>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003a3e:	2100      	movs	r1, #0
 8003a40:	480c      	ldr	r0, [pc, #48]	; (8003a74 <BSP_SDRAM_Init+0xac>)
 8003a42:	f000 f87f 	bl	8003b44 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003a46:	490d      	ldr	r1, [pc, #52]	; (8003a7c <BSP_SDRAM_Init+0xb4>)
 8003a48:	480a      	ldr	r0, [pc, #40]	; (8003a74 <BSP_SDRAM_Init+0xac>)
 8003a4a:	f005 fe03 	bl	8009654 <HAL_SDRAM_Init>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003a54:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <BSP_SDRAM_Init+0xb8>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
 8003a5a:	e002      	b.n	8003a62 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003a5c:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <BSP_SDRAM_Init+0xb8>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003a62:	f240 6003 	movw	r0, #1539	; 0x603
 8003a66:	f000 f80d 	bl	8003a84 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <BSP_SDRAM_Init+0xb8>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20004994 	.word	0x20004994
 8003a78:	a0000140 	.word	0xa0000140
 8003a7c:	200004c8 	.word	0x200004c8
 8003a80:	2000004c 	.word	0x2000004c

08003a84 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003a90:	4b2a      	ldr	r3, [pc, #168]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a96:	4b29      	ldr	r3, [pc, #164]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a98:	2210      	movs	r2, #16
 8003a9a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003a9c:	4b27      	ldr	r3, [pc, #156]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003aa2:	4b26      	ldr	r3, [pc, #152]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003aa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aac:	4923      	ldr	r1, [pc, #140]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003aae:	4824      	ldr	r0, [pc, #144]	; (8003b40 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ab0:	f005 fe04 	bl	80096bc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	f001 f867 	bl	8004b88 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003aba:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003abc:	2202      	movs	r2, #2
 8003abe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003ac0:	4b1e      	ldr	r3, [pc, #120]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ac2:	2210      	movs	r2, #16
 8003ac4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003acc:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad6:	4919      	ldr	r1, [pc, #100]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ad8:	4819      	ldr	r0, [pc, #100]	; (8003b40 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ada:	f005 fdef 	bl	80096bc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003ade:	4b17      	ldr	r3, [pc, #92]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003ae4:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003aea:	4b14      	ldr	r3, [pc, #80]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003aec:	2208      	movs	r2, #8
 8003aee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003af0:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003afa:	4910      	ldr	r1, [pc, #64]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003afc:	4810      	ldr	r0, [pc, #64]	; (8003b40 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003afe:	f005 fddd 	bl	80096bc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003b02:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003b06:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b10:	2210      	movs	r2, #16
 8003b12:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003b14:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4a07      	ldr	r2, [pc, #28]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b1e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b24:	4905      	ldr	r1, [pc, #20]	; (8003b3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b26:	4806      	ldr	r0, [pc, #24]	; (8003b40 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b28:	f005 fdc8 	bl	80096bc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	4804      	ldr	r0, [pc, #16]	; (8003b40 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b30:	f005 fdf9 	bl	8009726 <HAL_SDRAM_ProgramRefreshRate>
}
 8003b34:	bf00      	nop
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	200004e4 	.word	0x200004e4
 8003b40:	20004994 	.word	0x20004994

08003b44 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b090      	sub	sp, #64	; 0x40
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003b4e:	4b70      	ldr	r3, [pc, #448]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b52:	4a6f      	ldr	r2, [pc, #444]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	6393      	str	r3, [r2, #56]	; 0x38
 8003b5a:	4b6d      	ldr	r3, [pc, #436]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003b66:	4b6a      	ldr	r3, [pc, #424]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	4a69      	ldr	r2, [pc, #420]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003b6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b70:	6313      	str	r3, [r2, #48]	; 0x30
 8003b72:	4b67      	ldr	r3, [pc, #412]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b7e:	4b64      	ldr	r3, [pc, #400]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	4a63      	ldr	r2, [pc, #396]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003b84:	f043 0304 	orr.w	r3, r3, #4
 8003b88:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8a:	4b61      	ldr	r3, [pc, #388]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	623b      	str	r3, [r7, #32]
 8003b94:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b96:	4b5e      	ldr	r3, [pc, #376]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	4a5d      	ldr	r2, [pc, #372]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003b9c:	f043 0308 	orr.w	r3, r3, #8
 8003ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba2:	4b5b      	ldr	r3, [pc, #364]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bae:	4b58      	ldr	r3, [pc, #352]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	4a57      	ldr	r2, [pc, #348]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003bb4:	f043 0310 	orr.w	r3, r3, #16
 8003bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bba:	4b55      	ldr	r3, [pc, #340]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bc6:	4b52      	ldr	r3, [pc, #328]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	4a51      	ldr	r2, [pc, #324]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003bcc:	f043 0320 	orr.w	r3, r3, #32
 8003bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd2:	4b4f      	ldr	r3, [pc, #316]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003bde:	4b4c      	ldr	r3, [pc, #304]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	4a4b      	ldr	r2, [pc, #300]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003be8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bea:	4b49      	ldr	r3, [pc, #292]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003bf6:	4b46      	ldr	r3, [pc, #280]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	4a45      	ldr	r2, [pc, #276]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c00:	6313      	str	r3, [r2, #48]	; 0x30
 8003c02:	4b43      	ldr	r3, [pc, #268]	; (8003d10 <BSP_SDRAM_MspInit+0x1cc>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003c12:	2301      	movs	r3, #1
 8003c14:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003c16:	2302      	movs	r3, #2
 8003c18:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003c1a:	230c      	movs	r3, #12
 8003c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003c1e:	2308      	movs	r3, #8
 8003c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c26:	4619      	mov	r1, r3
 8003c28:	483a      	ldr	r0, [pc, #232]	; (8003d14 <BSP_SDRAM_MspInit+0x1d0>)
 8003c2a:	f002 fb09 	bl	8006240 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003c2e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003c32:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4837      	ldr	r0, [pc, #220]	; (8003d18 <BSP_SDRAM_MspInit+0x1d4>)
 8003c3c:	f002 fb00 	bl	8006240 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003c40:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003c46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4833      	ldr	r0, [pc, #204]	; (8003d1c <BSP_SDRAM_MspInit+0x1d8>)
 8003c4e:	f002 faf7 	bl	8006240 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003c52:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4830      	ldr	r0, [pc, #192]	; (8003d20 <BSP_SDRAM_MspInit+0x1dc>)
 8003c60:	f002 faee 	bl	8006240 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003c64:	f248 1333 	movw	r3, #33075	; 0x8133
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c6e:	4619      	mov	r1, r3
 8003c70:	482c      	ldr	r0, [pc, #176]	; (8003d24 <BSP_SDRAM_MspInit+0x1e0>)
 8003c72:	f002 fae5 	bl	8006240 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003c76:	2328      	movs	r3, #40	; 0x28
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4829      	ldr	r0, [pc, #164]	; (8003d28 <BSP_SDRAM_MspInit+0x1e4>)
 8003c82:	f002 fadd 	bl	8006240 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003c86:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <BSP_SDRAM_MspInit+0x1e8>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003c8c:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <BSP_SDRAM_MspInit+0x1e8>)
 8003c8e:	2280      	movs	r2, #128	; 0x80
 8003c90:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003c92:	4b26      	ldr	r3, [pc, #152]	; (8003d2c <BSP_SDRAM_MspInit+0x1e8>)
 8003c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c98:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003c9a:	4b24      	ldr	r3, [pc, #144]	; (8003d2c <BSP_SDRAM_MspInit+0x1e8>)
 8003c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ca0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003ca2:	4b22      	ldr	r3, [pc, #136]	; (8003d2c <BSP_SDRAM_MspInit+0x1e8>)
 8003ca4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ca8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003caa:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <BSP_SDRAM_MspInit+0x1e8>)
 8003cac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cb0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003cb2:	4b1e      	ldr	r3, [pc, #120]	; (8003d2c <BSP_SDRAM_MspInit+0x1e8>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003cb8:	4b1c      	ldr	r3, [pc, #112]	; (8003d2c <BSP_SDRAM_MspInit+0x1e8>)
 8003cba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cbe:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003cc0:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <BSP_SDRAM_MspInit+0x1e8>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003cc6:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <BSP_SDRAM_MspInit+0x1e8>)
 8003cc8:	2203      	movs	r2, #3
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003ccc:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <BSP_SDRAM_MspInit+0x1e8>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003cd2:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <BSP_SDRAM_MspInit+0x1e8>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003cd8:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <BSP_SDRAM_MspInit+0x1e8>)
 8003cda:	4a15      	ldr	r2, [pc, #84]	; (8003d30 <BSP_SDRAM_MspInit+0x1ec>)
 8003cdc:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <BSP_SDRAM_MspInit+0x1e8>)
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ce4:	4a11      	ldr	r2, [pc, #68]	; (8003d2c <BSP_SDRAM_MspInit+0x1e8>)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003cea:	4810      	ldr	r0, [pc, #64]	; (8003d2c <BSP_SDRAM_MspInit+0x1e8>)
 8003cec:	f001 fdda 	bl	80058a4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003cf0:	480e      	ldr	r0, [pc, #56]	; (8003d2c <BSP_SDRAM_MspInit+0x1e8>)
 8003cf2:	f001 fd29 	bl	8005748 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	210f      	movs	r1, #15
 8003cfa:	2038      	movs	r0, #56	; 0x38
 8003cfc:	f001 fc1a 	bl	8005534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003d00:	2038      	movs	r0, #56	; 0x38
 8003d02:	f001 fc33 	bl	800556c <HAL_NVIC_EnableIRQ>
}
 8003d06:	bf00      	nop
 8003d08:	3740      	adds	r7, #64	; 0x40
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40020800 	.word	0x40020800
 8003d18:	40020c00 	.word	0x40020c00
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	40021400 	.word	0x40021400
 8003d24:	40021800 	.word	0x40021800
 8003d28:	40021c00 	.word	0x40021c00
 8003d2c:	200004f4 	.word	0x200004f4
 8003d30:	40026410 	.word	0x40026410

08003d34 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	460a      	mov	r2, r1
 8003d3e:	80fb      	strh	r3, [r7, #6]
 8003d40:	4613      	mov	r3, r2
 8003d42:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003d48:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <BSP_TS_Init+0x68>)
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003d4e:	4a14      	ldr	r2, [pc, #80]	; (8003da0 <BSP_TS_Init+0x6c>)
 8003d50:	88bb      	ldrh	r3, [r7, #4]
 8003d52:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003d54:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <BSP_TS_Init+0x70>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2070      	movs	r0, #112	; 0x70
 8003d5a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003d5c:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <BSP_TS_Init+0x70>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2070      	movs	r0, #112	; 0x70
 8003d62:	4798      	blx	r3
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b51      	cmp	r3, #81	; 0x51
 8003d68:	d111      	bne.n	8003d8e <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003d6a:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <BSP_TS_Init+0x74>)
 8003d6c:	4a0d      	ldr	r2, [pc, #52]	; (8003da4 <BSP_TS_Init+0x70>)
 8003d6e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003d70:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <BSP_TS_Init+0x78>)
 8003d72:	2270      	movs	r2, #112	; 0x70
 8003d74:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003d76:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <BSP_TS_Init+0x7c>)
 8003d78:	2208      	movs	r2, #8
 8003d7a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <BSP_TS_Init+0x74>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	4a0a      	ldr	r2, [pc, #40]	; (8003dac <BSP_TS_Init+0x78>)
 8003d84:	7812      	ldrb	r2, [r2, #0]
 8003d86:	b292      	uxth	r2, r2
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4798      	blx	r3
 8003d8c:	e001      	b.n	8003d92 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20000558 	.word	0x20000558
 8003da0:	2000055a 	.word	0x2000055a
 8003da4:	20000000 	.word	0x20000000
 8003da8:	20000554 	.word	0x20000554
 8003dac:	2000055d 	.word	0x2000055d
 8003db0:	2000055c 	.word	0x2000055c

08003db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dba:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <HAL_MspInit+0x4c>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	4a10      	ldr	r2, [pc, #64]	; (8003e00 <HAL_MspInit+0x4c>)
 8003dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <HAL_MspInit+0x4c>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dce:	607b      	str	r3, [r7, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <HAL_MspInit+0x4c>)
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <HAL_MspInit+0x4c>)
 8003dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <HAL_MspInit+0x4c>)
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003dea:	2200      	movs	r2, #0
 8003dec:	210f      	movs	r1, #15
 8003dee:	f06f 0001 	mvn.w	r0, #1
 8003df2:	f001 fb9f 	bl	8005534 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800

08003e04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08c      	sub	sp, #48	; 0x30
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0c:	f107 031c 	add.w	r3, r7, #28
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a2a      	ldr	r2, [pc, #168]	; (8003ecc <HAL_ADC_MspInit+0xc8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d124      	bne.n	8003e70 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e26:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <HAL_ADC_MspInit+0xcc>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	4a29      	ldr	r2, [pc, #164]	; (8003ed0 <HAL_ADC_MspInit+0xcc>)
 8003e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e30:	6453      	str	r3, [r2, #68]	; 0x44
 8003e32:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <HAL_ADC_MspInit+0xcc>)
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e3e:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <HAL_ADC_MspInit+0xcc>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	4a23      	ldr	r2, [pc, #140]	; (8003ed0 <HAL_ADC_MspInit+0xcc>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4a:	4b21      	ldr	r3, [pc, #132]	; (8003ed0 <HAL_ADC_MspInit+0xcc>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e56:	2301      	movs	r3, #1
 8003e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e62:	f107 031c 	add.w	r3, r7, #28
 8003e66:	4619      	mov	r1, r3
 8003e68:	481a      	ldr	r0, [pc, #104]	; (8003ed4 <HAL_ADC_MspInit+0xd0>)
 8003e6a:	f002 f9e9 	bl	8006240 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003e6e:	e029      	b.n	8003ec4 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <HAL_ADC_MspInit+0xd4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d124      	bne.n	8003ec4 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003e7a:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <HAL_ADC_MspInit+0xcc>)
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	4a14      	ldr	r2, [pc, #80]	; (8003ed0 <HAL_ADC_MspInit+0xcc>)
 8003e80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e84:	6453      	str	r3, [r2, #68]	; 0x44
 8003e86:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <HAL_ADC_MspInit+0xcc>)
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e92:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <HAL_ADC_MspInit+0xcc>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	4a0e      	ldr	r2, [pc, #56]	; (8003ed0 <HAL_ADC_MspInit+0xcc>)
 8003e98:	f043 0320 	orr.w	r3, r3, #32
 8003e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <HAL_ADC_MspInit+0xcc>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8003eaa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003eb8:	f107 031c 	add.w	r3, r7, #28
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4807      	ldr	r0, [pc, #28]	; (8003edc <HAL_ADC_MspInit+0xd8>)
 8003ec0:	f002 f9be 	bl	8006240 <HAL_GPIO_Init>
}
 8003ec4:	bf00      	nop
 8003ec6:	3730      	adds	r7, #48	; 0x30
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40012000 	.word	0x40012000
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	40020000 	.word	0x40020000
 8003ed8:	40012200 	.word	0x40012200
 8003edc:	40021400 	.word	0x40021400

08003ee0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08a      	sub	sp, #40	; 0x28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee8:	f107 0314 	add.w	r3, r7, #20
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	605a      	str	r2, [r3, #4]
 8003ef2:	609a      	str	r2, [r3, #8]
 8003ef4:	60da      	str	r2, [r3, #12]
 8003ef6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a19      	ldr	r2, [pc, #100]	; (8003f64 <HAL_DAC_MspInit+0x84>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d12b      	bne.n	8003f5a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003f02:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <HAL_DAC_MspInit+0x88>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	4a18      	ldr	r2, [pc, #96]	; (8003f68 <HAL_DAC_MspInit+0x88>)
 8003f08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0e:	4b16      	ldr	r3, [pc, #88]	; (8003f68 <HAL_DAC_MspInit+0x88>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f1a:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <HAL_DAC_MspInit+0x88>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	4a12      	ldr	r2, [pc, #72]	; (8003f68 <HAL_DAC_MspInit+0x88>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	6313      	str	r3, [r2, #48]	; 0x30
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <HAL_DAC_MspInit+0x88>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003f32:	2310      	movs	r3, #16
 8003f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f36:	2303      	movs	r3, #3
 8003f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f3e:	f107 0314 	add.w	r3, r7, #20
 8003f42:	4619      	mov	r1, r3
 8003f44:	4809      	ldr	r0, [pc, #36]	; (8003f6c <HAL_DAC_MspInit+0x8c>)
 8003f46:	f002 f97b 	bl	8006240 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	210f      	movs	r1, #15
 8003f4e:	2036      	movs	r0, #54	; 0x36
 8003f50:	f001 faf0 	bl	8005534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003f54:	2036      	movs	r0, #54	; 0x36
 8003f56:	f001 fb09 	bl	800556c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003f5a:	bf00      	nop
 8003f5c:	3728      	adds	r7, #40	; 0x28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40007400 	.word	0x40007400
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	40020000 	.word	0x40020000

08003f70 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a0d      	ldr	r2, [pc, #52]	; (8003fb4 <HAL_DMA2D_MspInit+0x44>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d113      	bne.n	8003faa <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003f82:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <HAL_DMA2D_MspInit+0x48>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	4a0c      	ldr	r2, [pc, #48]	; (8003fb8 <HAL_DMA2D_MspInit+0x48>)
 8003f88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <HAL_DMA2D_MspInit+0x48>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2105      	movs	r1, #5
 8003f9e:	205a      	movs	r0, #90	; 0x5a
 8003fa0:	f001 fac8 	bl	8005534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003fa4:	205a      	movs	r0, #90	; 0x5a
 8003fa6:	f001 fae1 	bl	800556c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003faa:	bf00      	nop
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	4002b000 	.word	0x4002b000
 8003fb8:	40023800 	.word	0x40023800

08003fbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b0ac      	sub	sp, #176	; 0xb0
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fd4:	f107 0318 	add.w	r3, r7, #24
 8003fd8:	2284      	movs	r2, #132	; 0x84
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f00a f80f 	bl	800e000 <memset>
  if(hi2c->Instance==I2C1)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a44      	ldr	r2, [pc, #272]	; (80040f8 <HAL_I2C_MspInit+0x13c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d13d      	bne.n	8004068 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003fec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ff0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ff6:	f107 0318 	add.w	r3, r7, #24
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f004 fae2 	bl	80085c4 <HAL_RCCEx_PeriphCLKConfig>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004006:	f7fe fbb3 	bl	8002770 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800400a:	4b3c      	ldr	r3, [pc, #240]	; (80040fc <HAL_I2C_MspInit+0x140>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	4a3b      	ldr	r2, [pc, #236]	; (80040fc <HAL_I2C_MspInit+0x140>)
 8004010:	f043 0302 	orr.w	r3, r3, #2
 8004014:	6313      	str	r3, [r2, #48]	; 0x30
 8004016:	4b39      	ldr	r3, [pc, #228]	; (80040fc <HAL_I2C_MspInit+0x140>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004022:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004026:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800402a:	2312      	movs	r3, #18
 800402c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004030:	2300      	movs	r3, #0
 8004032:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004036:	2303      	movs	r3, #3
 8004038:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800403c:	2304      	movs	r3, #4
 800403e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004042:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004046:	4619      	mov	r1, r3
 8004048:	482d      	ldr	r0, [pc, #180]	; (8004100 <HAL_I2C_MspInit+0x144>)
 800404a:	f002 f8f9 	bl	8006240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800404e:	4b2b      	ldr	r3, [pc, #172]	; (80040fc <HAL_I2C_MspInit+0x140>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	4a2a      	ldr	r2, [pc, #168]	; (80040fc <HAL_I2C_MspInit+0x140>)
 8004054:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004058:	6413      	str	r3, [r2, #64]	; 0x40
 800405a:	4b28      	ldr	r3, [pc, #160]	; (80040fc <HAL_I2C_MspInit+0x140>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004066:	e042      	b.n	80040ee <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a25      	ldr	r2, [pc, #148]	; (8004104 <HAL_I2C_MspInit+0x148>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d13d      	bne.n	80040ee <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004072:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004076:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004078:	2300      	movs	r3, #0
 800407a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800407e:	f107 0318 	add.w	r3, r7, #24
 8004082:	4618      	mov	r0, r3
 8004084:	f004 fa9e 	bl	80085c4 <HAL_RCCEx_PeriphCLKConfig>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800408e:	f7fe fb6f 	bl	8002770 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004092:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <HAL_I2C_MspInit+0x140>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	4a19      	ldr	r2, [pc, #100]	; (80040fc <HAL_I2C_MspInit+0x140>)
 8004098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409c:	6313      	str	r3, [r2, #48]	; 0x30
 800409e:	4b17      	ldr	r3, [pc, #92]	; (80040fc <HAL_I2C_MspInit+0x140>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80040aa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80040ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040b2:	2312      	movs	r3, #18
 80040b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040b8:	2301      	movs	r3, #1
 80040ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040be:	2303      	movs	r3, #3
 80040c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80040c4:	2304      	movs	r3, #4
 80040c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80040ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80040ce:	4619      	mov	r1, r3
 80040d0:	480d      	ldr	r0, [pc, #52]	; (8004108 <HAL_I2C_MspInit+0x14c>)
 80040d2:	f002 f8b5 	bl	8006240 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80040d6:	4b09      	ldr	r3, [pc, #36]	; (80040fc <HAL_I2C_MspInit+0x140>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	4a08      	ldr	r2, [pc, #32]	; (80040fc <HAL_I2C_MspInit+0x140>)
 80040dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040e0:	6413      	str	r3, [r2, #64]	; 0x40
 80040e2:	4b06      	ldr	r3, [pc, #24]	; (80040fc <HAL_I2C_MspInit+0x140>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
}
 80040ee:	bf00      	nop
 80040f0:	37b0      	adds	r7, #176	; 0xb0
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40005400 	.word	0x40005400
 80040fc:	40023800 	.word	0x40023800
 8004100:	40020400 	.word	0x40020400
 8004104:	40005c00 	.word	0x40005c00
 8004108:	40021c00 	.word	0x40021c00

0800410c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a15      	ldr	r2, [pc, #84]	; (8004170 <HAL_I2C_MspDeInit+0x64>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d110      	bne.n	8004140 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800411e:	4b15      	ldr	r3, [pc, #84]	; (8004174 <HAL_I2C_MspDeInit+0x68>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	4a14      	ldr	r2, [pc, #80]	; (8004174 <HAL_I2C_MspDeInit+0x68>)
 8004124:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004128:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800412a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800412e:	4812      	ldr	r0, [pc, #72]	; (8004178 <HAL_I2C_MspDeInit+0x6c>)
 8004130:	f002 fa32 	bl	8006598 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004134:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004138:	480f      	ldr	r0, [pc, #60]	; (8004178 <HAL_I2C_MspDeInit+0x6c>)
 800413a:	f002 fa2d 	bl	8006598 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800413e:	e013      	b.n	8004168 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a0d      	ldr	r2, [pc, #52]	; (800417c <HAL_I2C_MspDeInit+0x70>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10e      	bne.n	8004168 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800414a:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <HAL_I2C_MspDeInit+0x68>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	4a09      	ldr	r2, [pc, #36]	; (8004174 <HAL_I2C_MspDeInit+0x68>)
 8004150:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004154:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8004156:	2180      	movs	r1, #128	; 0x80
 8004158:	4809      	ldr	r0, [pc, #36]	; (8004180 <HAL_I2C_MspDeInit+0x74>)
 800415a:	f002 fa1d 	bl	8006598 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800415e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004162:	4807      	ldr	r0, [pc, #28]	; (8004180 <HAL_I2C_MspDeInit+0x74>)
 8004164:	f002 fa18 	bl	8006598 <HAL_GPIO_DeInit>
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40005400 	.word	0x40005400
 8004174:	40023800 	.word	0x40023800
 8004178:	40020400 	.word	0x40020400
 800417c:	40005c00 	.word	0x40005c00
 8004180:	40021c00 	.word	0x40021c00

08004184 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08e      	sub	sp, #56	; 0x38
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800418c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	605a      	str	r2, [r3, #4]
 8004196:	609a      	str	r2, [r3, #8]
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a55      	ldr	r2, [pc, #340]	; (80042f8 <HAL_LTDC_MspInit+0x174>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	f040 80a3 	bne.w	80042ee <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80041a8:	4b54      	ldr	r3, [pc, #336]	; (80042fc <HAL_LTDC_MspInit+0x178>)
 80041aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ac:	4a53      	ldr	r2, [pc, #332]	; (80042fc <HAL_LTDC_MspInit+0x178>)
 80041ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041b2:	6453      	str	r3, [r2, #68]	; 0x44
 80041b4:	4b51      	ldr	r3, [pc, #324]	; (80042fc <HAL_LTDC_MspInit+0x178>)
 80041b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041bc:	623b      	str	r3, [r7, #32]
 80041be:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80041c0:	4b4e      	ldr	r3, [pc, #312]	; (80042fc <HAL_LTDC_MspInit+0x178>)
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	4a4d      	ldr	r2, [pc, #308]	; (80042fc <HAL_LTDC_MspInit+0x178>)
 80041c6:	f043 0310 	orr.w	r3, r3, #16
 80041ca:	6313      	str	r3, [r2, #48]	; 0x30
 80041cc:	4b4b      	ldr	r3, [pc, #300]	; (80042fc <HAL_LTDC_MspInit+0x178>)
 80041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80041d8:	4b48      	ldr	r3, [pc, #288]	; (80042fc <HAL_LTDC_MspInit+0x178>)
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	4a47      	ldr	r2, [pc, #284]	; (80042fc <HAL_LTDC_MspInit+0x178>)
 80041de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041e2:	6313      	str	r3, [r2, #48]	; 0x30
 80041e4:	4b45      	ldr	r3, [pc, #276]	; (80042fc <HAL_LTDC_MspInit+0x178>)
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80041f0:	4b42      	ldr	r3, [pc, #264]	; (80042fc <HAL_LTDC_MspInit+0x178>)
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	4a41      	ldr	r2, [pc, #260]	; (80042fc <HAL_LTDC_MspInit+0x178>)
 80041f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041fa:	6313      	str	r3, [r2, #48]	; 0x30
 80041fc:	4b3f      	ldr	r3, [pc, #252]	; (80042fc <HAL_LTDC_MspInit+0x178>)
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004208:	4b3c      	ldr	r3, [pc, #240]	; (80042fc <HAL_LTDC_MspInit+0x178>)
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	4a3b      	ldr	r2, [pc, #236]	; (80042fc <HAL_LTDC_MspInit+0x178>)
 800420e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004212:	6313      	str	r3, [r2, #48]	; 0x30
 8004214:	4b39      	ldr	r3, [pc, #228]	; (80042fc <HAL_LTDC_MspInit+0x178>)
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004220:	4b36      	ldr	r3, [pc, #216]	; (80042fc <HAL_LTDC_MspInit+0x178>)
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	4a35      	ldr	r2, [pc, #212]	; (80042fc <HAL_LTDC_MspInit+0x178>)
 8004226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422a:	6313      	str	r3, [r2, #48]	; 0x30
 800422c:	4b33      	ldr	r3, [pc, #204]	; (80042fc <HAL_LTDC_MspInit+0x178>)
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004238:	2310      	movs	r3, #16
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423c:	2302      	movs	r3, #2
 800423e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004240:	2300      	movs	r3, #0
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004244:	2300      	movs	r3, #0
 8004246:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004248:	230e      	movs	r3, #14
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800424c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004250:	4619      	mov	r1, r3
 8004252:	482b      	ldr	r0, [pc, #172]	; (8004300 <HAL_LTDC_MspInit+0x17c>)
 8004254:	f001 fff4 	bl	8006240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004258:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425e:	2302      	movs	r3, #2
 8004260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004262:	2300      	movs	r3, #0
 8004264:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004266:	2300      	movs	r3, #0
 8004268:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800426a:	230e      	movs	r3, #14
 800426c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800426e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004272:	4619      	mov	r1, r3
 8004274:	4823      	ldr	r0, [pc, #140]	; (8004304 <HAL_LTDC_MspInit+0x180>)
 8004276:	f001 ffe3 	bl	8006240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800427a:	23f7      	movs	r3, #247	; 0xf7
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800427e:	2302      	movs	r3, #2
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004282:	2300      	movs	r3, #0
 8004284:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004286:	2300      	movs	r3, #0
 8004288:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800428a:	230e      	movs	r3, #14
 800428c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800428e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004292:	4619      	mov	r1, r3
 8004294:	481c      	ldr	r0, [pc, #112]	; (8004308 <HAL_LTDC_MspInit+0x184>)
 8004296:	f001 ffd3 	bl	8006240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800429a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a0:	2302      	movs	r3, #2
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042a8:	2300      	movs	r3, #0
 80042aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80042ac:	2309      	movs	r3, #9
 80042ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80042b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042b4:	4619      	mov	r1, r3
 80042b6:	4815      	ldr	r0, [pc, #84]	; (800430c <HAL_LTDC_MspInit+0x188>)
 80042b8:	f001 ffc2 	bl	8006240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80042bc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c2:	2302      	movs	r3, #2
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ca:	2300      	movs	r3, #0
 80042cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80042ce:	230e      	movs	r3, #14
 80042d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80042d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042d6:	4619      	mov	r1, r3
 80042d8:	480d      	ldr	r0, [pc, #52]	; (8004310 <HAL_LTDC_MspInit+0x18c>)
 80042da:	f001 ffb1 	bl	8006240 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80042de:	2200      	movs	r2, #0
 80042e0:	2105      	movs	r1, #5
 80042e2:	2058      	movs	r0, #88	; 0x58
 80042e4:	f001 f926 	bl	8005534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80042e8:	2058      	movs	r0, #88	; 0x58
 80042ea:	f001 f93f 	bl	800556c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80042ee:	bf00      	nop
 80042f0:	3738      	adds	r7, #56	; 0x38
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40016800 	.word	0x40016800
 80042fc:	40023800 	.word	0x40023800
 8004300:	40021000 	.word	0x40021000
 8004304:	40022400 	.word	0x40022400
 8004308:	40022800 	.word	0x40022800
 800430c:	40021800 	.word	0x40021800
 8004310:	40022000 	.word	0x40022000

08004314 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0a      	ldr	r2, [pc, #40]	; (800434c <HAL_RNG_MspInit+0x38>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10b      	bne.n	800433e <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004326:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <HAL_RNG_MspInit+0x3c>)
 8004328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432a:	4a09      	ldr	r2, [pc, #36]	; (8004350 <HAL_RNG_MspInit+0x3c>)
 800432c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004330:	6353      	str	r3, [r2, #52]	; 0x34
 8004332:	4b07      	ldr	r3, [pc, #28]	; (8004350 <HAL_RNG_MspInit+0x3c>)
 8004334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	50060800 	.word	0x50060800
 8004350:	40023800 	.word	0x40023800

08004354 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b0a4      	sub	sp, #144	; 0x90
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800435c:	f107 030c 	add.w	r3, r7, #12
 8004360:	2284      	movs	r2, #132	; 0x84
 8004362:	2100      	movs	r1, #0
 8004364:	4618      	mov	r0, r3
 8004366:	f009 fe4b 	bl	800e000 <memset>
  if(hrtc->Instance==RTC)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a0e      	ldr	r2, [pc, #56]	; (80043a8 <HAL_RTC_MspInit+0x54>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d114      	bne.n	800439e <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004374:	2320      	movs	r3, #32
 8004376:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800437c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800437e:	f107 030c 	add.w	r3, r7, #12
 8004382:	4618      	mov	r0, r3
 8004384:	f004 f91e 	bl	80085c4 <HAL_RCCEx_PeriphCLKConfig>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800438e:	f7fe f9ef 	bl	8002770 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <HAL_RTC_MspInit+0x58>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	4a05      	ldr	r2, [pc, #20]	; (80043ac <HAL_RTC_MspInit+0x58>)
 8004398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800439c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800439e:	bf00      	nop
 80043a0:	3790      	adds	r7, #144	; 0x90
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40002800 	.word	0x40002800
 80043ac:	40023800 	.word	0x40023800

080043b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b8:	f107 0314 	add.w	r3, r7, #20
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	605a      	str	r2, [r3, #4]
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	60da      	str	r2, [r3, #12]
 80043c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a29      	ldr	r2, [pc, #164]	; (8004474 <HAL_SPI_MspInit+0xc4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d14c      	bne.n	800446c <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80043d2:	4b29      	ldr	r3, [pc, #164]	; (8004478 <HAL_SPI_MspInit+0xc8>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	4a28      	ldr	r2, [pc, #160]	; (8004478 <HAL_SPI_MspInit+0xc8>)
 80043d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043dc:	6413      	str	r3, [r2, #64]	; 0x40
 80043de:	4b26      	ldr	r3, [pc, #152]	; (8004478 <HAL_SPI_MspInit+0xc8>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80043ea:	4b23      	ldr	r3, [pc, #140]	; (8004478 <HAL_SPI_MspInit+0xc8>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	4a22      	ldr	r2, [pc, #136]	; (8004478 <HAL_SPI_MspInit+0xc8>)
 80043f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f4:	6313      	str	r3, [r2, #48]	; 0x30
 80043f6:	4b20      	ldr	r3, [pc, #128]	; (8004478 <HAL_SPI_MspInit+0xc8>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004402:	4b1d      	ldr	r3, [pc, #116]	; (8004478 <HAL_SPI_MspInit+0xc8>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	4a1c      	ldr	r2, [pc, #112]	; (8004478 <HAL_SPI_MspInit+0xc8>)
 8004408:	f043 0302 	orr.w	r3, r3, #2
 800440c:	6313      	str	r3, [r2, #48]	; 0x30
 800440e:	4b1a      	ldr	r3, [pc, #104]	; (8004478 <HAL_SPI_MspInit+0xc8>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	60bb      	str	r3, [r7, #8]
 8004418:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800441a:	2303      	movs	r3, #3
 800441c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441e:	2302      	movs	r3, #2
 8004420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004426:	2303      	movs	r3, #3
 8004428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800442a:	2305      	movs	r3, #5
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800442e:	f107 0314 	add.w	r3, r7, #20
 8004432:	4619      	mov	r1, r3
 8004434:	4811      	ldr	r0, [pc, #68]	; (800447c <HAL_SPI_MspInit+0xcc>)
 8004436:	f001 ff03 	bl	8006240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800443a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800443e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004440:	2302      	movs	r3, #2
 8004442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004444:	2300      	movs	r3, #0
 8004446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004448:	2300      	movs	r3, #0
 800444a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800444c:	2305      	movs	r3, #5
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004450:	f107 0314 	add.w	r3, r7, #20
 8004454:	4619      	mov	r1, r3
 8004456:	480a      	ldr	r0, [pc, #40]	; (8004480 <HAL_SPI_MspInit+0xd0>)
 8004458:	f001 fef2 	bl	8006240 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800445c:	2200      	movs	r2, #0
 800445e:	2105      	movs	r1, #5
 8004460:	2024      	movs	r0, #36	; 0x24
 8004462:	f001 f867 	bl	8005534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004466:	2024      	movs	r0, #36	; 0x24
 8004468:	f001 f880 	bl	800556c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800446c:	bf00      	nop
 800446e:	3728      	adds	r7, #40	; 0x28
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40003800 	.word	0x40003800
 8004478:	40023800 	.word	0x40023800
 800447c:	40022000 	.word	0x40022000
 8004480:	40020400 	.word	0x40020400

08004484 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08e      	sub	sp, #56	; 0x38
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800448c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	605a      	str	r2, [r3, #4]
 8004496:	609a      	str	r2, [r3, #8]
 8004498:	60da      	str	r2, [r3, #12]
 800449a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a3b      	ldr	r2, [pc, #236]	; (8004590 <HAL_TIM_Base_MspInit+0x10c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d10c      	bne.n	80044c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80044a6:	4b3b      	ldr	r3, [pc, #236]	; (8004594 <HAL_TIM_Base_MspInit+0x110>)
 80044a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044aa:	4a3a      	ldr	r2, [pc, #232]	; (8004594 <HAL_TIM_Base_MspInit+0x110>)
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	6453      	str	r3, [r2, #68]	; 0x44
 80044b2:	4b38      	ldr	r3, [pc, #224]	; (8004594 <HAL_TIM_Base_MspInit+0x110>)
 80044b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	623b      	str	r3, [r7, #32]
 80044bc:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80044be:	e062      	b.n	8004586 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c8:	d10c      	bne.n	80044e4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044ca:	4b32      	ldr	r3, [pc, #200]	; (8004594 <HAL_TIM_Base_MspInit+0x110>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	4a31      	ldr	r2, [pc, #196]	; (8004594 <HAL_TIM_Base_MspInit+0x110>)
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	6413      	str	r3, [r2, #64]	; 0x40
 80044d6:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <HAL_TIM_Base_MspInit+0x110>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	61fb      	str	r3, [r7, #28]
 80044e0:	69fb      	ldr	r3, [r7, #28]
}
 80044e2:	e050      	b.n	8004586 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a2b      	ldr	r2, [pc, #172]	; (8004598 <HAL_TIM_Base_MspInit+0x114>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d10c      	bne.n	8004508 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80044ee:	4b29      	ldr	r3, [pc, #164]	; (8004594 <HAL_TIM_Base_MspInit+0x110>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	4a28      	ldr	r2, [pc, #160]	; (8004594 <HAL_TIM_Base_MspInit+0x110>)
 80044f4:	f043 0302 	orr.w	r3, r3, #2
 80044f8:	6413      	str	r3, [r2, #64]	; 0x40
 80044fa:	4b26      	ldr	r3, [pc, #152]	; (8004594 <HAL_TIM_Base_MspInit+0x110>)
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	61bb      	str	r3, [r7, #24]
 8004504:	69bb      	ldr	r3, [r7, #24]
}
 8004506:	e03e      	b.n	8004586 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a23      	ldr	r2, [pc, #140]	; (800459c <HAL_TIM_Base_MspInit+0x118>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d10c      	bne.n	800452c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004512:	4b20      	ldr	r3, [pc, #128]	; (8004594 <HAL_TIM_Base_MspInit+0x110>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	4a1f      	ldr	r2, [pc, #124]	; (8004594 <HAL_TIM_Base_MspInit+0x110>)
 8004518:	f043 0308 	orr.w	r3, r3, #8
 800451c:	6413      	str	r3, [r2, #64]	; 0x40
 800451e:	4b1d      	ldr	r3, [pc, #116]	; (8004594 <HAL_TIM_Base_MspInit+0x110>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	697b      	ldr	r3, [r7, #20]
}
 800452a:	e02c      	b.n	8004586 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a1b      	ldr	r2, [pc, #108]	; (80045a0 <HAL_TIM_Base_MspInit+0x11c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d127      	bne.n	8004586 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004536:	4b17      	ldr	r3, [pc, #92]	; (8004594 <HAL_TIM_Base_MspInit+0x110>)
 8004538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453a:	4a16      	ldr	r2, [pc, #88]	; (8004594 <HAL_TIM_Base_MspInit+0x110>)
 800453c:	f043 0302 	orr.w	r3, r3, #2
 8004540:	6453      	str	r3, [r2, #68]	; 0x44
 8004542:	4b14      	ldr	r3, [pc, #80]	; (8004594 <HAL_TIM_Base_MspInit+0x110>)
 8004544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800454e:	4b11      	ldr	r3, [pc, #68]	; (8004594 <HAL_TIM_Base_MspInit+0x110>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	4a10      	ldr	r2, [pc, #64]	; (8004594 <HAL_TIM_Base_MspInit+0x110>)
 8004554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004558:	6313      	str	r3, [r2, #48]	; 0x30
 800455a:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <HAL_TIM_Base_MspInit+0x110>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004566:	2304      	movs	r3, #4
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456a:	2302      	movs	r3, #2
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456e:	2300      	movs	r3, #0
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004572:	2300      	movs	r3, #0
 8004574:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004576:	2303      	movs	r3, #3
 8004578:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800457a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800457e:	4619      	mov	r1, r3
 8004580:	4808      	ldr	r0, [pc, #32]	; (80045a4 <HAL_TIM_Base_MspInit+0x120>)
 8004582:	f001 fe5d 	bl	8006240 <HAL_GPIO_Init>
}
 8004586:	bf00      	nop
 8004588:	3738      	adds	r7, #56	; 0x38
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40010000 	.word	0x40010000
 8004594:	40023800 	.word	0x40023800
 8004598:	40000400 	.word	0x40000400
 800459c:	40000c00 	.word	0x40000c00
 80045a0:	40010400 	.word	0x40010400
 80045a4:	40022000 	.word	0x40022000

080045a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b0b0      	sub	sp, #192	; 0xc0
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	609a      	str	r2, [r3, #8]
 80045bc:	60da      	str	r2, [r3, #12]
 80045be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045c4:	2284      	movs	r2, #132	; 0x84
 80045c6:	2100      	movs	r1, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f009 fd19 	bl	800e000 <memset>
  if(huart->Instance==UART7)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a75      	ldr	r2, [pc, #468]	; (80047a8 <HAL_UART_MspInit+0x200>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d13d      	bne.n	8004654 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80045d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80045de:	2300      	movs	r3, #0
 80045e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045e8:	4618      	mov	r0, r3
 80045ea:	f003 ffeb 	bl	80085c4 <HAL_RCCEx_PeriphCLKConfig>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80045f4:	f7fe f8bc 	bl	8002770 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80045f8:	4b6c      	ldr	r3, [pc, #432]	; (80047ac <HAL_UART_MspInit+0x204>)
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	4a6b      	ldr	r2, [pc, #428]	; (80047ac <HAL_UART_MspInit+0x204>)
 80045fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004602:	6413      	str	r3, [r2, #64]	; 0x40
 8004604:	4b69      	ldr	r3, [pc, #420]	; (80047ac <HAL_UART_MspInit+0x204>)
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004610:	4b66      	ldr	r3, [pc, #408]	; (80047ac <HAL_UART_MspInit+0x204>)
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	4a65      	ldr	r2, [pc, #404]	; (80047ac <HAL_UART_MspInit+0x204>)
 8004616:	f043 0320 	orr.w	r3, r3, #32
 800461a:	6313      	str	r3, [r2, #48]	; 0x30
 800461c:	4b63      	ldr	r3, [pc, #396]	; (80047ac <HAL_UART_MspInit+0x204>)
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	f003 0320 	and.w	r3, r3, #32
 8004624:	623b      	str	r3, [r7, #32]
 8004626:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004628:	23c0      	movs	r3, #192	; 0xc0
 800462a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800462e:	2302      	movs	r3, #2
 8004630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004634:	2300      	movs	r3, #0
 8004636:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800463a:	2303      	movs	r3, #3
 800463c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004640:	2308      	movs	r3, #8
 8004642:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004646:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800464a:	4619      	mov	r1, r3
 800464c:	4858      	ldr	r0, [pc, #352]	; (80047b0 <HAL_UART_MspInit+0x208>)
 800464e:	f001 fdf7 	bl	8006240 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004652:	e0a4      	b.n	800479e <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a56      	ldr	r2, [pc, #344]	; (80047b4 <HAL_UART_MspInit+0x20c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d15d      	bne.n	800471a <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800465e:	2340      	movs	r3, #64	; 0x40
 8004660:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004662:	2300      	movs	r3, #0
 8004664:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800466a:	4618      	mov	r0, r3
 800466c:	f003 ffaa 	bl	80085c4 <HAL_RCCEx_PeriphCLKConfig>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8004676:	f7fe f87b 	bl	8002770 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800467a:	4b4c      	ldr	r3, [pc, #304]	; (80047ac <HAL_UART_MspInit+0x204>)
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	4a4b      	ldr	r2, [pc, #300]	; (80047ac <HAL_UART_MspInit+0x204>)
 8004680:	f043 0310 	orr.w	r3, r3, #16
 8004684:	6453      	str	r3, [r2, #68]	; 0x44
 8004686:	4b49      	ldr	r3, [pc, #292]	; (80047ac <HAL_UART_MspInit+0x204>)
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	61fb      	str	r3, [r7, #28]
 8004690:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004692:	4b46      	ldr	r3, [pc, #280]	; (80047ac <HAL_UART_MspInit+0x204>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	4a45      	ldr	r2, [pc, #276]	; (80047ac <HAL_UART_MspInit+0x204>)
 8004698:	f043 0302 	orr.w	r3, r3, #2
 800469c:	6313      	str	r3, [r2, #48]	; 0x30
 800469e:	4b43      	ldr	r3, [pc, #268]	; (80047ac <HAL_UART_MspInit+0x204>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046aa:	4b40      	ldr	r3, [pc, #256]	; (80047ac <HAL_UART_MspInit+0x204>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	4a3f      	ldr	r2, [pc, #252]	; (80047ac <HAL_UART_MspInit+0x204>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	6313      	str	r3, [r2, #48]	; 0x30
 80046b6:	4b3d      	ldr	r3, [pc, #244]	; (80047ac <HAL_UART_MspInit+0x204>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80046c2:	2380      	movs	r3, #128	; 0x80
 80046c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c8:	2302      	movs	r3, #2
 80046ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d4:	2300      	movs	r3, #0
 80046d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80046da:	2307      	movs	r3, #7
 80046dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80046e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80046e4:	4619      	mov	r1, r3
 80046e6:	4834      	ldr	r0, [pc, #208]	; (80047b8 <HAL_UART_MspInit+0x210>)
 80046e8:	f001 fdaa 	bl	8006240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80046ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f4:	2302      	movs	r3, #2
 80046f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004700:	2300      	movs	r3, #0
 8004702:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004706:	2307      	movs	r3, #7
 8004708:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800470c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004710:	4619      	mov	r1, r3
 8004712:	482a      	ldr	r0, [pc, #168]	; (80047bc <HAL_UART_MspInit+0x214>)
 8004714:	f001 fd94 	bl	8006240 <HAL_GPIO_Init>
}
 8004718:	e041      	b.n	800479e <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART6)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a28      	ldr	r2, [pc, #160]	; (80047c0 <HAL_UART_MspInit+0x218>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d13c      	bne.n	800479e <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004724:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004728:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800472a:	2300      	movs	r3, #0
 800472c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004730:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004734:	4618      	mov	r0, r3
 8004736:	f003 ff45 	bl	80085c4 <HAL_RCCEx_PeriphCLKConfig>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8004740:	f7fe f816 	bl	8002770 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004744:	4b19      	ldr	r3, [pc, #100]	; (80047ac <HAL_UART_MspInit+0x204>)
 8004746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004748:	4a18      	ldr	r2, [pc, #96]	; (80047ac <HAL_UART_MspInit+0x204>)
 800474a:	f043 0320 	orr.w	r3, r3, #32
 800474e:	6453      	str	r3, [r2, #68]	; 0x44
 8004750:	4b16      	ldr	r3, [pc, #88]	; (80047ac <HAL_UART_MspInit+0x204>)
 8004752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800475c:	4b13      	ldr	r3, [pc, #76]	; (80047ac <HAL_UART_MspInit+0x204>)
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	4a12      	ldr	r2, [pc, #72]	; (80047ac <HAL_UART_MspInit+0x204>)
 8004762:	f043 0304 	orr.w	r3, r3, #4
 8004766:	6313      	str	r3, [r2, #48]	; 0x30
 8004768:	4b10      	ldr	r3, [pc, #64]	; (80047ac <HAL_UART_MspInit+0x204>)
 800476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004774:	23c0      	movs	r3, #192	; 0xc0
 8004776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477a:	2302      	movs	r3, #2
 800477c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004780:	2300      	movs	r3, #0
 8004782:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004786:	2303      	movs	r3, #3
 8004788:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800478c:	2308      	movs	r3, #8
 800478e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004792:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004796:	4619      	mov	r1, r3
 8004798:	480a      	ldr	r0, [pc, #40]	; (80047c4 <HAL_UART_MspInit+0x21c>)
 800479a:	f001 fd51 	bl	8006240 <HAL_GPIO_Init>
}
 800479e:	bf00      	nop
 80047a0:	37c0      	adds	r7, #192	; 0xc0
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40007800 	.word	0x40007800
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40021400 	.word	0x40021400
 80047b4:	40011000 	.word	0x40011000
 80047b8:	40020400 	.word	0x40020400
 80047bc:	40020000 	.word	0x40020000
 80047c0:	40011400 	.word	0x40011400
 80047c4:	40020800 	.word	0x40020800

080047c8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80047ce:	1d3b      	adds	r3, r7, #4
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	609a      	str	r2, [r3, #8]
 80047d8:	60da      	str	r2, [r3, #12]
 80047da:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80047dc:	4b3a      	ldr	r3, [pc, #232]	; (80048c8 <HAL_FMC_MspInit+0x100>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d16d      	bne.n	80048c0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80047e4:	4b38      	ldr	r3, [pc, #224]	; (80048c8 <HAL_FMC_MspInit+0x100>)
 80047e6:	2201      	movs	r2, #1
 80047e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80047ea:	4b38      	ldr	r3, [pc, #224]	; (80048cc <HAL_FMC_MspInit+0x104>)
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	4a37      	ldr	r2, [pc, #220]	; (80048cc <HAL_FMC_MspInit+0x104>)
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	6393      	str	r3, [r2, #56]	; 0x38
 80047f6:	4b35      	ldr	r3, [pc, #212]	; (80048cc <HAL_FMC_MspInit+0x104>)
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8004802:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004806:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004808:	2302      	movs	r3, #2
 800480a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480c:	2300      	movs	r3, #0
 800480e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004810:	2303      	movs	r3, #3
 8004812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004814:	230c      	movs	r3, #12
 8004816:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004818:	1d3b      	adds	r3, r7, #4
 800481a:	4619      	mov	r1, r3
 800481c:	482c      	ldr	r0, [pc, #176]	; (80048d0 <HAL_FMC_MspInit+0x108>)
 800481e:	f001 fd0f 	bl	8006240 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8004822:	f248 1333 	movw	r3, #33075	; 0x8133
 8004826:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004828:	2302      	movs	r3, #2
 800482a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482c:	2300      	movs	r3, #0
 800482e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004830:	2303      	movs	r3, #3
 8004832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004834:	230c      	movs	r3, #12
 8004836:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004838:	1d3b      	adds	r3, r7, #4
 800483a:	4619      	mov	r1, r3
 800483c:	4825      	ldr	r0, [pc, #148]	; (80048d4 <HAL_FMC_MspInit+0x10c>)
 800483e:	f001 fcff 	bl	8006240 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8004842:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004846:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004848:	2302      	movs	r3, #2
 800484a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004850:	2303      	movs	r3, #3
 8004852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004854:	230c      	movs	r3, #12
 8004856:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004858:	1d3b      	adds	r3, r7, #4
 800485a:	4619      	mov	r1, r3
 800485c:	481e      	ldr	r0, [pc, #120]	; (80048d8 <HAL_FMC_MspInit+0x110>)
 800485e:	f001 fcef 	bl	8006240 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8004862:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004866:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004868:	2302      	movs	r3, #2
 800486a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004870:	2303      	movs	r3, #3
 8004872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004874:	230c      	movs	r3, #12
 8004876:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004878:	1d3b      	adds	r3, r7, #4
 800487a:	4619      	mov	r1, r3
 800487c:	4817      	ldr	r0, [pc, #92]	; (80048dc <HAL_FMC_MspInit+0x114>)
 800487e:	f001 fcdf 	bl	8006240 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8004882:	2328      	movs	r3, #40	; 0x28
 8004884:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004886:	2302      	movs	r3, #2
 8004888:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800488e:	2303      	movs	r3, #3
 8004890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004892:	230c      	movs	r3, #12
 8004894:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004896:	1d3b      	adds	r3, r7, #4
 8004898:	4619      	mov	r1, r3
 800489a:	4811      	ldr	r0, [pc, #68]	; (80048e0 <HAL_FMC_MspInit+0x118>)
 800489c:	f001 fcd0 	bl	8006240 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80048a0:	2308      	movs	r3, #8
 80048a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a4:	2302      	movs	r3, #2
 80048a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ac:	2303      	movs	r3, #3
 80048ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80048b0:	230c      	movs	r3, #12
 80048b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80048b4:	1d3b      	adds	r3, r7, #4
 80048b6:	4619      	mov	r1, r3
 80048b8:	480a      	ldr	r0, [pc, #40]	; (80048e4 <HAL_FMC_MspInit+0x11c>)
 80048ba:	f001 fcc1 	bl	8006240 <HAL_GPIO_Init>
 80048be:	e000      	b.n	80048c2 <HAL_FMC_MspInit+0xfa>
    return;
 80048c0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20000560 	.word	0x20000560
 80048cc:	40023800 	.word	0x40023800
 80048d0:	40021000 	.word	0x40021000
 80048d4:	40021800 	.word	0x40021800
 80048d8:	40020c00 	.word	0x40020c00
 80048dc:	40021400 	.word	0x40021400
 80048e0:	40021c00 	.word	0x40021c00
 80048e4:	40020800 	.word	0x40020800

080048e8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80048f0:	f7ff ff6a 	bl	80047c8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80048f4:	bf00      	nop
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08c      	sub	sp, #48	; 0x30
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004908:	2300      	movs	r3, #0
 800490a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800490c:	2200      	movs	r2, #0
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	2036      	movs	r0, #54	; 0x36
 8004912:	f000 fe0f 	bl	8005534 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004916:	2036      	movs	r0, #54	; 0x36
 8004918:	f000 fe28 	bl	800556c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800491c:	4b1f      	ldr	r3, [pc, #124]	; (800499c <HAL_InitTick+0xa0>)
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	4a1e      	ldr	r2, [pc, #120]	; (800499c <HAL_InitTick+0xa0>)
 8004922:	f043 0310 	orr.w	r3, r3, #16
 8004926:	6413      	str	r3, [r2, #64]	; 0x40
 8004928:	4b1c      	ldr	r3, [pc, #112]	; (800499c <HAL_InitTick+0xa0>)
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004934:	f107 0210 	add.w	r2, r7, #16
 8004938:	f107 0314 	add.w	r3, r7, #20
 800493c:	4611      	mov	r1, r2
 800493e:	4618      	mov	r0, r3
 8004940:	f003 fe0e 	bl	8008560 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004944:	f003 fde4 	bl	8008510 <HAL_RCC_GetPCLK1Freq>
 8004948:	4603      	mov	r3, r0
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800494e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004950:	4a13      	ldr	r2, [pc, #76]	; (80049a0 <HAL_InitTick+0xa4>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	0c9b      	lsrs	r3, r3, #18
 8004958:	3b01      	subs	r3, #1
 800495a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800495c:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <HAL_InitTick+0xa8>)
 800495e:	4a12      	ldr	r2, [pc, #72]	; (80049a8 <HAL_InitTick+0xac>)
 8004960:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004962:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <HAL_InitTick+0xa8>)
 8004964:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004968:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800496a:	4a0e      	ldr	r2, [pc, #56]	; (80049a4 <HAL_InitTick+0xa8>)
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004970:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <HAL_InitTick+0xa8>)
 8004972:	2200      	movs	r2, #0
 8004974:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004976:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <HAL_InitTick+0xa8>)
 8004978:	2200      	movs	r2, #0
 800497a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800497c:	4809      	ldr	r0, [pc, #36]	; (80049a4 <HAL_InitTick+0xa8>)
 800497e:	f005 fc53 	bl	800a228 <HAL_TIM_Base_Init>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d104      	bne.n	8004992 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004988:	4806      	ldr	r0, [pc, #24]	; (80049a4 <HAL_InitTick+0xa8>)
 800498a:	f005 fca5 	bl	800a2d8 <HAL_TIM_Base_Start_IT>
 800498e:	4603      	mov	r3, r0
 8004990:	e000      	b.n	8004994 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
}
 8004994:	4618      	mov	r0, r3
 8004996:	3730      	adds	r7, #48	; 0x30
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40023800 	.word	0x40023800
 80049a0:	431bde83 	.word	0x431bde83
 80049a4:	200049c8 	.word	0x200049c8
 80049a8:	40001000 	.word	0x40001000

080049ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049b0:	e7fe      	b.n	80049b0 <NMI_Handler+0x4>

080049b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049b2:	b480      	push	{r7}
 80049b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049b6:	e7fe      	b.n	80049b6 <HardFault_Handler+0x4>

080049b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049bc:	e7fe      	b.n	80049bc <MemManage_Handler+0x4>

080049be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049be:	b480      	push	{r7}
 80049c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049c2:	e7fe      	b.n	80049c2 <BusFault_Handler+0x4>

080049c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049c8:	e7fe      	b.n	80049c8 <UsageFault_Handler+0x4>

080049ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049ca:	b480      	push	{r7}
 80049cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049ce:	bf00      	nop
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NC1_Pin);
 80049dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80049e0:	f001 ff1a 	bl	8006818 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80049e4:	bf00      	nop
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80049ec:	4802      	ldr	r0, [pc, #8]	; (80049f8 <SPI2_IRQHandler+0x10>)
 80049ee:	f005 f81d 	bl	8009a2c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80049f2:	bf00      	nop
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20004314 	.word	0x20004314

080049fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8004a00:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <TIM6_DAC_IRQHandler+0x20>)
 8004a02:	791b      	ldrb	r3, [r3, #4]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8004a0a:	4804      	ldr	r0, [pc, #16]	; (8004a1c <TIM6_DAC_IRQHandler+0x20>)
 8004a0c:	f000 fdde 	bl	80055cc <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004a10:	4803      	ldr	r0, [pc, #12]	; (8004a20 <TIM6_DAC_IRQHandler+0x24>)
 8004a12:	f005 fcd9 	bl	800a3c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004a16:	bf00      	nop
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20004704 	.word	0x20004704
 8004a20:	200049c8 	.word	0x200049c8

08004a24 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004a28:	4802      	ldr	r0, [pc, #8]	; (8004a34 <LTDC_IRQHandler+0x10>)
 8004a2a:	f002 fe17 	bl	800765c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004a2e:	bf00      	nop
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20004538 	.word	0x20004538

08004a38 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004a3c:	4802      	ldr	r0, [pc, #8]	; (8004a48 <DMA2D_IRQHandler+0x10>)
 8004a3e:	f001 f9c1 	bl	8005dc4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004a42:	bf00      	nop
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20004818 	.word	0x20004818

08004a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a54:	4a14      	ldr	r2, [pc, #80]	; (8004aa8 <_sbrk+0x5c>)
 8004a56:	4b15      	ldr	r3, [pc, #84]	; (8004aac <_sbrk+0x60>)
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a60:	4b13      	ldr	r3, [pc, #76]	; (8004ab0 <_sbrk+0x64>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d102      	bne.n	8004a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a68:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <_sbrk+0x64>)
 8004a6a:	4a12      	ldr	r2, [pc, #72]	; (8004ab4 <_sbrk+0x68>)
 8004a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a6e:	4b10      	ldr	r3, [pc, #64]	; (8004ab0 <_sbrk+0x64>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4413      	add	r3, r2
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d207      	bcs.n	8004a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a7c:	f009 fa86 	bl	800df8c <__errno>
 8004a80:	4603      	mov	r3, r0
 8004a82:	220c      	movs	r2, #12
 8004a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a86:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8a:	e009      	b.n	8004aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a8c:	4b08      	ldr	r3, [pc, #32]	; (8004ab0 <_sbrk+0x64>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a92:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <_sbrk+0x64>)
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4413      	add	r3, r2
 8004a9a:	4a05      	ldr	r2, [pc, #20]	; (8004ab0 <_sbrk+0x64>)
 8004a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20050000 	.word	0x20050000
 8004aac:	00000400 	.word	0x00000400
 8004ab0:	20000564 	.word	0x20000564
 8004ab4:	20004a28 	.word	0x20004a28

08004ab8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004abc:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <SystemInit+0x20>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	4a05      	ldr	r2, [pc, #20]	; (8004ad8 <SystemInit+0x20>)
 8004ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004acc:	bf00      	nop
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	e000ed00 	.word	0xe000ed00

08004adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ae0:	480d      	ldr	r0, [pc, #52]	; (8004b18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004ae2:	490e      	ldr	r1, [pc, #56]	; (8004b1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ae4:	4a0e      	ldr	r2, [pc, #56]	; (8004b20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ae8:	e002      	b.n	8004af0 <LoopCopyDataInit>

08004aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004aee:	3304      	adds	r3, #4

08004af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004af4:	d3f9      	bcc.n	8004aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004af6:	4a0b      	ldr	r2, [pc, #44]	; (8004b24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004af8:	4c0b      	ldr	r4, [pc, #44]	; (8004b28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004afc:	e001      	b.n	8004b02 <LoopFillZerobss>

08004afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b00:	3204      	adds	r2, #4

08004b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b04:	d3fb      	bcc.n	8004afe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b06:	f7ff ffd7 	bl	8004ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b0a:	f009 fa45 	bl	800df98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b0e:	f7fb ff65 	bl	80009dc <main>
  bx  lr    
 8004b12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b14:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b1c:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8004b20:	08010a6c 	.word	0x08010a6c
  ldr r2, =_sbss
 8004b24:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8004b28:	20004a28 	.word	0x20004a28

08004b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b2c:	e7fe      	b.n	8004b2c <ADC_IRQHandler>

08004b2e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b32:	2003      	movs	r0, #3
 8004b34:	f000 fcf3 	bl	800551e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b38:	200f      	movs	r0, #15
 8004b3a:	f7ff fedf 	bl	80048fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b3e:	f7ff f939 	bl	8003db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <HAL_IncTick+0x20>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_IncTick+0x24>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4413      	add	r3, r2
 8004b58:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <HAL_IncTick+0x24>)
 8004b5a:	6013      	str	r3, [r2, #0]
}
 8004b5c:	bf00      	nop
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000058 	.word	0x20000058
 8004b6c:	20004a14 	.word	0x20004a14

08004b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return uwTick;
 8004b74:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <HAL_GetTick+0x14>)
 8004b76:	681b      	ldr	r3, [r3, #0]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20004a14 	.word	0x20004a14

08004b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b90:	f7ff ffee 	bl	8004b70 <HAL_GetTick>
 8004b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba0:	d005      	beq.n	8004bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ba2:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <HAL_Delay+0x44>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004bae:	bf00      	nop
 8004bb0:	f7ff ffde 	bl	8004b70 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d8f7      	bhi.n	8004bb0 <HAL_Delay+0x28>
  {
  }
}
 8004bc0:	bf00      	nop
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000058 	.word	0x20000058

08004bd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e031      	b.n	8004c4a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d109      	bne.n	8004c02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7ff f908 	bl	8003e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d116      	bne.n	8004c3c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c12:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <HAL_ADC_Init+0x84>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	f043 0202 	orr.w	r2, r3, #2
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fad6 	bl	80051d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f023 0303 	bic.w	r3, r3, #3
 8004c32:	f043 0201 	orr.w	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
 8004c3a:	e001      	b.n	8004c40 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	ffffeefd 	.word	0xffffeefd

08004c58 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004c60:	2300      	movs	r3, #0
 8004c62:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_ADC_Start+0x1a>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e0ad      	b.n	8004dce <HAL_ADC_Start+0x176>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d018      	beq.n	8004cba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004c98:	4b50      	ldr	r3, [pc, #320]	; (8004ddc <HAL_ADC_Start+0x184>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a50      	ldr	r2, [pc, #320]	; (8004de0 <HAL_ADC_Start+0x188>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	0c9a      	lsrs	r2, r3, #18
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	4413      	add	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004cac:	e002      	b.n	8004cb4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1f9      	bne.n	8004cae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d175      	bne.n	8004db4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ccc:	4b45      	ldr	r3, [pc, #276]	; (8004de4 <HAL_ADC_Start+0x18c>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d007      	beq.n	8004cf6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004cee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d02:	d106      	bne.n	8004d12 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d08:	f023 0206 	bic.w	r2, r3, #6
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	645a      	str	r2, [r3, #68]	; 0x44
 8004d10:	e002      	b.n	8004d18 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004d28:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004d2a:	4b2f      	ldr	r3, [pc, #188]	; (8004de8 <HAL_ADC_Start+0x190>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10f      	bne.n	8004d56 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d143      	bne.n	8004dcc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004d52:	609a      	str	r2, [r3, #8]
 8004d54:	e03a      	b.n	8004dcc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a24      	ldr	r2, [pc, #144]	; (8004dec <HAL_ADC_Start+0x194>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d10e      	bne.n	8004d7e <HAL_ADC_Start+0x126>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d107      	bne.n	8004d7e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004d7c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004d7e:	4b1a      	ldr	r3, [pc, #104]	; (8004de8 <HAL_ADC_Start+0x190>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d120      	bne.n	8004dcc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a18      	ldr	r2, [pc, #96]	; (8004df0 <HAL_ADC_Start+0x198>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d11b      	bne.n	8004dcc <HAL_ADC_Start+0x174>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d114      	bne.n	8004dcc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004db0:	609a      	str	r2, [r3, #8]
 8004db2:	e00b      	b.n	8004dcc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	f043 0210 	orr.w	r2, r3, #16
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc4:	f043 0201 	orr.w	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	20000050 	.word	0x20000050
 8004de0:	431bde83 	.word	0x431bde83
 8004de4:	fffff8fe 	.word	0xfffff8fe
 8004de8:	40012300 	.word	0x40012300
 8004dec:	40012000 	.word	0x40012000
 8004df0:	40012200 	.word	0x40012200

08004df4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e10:	d113      	bne.n	8004e3a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e20:	d10b      	bne.n	8004e3a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	f043 0220 	orr.w	r2, r3, #32
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e063      	b.n	8004f02 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004e3a:	f7ff fe99 	bl	8004b70 <HAL_GetTick>
 8004e3e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004e40:	e021      	b.n	8004e86 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d01d      	beq.n	8004e86 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d007      	beq.n	8004e60 <HAL_ADC_PollForConversion+0x6c>
 8004e50:	f7ff fe8e 	bl	8004b70 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d212      	bcs.n	8004e86 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d00b      	beq.n	8004e86 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f043 0204 	orr.w	r2, r3, #4
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e03d      	b.n	8004f02 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d1d6      	bne.n	8004e42 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0212 	mvn.w	r2, #18
 8004e9c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d123      	bne.n	8004f00 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d11f      	bne.n	8004f00 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d006      	beq.n	8004edc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d111      	bne.n	8004f00 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d105      	bne.n	8004f00 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	f043 0201 	orr.w	r2, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_ADC_ConfigChannel+0x1c>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e136      	b.n	80051ae <HAL_ADC_ConfigChannel+0x28a>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b09      	cmp	r3, #9
 8004f4e:	d93a      	bls.n	8004fc6 <HAL_ADC_ConfigChannel+0xa2>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f58:	d035      	beq.n	8004fc6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68d9      	ldr	r1, [r3, #12]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	4613      	mov	r3, r2
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3b1e      	subs	r3, #30
 8004f70:	2207      	movs	r2, #7
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	43da      	mvns	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	400a      	ands	r2, r1
 8004f7e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a8d      	ldr	r2, [pc, #564]	; (80051bc <HAL_ADC_ConfigChannel+0x298>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d10a      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68d9      	ldr	r1, [r3, #12]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	061a      	lsls	r2, r3, #24
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f9e:	e035      	b.n	800500c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68d9      	ldr	r1, [r3, #12]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4403      	add	r3, r0
 8004fb8:	3b1e      	subs	r3, #30
 8004fba:	409a      	lsls	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fc4:	e022      	b.n	800500c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6919      	ldr	r1, [r3, #16]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	4413      	add	r3, r2
 8004fda:	2207      	movs	r2, #7
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	43da      	mvns	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	400a      	ands	r2, r1
 8004fe8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6919      	ldr	r1, [r3, #16]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	4403      	add	r3, r0
 8005002:	409a      	lsls	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b06      	cmp	r3, #6
 8005012:	d824      	bhi.n	800505e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	3b05      	subs	r3, #5
 8005026:	221f      	movs	r2, #31
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	43da      	mvns	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	400a      	ands	r2, r1
 8005034:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	4618      	mov	r0, r3
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	3b05      	subs	r3, #5
 8005050:	fa00 f203 	lsl.w	r2, r0, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	635a      	str	r2, [r3, #52]	; 0x34
 800505c:	e04c      	b.n	80050f8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b0c      	cmp	r3, #12
 8005064:	d824      	bhi.n	80050b0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	4613      	mov	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	3b23      	subs	r3, #35	; 0x23
 8005078:	221f      	movs	r2, #31
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	43da      	mvns	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	400a      	ands	r2, r1
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	b29b      	uxth	r3, r3
 8005094:	4618      	mov	r0, r3
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	3b23      	subs	r3, #35	; 0x23
 80050a2:	fa00 f203 	lsl.w	r2, r0, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30
 80050ae:	e023      	b.n	80050f8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	3b41      	subs	r3, #65	; 0x41
 80050c2:	221f      	movs	r2, #31
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	43da      	mvns	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	400a      	ands	r2, r1
 80050d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	4618      	mov	r0, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	3b41      	subs	r3, #65	; 0x41
 80050ec:	fa00 f203 	lsl.w	r2, r0, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a30      	ldr	r2, [pc, #192]	; (80051c0 <HAL_ADC_ConfigChannel+0x29c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d10a      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x1f4>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800510a:	d105      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800510c:	4b2d      	ldr	r3, [pc, #180]	; (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	4a2c      	ldr	r2, [pc, #176]	; (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005112:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005116:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a28      	ldr	r2, [pc, #160]	; (80051c0 <HAL_ADC_ConfigChannel+0x29c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d10f      	bne.n	8005142 <HAL_ADC_ConfigChannel+0x21e>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b12      	cmp	r3, #18
 8005128:	d10b      	bne.n	8005142 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800512a:	4b26      	ldr	r3, [pc, #152]	; (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	4a25      	ldr	r2, [pc, #148]	; (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005130:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005134:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005136:	4b23      	ldr	r3, [pc, #140]	; (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4a22      	ldr	r2, [pc, #136]	; (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800513c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005140:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a1e      	ldr	r2, [pc, #120]	; (80051c0 <HAL_ADC_ConfigChannel+0x29c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d12b      	bne.n	80051a4 <HAL_ADC_ConfigChannel+0x280>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1a      	ldr	r2, [pc, #104]	; (80051bc <HAL_ADC_ConfigChannel+0x298>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d003      	beq.n	800515e <HAL_ADC_ConfigChannel+0x23a>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b11      	cmp	r3, #17
 800515c:	d122      	bne.n	80051a4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800515e:	4b19      	ldr	r3, [pc, #100]	; (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	4a18      	ldr	r2, [pc, #96]	; (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005164:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005168:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800516a:	4b16      	ldr	r3, [pc, #88]	; (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	4a15      	ldr	r2, [pc, #84]	; (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005170:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005174:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a10      	ldr	r2, [pc, #64]	; (80051bc <HAL_ADC_ConfigChannel+0x298>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d111      	bne.n	80051a4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005180:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <HAL_ADC_ConfigChannel+0x2a4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a11      	ldr	r2, [pc, #68]	; (80051cc <HAL_ADC_ConfigChannel+0x2a8>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	0c9a      	lsrs	r2, r3, #18
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005196:	e002      	b.n	800519e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3b01      	subs	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1f9      	bne.n	8005198 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	10000012 	.word	0x10000012
 80051c0:	40012000 	.word	0x40012000
 80051c4:	40012300 	.word	0x40012300
 80051c8:	20000050 	.word	0x20000050
 80051cc:	431bde83 	.word	0x431bde83

080051d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80051d8:	4b78      	ldr	r3, [pc, #480]	; (80053bc <ADC_Init+0x1ec>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	4a77      	ldr	r2, [pc, #476]	; (80053bc <ADC_Init+0x1ec>)
 80051de:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80051e2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80051e4:	4b75      	ldr	r3, [pc, #468]	; (80053bc <ADC_Init+0x1ec>)
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	4973      	ldr	r1, [pc, #460]	; (80053bc <ADC_Init+0x1ec>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005200:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6859      	ldr	r1, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	021a      	lsls	r2, r3, #8
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005224:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6859      	ldr	r1, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005246:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6899      	ldr	r1, [r3, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525e:	4a58      	ldr	r2, [pc, #352]	; (80053c0 <ADC_Init+0x1f0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d022      	beq.n	80052aa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005272:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6899      	ldr	r1, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005294:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6899      	ldr	r1, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	609a      	str	r2, [r3, #8]
 80052a8:	e00f      	b.n	80052ca <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80052c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0202 	bic.w	r2, r2, #2
 80052d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6899      	ldr	r1, [r3, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	005a      	lsls	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01b      	beq.n	8005330 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005306:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005316:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6859      	ldr	r1, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	3b01      	subs	r3, #1
 8005324:	035a      	lsls	r2, r3, #13
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	605a      	str	r2, [r3, #4]
 800532e:	e007      	b.n	8005340 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800533e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800534e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	3b01      	subs	r3, #1
 800535c:	051a      	lsls	r2, r3, #20
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005374:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6899      	ldr	r1, [r3, #8]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005382:	025a      	lsls	r2, r3, #9
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6899      	ldr	r1, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	029a      	lsls	r2, r3, #10
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	609a      	str	r2, [r3, #8]
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	40012300 	.word	0x40012300
 80053c0:	0f000001 	.word	0x0f000001

080053c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053d4:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <__NVIC_SetPriorityGrouping+0x40>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053e0:	4013      	ands	r3, r2
 80053e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80053ec:	4b06      	ldr	r3, [pc, #24]	; (8005408 <__NVIC_SetPriorityGrouping+0x44>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053f2:	4a04      	ldr	r2, [pc, #16]	; (8005404 <__NVIC_SetPriorityGrouping+0x40>)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	60d3      	str	r3, [r2, #12]
}
 80053f8:	bf00      	nop
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	e000ed00 	.word	0xe000ed00
 8005408:	05fa0000 	.word	0x05fa0000

0800540c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005410:	4b04      	ldr	r3, [pc, #16]	; (8005424 <__NVIC_GetPriorityGrouping+0x18>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	0a1b      	lsrs	r3, r3, #8
 8005416:	f003 0307 	and.w	r3, r3, #7
}
 800541a:	4618      	mov	r0, r3
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	e000ed00 	.word	0xe000ed00

08005428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005436:	2b00      	cmp	r3, #0
 8005438:	db0b      	blt.n	8005452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	f003 021f 	and.w	r2, r3, #31
 8005440:	4907      	ldr	r1, [pc, #28]	; (8005460 <__NVIC_EnableIRQ+0x38>)
 8005442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005446:	095b      	lsrs	r3, r3, #5
 8005448:	2001      	movs	r0, #1
 800544a:	fa00 f202 	lsl.w	r2, r0, r2
 800544e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	e000e100 	.word	0xe000e100

08005464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	4603      	mov	r3, r0
 800546c:	6039      	str	r1, [r7, #0]
 800546e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005474:	2b00      	cmp	r3, #0
 8005476:	db0a      	blt.n	800548e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	b2da      	uxtb	r2, r3
 800547c:	490c      	ldr	r1, [pc, #48]	; (80054b0 <__NVIC_SetPriority+0x4c>)
 800547e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005482:	0112      	lsls	r2, r2, #4
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	440b      	add	r3, r1
 8005488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800548c:	e00a      	b.n	80054a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	b2da      	uxtb	r2, r3
 8005492:	4908      	ldr	r1, [pc, #32]	; (80054b4 <__NVIC_SetPriority+0x50>)
 8005494:	79fb      	ldrb	r3, [r7, #7]
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	3b04      	subs	r3, #4
 800549c:	0112      	lsls	r2, r2, #4
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	440b      	add	r3, r1
 80054a2:	761a      	strb	r2, [r3, #24]
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	e000e100 	.word	0xe000e100
 80054b4:	e000ed00 	.word	0xe000ed00

080054b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b089      	sub	sp, #36	; 0x24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f1c3 0307 	rsb	r3, r3, #7
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	bf28      	it	cs
 80054d6:	2304      	movcs	r3, #4
 80054d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	3304      	adds	r3, #4
 80054de:	2b06      	cmp	r3, #6
 80054e0:	d902      	bls.n	80054e8 <NVIC_EncodePriority+0x30>
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	3b03      	subs	r3, #3
 80054e6:	e000      	b.n	80054ea <NVIC_EncodePriority+0x32>
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054ec:	f04f 32ff 	mov.w	r2, #4294967295
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	43da      	mvns	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	401a      	ands	r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005500:	f04f 31ff 	mov.w	r1, #4294967295
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	fa01 f303 	lsl.w	r3, r1, r3
 800550a:	43d9      	mvns	r1, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005510:	4313      	orrs	r3, r2
         );
}
 8005512:	4618      	mov	r0, r3
 8005514:	3724      	adds	r7, #36	; 0x24
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7ff ff4c 	bl	80053c4 <__NVIC_SetPriorityGrouping>
}
 800552c:	bf00      	nop
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	4603      	mov	r3, r0
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005546:	f7ff ff61 	bl	800540c <__NVIC_GetPriorityGrouping>
 800554a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	6978      	ldr	r0, [r7, #20]
 8005552:	f7ff ffb1 	bl	80054b8 <NVIC_EncodePriority>
 8005556:	4602      	mov	r2, r0
 8005558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800555c:	4611      	mov	r1, r2
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff ff80 	bl	8005464 <__NVIC_SetPriority>
}
 8005564:	bf00      	nop
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	4603      	mov	r3, r0
 8005574:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff ff54 	bl	8005428 <__NVIC_EnableIRQ>
}
 8005580:	bf00      	nop
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e014      	b.n	80055c4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	791b      	ldrb	r3, [r3, #4]
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d105      	bne.n	80055b0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fe fc98 	bl	8003ee0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e2:	d120      	bne.n	8005626 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f2:	d118      	bne.n	8005626 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2204      	movs	r2, #4
 80055f8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f043 0201 	orr.w	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800560e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800561e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f82d 	bl	8005680 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005634:	d120      	bne.n	8005678 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005644:	d118      	bne.n	8005678 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2204      	movs	r2, #4
 800564a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f043 0202 	orr.w	r2, r3, #2
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005660:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005670:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f85d 	bl	8005732 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005678:	bf00      	nop
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	795b      	ldrb	r3, [r3, #5]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_DAC_ConfigChannel+0x18>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e03c      	b.n	8005726 <HAL_DAC_ConfigChannel+0x92>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2202      	movs	r2, #2
 80056b6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f003 0310 	and.w	r3, r3, #16
 80056c6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	43db      	mvns	r3, r3
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4013      	ands	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	4313      	orrs	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f003 0310 	and.w	r3, r3, #16
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6819      	ldr	r1, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	22c0      	movs	r2, #192	; 0xc0
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	43da      	mvns	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	400a      	ands	r2, r1
 8005716:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2201      	movs	r2, #1
 800571c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
	...

08005748 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005754:	f7ff fa0c 	bl	8004b70 <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e099      	b.n	8005898 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0201 	bic.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005784:	e00f      	b.n	80057a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005786:	f7ff f9f3 	bl	8004b70 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b05      	cmp	r3, #5
 8005792:	d908      	bls.n	80057a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2220      	movs	r2, #32
 8005798:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2203      	movs	r2, #3
 800579e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e078      	b.n	8005898 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e8      	bne.n	8005786 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	4b38      	ldr	r3, [pc, #224]	; (80058a0 <HAL_DMA_Init+0x158>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d107      	bne.n	8005810 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	4313      	orrs	r3, r2
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	4313      	orrs	r3, r2
 800580e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f023 0307 	bic.w	r3, r3, #7
 8005826:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	2b04      	cmp	r3, #4
 8005838:	d117      	bne.n	800586a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00e      	beq.n	800586a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f8df 	bl	8005a10 <DMA_CheckFifoParam>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d008      	beq.n	800586a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2240      	movs	r2, #64	; 0x40
 800585c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005866:	2301      	movs	r3, #1
 8005868:	e016      	b.n	8005898 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f896 	bl	80059a4 <DMA_CalcBaseAndBitshift>
 8005878:	4603      	mov	r3, r0
 800587a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005880:	223f      	movs	r2, #63	; 0x3f
 8005882:	409a      	lsls	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	f010803f 	.word	0xf010803f

080058a4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e050      	b.n	8005958 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d101      	bne.n	80058c6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80058c2:	2302      	movs	r3, #2
 80058c4:	e048      	b.n	8005958 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0201 	bic.w	r2, r2, #1
 80058d4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2200      	movs	r2, #0
 80058e4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2200      	movs	r2, #0
 80058ec:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2200      	movs	r2, #0
 80058f4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2200      	movs	r2, #0
 80058fc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2221      	movs	r2, #33	; 0x21
 8005904:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f84c 	bl	80059a4 <DMA_CalcBaseAndBitshift>
 800590c:	4603      	mov	r3, r0
 800590e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005914:	223f      	movs	r2, #63	; 0x3f
 8005916:	409a      	lsls	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d004      	beq.n	800597e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2280      	movs	r2, #128	; 0x80
 8005978:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e00c      	b.n	8005998 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2205      	movs	r2, #5
 8005982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0201 	bic.w	r2, r2, #1
 8005994:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	3b10      	subs	r3, #16
 80059b4:	4a13      	ldr	r2, [pc, #76]	; (8005a04 <DMA_CalcBaseAndBitshift+0x60>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	091b      	lsrs	r3, r3, #4
 80059bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059be:	4a12      	ldr	r2, [pc, #72]	; (8005a08 <DMA_CalcBaseAndBitshift+0x64>)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d908      	bls.n	80059e4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	4b0c      	ldr	r3, [pc, #48]	; (8005a0c <DMA_CalcBaseAndBitshift+0x68>)
 80059da:	4013      	ands	r3, r2
 80059dc:	1d1a      	adds	r2, r3, #4
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	659a      	str	r2, [r3, #88]	; 0x58
 80059e2:	e006      	b.n	80059f2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	461a      	mov	r2, r3
 80059ea:	4b08      	ldr	r3, [pc, #32]	; (8005a0c <DMA_CalcBaseAndBitshift+0x68>)
 80059ec:	4013      	ands	r3, r2
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	aaaaaaab 	.word	0xaaaaaaab
 8005a08:	080109c0 	.word	0x080109c0
 8005a0c:	fffffc00 	.word	0xfffffc00

08005a10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d11f      	bne.n	8005a6a <DMA_CheckFifoParam+0x5a>
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b03      	cmp	r3, #3
 8005a2e:	d856      	bhi.n	8005ade <DMA_CheckFifoParam+0xce>
 8005a30:	a201      	add	r2, pc, #4	; (adr r2, 8005a38 <DMA_CheckFifoParam+0x28>)
 8005a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a36:	bf00      	nop
 8005a38:	08005a49 	.word	0x08005a49
 8005a3c:	08005a5b 	.word	0x08005a5b
 8005a40:	08005a49 	.word	0x08005a49
 8005a44:	08005adf 	.word	0x08005adf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d046      	beq.n	8005ae2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a58:	e043      	b.n	8005ae2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a62:	d140      	bne.n	8005ae6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a68:	e03d      	b.n	8005ae6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a72:	d121      	bne.n	8005ab8 <DMA_CheckFifoParam+0xa8>
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d837      	bhi.n	8005aea <DMA_CheckFifoParam+0xda>
 8005a7a:	a201      	add	r2, pc, #4	; (adr r2, 8005a80 <DMA_CheckFifoParam+0x70>)
 8005a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a80:	08005a91 	.word	0x08005a91
 8005a84:	08005a97 	.word	0x08005a97
 8005a88:	08005a91 	.word	0x08005a91
 8005a8c:	08005aa9 	.word	0x08005aa9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	73fb      	strb	r3, [r7, #15]
      break;
 8005a94:	e030      	b.n	8005af8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d025      	beq.n	8005aee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aa6:	e022      	b.n	8005aee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ab0:	d11f      	bne.n	8005af2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ab6:	e01c      	b.n	8005af2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d903      	bls.n	8005ac6 <DMA_CheckFifoParam+0xb6>
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d003      	beq.n	8005acc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005ac4:	e018      	b.n	8005af8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	73fb      	strb	r3, [r7, #15]
      break;
 8005aca:	e015      	b.n	8005af8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00e      	beq.n	8005af6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	73fb      	strb	r3, [r7, #15]
      break;
 8005adc:	e00b      	b.n	8005af6 <DMA_CheckFifoParam+0xe6>
      break;
 8005ade:	bf00      	nop
 8005ae0:	e00a      	b.n	8005af8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ae2:	bf00      	nop
 8005ae4:	e008      	b.n	8005af8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ae6:	bf00      	nop
 8005ae8:	e006      	b.n	8005af8 <DMA_CheckFifoParam+0xe8>
      break;
 8005aea:	bf00      	nop
 8005aec:	e004      	b.n	8005af8 <DMA_CheckFifoParam+0xe8>
      break;
 8005aee:	bf00      	nop
 8005af0:	e002      	b.n	8005af8 <DMA_CheckFifoParam+0xe8>
      break;   
 8005af2:	bf00      	nop
 8005af4:	e000      	b.n	8005af8 <DMA_CheckFifoParam+0xe8>
      break;
 8005af6:	bf00      	nop
    }
  } 
  
  return status; 
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop

08005b08 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e039      	b.n	8005b8e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fe fa1e 	bl	8003f70 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b58:	f023 0107 	bic.w	r1, r3, #7
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b6e:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <HAL_DMA2D_Init+0x90>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	68d1      	ldr	r1, [r2, #12]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6812      	ldr	r2, [r2, #0]
 8005b7a:	430b      	orrs	r3, r1
 8005b7c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	ffffc000 	.word	0xffffc000

08005b9c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af02      	add	r7, sp, #8
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d101      	bne.n	8005bb8 <HAL_DMA2D_Start+0x1c>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e018      	b.n	8005bea <HAL_DMA2D_Start+0x4e>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 fa98 	bl	8006108 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0201 	orr.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b086      	sub	sp, #24
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d056      	beq.n	8005cbc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c0e:	f7fe ffaf 	bl	8004b70 <HAL_GetTick>
 8005c12:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005c14:	e04b      	b.n	8005cae <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d023      	beq.n	8005c70 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d005      	beq.n	8005c3e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c36:	f043 0202 	orr.w	r2, r3, #2
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4c:	f043 0201 	orr.w	r2, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2221      	movs	r2, #33	; 0x21
 8005c5a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2204      	movs	r2, #4
 8005c60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0a5      	b.n	8005dbc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c76:	d01a      	beq.n	8005cae <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c78:	f7fe ff7a 	bl	8004b70 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d302      	bcc.n	8005c8e <HAL_DMA2D_PollForTransfer+0x9c>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10f      	bne.n	8005cae <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c92:	f043 0220 	orr.w	r2, r3, #32
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2203      	movs	r2, #3
 8005c9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e086      	b.n	8005dbc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0ac      	beq.n	8005c16 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d061      	beq.n	8005da2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cde:	f7fe ff47 	bl	8004b70 <HAL_GetTick>
 8005ce2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005ce4:	e056      	b.n	8005d94 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d02e      	beq.n	8005d56 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 0308 	and.w	r3, r3, #8
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d005      	beq.n	8005d0e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d06:	f043 0204 	orr.w	r2, r3, #4
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1c:	f043 0202 	orr.w	r2, r3, #2
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d32:	f043 0201 	orr.w	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2229      	movs	r2, #41	; 0x29
 8005d40:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2204      	movs	r2, #4
 8005d46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e032      	b.n	8005dbc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5c:	d01a      	beq.n	8005d94 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d5e:	f7fe ff07 	bl	8004b70 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d302      	bcc.n	8005d74 <HAL_DMA2D_PollForTransfer+0x182>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10f      	bne.n	8005d94 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d78:	f043 0220 	orr.w	r2, r3, #32
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2203      	movs	r2, #3
 8005d84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e013      	b.n	8005dbc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f003 0310 	and.w	r3, r3, #16
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0a1      	beq.n	8005ce6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2212      	movs	r2, #18
 8005da8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d026      	beq.n	8005e34 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d021      	beq.n	8005e34 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dfe:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e04:	f043 0201 	orr.w	r2, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2201      	movs	r2, #1
 8005e12:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2204      	movs	r2, #4
 8005e18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d026      	beq.n	8005e8c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d021      	beq.n	8005e8c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e56:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e64:	f043 0202 	orr.w	r2, r3, #2
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2204      	movs	r2, #4
 8005e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d026      	beq.n	8005ee4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d021      	beq.n	8005ee4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eae:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2208      	movs	r2, #8
 8005eb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebc:	f043 0204 	orr.w	r2, r3, #4
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2204      	movs	r2, #4
 8005ec8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d003      	beq.n	8005ee4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f003 0304 	and.w	r3, r3, #4
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d013      	beq.n	8005f16 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00e      	beq.n	8005f16 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f06:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2204      	movs	r2, #4
 8005f0e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f853 	bl	8005fbc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d024      	beq.n	8005f6a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d01f      	beq.n	8005f6a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f38:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01f      	beq.n	8005fb4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d01a      	beq.n	8005fb4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f8c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2210      	movs	r2, #16
 8005f94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f80e 	bl	8005fd0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005fb4:	bf00      	nop
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_DMA2D_ConfigLayer+0x20>
 8006000:	2302      	movs	r3, #2
 8006002:	e079      	b.n	80060f8 <HAL_DMA2D_ConfigLayer+0x114>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	3318      	adds	r3, #24
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	4413      	add	r3, r2
 800601e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	041b      	lsls	r3, r3, #16
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800602e:	4b35      	ldr	r3, [pc, #212]	; (8006104 <HAL_DMA2D_ConfigLayer+0x120>)
 8006030:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2b0a      	cmp	r3, #10
 8006038:	d003      	beq.n	8006042 <HAL_DMA2D_ConfigLayer+0x5e>
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2b09      	cmp	r3, #9
 8006040:	d107      	bne.n	8006052 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e005      	b.n	800605e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	061b      	lsls	r3, r3, #24
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d120      	bne.n	80060a6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	43db      	mvns	r3, r3
 800606e:	ea02 0103 	and.w	r1, r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	430a      	orrs	r2, r1
 800607a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	6812      	ldr	r2, [r2, #0]
 8006084:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2b0a      	cmp	r3, #10
 800608c:	d003      	beq.n	8006096 <HAL_DMA2D_ConfigLayer+0xb2>
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	2b09      	cmp	r3, #9
 8006094:	d127      	bne.n	80060e6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80060a2:	629a      	str	r2, [r3, #40]	; 0x28
 80060a4:	e01f      	b.n	80060e6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69da      	ldr	r2, [r3, #28]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	43db      	mvns	r3, r3
 80060b0:	ea02 0103 	and.w	r1, r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	6812      	ldr	r2, [r2, #0]
 80060c6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	2b0a      	cmp	r3, #10
 80060ce:	d003      	beq.n	80060d8 <HAL_DMA2D_ConfigLayer+0xf4>
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2b09      	cmp	r3, #9
 80060d6:	d106      	bne.n	80060e6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80060e4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	371c      	adds	r7, #28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	ff03000f 	.word	0xff03000f

08006108 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006108:	b480      	push	{r7}
 800610a:	b08b      	sub	sp, #44	; 0x2c
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	041a      	lsls	r2, r3, #16
 8006124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006126:	431a      	orrs	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006140:	d174      	bne.n	800622c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006148:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006150:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006158:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d108      	bne.n	800617a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	431a      	orrs	r2, r3
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	4313      	orrs	r3, r2
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	627b      	str	r3, [r7, #36]	; 0x24
 8006178:	e053      	b.n	8006222 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d106      	bne.n	8006190 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	4313      	orrs	r3, r2
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
 800618e:	e048      	b.n	8006222 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d111      	bne.n	80061bc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	0cdb      	lsrs	r3, r3, #19
 800619c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	0a9b      	lsrs	r3, r3, #10
 80061a2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	08db      	lsrs	r3, r3, #3
 80061a8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	02db      	lsls	r3, r3, #11
 80061b2:	4313      	orrs	r3, r2
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
 80061ba:	e032      	b.n	8006222 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d117      	bne.n	80061f4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	0fdb      	lsrs	r3, r3, #31
 80061c8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	0cdb      	lsrs	r3, r3, #19
 80061ce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	0adb      	lsrs	r3, r3, #11
 80061d4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	08db      	lsrs	r3, r3, #3
 80061da:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	029b      	lsls	r3, r3, #10
 80061e4:	431a      	orrs	r2, r3
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	03db      	lsls	r3, r3, #15
 80061ea:	4313      	orrs	r3, r2
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
 80061f2:	e016      	b.n	8006222 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	0f1b      	lsrs	r3, r3, #28
 80061f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	0d1b      	lsrs	r3, r3, #20
 80061fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	0b1b      	lsrs	r3, r3, #12
 8006204:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	091b      	lsrs	r3, r3, #4
 800620a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	011a      	lsls	r2, r3, #4
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	021b      	lsls	r3, r3, #8
 8006214:	431a      	orrs	r2, r3
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	031b      	lsls	r3, r3, #12
 800621a:	4313      	orrs	r3, r2
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006228:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800622a:	e003      	b.n	8006234 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	60da      	str	r2, [r3, #12]
}
 8006234:	bf00      	nop
 8006236:	372c      	adds	r7, #44	; 0x2c
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006240:	b480      	push	{r7}
 8006242:	b089      	sub	sp, #36	; 0x24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800624a:	2300      	movs	r3, #0
 800624c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006252:	2300      	movs	r3, #0
 8006254:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006256:	2300      	movs	r3, #0
 8006258:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800625a:	2300      	movs	r3, #0
 800625c:	61fb      	str	r3, [r7, #28]
 800625e:	e175      	b.n	800654c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006260:	2201      	movs	r2, #1
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	4013      	ands	r3, r2
 8006272:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	429a      	cmp	r2, r3
 800627a:	f040 8164 	bne.w	8006546 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	2b01      	cmp	r3, #1
 8006288:	d005      	beq.n	8006296 <HAL_GPIO_Init+0x56>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d130      	bne.n	80062f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	2203      	movs	r2, #3
 80062a2:	fa02 f303 	lsl.w	r3, r2, r3
 80062a6:	43db      	mvns	r3, r3
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	4013      	ands	r3, r2
 80062ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	4313      	orrs	r3, r2
 80062be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062cc:	2201      	movs	r2, #1
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	43db      	mvns	r3, r3
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	4013      	ands	r3, r2
 80062da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	091b      	lsrs	r3, r3, #4
 80062e2:	f003 0201 	and.w	r2, r3, #1
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f003 0303 	and.w	r3, r3, #3
 8006300:	2b03      	cmp	r3, #3
 8006302:	d017      	beq.n	8006334 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	2203      	movs	r2, #3
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	43db      	mvns	r3, r3
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	4013      	ands	r3, r2
 800631a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	4313      	orrs	r3, r2
 800632c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f003 0303 	and.w	r3, r3, #3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d123      	bne.n	8006388 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	08da      	lsrs	r2, r3, #3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3208      	adds	r2, #8
 8006348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800634c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	f003 0307 	and.w	r3, r3, #7
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	220f      	movs	r2, #15
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	43db      	mvns	r3, r3
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	4013      	ands	r3, r2
 8006362:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	691a      	ldr	r2, [r3, #16]
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	f003 0307 	and.w	r3, r3, #7
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	fa02 f303 	lsl.w	r3, r2, r3
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	4313      	orrs	r3, r2
 8006378:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	08da      	lsrs	r2, r3, #3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3208      	adds	r2, #8
 8006382:	69b9      	ldr	r1, [r7, #24]
 8006384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	2203      	movs	r2, #3
 8006394:	fa02 f303 	lsl.w	r3, r2, r3
 8006398:	43db      	mvns	r3, r3
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	4013      	ands	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f003 0203 	and.w	r2, r3, #3
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 80be 	beq.w	8006546 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063ca:	4b66      	ldr	r3, [pc, #408]	; (8006564 <HAL_GPIO_Init+0x324>)
 80063cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ce:	4a65      	ldr	r2, [pc, #404]	; (8006564 <HAL_GPIO_Init+0x324>)
 80063d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063d4:	6453      	str	r3, [r2, #68]	; 0x44
 80063d6:	4b63      	ldr	r3, [pc, #396]	; (8006564 <HAL_GPIO_Init+0x324>)
 80063d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80063e2:	4a61      	ldr	r2, [pc, #388]	; (8006568 <HAL_GPIO_Init+0x328>)
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	089b      	lsrs	r3, r3, #2
 80063e8:	3302      	adds	r3, #2
 80063ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	220f      	movs	r2, #15
 80063fa:	fa02 f303 	lsl.w	r3, r2, r3
 80063fe:	43db      	mvns	r3, r3
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	4013      	ands	r3, r2
 8006404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a58      	ldr	r2, [pc, #352]	; (800656c <HAL_GPIO_Init+0x32c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d037      	beq.n	800647e <HAL_GPIO_Init+0x23e>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a57      	ldr	r2, [pc, #348]	; (8006570 <HAL_GPIO_Init+0x330>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d031      	beq.n	800647a <HAL_GPIO_Init+0x23a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a56      	ldr	r2, [pc, #344]	; (8006574 <HAL_GPIO_Init+0x334>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d02b      	beq.n	8006476 <HAL_GPIO_Init+0x236>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a55      	ldr	r2, [pc, #340]	; (8006578 <HAL_GPIO_Init+0x338>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d025      	beq.n	8006472 <HAL_GPIO_Init+0x232>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a54      	ldr	r2, [pc, #336]	; (800657c <HAL_GPIO_Init+0x33c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d01f      	beq.n	800646e <HAL_GPIO_Init+0x22e>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a53      	ldr	r2, [pc, #332]	; (8006580 <HAL_GPIO_Init+0x340>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d019      	beq.n	800646a <HAL_GPIO_Init+0x22a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a52      	ldr	r2, [pc, #328]	; (8006584 <HAL_GPIO_Init+0x344>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d013      	beq.n	8006466 <HAL_GPIO_Init+0x226>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a51      	ldr	r2, [pc, #324]	; (8006588 <HAL_GPIO_Init+0x348>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00d      	beq.n	8006462 <HAL_GPIO_Init+0x222>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a50      	ldr	r2, [pc, #320]	; (800658c <HAL_GPIO_Init+0x34c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d007      	beq.n	800645e <HAL_GPIO_Init+0x21e>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a4f      	ldr	r2, [pc, #316]	; (8006590 <HAL_GPIO_Init+0x350>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d101      	bne.n	800645a <HAL_GPIO_Init+0x21a>
 8006456:	2309      	movs	r3, #9
 8006458:	e012      	b.n	8006480 <HAL_GPIO_Init+0x240>
 800645a:	230a      	movs	r3, #10
 800645c:	e010      	b.n	8006480 <HAL_GPIO_Init+0x240>
 800645e:	2308      	movs	r3, #8
 8006460:	e00e      	b.n	8006480 <HAL_GPIO_Init+0x240>
 8006462:	2307      	movs	r3, #7
 8006464:	e00c      	b.n	8006480 <HAL_GPIO_Init+0x240>
 8006466:	2306      	movs	r3, #6
 8006468:	e00a      	b.n	8006480 <HAL_GPIO_Init+0x240>
 800646a:	2305      	movs	r3, #5
 800646c:	e008      	b.n	8006480 <HAL_GPIO_Init+0x240>
 800646e:	2304      	movs	r3, #4
 8006470:	e006      	b.n	8006480 <HAL_GPIO_Init+0x240>
 8006472:	2303      	movs	r3, #3
 8006474:	e004      	b.n	8006480 <HAL_GPIO_Init+0x240>
 8006476:	2302      	movs	r3, #2
 8006478:	e002      	b.n	8006480 <HAL_GPIO_Init+0x240>
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <HAL_GPIO_Init+0x240>
 800647e:	2300      	movs	r3, #0
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	f002 0203 	and.w	r2, r2, #3
 8006486:	0092      	lsls	r2, r2, #2
 8006488:	4093      	lsls	r3, r2
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	4313      	orrs	r3, r2
 800648e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006490:	4935      	ldr	r1, [pc, #212]	; (8006568 <HAL_GPIO_Init+0x328>)
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	089b      	lsrs	r3, r3, #2
 8006496:	3302      	adds	r3, #2
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800649e:	4b3d      	ldr	r3, [pc, #244]	; (8006594 <HAL_GPIO_Init+0x354>)
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	43db      	mvns	r3, r3
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	4013      	ands	r3, r2
 80064ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064c2:	4a34      	ldr	r2, [pc, #208]	; (8006594 <HAL_GPIO_Init+0x354>)
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064c8:	4b32      	ldr	r3, [pc, #200]	; (8006594 <HAL_GPIO_Init+0x354>)
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	43db      	mvns	r3, r3
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	4013      	ands	r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064ec:	4a29      	ldr	r2, [pc, #164]	; (8006594 <HAL_GPIO_Init+0x354>)
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80064f2:	4b28      	ldr	r3, [pc, #160]	; (8006594 <HAL_GPIO_Init+0x354>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	43db      	mvns	r3, r3
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	4013      	ands	r3, r2
 8006500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006516:	4a1f      	ldr	r2, [pc, #124]	; (8006594 <HAL_GPIO_Init+0x354>)
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800651c:	4b1d      	ldr	r3, [pc, #116]	; (8006594 <HAL_GPIO_Init+0x354>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	43db      	mvns	r3, r3
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	4013      	ands	r3, r2
 800652a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	4313      	orrs	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006540:	4a14      	ldr	r2, [pc, #80]	; (8006594 <HAL_GPIO_Init+0x354>)
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	3301      	adds	r3, #1
 800654a:	61fb      	str	r3, [r7, #28]
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	2b0f      	cmp	r3, #15
 8006550:	f67f ae86 	bls.w	8006260 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop
 8006558:	3724      	adds	r7, #36	; 0x24
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	40023800 	.word	0x40023800
 8006568:	40013800 	.word	0x40013800
 800656c:	40020000 	.word	0x40020000
 8006570:	40020400 	.word	0x40020400
 8006574:	40020800 	.word	0x40020800
 8006578:	40020c00 	.word	0x40020c00
 800657c:	40021000 	.word	0x40021000
 8006580:	40021400 	.word	0x40021400
 8006584:	40021800 	.word	0x40021800
 8006588:	40021c00 	.word	0x40021c00
 800658c:	40022000 	.word	0x40022000
 8006590:	40022400 	.word	0x40022400
 8006594:	40013c00 	.word	0x40013c00

08006598 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80065a2:	2300      	movs	r3, #0
 80065a4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80065ae:	2300      	movs	r3, #0
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	e0d9      	b.n	8006768 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80065b4:	2201      	movs	r2, #1
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	fa02 f303 	lsl.w	r3, r2, r3
 80065bc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	4013      	ands	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	f040 80c9 	bne.w	8006762 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80065d0:	4a6b      	ldr	r2, [pc, #428]	; (8006780 <HAL_GPIO_DeInit+0x1e8>)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	089b      	lsrs	r3, r3, #2
 80065d6:	3302      	adds	r3, #2
 80065d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065dc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f003 0303 	and.w	r3, r3, #3
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	220f      	movs	r2, #15
 80065e8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	4013      	ands	r3, r2
 80065f0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a63      	ldr	r2, [pc, #396]	; (8006784 <HAL_GPIO_DeInit+0x1ec>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d037      	beq.n	800666a <HAL_GPIO_DeInit+0xd2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a62      	ldr	r2, [pc, #392]	; (8006788 <HAL_GPIO_DeInit+0x1f0>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d031      	beq.n	8006666 <HAL_GPIO_DeInit+0xce>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a61      	ldr	r2, [pc, #388]	; (800678c <HAL_GPIO_DeInit+0x1f4>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d02b      	beq.n	8006662 <HAL_GPIO_DeInit+0xca>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a60      	ldr	r2, [pc, #384]	; (8006790 <HAL_GPIO_DeInit+0x1f8>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d025      	beq.n	800665e <HAL_GPIO_DeInit+0xc6>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a5f      	ldr	r2, [pc, #380]	; (8006794 <HAL_GPIO_DeInit+0x1fc>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d01f      	beq.n	800665a <HAL_GPIO_DeInit+0xc2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a5e      	ldr	r2, [pc, #376]	; (8006798 <HAL_GPIO_DeInit+0x200>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d019      	beq.n	8006656 <HAL_GPIO_DeInit+0xbe>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a5d      	ldr	r2, [pc, #372]	; (800679c <HAL_GPIO_DeInit+0x204>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d013      	beq.n	8006652 <HAL_GPIO_DeInit+0xba>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a5c      	ldr	r2, [pc, #368]	; (80067a0 <HAL_GPIO_DeInit+0x208>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d00d      	beq.n	800664e <HAL_GPIO_DeInit+0xb6>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a5b      	ldr	r2, [pc, #364]	; (80067a4 <HAL_GPIO_DeInit+0x20c>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d007      	beq.n	800664a <HAL_GPIO_DeInit+0xb2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a5a      	ldr	r2, [pc, #360]	; (80067a8 <HAL_GPIO_DeInit+0x210>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d101      	bne.n	8006646 <HAL_GPIO_DeInit+0xae>
 8006642:	2309      	movs	r3, #9
 8006644:	e012      	b.n	800666c <HAL_GPIO_DeInit+0xd4>
 8006646:	230a      	movs	r3, #10
 8006648:	e010      	b.n	800666c <HAL_GPIO_DeInit+0xd4>
 800664a:	2308      	movs	r3, #8
 800664c:	e00e      	b.n	800666c <HAL_GPIO_DeInit+0xd4>
 800664e:	2307      	movs	r3, #7
 8006650:	e00c      	b.n	800666c <HAL_GPIO_DeInit+0xd4>
 8006652:	2306      	movs	r3, #6
 8006654:	e00a      	b.n	800666c <HAL_GPIO_DeInit+0xd4>
 8006656:	2305      	movs	r3, #5
 8006658:	e008      	b.n	800666c <HAL_GPIO_DeInit+0xd4>
 800665a:	2304      	movs	r3, #4
 800665c:	e006      	b.n	800666c <HAL_GPIO_DeInit+0xd4>
 800665e:	2303      	movs	r3, #3
 8006660:	e004      	b.n	800666c <HAL_GPIO_DeInit+0xd4>
 8006662:	2302      	movs	r3, #2
 8006664:	e002      	b.n	800666c <HAL_GPIO_DeInit+0xd4>
 8006666:	2301      	movs	r3, #1
 8006668:	e000      	b.n	800666c <HAL_GPIO_DeInit+0xd4>
 800666a:	2300      	movs	r3, #0
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	f002 0203 	and.w	r2, r2, #3
 8006672:	0092      	lsls	r2, r2, #2
 8006674:	4093      	lsls	r3, r2
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	429a      	cmp	r2, r3
 800667a:	d132      	bne.n	80066e2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800667c:	4b4b      	ldr	r3, [pc, #300]	; (80067ac <HAL_GPIO_DeInit+0x214>)
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	43db      	mvns	r3, r3
 8006684:	4949      	ldr	r1, [pc, #292]	; (80067ac <HAL_GPIO_DeInit+0x214>)
 8006686:	4013      	ands	r3, r2
 8006688:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800668a:	4b48      	ldr	r3, [pc, #288]	; (80067ac <HAL_GPIO_DeInit+0x214>)
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	43db      	mvns	r3, r3
 8006692:	4946      	ldr	r1, [pc, #280]	; (80067ac <HAL_GPIO_DeInit+0x214>)
 8006694:	4013      	ands	r3, r2
 8006696:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006698:	4b44      	ldr	r3, [pc, #272]	; (80067ac <HAL_GPIO_DeInit+0x214>)
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	43db      	mvns	r3, r3
 80066a0:	4942      	ldr	r1, [pc, #264]	; (80067ac <HAL_GPIO_DeInit+0x214>)
 80066a2:	4013      	ands	r3, r2
 80066a4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80066a6:	4b41      	ldr	r3, [pc, #260]	; (80067ac <HAL_GPIO_DeInit+0x214>)
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	43db      	mvns	r3, r3
 80066ae:	493f      	ldr	r1, [pc, #252]	; (80067ac <HAL_GPIO_DeInit+0x214>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	220f      	movs	r2, #15
 80066be:	fa02 f303 	lsl.w	r3, r2, r3
 80066c2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80066c4:	4a2e      	ldr	r2, [pc, #184]	; (8006780 <HAL_GPIO_DeInit+0x1e8>)
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	089b      	lsrs	r3, r3, #2
 80066ca:	3302      	adds	r3, #2
 80066cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	43da      	mvns	r2, r3
 80066d4:	482a      	ldr	r0, [pc, #168]	; (8006780 <HAL_GPIO_DeInit+0x1e8>)
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	089b      	lsrs	r3, r3, #2
 80066da:	400a      	ands	r2, r1
 80066dc:	3302      	adds	r3, #2
 80066de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	2103      	movs	r1, #3
 80066ec:	fa01 f303 	lsl.w	r3, r1, r3
 80066f0:	43db      	mvns	r3, r3
 80066f2:	401a      	ands	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	08da      	lsrs	r2, r3, #3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3208      	adds	r2, #8
 8006700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	220f      	movs	r2, #15
 800670e:	fa02 f303 	lsl.w	r3, r2, r3
 8006712:	43db      	mvns	r3, r3
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	08d2      	lsrs	r2, r2, #3
 8006718:	4019      	ands	r1, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	3208      	adds	r2, #8
 800671e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	2103      	movs	r1, #3
 800672c:	fa01 f303 	lsl.w	r3, r1, r3
 8006730:	43db      	mvns	r3, r3
 8006732:	401a      	ands	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	2101      	movs	r1, #1
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	fa01 f303 	lsl.w	r3, r1, r3
 8006744:	43db      	mvns	r3, r3
 8006746:	401a      	ands	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	2103      	movs	r1, #3
 8006756:	fa01 f303 	lsl.w	r3, r1, r3
 800675a:	43db      	mvns	r3, r3
 800675c:	401a      	ands	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	3301      	adds	r3, #1
 8006766:	617b      	str	r3, [r7, #20]
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2b0f      	cmp	r3, #15
 800676c:	f67f af22 	bls.w	80065b4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006770:	bf00      	nop
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	40013800 	.word	0x40013800
 8006784:	40020000 	.word	0x40020000
 8006788:	40020400 	.word	0x40020400
 800678c:	40020800 	.word	0x40020800
 8006790:	40020c00 	.word	0x40020c00
 8006794:	40021000 	.word	0x40021000
 8006798:	40021400 	.word	0x40021400
 800679c:	40021800 	.word	0x40021800
 80067a0:	40021c00 	.word	0x40021c00
 80067a4:	40022000 	.word	0x40022000
 80067a8:	40022400 	.word	0x40022400
 80067ac:	40013c00 	.word	0x40013c00

080067b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	807b      	strh	r3, [r7, #2]
 80067bc:	4613      	mov	r3, r2
 80067be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067c0:	787b      	ldrb	r3, [r7, #1]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067c6:	887a      	ldrh	r2, [r7, #2]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80067cc:	e003      	b.n	80067d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80067ce:	887b      	ldrh	r3, [r7, #2]
 80067d0:	041a      	lsls	r2, r3, #16
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	619a      	str	r2, [r3, #24]
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b085      	sub	sp, #20
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80067f4:	887a      	ldrh	r2, [r7, #2]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4013      	ands	r3, r2
 80067fa:	041a      	lsls	r2, r3, #16
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	43d9      	mvns	r1, r3
 8006800:	887b      	ldrh	r3, [r7, #2]
 8006802:	400b      	ands	r3, r1
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	619a      	str	r2, [r3, #24]
}
 800680a:	bf00      	nop
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
	...

08006818 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	4603      	mov	r3, r0
 8006820:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006822:	4b08      	ldr	r3, [pc, #32]	; (8006844 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006824:	695a      	ldr	r2, [r3, #20]
 8006826:	88fb      	ldrh	r3, [r7, #6]
 8006828:	4013      	ands	r3, r2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d006      	beq.n	800683c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800682e:	4a05      	ldr	r2, [pc, #20]	; (8006844 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006830:	88fb      	ldrh	r3, [r7, #6]
 8006832:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006834:	88fb      	ldrh	r3, [r7, #6]
 8006836:	4618      	mov	r0, r3
 8006838:	f7fb fb2a 	bl	8001e90 <HAL_GPIO_EXTI_Callback>
  }
}
 800683c:	bf00      	nop
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40013c00 	.word	0x40013c00

08006848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e07f      	b.n	800695a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fd fba4 	bl	8003fbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2224      	movs	r2, #36	; 0x24
 8006878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0201 	bic.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006898:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d107      	bne.n	80068c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068be:	609a      	str	r2, [r3, #8]
 80068c0:	e006      	b.n	80068d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80068ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d104      	bne.n	80068e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	6859      	ldr	r1, [r3, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	4b1d      	ldr	r3, [pc, #116]	; (8006964 <HAL_I2C_Init+0x11c>)
 80068ee:	430b      	orrs	r3, r1
 80068f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006900:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691a      	ldr	r2, [r3, #16]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	69d9      	ldr	r1, [r3, #28]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a1a      	ldr	r2, [r3, #32]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f042 0201 	orr.w	r2, r2, #1
 800693a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2220      	movs	r2, #32
 8006946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	02008000 	.word	0x02008000

08006968 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e021      	b.n	80069be <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2224      	movs	r2, #36	; 0x24
 800697e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0201 	bic.w	r2, r2, #1
 8006990:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7fd fbba 	bl	800410c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	4608      	mov	r0, r1
 80069d2:	4611      	mov	r1, r2
 80069d4:	461a      	mov	r2, r3
 80069d6:	4603      	mov	r3, r0
 80069d8:	817b      	strh	r3, [r7, #10]
 80069da:	460b      	mov	r3, r1
 80069dc:	813b      	strh	r3, [r7, #8]
 80069de:	4613      	mov	r3, r2
 80069e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	f040 80f9 	bne.w	8006be2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <HAL_I2C_Mem_Write+0x34>
 80069f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d105      	bne.n	8006a08 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e0ed      	b.n	8006be4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <HAL_I2C_Mem_Write+0x4e>
 8006a12:	2302      	movs	r3, #2
 8006a14:	e0e6      	b.n	8006be4 <HAL_I2C_Mem_Write+0x21c>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a1e:	f7fe f8a7 	bl	8004b70 <HAL_GetTick>
 8006a22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	2319      	movs	r3, #25
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 fad1 	bl	8006fd8 <I2C_WaitOnFlagUntilTimeout>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e0d1      	b.n	8006be4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2221      	movs	r2, #33	; 0x21
 8006a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2240      	movs	r2, #64	; 0x40
 8006a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6a3a      	ldr	r2, [r7, #32]
 8006a5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a68:	88f8      	ldrh	r0, [r7, #6]
 8006a6a:	893a      	ldrh	r2, [r7, #8]
 8006a6c:	8979      	ldrh	r1, [r7, #10]
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	9301      	str	r3, [sp, #4]
 8006a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	4603      	mov	r3, r0
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 f9e1 	bl	8006e40 <I2C_RequestMemoryWrite>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d005      	beq.n	8006a90 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e0a9      	b.n	8006be4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2bff      	cmp	r3, #255	; 0xff
 8006a98:	d90e      	bls.n	8006ab8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	22ff      	movs	r2, #255	; 0xff
 8006a9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	8979      	ldrh	r1, [r7, #10]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 fc39 	bl	8007328 <I2C_TransferConfig>
 8006ab6:	e00f      	b.n	8006ad8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	8979      	ldrh	r1, [r7, #10]
 8006aca:	2300      	movs	r3, #0
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 fc28 	bl	8007328 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 fabb 	bl	8007058 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e07b      	b.n	8006be4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	781a      	ldrb	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d034      	beq.n	8006b90 <HAL_I2C_Mem_Write+0x1c8>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d130      	bne.n	8006b90 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b34:	2200      	movs	r2, #0
 8006b36:	2180      	movs	r1, #128	; 0x80
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 fa4d 	bl	8006fd8 <I2C_WaitOnFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e04d      	b.n	8006be4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2bff      	cmp	r3, #255	; 0xff
 8006b50:	d90e      	bls.n	8006b70 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	22ff      	movs	r2, #255	; 0xff
 8006b56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	8979      	ldrh	r1, [r7, #10]
 8006b60:	2300      	movs	r3, #0
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 fbdd 	bl	8007328 <I2C_TransferConfig>
 8006b6e:	e00f      	b.n	8006b90 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	8979      	ldrh	r1, [r7, #10]
 8006b82:	2300      	movs	r3, #0
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 fbcc 	bl	8007328 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d19e      	bne.n	8006ad8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 fa9a 	bl	80070d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e01a      	b.n	8006be4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6859      	ldr	r1, [r3, #4]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	4b0a      	ldr	r3, [pc, #40]	; (8006bec <HAL_I2C_Mem_Write+0x224>)
 8006bc2:	400b      	ands	r3, r1
 8006bc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	e000      	b.n	8006be4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006be2:	2302      	movs	r3, #2
  }
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	fe00e800 	.word	0xfe00e800

08006bf0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b088      	sub	sp, #32
 8006bf4:	af02      	add	r7, sp, #8
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	4608      	mov	r0, r1
 8006bfa:	4611      	mov	r1, r2
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	4603      	mov	r3, r0
 8006c00:	817b      	strh	r3, [r7, #10]
 8006c02:	460b      	mov	r3, r1
 8006c04:	813b      	strh	r3, [r7, #8]
 8006c06:	4613      	mov	r3, r2
 8006c08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b20      	cmp	r3, #32
 8006c14:	f040 80fd 	bne.w	8006e12 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <HAL_I2C_Mem_Read+0x34>
 8006c1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d105      	bne.n	8006c30 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c2a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e0f1      	b.n	8006e14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <HAL_I2C_Mem_Read+0x4e>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e0ea      	b.n	8006e14 <HAL_I2C_Mem_Read+0x224>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c46:	f7fd ff93 	bl	8004b70 <HAL_GetTick>
 8006c4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	2319      	movs	r3, #25
 8006c52:	2201      	movs	r2, #1
 8006c54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 f9bd 	bl	8006fd8 <I2C_WaitOnFlagUntilTimeout>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e0d5      	b.n	8006e14 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2222      	movs	r2, #34	; 0x22
 8006c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2240      	movs	r2, #64	; 0x40
 8006c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6a3a      	ldr	r2, [r7, #32]
 8006c82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c90:	88f8      	ldrh	r0, [r7, #6]
 8006c92:	893a      	ldrh	r2, [r7, #8]
 8006c94:	8979      	ldrh	r1, [r7, #10]
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f921 	bl	8006ee8 <I2C_RequestMemoryRead>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e0ad      	b.n	8006e14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	2bff      	cmp	r3, #255	; 0xff
 8006cc0:	d90e      	bls.n	8006ce0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	22ff      	movs	r2, #255	; 0xff
 8006cc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	8979      	ldrh	r1, [r7, #10]
 8006cd0:	4b52      	ldr	r3, [pc, #328]	; (8006e1c <HAL_I2C_Mem_Read+0x22c>)
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 fb25 	bl	8007328 <I2C_TransferConfig>
 8006cde:	e00f      	b.n	8006d00 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	8979      	ldrh	r1, [r7, #10]
 8006cf2:	4b4a      	ldr	r3, [pc, #296]	; (8006e1c <HAL_I2C_Mem_Read+0x22c>)
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 fb14 	bl	8007328 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	2200      	movs	r2, #0
 8006d08:	2104      	movs	r1, #4
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 f964 	bl	8006fd8 <I2C_WaitOnFlagUntilTimeout>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e07c      	b.n	8006e14 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d36:	3b01      	subs	r3, #1
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	3b01      	subs	r3, #1
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d034      	beq.n	8006dc0 <HAL_I2C_Mem_Read+0x1d0>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d130      	bne.n	8006dc0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	2200      	movs	r2, #0
 8006d66:	2180      	movs	r1, #128	; 0x80
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 f935 	bl	8006fd8 <I2C_WaitOnFlagUntilTimeout>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e04d      	b.n	8006e14 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2bff      	cmp	r3, #255	; 0xff
 8006d80:	d90e      	bls.n	8006da0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	22ff      	movs	r2, #255	; 0xff
 8006d86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	8979      	ldrh	r1, [r7, #10]
 8006d90:	2300      	movs	r3, #0
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 fac5 	bl	8007328 <I2C_TransferConfig>
 8006d9e:	e00f      	b.n	8006dc0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	8979      	ldrh	r1, [r7, #10]
 8006db2:	2300      	movs	r3, #0
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 fab4 	bl	8007328 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d19a      	bne.n	8006d00 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 f982 	bl	80070d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e01a      	b.n	8006e14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2220      	movs	r2, #32
 8006de4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6859      	ldr	r1, [r3, #4]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <HAL_I2C_Mem_Read+0x230>)
 8006df2:	400b      	ands	r3, r1
 8006df4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e000      	b.n	8006e14 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006e12:	2302      	movs	r3, #2
  }
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	80002400 	.word	0x80002400
 8006e20:	fe00e800 	.word	0xfe00e800

08006e24 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e32:	b2db      	uxtb	r3, r3
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	4608      	mov	r0, r1
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4603      	mov	r3, r0
 8006e50:	817b      	strh	r3, [r7, #10]
 8006e52:	460b      	mov	r3, r1
 8006e54:	813b      	strh	r3, [r7, #8]
 8006e56:	4613      	mov	r3, r2
 8006e58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006e5a:	88fb      	ldrh	r3, [r7, #6]
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	8979      	ldrh	r1, [r7, #10]
 8006e60:	4b20      	ldr	r3, [pc, #128]	; (8006ee4 <I2C_RequestMemoryWrite+0xa4>)
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 fa5d 	bl	8007328 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e6e:	69fa      	ldr	r2, [r7, #28]
 8006e70:	69b9      	ldr	r1, [r7, #24]
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 f8f0 	bl	8007058 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e02c      	b.n	8006edc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e82:	88fb      	ldrh	r3, [r7, #6]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d105      	bne.n	8006e94 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e88:	893b      	ldrh	r3, [r7, #8]
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	629a      	str	r2, [r3, #40]	; 0x28
 8006e92:	e015      	b.n	8006ec0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e94:	893b      	ldrh	r3, [r7, #8]
 8006e96:	0a1b      	lsrs	r3, r3, #8
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ea2:	69fa      	ldr	r2, [r7, #28]
 8006ea4:	69b9      	ldr	r1, [r7, #24]
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 f8d6 	bl	8007058 <I2C_WaitOnTXISFlagUntilTimeout>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e012      	b.n	8006edc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006eb6:	893b      	ldrh	r3, [r7, #8]
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2180      	movs	r1, #128	; 0x80
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f000 f884 	bl	8006fd8 <I2C_WaitOnFlagUntilTimeout>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	80002000 	.word	0x80002000

08006ee8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af02      	add	r7, sp, #8
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	4608      	mov	r0, r1
 8006ef2:	4611      	mov	r1, r2
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	817b      	strh	r3, [r7, #10]
 8006efa:	460b      	mov	r3, r1
 8006efc:	813b      	strh	r3, [r7, #8]
 8006efe:	4613      	mov	r3, r2
 8006f00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006f02:	88fb      	ldrh	r3, [r7, #6]
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	8979      	ldrh	r1, [r7, #10]
 8006f08:	4b20      	ldr	r3, [pc, #128]	; (8006f8c <I2C_RequestMemoryRead+0xa4>)
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 fa0a 	bl	8007328 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f14:	69fa      	ldr	r2, [r7, #28]
 8006f16:	69b9      	ldr	r1, [r7, #24]
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 f89d 	bl	8007058 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e02c      	b.n	8006f82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f28:	88fb      	ldrh	r3, [r7, #6]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d105      	bne.n	8006f3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f2e:	893b      	ldrh	r3, [r7, #8]
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	629a      	str	r2, [r3, #40]	; 0x28
 8006f38:	e015      	b.n	8006f66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f3a:	893b      	ldrh	r3, [r7, #8]
 8006f3c:	0a1b      	lsrs	r3, r3, #8
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f48:	69fa      	ldr	r2, [r7, #28]
 8006f4a:	69b9      	ldr	r1, [r7, #24]
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 f883 	bl	8007058 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e012      	b.n	8006f82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f5c:	893b      	ldrh	r3, [r7, #8]
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2140      	movs	r1, #64	; 0x40
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 f831 	bl	8006fd8 <I2C_WaitOnFlagUntilTimeout>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e000      	b.n	8006f82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	80002000 	.word	0x80002000

08006f90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d103      	bne.n	8006fae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2200      	movs	r2, #0
 8006fac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d007      	beq.n	8006fcc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	699a      	ldr	r2, [r3, #24]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0201 	orr.w	r2, r2, #1
 8006fca:	619a      	str	r2, [r3, #24]
  }
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fe8:	e022      	b.n	8007030 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff0:	d01e      	beq.n	8007030 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ff2:	f7fd fdbd 	bl	8004b70 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d302      	bcc.n	8007008 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d113      	bne.n	8007030 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700c:	f043 0220 	orr.w	r2, r3, #32
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2220      	movs	r2, #32
 8007018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e00f      	b.n	8007050 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699a      	ldr	r2, [r3, #24]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	4013      	ands	r3, r2
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	429a      	cmp	r2, r3
 800703e:	bf0c      	ite	eq
 8007040:	2301      	moveq	r3, #1
 8007042:	2300      	movne	r3, #0
 8007044:	b2db      	uxtb	r3, r3
 8007046:	461a      	mov	r2, r3
 8007048:	79fb      	ldrb	r3, [r7, #7]
 800704a:	429a      	cmp	r2, r3
 800704c:	d0cd      	beq.n	8006fea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007064:	e02c      	b.n	80070c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	68b9      	ldr	r1, [r7, #8]
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 f870 	bl	8007150 <I2C_IsErrorOccurred>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e02a      	b.n	80070d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007080:	d01e      	beq.n	80070c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007082:	f7fd fd75 	bl	8004b70 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	429a      	cmp	r2, r3
 8007090:	d302      	bcc.n	8007098 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d113      	bne.n	80070c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709c:	f043 0220 	orr.w	r2, r3, #32
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2220      	movs	r2, #32
 80070a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e007      	b.n	80070d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d1cb      	bne.n	8007066 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070e4:	e028      	b.n	8007138 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	68b9      	ldr	r1, [r7, #8]
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f000 f830 	bl	8007150 <I2C_IsErrorOccurred>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e026      	b.n	8007148 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070fa:	f7fd fd39 	bl	8004b70 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	429a      	cmp	r2, r3
 8007108:	d302      	bcc.n	8007110 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d113      	bne.n	8007138 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007114:	f043 0220 	orr.w	r2, r3, #32
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2220      	movs	r2, #32
 8007120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e007      	b.n	8007148 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	f003 0320 	and.w	r3, r3, #32
 8007142:	2b20      	cmp	r3, #32
 8007144:	d1cf      	bne.n	80070e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b08a      	sub	sp, #40	; 0x28
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800716a:	2300      	movs	r3, #0
 800716c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	f003 0310 	and.w	r3, r3, #16
 8007178:	2b00      	cmp	r3, #0
 800717a:	d075      	beq.n	8007268 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2210      	movs	r2, #16
 8007182:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007184:	e056      	b.n	8007234 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718c:	d052      	beq.n	8007234 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800718e:	f7fd fcef 	bl	8004b70 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	429a      	cmp	r2, r3
 800719c:	d302      	bcc.n	80071a4 <I2C_IsErrorOccurred+0x54>
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d147      	bne.n	8007234 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071c6:	d12e      	bne.n	8007226 <I2C_IsErrorOccurred+0xd6>
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071ce:	d02a      	beq.n	8007226 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80071d0:	7cfb      	ldrb	r3, [r7, #19]
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	d027      	beq.n	8007226 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071e4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80071e6:	f7fd fcc3 	bl	8004b70 <HAL_GetTick>
 80071ea:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071ec:	e01b      	b.n	8007226 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80071ee:	f7fd fcbf 	bl	8004b70 <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	2b19      	cmp	r3, #25
 80071fa:	d914      	bls.n	8007226 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007200:	f043 0220 	orr.w	r2, r3, #32
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2220      	movs	r2, #32
 800720c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	f003 0320 	and.w	r3, r3, #32
 8007230:	2b20      	cmp	r3, #32
 8007232:	d1dc      	bne.n	80071ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	f003 0320 	and.w	r3, r3, #32
 800723e:	2b20      	cmp	r3, #32
 8007240:	d003      	beq.n	800724a <I2C_IsErrorOccurred+0xfa>
 8007242:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007246:	2b00      	cmp	r3, #0
 8007248:	d09d      	beq.n	8007186 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800724a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800724e:	2b00      	cmp	r3, #0
 8007250:	d103      	bne.n	800725a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2220      	movs	r2, #32
 8007258:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	f043 0304 	orr.w	r3, r3, #4
 8007260:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00b      	beq.n	8007292 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	f043 0301 	orr.w	r3, r3, #1
 8007280:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800728a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00b      	beq.n	80072b4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	f043 0308 	orr.w	r3, r3, #8
 80072a2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00b      	beq.n	80072d6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	f043 0302 	orr.w	r3, r3, #2
 80072c4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80072d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d01c      	beq.n	8007318 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f7ff fe56 	bl	8006f90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6859      	ldr	r1, [r3, #4]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	4b0d      	ldr	r3, [pc, #52]	; (8007324 <I2C_IsErrorOccurred+0x1d4>)
 80072f0:	400b      	ands	r3, r1
 80072f2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	431a      	orrs	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2220      	movs	r2, #32
 8007304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800731c:	4618      	mov	r0, r3
 800731e:	3728      	adds	r7, #40	; 0x28
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	fe00e800 	.word	0xfe00e800

08007328 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	607b      	str	r3, [r7, #4]
 8007332:	460b      	mov	r3, r1
 8007334:	817b      	strh	r3, [r7, #10]
 8007336:	4613      	mov	r3, r2
 8007338:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800733a:	897b      	ldrh	r3, [r7, #10]
 800733c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007340:	7a7b      	ldrb	r3, [r7, #9]
 8007342:	041b      	lsls	r3, r3, #16
 8007344:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007348:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	4313      	orrs	r3, r2
 8007352:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007356:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	0d5b      	lsrs	r3, r3, #21
 8007362:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007366:	4b08      	ldr	r3, [pc, #32]	; (8007388 <I2C_TransferConfig+0x60>)
 8007368:	430b      	orrs	r3, r1
 800736a:	43db      	mvns	r3, r3
 800736c:	ea02 0103 	and.w	r1, r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	430a      	orrs	r2, r1
 8007378:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800737a:	bf00      	nop
 800737c:	371c      	adds	r7, #28
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	03ff63ff 	.word	0x03ff63ff

0800738c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b20      	cmp	r3, #32
 80073a0:	d138      	bne.n	8007414 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d101      	bne.n	80073b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80073ac:	2302      	movs	r3, #2
 80073ae:	e032      	b.n	8007416 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2224      	movs	r2, #36	; 0x24
 80073bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 0201 	bic.w	r2, r2, #1
 80073ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6819      	ldr	r1, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f042 0201 	orr.w	r2, r2, #1
 80073fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2220      	movs	r2, #32
 8007404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	e000      	b.n	8007416 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007414:	2302      	movs	r3, #2
  }
}
 8007416:	4618      	mov	r0, r3
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007422:	b480      	push	{r7}
 8007424:	b085      	sub	sp, #20
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b20      	cmp	r3, #32
 8007436:	d139      	bne.n	80074ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800743e:	2b01      	cmp	r3, #1
 8007440:	d101      	bne.n	8007446 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007442:	2302      	movs	r3, #2
 8007444:	e033      	b.n	80074ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2224      	movs	r2, #36	; 0x24
 8007452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f022 0201 	bic.w	r2, r2, #1
 8007464:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007474:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	021b      	lsls	r3, r3, #8
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	4313      	orrs	r3, r2
 800747e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f042 0201 	orr.w	r2, r2, #1
 8007496:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2220      	movs	r2, #32
 800749c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	e000      	b.n	80074ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80074ac:	2302      	movs	r3, #2
  }
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
	...

080074bc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e0bf      	b.n	800764e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d106      	bne.n	80074e8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7fc fe4e 	bl	8004184 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699a      	ldr	r2, [r3, #24]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80074fe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6999      	ldr	r1, [r3, #24]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007514:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6899      	ldr	r1, [r3, #8]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b4a      	ldr	r3, [pc, #296]	; (8007658 <HAL_LTDC_Init+0x19c>)
 8007530:	400b      	ands	r3, r1
 8007532:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	041b      	lsls	r3, r3, #16
 800753a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6899      	ldr	r1, [r3, #8]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	699a      	ldr	r2, [r3, #24]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68d9      	ldr	r1, [r3, #12]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	4b3e      	ldr	r3, [pc, #248]	; (8007658 <HAL_LTDC_Init+0x19c>)
 800755e:	400b      	ands	r3, r1
 8007560:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	041b      	lsls	r3, r3, #16
 8007568:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68d9      	ldr	r1, [r3, #12]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a1a      	ldr	r2, [r3, #32]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	431a      	orrs	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6919      	ldr	r1, [r3, #16]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	4b33      	ldr	r3, [pc, #204]	; (8007658 <HAL_LTDC_Init+0x19c>)
 800758c:	400b      	ands	r3, r1
 800758e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	041b      	lsls	r3, r3, #16
 8007596:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6919      	ldr	r1, [r3, #16]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	431a      	orrs	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6959      	ldr	r1, [r3, #20]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	4b27      	ldr	r3, [pc, #156]	; (8007658 <HAL_LTDC_Init+0x19c>)
 80075ba:	400b      	ands	r3, r1
 80075bc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c2:	041b      	lsls	r3, r3, #16
 80075c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6959      	ldr	r1, [r3, #20]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	431a      	orrs	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075e2:	021b      	lsls	r3, r3, #8
 80075e4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80075ec:	041b      	lsls	r3, r3, #16
 80075ee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80075fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4313      	orrs	r3, r2
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007612:	431a      	orrs	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f042 0206 	orr.w	r2, r2, #6
 800762a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	699a      	ldr	r2, [r3, #24]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	f000f800 	.word	0xf000f800

0800765c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007672:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f003 0304 	and.w	r3, r3, #4
 800767a:	2b00      	cmp	r3, #0
 800767c:	d023      	beq.n	80076c6 <HAL_LTDC_IRQHandler+0x6a>
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b00      	cmp	r3, #0
 8007686:	d01e      	beq.n	80076c6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0204 	bic.w	r2, r2, #4
 8007696:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2204      	movs	r2, #4
 800769e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80076a6:	f043 0201 	orr.w	r2, r3, #1
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2204      	movs	r2, #4
 80076b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f86f 	bl	80077a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d023      	beq.n	8007718 <HAL_LTDC_IRQHandler+0xbc>
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d01e      	beq.n	8007718 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0202 	bic.w	r2, r2, #2
 80076e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2202      	movs	r2, #2
 80076f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80076f8:	f043 0202 	orr.w	r2, r3, #2
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2204      	movs	r2, #4
 8007706:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f846 	bl	80077a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d01b      	beq.n	800775a <HAL_LTDC_IRQHandler+0xfe>
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	d016      	beq.n	800775a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 0201 	bic.w	r2, r2, #1
 800773a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2201      	movs	r2, #1
 8007742:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f82f 	bl	80077b8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f003 0308 	and.w	r3, r3, #8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d01b      	beq.n	800779c <HAL_LTDC_IRQHandler+0x140>
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f003 0308 	and.w	r3, r3, #8
 800776a:	2b00      	cmp	r3, #0
 800776c:	d016      	beq.n	800779c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 0208 	bic.w	r2, r2, #8
 800777c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2208      	movs	r2, #8
 8007784:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f818 	bl	80077cc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800779c:	bf00      	nop
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80077e0:	b5b0      	push	{r4, r5, r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d101      	bne.n	80077fa <HAL_LTDC_ConfigLayer+0x1a>
 80077f6:	2302      	movs	r3, #2
 80077f8:	e02c      	b.n	8007854 <HAL_LTDC_ConfigLayer+0x74>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2202      	movs	r2, #2
 8007806:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2134      	movs	r1, #52	; 0x34
 8007810:	fb01 f303 	mul.w	r3, r1, r3
 8007814:	4413      	add	r3, r2
 8007816:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	4614      	mov	r4, r2
 800781e:	461d      	mov	r5, r3
 8007820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800782a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800782c:	682b      	ldr	r3, [r5, #0]
 800782e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	68b9      	ldr	r1, [r7, #8]
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 f81f 	bl	8007878 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2201      	movs	r2, #1
 8007840:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bdb0      	pop	{r4, r5, r7, pc}

0800785c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800786a:	b2db      	uxtb	r3, r3
}
 800786c:	4618      	mov	r0, r3
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007878:	b480      	push	{r7}
 800787a:	b089      	sub	sp, #36	; 0x24
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	0c1b      	lsrs	r3, r3, #16
 8007890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007894:	4413      	add	r3, r2
 8007896:	041b      	lsls	r3, r3, #16
 8007898:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	01db      	lsls	r3, r3, #7
 80078a4:	4413      	add	r3, r2
 80078a6:	3384      	adds	r3, #132	; 0x84
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	6812      	ldr	r2, [r2, #0]
 80078ae:	4611      	mov	r1, r2
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	01d2      	lsls	r2, r2, #7
 80078b4:	440a      	add	r2, r1
 80078b6:	3284      	adds	r2, #132	; 0x84
 80078b8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80078bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	0c1b      	lsrs	r3, r3, #16
 80078ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078ce:	4413      	add	r3, r2
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4619      	mov	r1, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	01db      	lsls	r3, r3, #7
 80078dc:	440b      	add	r3, r1
 80078de:	3384      	adds	r3, #132	; 0x84
 80078e0:	4619      	mov	r1, r3
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078f6:	4413      	add	r3, r2
 80078f8:	041b      	lsls	r3, r3, #16
 80078fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	01db      	lsls	r3, r3, #7
 8007906:	4413      	add	r3, r2
 8007908:	3384      	adds	r3, #132	; 0x84
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	6812      	ldr	r2, [r2, #0]
 8007910:	4611      	mov	r1, r2
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	01d2      	lsls	r2, r2, #7
 8007916:	440a      	add	r2, r1
 8007918:	3284      	adds	r2, #132	; 0x84
 800791a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800791e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800792e:	4413      	add	r3, r2
 8007930:	1c5a      	adds	r2, r3, #1
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4619      	mov	r1, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	01db      	lsls	r3, r3, #7
 800793c:	440b      	add	r3, r1
 800793e:	3384      	adds	r3, #132	; 0x84
 8007940:	4619      	mov	r1, r3
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	4313      	orrs	r3, r2
 8007946:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	01db      	lsls	r3, r3, #7
 8007952:	4413      	add	r3, r2
 8007954:	3384      	adds	r3, #132	; 0x84
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	6812      	ldr	r2, [r2, #0]
 800795c:	4611      	mov	r1, r2
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	01d2      	lsls	r2, r2, #7
 8007962:	440a      	add	r2, r1
 8007964:	3284      	adds	r2, #132	; 0x84
 8007966:	f023 0307 	bic.w	r3, r3, #7
 800796a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	461a      	mov	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	01db      	lsls	r3, r3, #7
 8007976:	4413      	add	r3, r2
 8007978:	3384      	adds	r3, #132	; 0x84
 800797a:	461a      	mov	r2, r3
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007992:	041b      	lsls	r3, r3, #16
 8007994:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	061b      	lsls	r3, r3, #24
 800799c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	01db      	lsls	r3, r3, #7
 80079a8:	4413      	add	r3, r2
 80079aa:	3384      	adds	r3, #132	; 0x84
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	01db      	lsls	r3, r3, #7
 80079b8:	4413      	add	r3, r2
 80079ba:	3384      	adds	r3, #132	; 0x84
 80079bc:	461a      	mov	r2, r3
 80079be:	2300      	movs	r3, #0
 80079c0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079c8:	461a      	mov	r2, r3
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	431a      	orrs	r2, r3
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	431a      	orrs	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4619      	mov	r1, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	01db      	lsls	r3, r3, #7
 80079dc:	440b      	add	r3, r1
 80079de:	3384      	adds	r3, #132	; 0x84
 80079e0:	4619      	mov	r1, r3
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	461a      	mov	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	01db      	lsls	r3, r3, #7
 80079f2:	4413      	add	r3, r2
 80079f4:	3384      	adds	r3, #132	; 0x84
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	6812      	ldr	r2, [r2, #0]
 80079fc:	4611      	mov	r1, r2
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	01d2      	lsls	r2, r2, #7
 8007a02:	440a      	add	r2, r1
 8007a04:	3284      	adds	r2, #132	; 0x84
 8007a06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a0a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	461a      	mov	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	01db      	lsls	r3, r3, #7
 8007a16:	4413      	add	r3, r2
 8007a18:	3384      	adds	r3, #132	; 0x84
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	01db      	lsls	r3, r3, #7
 8007a2c:	4413      	add	r3, r2
 8007a2e:	3384      	adds	r3, #132	; 0x84
 8007a30:	69da      	ldr	r2, [r3, #28]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4619      	mov	r1, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	01db      	lsls	r3, r3, #7
 8007a3c:	440b      	add	r3, r1
 8007a3e:	3384      	adds	r3, #132	; 0x84
 8007a40:	4619      	mov	r1, r3
 8007a42:	4b58      	ldr	r3, [pc, #352]	; (8007ba4 <LTDC_SetConfig+0x32c>)
 8007a44:	4013      	ands	r3, r2
 8007a46:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	69da      	ldr	r2, [r3, #28]
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	68f9      	ldr	r1, [r7, #12]
 8007a52:	6809      	ldr	r1, [r1, #0]
 8007a54:	4608      	mov	r0, r1
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	01c9      	lsls	r1, r1, #7
 8007a5a:	4401      	add	r1, r0
 8007a5c:	3184      	adds	r1, #132	; 0x84
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	01db      	lsls	r3, r3, #7
 8007a6c:	4413      	add	r3, r2
 8007a6e:	3384      	adds	r3, #132	; 0x84
 8007a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	01db      	lsls	r3, r3, #7
 8007a7c:	4413      	add	r3, r2
 8007a7e:	3384      	adds	r3, #132	; 0x84
 8007a80:	461a      	mov	r2, r3
 8007a82:	2300      	movs	r3, #0
 8007a84:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	01db      	lsls	r3, r3, #7
 8007a90:	4413      	add	r3, r2
 8007a92:	3384      	adds	r3, #132	; 0x84
 8007a94:	461a      	mov	r2, r3
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d102      	bne.n	8007aaa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007aa4:	2304      	movs	r3, #4
 8007aa6:	61fb      	str	r3, [r7, #28]
 8007aa8:	e01b      	b.n	8007ae2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d102      	bne.n	8007ab8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	61fb      	str	r3, [r7, #28]
 8007ab6:	e014      	b.n	8007ae2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d00b      	beq.n	8007ad8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d007      	beq.n	8007ad8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007acc:	2b03      	cmp	r3, #3
 8007ace:	d003      	beq.n	8007ad8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007ad4:	2b07      	cmp	r3, #7
 8007ad6:	d102      	bne.n	8007ade <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007ad8:	2302      	movs	r3, #2
 8007ada:	61fb      	str	r3, [r7, #28]
 8007adc:	e001      	b.n	8007ae2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	01db      	lsls	r3, r3, #7
 8007aec:	4413      	add	r3, r2
 8007aee:	3384      	adds	r3, #132	; 0x84
 8007af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	6812      	ldr	r2, [r2, #0]
 8007af6:	4611      	mov	r1, r2
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	01d2      	lsls	r2, r2, #7
 8007afc:	440a      	add	r2, r1
 8007afe:	3284      	adds	r2, #132	; 0x84
 8007b00:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007b04:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0a:	69fa      	ldr	r2, [r7, #28]
 8007b0c:	fb02 f303 	mul.w	r3, r2, r3
 8007b10:	041a      	lsls	r2, r3, #16
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	6859      	ldr	r1, [r3, #4]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	1acb      	subs	r3, r1, r3
 8007b1c:	69f9      	ldr	r1, [r7, #28]
 8007b1e:	fb01 f303 	mul.w	r3, r1, r3
 8007b22:	3303      	adds	r3, #3
 8007b24:	68f9      	ldr	r1, [r7, #12]
 8007b26:	6809      	ldr	r1, [r1, #0]
 8007b28:	4608      	mov	r0, r1
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	01c9      	lsls	r1, r1, #7
 8007b2e:	4401      	add	r1, r0
 8007b30:	3184      	adds	r1, #132	; 0x84
 8007b32:	4313      	orrs	r3, r2
 8007b34:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	01db      	lsls	r3, r3, #7
 8007b40:	4413      	add	r3, r2
 8007b42:	3384      	adds	r3, #132	; 0x84
 8007b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	01db      	lsls	r3, r3, #7
 8007b50:	440b      	add	r3, r1
 8007b52:	3384      	adds	r3, #132	; 0x84
 8007b54:	4619      	mov	r1, r3
 8007b56:	4b14      	ldr	r3, [pc, #80]	; (8007ba8 <LTDC_SetConfig+0x330>)
 8007b58:	4013      	ands	r3, r2
 8007b5a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	461a      	mov	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	01db      	lsls	r3, r3, #7
 8007b66:	4413      	add	r3, r2
 8007b68:	3384      	adds	r3, #132	; 0x84
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b70:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	01db      	lsls	r3, r3, #7
 8007b7c:	4413      	add	r3, r2
 8007b7e:	3384      	adds	r3, #132	; 0x84
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	6812      	ldr	r2, [r2, #0]
 8007b86:	4611      	mov	r1, r2
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	01d2      	lsls	r2, r2, #7
 8007b8c:	440a      	add	r2, r1
 8007b8e:	3284      	adds	r2, #132	; 0x84
 8007b90:	f043 0301 	orr.w	r3, r3, #1
 8007b94:	6013      	str	r3, [r2, #0]
}
 8007b96:	bf00      	nop
 8007b98:	3724      	adds	r7, #36	; 0x24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	fffff8f8 	.word	0xfffff8f8
 8007ba8:	fffff800 	.word	0xfffff800

08007bac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007bac:	b480      	push	{r7}
 8007bae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bb0:	4b05      	ldr	r3, [pc, #20]	; (8007bc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a04      	ldr	r2, [pc, #16]	; (8007bc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bba:	6013      	str	r3, [r2, #0]
}
 8007bbc:	bf00      	nop
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	40007000 	.word	0x40007000

08007bcc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007bd6:	4b23      	ldr	r3, [pc, #140]	; (8007c64 <HAL_PWREx_EnableOverDrive+0x98>)
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bda:	4a22      	ldr	r2, [pc, #136]	; (8007c64 <HAL_PWREx_EnableOverDrive+0x98>)
 8007bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007be0:	6413      	str	r3, [r2, #64]	; 0x40
 8007be2:	4b20      	ldr	r3, [pc, #128]	; (8007c64 <HAL_PWREx_EnableOverDrive+0x98>)
 8007be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bea:	603b      	str	r3, [r7, #0]
 8007bec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007bee:	4b1e      	ldr	r3, [pc, #120]	; (8007c68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a1d      	ldr	r2, [pc, #116]	; (8007c68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bf8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007bfa:	f7fc ffb9 	bl	8004b70 <HAL_GetTick>
 8007bfe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007c00:	e009      	b.n	8007c16 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007c02:	f7fc ffb5 	bl	8004b70 <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c10:	d901      	bls.n	8007c16 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e022      	b.n	8007c5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007c16:	4b14      	ldr	r3, [pc, #80]	; (8007c68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c22:	d1ee      	bne.n	8007c02 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007c24:	4b10      	ldr	r3, [pc, #64]	; (8007c68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a0f      	ldr	r2, [pc, #60]	; (8007c68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c30:	f7fc ff9e 	bl	8004b70 <HAL_GetTick>
 8007c34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007c36:	e009      	b.n	8007c4c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007c38:	f7fc ff9a 	bl	8004b70 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c46:	d901      	bls.n	8007c4c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e007      	b.n	8007c5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007c4c:	4b06      	ldr	r3, [pc, #24]	; (8007c68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c58:	d1ee      	bne.n	8007c38 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	40023800 	.word	0x40023800
 8007c68:	40007000 	.word	0x40007000

08007c6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007c74:	2300      	movs	r3, #0
 8007c76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e291      	b.n	80081a6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 8087 	beq.w	8007d9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c90:	4b96      	ldr	r3, [pc, #600]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f003 030c 	and.w	r3, r3, #12
 8007c98:	2b04      	cmp	r3, #4
 8007c9a:	d00c      	beq.n	8007cb6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c9c:	4b93      	ldr	r3, [pc, #588]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f003 030c 	and.w	r3, r3, #12
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	d112      	bne.n	8007cce <HAL_RCC_OscConfig+0x62>
 8007ca8:	4b90      	ldr	r3, [pc, #576]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cb4:	d10b      	bne.n	8007cce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cb6:	4b8d      	ldr	r3, [pc, #564]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d06c      	beq.n	8007d9c <HAL_RCC_OscConfig+0x130>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d168      	bne.n	8007d9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e26b      	b.n	80081a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd6:	d106      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x7a>
 8007cd8:	4b84      	ldr	r3, [pc, #528]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a83      	ldr	r2, [pc, #524]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ce2:	6013      	str	r3, [r2, #0]
 8007ce4:	e02e      	b.n	8007d44 <HAL_RCC_OscConfig+0xd8>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10c      	bne.n	8007d08 <HAL_RCC_OscConfig+0x9c>
 8007cee:	4b7f      	ldr	r3, [pc, #508]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a7e      	ldr	r2, [pc, #504]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	4b7c      	ldr	r3, [pc, #496]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a7b      	ldr	r2, [pc, #492]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007d00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	e01d      	b.n	8007d44 <HAL_RCC_OscConfig+0xd8>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d10:	d10c      	bne.n	8007d2c <HAL_RCC_OscConfig+0xc0>
 8007d12:	4b76      	ldr	r3, [pc, #472]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a75      	ldr	r2, [pc, #468]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	4b73      	ldr	r3, [pc, #460]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a72      	ldr	r2, [pc, #456]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	e00b      	b.n	8007d44 <HAL_RCC_OscConfig+0xd8>
 8007d2c:	4b6f      	ldr	r3, [pc, #444]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a6e      	ldr	r2, [pc, #440]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	4b6c      	ldr	r3, [pc, #432]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a6b      	ldr	r2, [pc, #428]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d013      	beq.n	8007d74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d4c:	f7fc ff10 	bl	8004b70 <HAL_GetTick>
 8007d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d52:	e008      	b.n	8007d66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d54:	f7fc ff0c 	bl	8004b70 <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	2b64      	cmp	r3, #100	; 0x64
 8007d60:	d901      	bls.n	8007d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e21f      	b.n	80081a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d66:	4b61      	ldr	r3, [pc, #388]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0f0      	beq.n	8007d54 <HAL_RCC_OscConfig+0xe8>
 8007d72:	e014      	b.n	8007d9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d74:	f7fc fefc 	bl	8004b70 <HAL_GetTick>
 8007d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d7a:	e008      	b.n	8007d8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d7c:	f7fc fef8 	bl	8004b70 <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b64      	cmp	r3, #100	; 0x64
 8007d88:	d901      	bls.n	8007d8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e20b      	b.n	80081a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d8e:	4b57      	ldr	r3, [pc, #348]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1f0      	bne.n	8007d7c <HAL_RCC_OscConfig+0x110>
 8007d9a:	e000      	b.n	8007d9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d069      	beq.n	8007e7e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007daa:	4b50      	ldr	r3, [pc, #320]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 030c 	and.w	r3, r3, #12
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00b      	beq.n	8007dce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007db6:	4b4d      	ldr	r3, [pc, #308]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f003 030c 	and.w	r3, r3, #12
 8007dbe:	2b08      	cmp	r3, #8
 8007dc0:	d11c      	bne.n	8007dfc <HAL_RCC_OscConfig+0x190>
 8007dc2:	4b4a      	ldr	r3, [pc, #296]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d116      	bne.n	8007dfc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dce:	4b47      	ldr	r3, [pc, #284]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d005      	beq.n	8007de6 <HAL_RCC_OscConfig+0x17a>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d001      	beq.n	8007de6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e1df      	b.n	80081a6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007de6:	4b41      	ldr	r3, [pc, #260]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	493d      	ldr	r1, [pc, #244]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dfa:	e040      	b.n	8007e7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d023      	beq.n	8007e4c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e04:	4b39      	ldr	r3, [pc, #228]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a38      	ldr	r2, [pc, #224]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007e0a:	f043 0301 	orr.w	r3, r3, #1
 8007e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e10:	f7fc feae 	bl	8004b70 <HAL_GetTick>
 8007e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e16:	e008      	b.n	8007e2a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e18:	f7fc feaa 	bl	8004b70 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e1bd      	b.n	80081a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e2a:	4b30      	ldr	r3, [pc, #192]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0302 	and.w	r3, r3, #2
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0f0      	beq.n	8007e18 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e36:	4b2d      	ldr	r3, [pc, #180]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	4929      	ldr	r1, [pc, #164]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	600b      	str	r3, [r1, #0]
 8007e4a:	e018      	b.n	8007e7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e4c:	4b27      	ldr	r3, [pc, #156]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a26      	ldr	r2, [pc, #152]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007e52:	f023 0301 	bic.w	r3, r3, #1
 8007e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e58:	f7fc fe8a 	bl	8004b70 <HAL_GetTick>
 8007e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e5e:	e008      	b.n	8007e72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e60:	f7fc fe86 	bl	8004b70 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d901      	bls.n	8007e72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e199      	b.n	80081a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e72:	4b1e      	ldr	r3, [pc, #120]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0302 	and.w	r3, r3, #2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1f0      	bne.n	8007e60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0308 	and.w	r3, r3, #8
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d038      	beq.n	8007efc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	695b      	ldr	r3, [r3, #20]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d019      	beq.n	8007ec6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e92:	4b16      	ldr	r3, [pc, #88]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e96:	4a15      	ldr	r2, [pc, #84]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007e98:	f043 0301 	orr.w	r3, r3, #1
 8007e9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e9e:	f7fc fe67 	bl	8004b70 <HAL_GetTick>
 8007ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ea4:	e008      	b.n	8007eb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ea6:	f7fc fe63 	bl	8004b70 <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d901      	bls.n	8007eb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e176      	b.n	80081a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eb8:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0f0      	beq.n	8007ea6 <HAL_RCC_OscConfig+0x23a>
 8007ec4:	e01a      	b.n	8007efc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ec6:	4b09      	ldr	r3, [pc, #36]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eca:	4a08      	ldr	r2, [pc, #32]	; (8007eec <HAL_RCC_OscConfig+0x280>)
 8007ecc:	f023 0301 	bic.w	r3, r3, #1
 8007ed0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ed2:	f7fc fe4d 	bl	8004b70 <HAL_GetTick>
 8007ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ed8:	e00a      	b.n	8007ef0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007eda:	f7fc fe49 	bl	8004b70 <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d903      	bls.n	8007ef0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e15c      	b.n	80081a6 <HAL_RCC_OscConfig+0x53a>
 8007eec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ef0:	4b91      	ldr	r3, [pc, #580]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef4:	f003 0302 	and.w	r3, r3, #2
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1ee      	bne.n	8007eda <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0304 	and.w	r3, r3, #4
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 80a4 	beq.w	8008052 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f0a:	4b8b      	ldr	r3, [pc, #556]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10d      	bne.n	8007f32 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f16:	4b88      	ldr	r3, [pc, #544]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	4a87      	ldr	r2, [pc, #540]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f20:	6413      	str	r3, [r2, #64]	; 0x40
 8007f22:	4b85      	ldr	r3, [pc, #532]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f2a:	60bb      	str	r3, [r7, #8]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f32:	4b82      	ldr	r3, [pc, #520]	; (800813c <HAL_RCC_OscConfig+0x4d0>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d118      	bne.n	8007f70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007f3e:	4b7f      	ldr	r3, [pc, #508]	; (800813c <HAL_RCC_OscConfig+0x4d0>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a7e      	ldr	r2, [pc, #504]	; (800813c <HAL_RCC_OscConfig+0x4d0>)
 8007f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f4a:	f7fc fe11 	bl	8004b70 <HAL_GetTick>
 8007f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f50:	e008      	b.n	8007f64 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f52:	f7fc fe0d 	bl	8004b70 <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	2b64      	cmp	r3, #100	; 0x64
 8007f5e:	d901      	bls.n	8007f64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e120      	b.n	80081a6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f64:	4b75      	ldr	r3, [pc, #468]	; (800813c <HAL_RCC_OscConfig+0x4d0>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d0f0      	beq.n	8007f52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d106      	bne.n	8007f86 <HAL_RCC_OscConfig+0x31a>
 8007f78:	4b6f      	ldr	r3, [pc, #444]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f7c:	4a6e      	ldr	r2, [pc, #440]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007f7e:	f043 0301 	orr.w	r3, r3, #1
 8007f82:	6713      	str	r3, [r2, #112]	; 0x70
 8007f84:	e02d      	b.n	8007fe2 <HAL_RCC_OscConfig+0x376>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10c      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x33c>
 8007f8e:	4b6a      	ldr	r3, [pc, #424]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f92:	4a69      	ldr	r2, [pc, #420]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007f94:	f023 0301 	bic.w	r3, r3, #1
 8007f98:	6713      	str	r3, [r2, #112]	; 0x70
 8007f9a:	4b67      	ldr	r3, [pc, #412]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9e:	4a66      	ldr	r2, [pc, #408]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007fa0:	f023 0304 	bic.w	r3, r3, #4
 8007fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8007fa6:	e01c      	b.n	8007fe2 <HAL_RCC_OscConfig+0x376>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	2b05      	cmp	r3, #5
 8007fae:	d10c      	bne.n	8007fca <HAL_RCC_OscConfig+0x35e>
 8007fb0:	4b61      	ldr	r3, [pc, #388]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb4:	4a60      	ldr	r2, [pc, #384]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007fb6:	f043 0304 	orr.w	r3, r3, #4
 8007fba:	6713      	str	r3, [r2, #112]	; 0x70
 8007fbc:	4b5e      	ldr	r3, [pc, #376]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc0:	4a5d      	ldr	r2, [pc, #372]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007fc2:	f043 0301 	orr.w	r3, r3, #1
 8007fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8007fc8:	e00b      	b.n	8007fe2 <HAL_RCC_OscConfig+0x376>
 8007fca:	4b5b      	ldr	r3, [pc, #364]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fce:	4a5a      	ldr	r2, [pc, #360]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007fd0:	f023 0301 	bic.w	r3, r3, #1
 8007fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8007fd6:	4b58      	ldr	r3, [pc, #352]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fda:	4a57      	ldr	r2, [pc, #348]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8007fdc:	f023 0304 	bic.w	r3, r3, #4
 8007fe0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d015      	beq.n	8008016 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fea:	f7fc fdc1 	bl	8004b70 <HAL_GetTick>
 8007fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ff0:	e00a      	b.n	8008008 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ff2:	f7fc fdbd 	bl	8004b70 <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008000:	4293      	cmp	r3, r2
 8008002:	d901      	bls.n	8008008 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e0ce      	b.n	80081a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008008:	4b4b      	ldr	r3, [pc, #300]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 800800a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800c:	f003 0302 	and.w	r3, r3, #2
 8008010:	2b00      	cmp	r3, #0
 8008012:	d0ee      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x386>
 8008014:	e014      	b.n	8008040 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008016:	f7fc fdab 	bl	8004b70 <HAL_GetTick>
 800801a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800801c:	e00a      	b.n	8008034 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800801e:	f7fc fda7 	bl	8004b70 <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	f241 3288 	movw	r2, #5000	; 0x1388
 800802c:	4293      	cmp	r3, r2
 800802e:	d901      	bls.n	8008034 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e0b8      	b.n	80081a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008034:	4b40      	ldr	r3, [pc, #256]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8008036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1ee      	bne.n	800801e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008040:	7dfb      	ldrb	r3, [r7, #23]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d105      	bne.n	8008052 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008046:	4b3c      	ldr	r3, [pc, #240]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8008048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804a:	4a3b      	ldr	r2, [pc, #236]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 800804c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008050:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	2b00      	cmp	r3, #0
 8008058:	f000 80a4 	beq.w	80081a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800805c:	4b36      	ldr	r3, [pc, #216]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f003 030c 	and.w	r3, r3, #12
 8008064:	2b08      	cmp	r3, #8
 8008066:	d06b      	beq.n	8008140 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	2b02      	cmp	r3, #2
 800806e:	d149      	bne.n	8008104 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008070:	4b31      	ldr	r3, [pc, #196]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a30      	ldr	r2, [pc, #192]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8008076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800807a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800807c:	f7fc fd78 	bl	8004b70 <HAL_GetTick>
 8008080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008082:	e008      	b.n	8008096 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008084:	f7fc fd74 	bl	8004b70 <HAL_GetTick>
 8008088:	4602      	mov	r2, r0
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	2b02      	cmp	r3, #2
 8008090:	d901      	bls.n	8008096 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e087      	b.n	80081a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008096:	4b28      	ldr	r3, [pc, #160]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1f0      	bne.n	8008084 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	69da      	ldr	r2, [r3, #28]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	431a      	orrs	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b0:	019b      	lsls	r3, r3, #6
 80080b2:	431a      	orrs	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b8:	085b      	lsrs	r3, r3, #1
 80080ba:	3b01      	subs	r3, #1
 80080bc:	041b      	lsls	r3, r3, #16
 80080be:	431a      	orrs	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c4:	061b      	lsls	r3, r3, #24
 80080c6:	4313      	orrs	r3, r2
 80080c8:	4a1b      	ldr	r2, [pc, #108]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 80080ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080d0:	4b19      	ldr	r3, [pc, #100]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a18      	ldr	r2, [pc, #96]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 80080d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080dc:	f7fc fd48 	bl	8004b70 <HAL_GetTick>
 80080e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080e2:	e008      	b.n	80080f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080e4:	f7fc fd44 	bl	8004b70 <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d901      	bls.n	80080f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e057      	b.n	80081a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080f6:	4b10      	ldr	r3, [pc, #64]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d0f0      	beq.n	80080e4 <HAL_RCC_OscConfig+0x478>
 8008102:	e04f      	b.n	80081a4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008104:	4b0c      	ldr	r3, [pc, #48]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a0b      	ldr	r2, [pc, #44]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 800810a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800810e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008110:	f7fc fd2e 	bl	8004b70 <HAL_GetTick>
 8008114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008116:	e008      	b.n	800812a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008118:	f7fc fd2a 	bl	8004b70 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	2b02      	cmp	r3, #2
 8008124:	d901      	bls.n	800812a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e03d      	b.n	80081a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800812a:	4b03      	ldr	r3, [pc, #12]	; (8008138 <HAL_RCC_OscConfig+0x4cc>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1f0      	bne.n	8008118 <HAL_RCC_OscConfig+0x4ac>
 8008136:	e035      	b.n	80081a4 <HAL_RCC_OscConfig+0x538>
 8008138:	40023800 	.word	0x40023800
 800813c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008140:	4b1b      	ldr	r3, [pc, #108]	; (80081b0 <HAL_RCC_OscConfig+0x544>)
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d028      	beq.n	80081a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008158:	429a      	cmp	r2, r3
 800815a:	d121      	bne.n	80081a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008166:	429a      	cmp	r2, r3
 8008168:	d11a      	bne.n	80081a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008170:	4013      	ands	r3, r2
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008176:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008178:	4293      	cmp	r3, r2
 800817a:	d111      	bne.n	80081a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008186:	085b      	lsrs	r3, r3, #1
 8008188:	3b01      	subs	r3, #1
 800818a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800818c:	429a      	cmp	r2, r3
 800818e:	d107      	bne.n	80081a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800819c:	429a      	cmp	r2, r3
 800819e:	d001      	beq.n	80081a4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e000      	b.n	80081a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3718      	adds	r7, #24
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	40023800 	.word	0x40023800

080081b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d101      	bne.n	80081cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e0d0      	b.n	800836e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081cc:	4b6a      	ldr	r3, [pc, #424]	; (8008378 <HAL_RCC_ClockConfig+0x1c4>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 030f 	and.w	r3, r3, #15
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d910      	bls.n	80081fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081da:	4b67      	ldr	r3, [pc, #412]	; (8008378 <HAL_RCC_ClockConfig+0x1c4>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f023 020f 	bic.w	r2, r3, #15
 80081e2:	4965      	ldr	r1, [pc, #404]	; (8008378 <HAL_RCC_ClockConfig+0x1c4>)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ea:	4b63      	ldr	r3, [pc, #396]	; (8008378 <HAL_RCC_ClockConfig+0x1c4>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 030f 	and.w	r3, r3, #15
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d001      	beq.n	80081fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e0b8      	b.n	800836e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0302 	and.w	r3, r3, #2
 8008204:	2b00      	cmp	r3, #0
 8008206:	d020      	beq.n	800824a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0304 	and.w	r3, r3, #4
 8008210:	2b00      	cmp	r3, #0
 8008212:	d005      	beq.n	8008220 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008214:	4b59      	ldr	r3, [pc, #356]	; (800837c <HAL_RCC_ClockConfig+0x1c8>)
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	4a58      	ldr	r2, [pc, #352]	; (800837c <HAL_RCC_ClockConfig+0x1c8>)
 800821a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800821e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0308 	and.w	r3, r3, #8
 8008228:	2b00      	cmp	r3, #0
 800822a:	d005      	beq.n	8008238 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800822c:	4b53      	ldr	r3, [pc, #332]	; (800837c <HAL_RCC_ClockConfig+0x1c8>)
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	4a52      	ldr	r2, [pc, #328]	; (800837c <HAL_RCC_ClockConfig+0x1c8>)
 8008232:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008236:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008238:	4b50      	ldr	r3, [pc, #320]	; (800837c <HAL_RCC_ClockConfig+0x1c8>)
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	494d      	ldr	r1, [pc, #308]	; (800837c <HAL_RCC_ClockConfig+0x1c8>)
 8008246:	4313      	orrs	r3, r2
 8008248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b00      	cmp	r3, #0
 8008254:	d040      	beq.n	80082d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d107      	bne.n	800826e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800825e:	4b47      	ldr	r3, [pc, #284]	; (800837c <HAL_RCC_ClockConfig+0x1c8>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d115      	bne.n	8008296 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e07f      	b.n	800836e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	2b02      	cmp	r3, #2
 8008274:	d107      	bne.n	8008286 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008276:	4b41      	ldr	r3, [pc, #260]	; (800837c <HAL_RCC_ClockConfig+0x1c8>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d109      	bne.n	8008296 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e073      	b.n	800836e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008286:	4b3d      	ldr	r3, [pc, #244]	; (800837c <HAL_RCC_ClockConfig+0x1c8>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e06b      	b.n	800836e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008296:	4b39      	ldr	r3, [pc, #228]	; (800837c <HAL_RCC_ClockConfig+0x1c8>)
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f023 0203 	bic.w	r2, r3, #3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	4936      	ldr	r1, [pc, #216]	; (800837c <HAL_RCC_ClockConfig+0x1c8>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082a8:	f7fc fc62 	bl	8004b70 <HAL_GetTick>
 80082ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082ae:	e00a      	b.n	80082c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082b0:	f7fc fc5e 	bl	8004b70 <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80082be:	4293      	cmp	r3, r2
 80082c0:	d901      	bls.n	80082c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e053      	b.n	800836e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082c6:	4b2d      	ldr	r3, [pc, #180]	; (800837c <HAL_RCC_ClockConfig+0x1c8>)
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f003 020c 	and.w	r2, r3, #12
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d1eb      	bne.n	80082b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082d8:	4b27      	ldr	r3, [pc, #156]	; (8008378 <HAL_RCC_ClockConfig+0x1c4>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 030f 	and.w	r3, r3, #15
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d210      	bcs.n	8008308 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082e6:	4b24      	ldr	r3, [pc, #144]	; (8008378 <HAL_RCC_ClockConfig+0x1c4>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f023 020f 	bic.w	r2, r3, #15
 80082ee:	4922      	ldr	r1, [pc, #136]	; (8008378 <HAL_RCC_ClockConfig+0x1c4>)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082f6:	4b20      	ldr	r3, [pc, #128]	; (8008378 <HAL_RCC_ClockConfig+0x1c4>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 030f 	and.w	r3, r3, #15
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	429a      	cmp	r2, r3
 8008302:	d001      	beq.n	8008308 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e032      	b.n	800836e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	2b00      	cmp	r3, #0
 8008312:	d008      	beq.n	8008326 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008314:	4b19      	ldr	r3, [pc, #100]	; (800837c <HAL_RCC_ClockConfig+0x1c8>)
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	4916      	ldr	r1, [pc, #88]	; (800837c <HAL_RCC_ClockConfig+0x1c8>)
 8008322:	4313      	orrs	r3, r2
 8008324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0308 	and.w	r3, r3, #8
 800832e:	2b00      	cmp	r3, #0
 8008330:	d009      	beq.n	8008346 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008332:	4b12      	ldr	r3, [pc, #72]	; (800837c <HAL_RCC_ClockConfig+0x1c8>)
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	490e      	ldr	r1, [pc, #56]	; (800837c <HAL_RCC_ClockConfig+0x1c8>)
 8008342:	4313      	orrs	r3, r2
 8008344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008346:	f000 f821 	bl	800838c <HAL_RCC_GetSysClockFreq>
 800834a:	4602      	mov	r2, r0
 800834c:	4b0b      	ldr	r3, [pc, #44]	; (800837c <HAL_RCC_ClockConfig+0x1c8>)
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	091b      	lsrs	r3, r3, #4
 8008352:	f003 030f 	and.w	r3, r3, #15
 8008356:	490a      	ldr	r1, [pc, #40]	; (8008380 <HAL_RCC_ClockConfig+0x1cc>)
 8008358:	5ccb      	ldrb	r3, [r1, r3]
 800835a:	fa22 f303 	lsr.w	r3, r2, r3
 800835e:	4a09      	ldr	r2, [pc, #36]	; (8008384 <HAL_RCC_ClockConfig+0x1d0>)
 8008360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008362:	4b09      	ldr	r3, [pc, #36]	; (8008388 <HAL_RCC_ClockConfig+0x1d4>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4618      	mov	r0, r3
 8008368:	f7fc fac8 	bl	80048fc <HAL_InitTick>

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	40023c00 	.word	0x40023c00
 800837c:	40023800 	.word	0x40023800
 8008380:	080109a8 	.word	0x080109a8
 8008384:	20000050 	.word	0x20000050
 8008388:	20000054 	.word	0x20000054

0800838c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800838c:	b5b0      	push	{r4, r5, r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008392:	2100      	movs	r1, #0
 8008394:	6079      	str	r1, [r7, #4]
 8008396:	2100      	movs	r1, #0
 8008398:	60f9      	str	r1, [r7, #12]
 800839a:	2100      	movs	r1, #0
 800839c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800839e:	2100      	movs	r1, #0
 80083a0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083a2:	4952      	ldr	r1, [pc, #328]	; (80084ec <HAL_RCC_GetSysClockFreq+0x160>)
 80083a4:	6889      	ldr	r1, [r1, #8]
 80083a6:	f001 010c 	and.w	r1, r1, #12
 80083aa:	2908      	cmp	r1, #8
 80083ac:	d00d      	beq.n	80083ca <HAL_RCC_GetSysClockFreq+0x3e>
 80083ae:	2908      	cmp	r1, #8
 80083b0:	f200 8094 	bhi.w	80084dc <HAL_RCC_GetSysClockFreq+0x150>
 80083b4:	2900      	cmp	r1, #0
 80083b6:	d002      	beq.n	80083be <HAL_RCC_GetSysClockFreq+0x32>
 80083b8:	2904      	cmp	r1, #4
 80083ba:	d003      	beq.n	80083c4 <HAL_RCC_GetSysClockFreq+0x38>
 80083bc:	e08e      	b.n	80084dc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083be:	4b4c      	ldr	r3, [pc, #304]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80083c0:	60bb      	str	r3, [r7, #8]
      break;
 80083c2:	e08e      	b.n	80084e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80083c4:	4b4b      	ldr	r3, [pc, #300]	; (80084f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80083c6:	60bb      	str	r3, [r7, #8]
      break;
 80083c8:	e08b      	b.n	80084e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083ca:	4948      	ldr	r1, [pc, #288]	; (80084ec <HAL_RCC_GetSysClockFreq+0x160>)
 80083cc:	6849      	ldr	r1, [r1, #4]
 80083ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80083d2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80083d4:	4945      	ldr	r1, [pc, #276]	; (80084ec <HAL_RCC_GetSysClockFreq+0x160>)
 80083d6:	6849      	ldr	r1, [r1, #4]
 80083d8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80083dc:	2900      	cmp	r1, #0
 80083de:	d024      	beq.n	800842a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083e0:	4942      	ldr	r1, [pc, #264]	; (80084ec <HAL_RCC_GetSysClockFreq+0x160>)
 80083e2:	6849      	ldr	r1, [r1, #4]
 80083e4:	0989      	lsrs	r1, r1, #6
 80083e6:	4608      	mov	r0, r1
 80083e8:	f04f 0100 	mov.w	r1, #0
 80083ec:	f240 14ff 	movw	r4, #511	; 0x1ff
 80083f0:	f04f 0500 	mov.w	r5, #0
 80083f4:	ea00 0204 	and.w	r2, r0, r4
 80083f8:	ea01 0305 	and.w	r3, r1, r5
 80083fc:	493d      	ldr	r1, [pc, #244]	; (80084f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80083fe:	fb01 f003 	mul.w	r0, r1, r3
 8008402:	2100      	movs	r1, #0
 8008404:	fb01 f102 	mul.w	r1, r1, r2
 8008408:	1844      	adds	r4, r0, r1
 800840a:	493a      	ldr	r1, [pc, #232]	; (80084f4 <HAL_RCC_GetSysClockFreq+0x168>)
 800840c:	fba2 0101 	umull	r0, r1, r2, r1
 8008410:	1863      	adds	r3, r4, r1
 8008412:	4619      	mov	r1, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	461a      	mov	r2, r3
 8008418:	f04f 0300 	mov.w	r3, #0
 800841c:	f7f7 ff48 	bl	80002b0 <__aeabi_uldivmod>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	4613      	mov	r3, r2
 8008426:	60fb      	str	r3, [r7, #12]
 8008428:	e04a      	b.n	80084c0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800842a:	4b30      	ldr	r3, [pc, #192]	; (80084ec <HAL_RCC_GetSysClockFreq+0x160>)
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	099b      	lsrs	r3, r3, #6
 8008430:	461a      	mov	r2, r3
 8008432:	f04f 0300 	mov.w	r3, #0
 8008436:	f240 10ff 	movw	r0, #511	; 0x1ff
 800843a:	f04f 0100 	mov.w	r1, #0
 800843e:	ea02 0400 	and.w	r4, r2, r0
 8008442:	ea03 0501 	and.w	r5, r3, r1
 8008446:	4620      	mov	r0, r4
 8008448:	4629      	mov	r1, r5
 800844a:	f04f 0200 	mov.w	r2, #0
 800844e:	f04f 0300 	mov.w	r3, #0
 8008452:	014b      	lsls	r3, r1, #5
 8008454:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008458:	0142      	lsls	r2, r0, #5
 800845a:	4610      	mov	r0, r2
 800845c:	4619      	mov	r1, r3
 800845e:	1b00      	subs	r0, r0, r4
 8008460:	eb61 0105 	sbc.w	r1, r1, r5
 8008464:	f04f 0200 	mov.w	r2, #0
 8008468:	f04f 0300 	mov.w	r3, #0
 800846c:	018b      	lsls	r3, r1, #6
 800846e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008472:	0182      	lsls	r2, r0, #6
 8008474:	1a12      	subs	r2, r2, r0
 8008476:	eb63 0301 	sbc.w	r3, r3, r1
 800847a:	f04f 0000 	mov.w	r0, #0
 800847e:	f04f 0100 	mov.w	r1, #0
 8008482:	00d9      	lsls	r1, r3, #3
 8008484:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008488:	00d0      	lsls	r0, r2, #3
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	1912      	adds	r2, r2, r4
 8008490:	eb45 0303 	adc.w	r3, r5, r3
 8008494:	f04f 0000 	mov.w	r0, #0
 8008498:	f04f 0100 	mov.w	r1, #0
 800849c:	0299      	lsls	r1, r3, #10
 800849e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80084a2:	0290      	lsls	r0, r2, #10
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4610      	mov	r0, r2
 80084aa:	4619      	mov	r1, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	461a      	mov	r2, r3
 80084b0:	f04f 0300 	mov.w	r3, #0
 80084b4:	f7f7 fefc 	bl	80002b0 <__aeabi_uldivmod>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4613      	mov	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80084c0:	4b0a      	ldr	r3, [pc, #40]	; (80084ec <HAL_RCC_GetSysClockFreq+0x160>)
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	0c1b      	lsrs	r3, r3, #16
 80084c6:	f003 0303 	and.w	r3, r3, #3
 80084ca:	3301      	adds	r3, #1
 80084cc:	005b      	lsls	r3, r3, #1
 80084ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d8:	60bb      	str	r3, [r7, #8]
      break;
 80084da:	e002      	b.n	80084e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80084dc:	4b04      	ldr	r3, [pc, #16]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80084de:	60bb      	str	r3, [r7, #8]
      break;
 80084e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80084e2:	68bb      	ldr	r3, [r7, #8]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bdb0      	pop	{r4, r5, r7, pc}
 80084ec:	40023800 	.word	0x40023800
 80084f0:	00f42400 	.word	0x00f42400
 80084f4:	017d7840 	.word	0x017d7840

080084f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084f8:	b480      	push	{r7}
 80084fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084fc:	4b03      	ldr	r3, [pc, #12]	; (800850c <HAL_RCC_GetHCLKFreq+0x14>)
 80084fe:	681b      	ldr	r3, [r3, #0]
}
 8008500:	4618      	mov	r0, r3
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	20000050 	.word	0x20000050

08008510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008514:	f7ff fff0 	bl	80084f8 <HAL_RCC_GetHCLKFreq>
 8008518:	4602      	mov	r2, r0
 800851a:	4b05      	ldr	r3, [pc, #20]	; (8008530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	0a9b      	lsrs	r3, r3, #10
 8008520:	f003 0307 	and.w	r3, r3, #7
 8008524:	4903      	ldr	r1, [pc, #12]	; (8008534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008526:	5ccb      	ldrb	r3, [r1, r3]
 8008528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800852c:	4618      	mov	r0, r3
 800852e:	bd80      	pop	{r7, pc}
 8008530:	40023800 	.word	0x40023800
 8008534:	080109b8 	.word	0x080109b8

08008538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800853c:	f7ff ffdc 	bl	80084f8 <HAL_RCC_GetHCLKFreq>
 8008540:	4602      	mov	r2, r0
 8008542:	4b05      	ldr	r3, [pc, #20]	; (8008558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	0b5b      	lsrs	r3, r3, #13
 8008548:	f003 0307 	and.w	r3, r3, #7
 800854c:	4903      	ldr	r1, [pc, #12]	; (800855c <HAL_RCC_GetPCLK2Freq+0x24>)
 800854e:	5ccb      	ldrb	r3, [r1, r3]
 8008550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008554:	4618      	mov	r0, r3
 8008556:	bd80      	pop	{r7, pc}
 8008558:	40023800 	.word	0x40023800
 800855c:	080109b8 	.word	0x080109b8

08008560 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	220f      	movs	r2, #15
 800856e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008570:	4b12      	ldr	r3, [pc, #72]	; (80085bc <HAL_RCC_GetClockConfig+0x5c>)
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f003 0203 	and.w	r2, r3, #3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800857c:	4b0f      	ldr	r3, [pc, #60]	; (80085bc <HAL_RCC_GetClockConfig+0x5c>)
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008588:	4b0c      	ldr	r3, [pc, #48]	; (80085bc <HAL_RCC_GetClockConfig+0x5c>)
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008594:	4b09      	ldr	r3, [pc, #36]	; (80085bc <HAL_RCC_GetClockConfig+0x5c>)
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	08db      	lsrs	r3, r3, #3
 800859a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80085a2:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <HAL_RCC_GetClockConfig+0x60>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 020f 	and.w	r2, r3, #15
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	601a      	str	r2, [r3, #0]
}
 80085ae:	bf00      	nop
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	40023800 	.word	0x40023800
 80085c0:	40023c00 	.word	0x40023c00

080085c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80085cc:	2300      	movs	r3, #0
 80085ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80085d4:	2300      	movs	r3, #0
 80085d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80085d8:	2300      	movs	r3, #0
 80085da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80085dc:	2300      	movs	r3, #0
 80085de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d012      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80085ec:	4b69      	ldr	r3, [pc, #420]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	4a68      	ldr	r2, [pc, #416]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80085f6:	6093      	str	r3, [r2, #8]
 80085f8:	4b66      	ldr	r3, [pc, #408]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085fa:	689a      	ldr	r2, [r3, #8]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008600:	4964      	ldr	r1, [pc, #400]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008602:	4313      	orrs	r3, r2
 8008604:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800860e:	2301      	movs	r3, #1
 8008610:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d017      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800861e:	4b5d      	ldr	r3, [pc, #372]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008624:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800862c:	4959      	ldr	r1, [pc, #356]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800862e:	4313      	orrs	r3, r2
 8008630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008638:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800863c:	d101      	bne.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800863e:	2301      	movs	r3, #1
 8008640:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008646:	2b00      	cmp	r3, #0
 8008648:	d101      	bne.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800864a:	2301      	movs	r3, #1
 800864c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d017      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800865a:	4b4e      	ldr	r3, [pc, #312]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800865c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008660:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008668:	494a      	ldr	r1, [pc, #296]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800866a:	4313      	orrs	r3, r2
 800866c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008674:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008678:	d101      	bne.n	800867e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800867a:	2301      	movs	r3, #1
 800867c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008686:	2301      	movs	r3, #1
 8008688:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008696:	2301      	movs	r3, #1
 8008698:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f000 808b 	beq.w	80087be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80086a8:	4b3a      	ldr	r3, [pc, #232]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ac:	4a39      	ldr	r2, [pc, #228]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086b2:	6413      	str	r3, [r2, #64]	; 0x40
 80086b4:	4b37      	ldr	r3, [pc, #220]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086bc:	60bb      	str	r3, [r7, #8]
 80086be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80086c0:	4b35      	ldr	r3, [pc, #212]	; (8008798 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a34      	ldr	r2, [pc, #208]	; (8008798 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086cc:	f7fc fa50 	bl	8004b70 <HAL_GetTick>
 80086d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80086d2:	e008      	b.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086d4:	f7fc fa4c 	bl	8004b70 <HAL_GetTick>
 80086d8:	4602      	mov	r2, r0
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	2b64      	cmp	r3, #100	; 0x64
 80086e0:	d901      	bls.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e357      	b.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80086e6:	4b2c      	ldr	r3, [pc, #176]	; (8008798 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d0f0      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086f2:	4b28      	ldr	r3, [pc, #160]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d035      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	429a      	cmp	r2, r3
 800870e:	d02e      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008710:	4b20      	ldr	r3, [pc, #128]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008718:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800871a:	4b1e      	ldr	r3, [pc, #120]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800871c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800871e:	4a1d      	ldr	r2, [pc, #116]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008724:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008726:	4b1b      	ldr	r3, [pc, #108]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800872a:	4a1a      	ldr	r2, [pc, #104]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800872c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008730:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008732:	4a18      	ldr	r2, [pc, #96]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008738:	4b16      	ldr	r3, [pc, #88]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800873a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	2b01      	cmp	r3, #1
 8008742:	d114      	bne.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008744:	f7fc fa14 	bl	8004b70 <HAL_GetTick>
 8008748:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800874a:	e00a      	b.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800874c:	f7fc fa10 	bl	8004b70 <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	f241 3288 	movw	r2, #5000	; 0x1388
 800875a:	4293      	cmp	r3, r2
 800875c:	d901      	bls.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e319      	b.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008762:	4b0c      	ldr	r3, [pc, #48]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008766:	f003 0302 	and.w	r3, r3, #2
 800876a:	2b00      	cmp	r3, #0
 800876c:	d0ee      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800877a:	d111      	bne.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800877c:	4b05      	ldr	r3, [pc, #20]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008788:	4b04      	ldr	r3, [pc, #16]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800878a:	400b      	ands	r3, r1
 800878c:	4901      	ldr	r1, [pc, #4]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800878e:	4313      	orrs	r3, r2
 8008790:	608b      	str	r3, [r1, #8]
 8008792:	e00b      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008794:	40023800 	.word	0x40023800
 8008798:	40007000 	.word	0x40007000
 800879c:	0ffffcff 	.word	0x0ffffcff
 80087a0:	4bb1      	ldr	r3, [pc, #708]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	4ab0      	ldr	r2, [pc, #704]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80087aa:	6093      	str	r3, [r2, #8]
 80087ac:	4bae      	ldr	r3, [pc, #696]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087b8:	49ab      	ldr	r1, [pc, #684]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0310 	and.w	r3, r3, #16
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d010      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087ca:	4ba7      	ldr	r3, [pc, #668]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087d0:	4aa5      	ldr	r2, [pc, #660]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80087da:	4ba3      	ldr	r3, [pc, #652]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e4:	49a0      	ldr	r1, [pc, #640]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00a      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80087f8:	4b9b      	ldr	r3, [pc, #620]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008806:	4998      	ldr	r1, [pc, #608]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008808:	4313      	orrs	r3, r2
 800880a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00a      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800881a:	4b93      	ldr	r3, [pc, #588]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800881c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008820:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008828:	498f      	ldr	r1, [pc, #572]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800882a:	4313      	orrs	r3, r2
 800882c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00a      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800883c:	4b8a      	ldr	r3, [pc, #552]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800883e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008842:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800884a:	4987      	ldr	r1, [pc, #540]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800884c:	4313      	orrs	r3, r2
 800884e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00a      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800885e:	4b82      	ldr	r3, [pc, #520]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008864:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800886c:	497e      	ldr	r1, [pc, #504]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800886e:	4313      	orrs	r3, r2
 8008870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00a      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008880:	4b79      	ldr	r3, [pc, #484]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008886:	f023 0203 	bic.w	r2, r3, #3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800888e:	4976      	ldr	r1, [pc, #472]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008890:	4313      	orrs	r3, r2
 8008892:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00a      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80088a2:	4b71      	ldr	r3, [pc, #452]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a8:	f023 020c 	bic.w	r2, r3, #12
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088b0:	496d      	ldr	r1, [pc, #436]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088b2:	4313      	orrs	r3, r2
 80088b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00a      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80088c4:	4b68      	ldr	r3, [pc, #416]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d2:	4965      	ldr	r1, [pc, #404]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088d4:	4313      	orrs	r3, r2
 80088d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00a      	beq.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80088e6:	4b60      	ldr	r3, [pc, #384]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f4:	495c      	ldr	r1, [pc, #368]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088f6:	4313      	orrs	r3, r2
 80088f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00a      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008908:	4b57      	ldr	r3, [pc, #348]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800890a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800890e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008916:	4954      	ldr	r1, [pc, #336]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008918:	4313      	orrs	r3, r2
 800891a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00a      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800892a:	4b4f      	ldr	r3, [pc, #316]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800892c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008930:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008938:	494b      	ldr	r1, [pc, #300]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800893a:	4313      	orrs	r3, r2
 800893c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00a      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800894c:	4b46      	ldr	r3, [pc, #280]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800894e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008952:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800895a:	4943      	ldr	r1, [pc, #268]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800895c:	4313      	orrs	r3, r2
 800895e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00a      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800896e:	4b3e      	ldr	r3, [pc, #248]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008974:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800897c:	493a      	ldr	r1, [pc, #232]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800897e:	4313      	orrs	r3, r2
 8008980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00a      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008990:	4b35      	ldr	r3, [pc, #212]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008996:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800899e:	4932      	ldr	r1, [pc, #200]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d011      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80089b2:	4b2d      	ldr	r3, [pc, #180]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089c0:	4929      	ldr	r1, [pc, #164]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089c2:	4313      	orrs	r3, r2
 80089c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089d0:	d101      	bne.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80089d2:	2301      	movs	r3, #1
 80089d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 0308 	and.w	r3, r3, #8
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80089e2:	2301      	movs	r3, #1
 80089e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00a      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089f2:	4b1d      	ldr	r3, [pc, #116]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a00:	4919      	ldr	r1, [pc, #100]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00b      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008a14:	4b14      	ldr	r3, [pc, #80]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a24:	4910      	ldr	r1, [pc, #64]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a26:	4313      	orrs	r3, r2
 8008a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d006      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 80d9 	beq.w	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008a40:	4b09      	ldr	r3, [pc, #36]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a08      	ldr	r2, [pc, #32]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a4c:	f7fc f890 	bl	8004b70 <HAL_GetTick>
 8008a50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a52:	e00b      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008a54:	f7fc f88c 	bl	8004b70 <HAL_GetTick>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	2b64      	cmp	r3, #100	; 0x64
 8008a60:	d904      	bls.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e197      	b.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008a66:	bf00      	nop
 8008a68:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a6c:	4b6c      	ldr	r3, [pc, #432]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1ed      	bne.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d021      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d11d      	bne.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008a8c:	4b64      	ldr	r3, [pc, #400]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a92:	0c1b      	lsrs	r3, r3, #16
 8008a94:	f003 0303 	and.w	r3, r3, #3
 8008a98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008a9a:	4b61      	ldr	r3, [pc, #388]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aa0:	0e1b      	lsrs	r3, r3, #24
 8008aa2:	f003 030f 	and.w	r3, r3, #15
 8008aa6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	019a      	lsls	r2, r3, #6
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	041b      	lsls	r3, r3, #16
 8008ab2:	431a      	orrs	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	061b      	lsls	r3, r3, #24
 8008ab8:	431a      	orrs	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	071b      	lsls	r3, r3, #28
 8008ac0:	4957      	ldr	r1, [pc, #348]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d004      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008adc:	d00a      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d02e      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008af2:	d129      	bne.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008af4:	4b4a      	ldr	r3, [pc, #296]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008afa:	0c1b      	lsrs	r3, r3, #16
 8008afc:	f003 0303 	and.w	r3, r3, #3
 8008b00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008b02:	4b47      	ldr	r3, [pc, #284]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b08:	0f1b      	lsrs	r3, r3, #28
 8008b0a:	f003 0307 	and.w	r3, r3, #7
 8008b0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	019a      	lsls	r2, r3, #6
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	041b      	lsls	r3, r3, #16
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	061b      	lsls	r3, r3, #24
 8008b22:	431a      	orrs	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	071b      	lsls	r3, r3, #28
 8008b28:	493d      	ldr	r1, [pc, #244]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008b30:	4b3b      	ldr	r3, [pc, #236]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b36:	f023 021f 	bic.w	r2, r3, #31
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	4937      	ldr	r1, [pc, #220]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d01d      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008b54:	4b32      	ldr	r3, [pc, #200]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b5a:	0e1b      	lsrs	r3, r3, #24
 8008b5c:	f003 030f 	and.w	r3, r3, #15
 8008b60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008b62:	4b2f      	ldr	r3, [pc, #188]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b68:	0f1b      	lsrs	r3, r3, #28
 8008b6a:	f003 0307 	and.w	r3, r3, #7
 8008b6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	019a      	lsls	r2, r3, #6
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	041b      	lsls	r3, r3, #16
 8008b7c:	431a      	orrs	r2, r3
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	061b      	lsls	r3, r3, #24
 8008b82:	431a      	orrs	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	071b      	lsls	r3, r3, #28
 8008b88:	4925      	ldr	r1, [pc, #148]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d011      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	019a      	lsls	r2, r3, #6
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	041b      	lsls	r3, r3, #16
 8008ba8:	431a      	orrs	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	061b      	lsls	r3, r3, #24
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	071b      	lsls	r3, r3, #28
 8008bb8:	4919      	ldr	r1, [pc, #100]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008bc0:	4b17      	ldr	r3, [pc, #92]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a16      	ldr	r2, [pc, #88]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008bc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bcc:	f7fb ffd0 	bl	8004b70 <HAL_GetTick>
 8008bd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008bd2:	e008      	b.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008bd4:	f7fb ffcc 	bl	8004b70 <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	2b64      	cmp	r3, #100	; 0x64
 8008be0:	d901      	bls.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e0d7      	b.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008be6:	4b0e      	ldr	r3, [pc, #56]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0f0      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	f040 80cd 	bne.w	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008bfa:	4b09      	ldr	r3, [pc, #36]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a08      	ldr	r2, [pc, #32]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c06:	f7fb ffb3 	bl	8004b70 <HAL_GetTick>
 8008c0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008c0c:	e00a      	b.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008c0e:	f7fb ffaf 	bl	8004b70 <HAL_GetTick>
 8008c12:	4602      	mov	r2, r0
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	2b64      	cmp	r3, #100	; 0x64
 8008c1a:	d903      	bls.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e0ba      	b.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008c20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008c24:	4b5e      	ldr	r3, [pc, #376]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c30:	d0ed      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d009      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d02e      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d12a      	bne.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008c5a:	4b51      	ldr	r3, [pc, #324]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c60:	0c1b      	lsrs	r3, r3, #16
 8008c62:	f003 0303 	and.w	r3, r3, #3
 8008c66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008c68:	4b4d      	ldr	r3, [pc, #308]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c6e:	0f1b      	lsrs	r3, r3, #28
 8008c70:	f003 0307 	and.w	r3, r3, #7
 8008c74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	019a      	lsls	r2, r3, #6
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	041b      	lsls	r3, r3, #16
 8008c80:	431a      	orrs	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	061b      	lsls	r3, r3, #24
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	071b      	lsls	r3, r3, #28
 8008c8e:	4944      	ldr	r1, [pc, #272]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c90:	4313      	orrs	r3, r2
 8008c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008c96:	4b42      	ldr	r3, [pc, #264]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	021b      	lsls	r3, r3, #8
 8008ca8:	493d      	ldr	r1, [pc, #244]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d022      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cc4:	d11d      	bne.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008cc6:	4b36      	ldr	r3, [pc, #216]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ccc:	0e1b      	lsrs	r3, r3, #24
 8008cce:	f003 030f 	and.w	r3, r3, #15
 8008cd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008cd4:	4b32      	ldr	r3, [pc, #200]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cda:	0f1b      	lsrs	r3, r3, #28
 8008cdc:	f003 0307 	and.w	r3, r3, #7
 8008ce0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	019a      	lsls	r2, r3, #6
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a1b      	ldr	r3, [r3, #32]
 8008cec:	041b      	lsls	r3, r3, #16
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	061b      	lsls	r3, r3, #24
 8008cf4:	431a      	orrs	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	071b      	lsls	r3, r3, #28
 8008cfa:	4929      	ldr	r1, [pc, #164]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0308 	and.w	r3, r3, #8
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d028      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008d0e:	4b24      	ldr	r3, [pc, #144]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d14:	0e1b      	lsrs	r3, r3, #24
 8008d16:	f003 030f 	and.w	r3, r3, #15
 8008d1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008d1c:	4b20      	ldr	r3, [pc, #128]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d22:	0c1b      	lsrs	r3, r3, #16
 8008d24:	f003 0303 	and.w	r3, r3, #3
 8008d28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	019a      	lsls	r2, r3, #6
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	041b      	lsls	r3, r3, #16
 8008d34:	431a      	orrs	r2, r3
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	061b      	lsls	r3, r3, #24
 8008d3a:	431a      	orrs	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	071b      	lsls	r3, r3, #28
 8008d42:	4917      	ldr	r1, [pc, #92]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008d4a:	4b15      	ldr	r3, [pc, #84]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d58:	4911      	ldr	r1, [pc, #68]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008d60:	4b0f      	ldr	r3, [pc, #60]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a0e      	ldr	r2, [pc, #56]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d6c:	f7fb ff00 	bl	8004b70 <HAL_GetTick>
 8008d70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008d72:	e008      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008d74:	f7fb fefc 	bl	8004b70 <HAL_GetTick>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	2b64      	cmp	r3, #100	; 0x64
 8008d80:	d901      	bls.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	e007      	b.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008d86:	4b06      	ldr	r3, [pc, #24]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d92:	d1ef      	bne.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3720      	adds	r7, #32
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	40023800 	.word	0x40023800

08008da4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d101      	bne.n	8008db6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e01c      	b.n	8008df0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	795b      	ldrb	r3, [r3, #5]
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d105      	bne.n	8008dcc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7fb faa4 	bl	8004314 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2202      	movs	r2, #2
 8008dd0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f042 0204 	orr.w	r2, r2, #4
 8008de0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	791b      	ldrb	r3, [r3, #4]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d101      	bne.n	8008e12 <HAL_RNG_GenerateRandomNumber+0x1a>
 8008e0e:	2302      	movs	r3, #2
 8008e10:	e044      	b.n	8008e9c <HAL_RNG_GenerateRandomNumber+0xa4>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	795b      	ldrb	r3, [r3, #5]
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d133      	bne.n	8008e8a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2202      	movs	r2, #2
 8008e26:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e28:	f7fb fea2 	bl	8004b70 <HAL_GetTick>
 8008e2c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008e2e:	e018      	b.n	8008e62 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008e30:	f7fb fe9e 	bl	8004b70 <HAL_GetTick>
 8008e34:	4602      	mov	r2, r0
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d911      	bls.n	8008e62 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	f003 0301 	and.w	r3, r3, #1
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d00a      	beq.n	8008e62 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2202      	movs	r2, #2
 8008e56:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e01c      	b.n	8008e9c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	f003 0301 	and.w	r3, r3, #1
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d1df      	bne.n	8008e30 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	689a      	ldr	r2, [r3, #8]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	68da      	ldr	r2, [r3, #12]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	715a      	strb	r2, [r3, #5]
 8008e88:	e004      	b.n	8008e94 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2204      	movs	r2, #4
 8008e8e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	711a      	strb	r2, [r3, #4]

  return status;
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d101      	bne.n	8008eb6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e081      	b.n	8008fba <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	7f5b      	ldrb	r3, [r3, #29]
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d105      	bne.n	8008ecc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f7fb fa44 	bl	8004354 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	22ca      	movs	r2, #202	; 0xca
 8008ed8:	625a      	str	r2, [r3, #36]	; 0x24
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2253      	movs	r2, #83	; 0x53
 8008ee0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fb16 	bl	8009514 <RTC_EnterInitMode>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d008      	beq.n	8008f00 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	22ff      	movs	r2, #255	; 0xff
 8008ef4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2204      	movs	r2, #4
 8008efa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e05c      	b.n	8008fba <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6899      	ldr	r1, [r3, #8]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	4b2e      	ldr	r3, [pc, #184]	; (8008fc4 <HAL_RTC_Init+0x120>)
 8008f0c:	400b      	ands	r3, r1
 8008f0e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6899      	ldr	r1, [r3, #8]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	685a      	ldr	r2, [r3, #4]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	431a      	orrs	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	695b      	ldr	r3, [r3, #20]
 8008f24:	431a      	orrs	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	68d2      	ldr	r2, [r2, #12]
 8008f36:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6919      	ldr	r1, [r3, #16]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	041a      	lsls	r2, r3, #16
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68da      	ldr	r2, [r3, #12]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f5a:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	f003 0320 	and.w	r3, r3, #32
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10e      	bne.n	8008f88 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 faaa 	bl	80094c4 <HAL_RTC_WaitForSynchro>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d008      	beq.n	8008f88 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	22ff      	movs	r2, #255	; 0xff
 8008f7c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2204      	movs	r2, #4
 8008f82:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e018      	b.n	8008fba <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f022 0208 	bic.w	r2, r2, #8
 8008f96:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	699a      	ldr	r2, [r3, #24]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	430a      	orrs	r2, r1
 8008fa8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	22ff      	movs	r2, #255	; 0xff
 8008fb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
  }
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	ff8fffbf 	.word	0xff8fffbf

08008fc8 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008fc8:	b590      	push	{r4, r7, lr}
 8008fca:	b087      	sub	sp, #28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	7f1b      	ldrb	r3, [r3, #28]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d101      	bne.n	8008fe4 <HAL_RTC_SetTime+0x1c>
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	e0a8      	b.n	8009136 <HAL_RTC_SetTime+0x16e>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2202      	movs	r2, #2
 8008fee:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d126      	bne.n	8009044 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009000:	2b00      	cmp	r3, #0
 8009002:	d102      	bne.n	800900a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	2200      	movs	r2, #0
 8009008:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	4618      	mov	r0, r3
 8009010:	f000 faac 	bl	800956c <RTC_ByteToBcd2>
 8009014:	4603      	mov	r3, r0
 8009016:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	785b      	ldrb	r3, [r3, #1]
 800901c:	4618      	mov	r0, r3
 800901e:	f000 faa5 	bl	800956c <RTC_ByteToBcd2>
 8009022:	4603      	mov	r3, r0
 8009024:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009026:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	789b      	ldrb	r3, [r3, #2]
 800902c:	4618      	mov	r0, r3
 800902e:	f000 fa9d 	bl	800956c <RTC_ByteToBcd2>
 8009032:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009034:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	7b1b      	ldrb	r3, [r3, #12]
 800903c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800903e:	4313      	orrs	r3, r2
 8009040:	617b      	str	r3, [r7, #20]
 8009042:	e018      	b.n	8009076 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800904e:	2b00      	cmp	r3, #0
 8009050:	d102      	bne.n	8009058 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	2200      	movs	r2, #0
 8009056:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009064:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800906a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	7b1b      	ldrb	r3, [r3, #12]
 8009070:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009072:	4313      	orrs	r3, r2
 8009074:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	22ca      	movs	r2, #202	; 0xca
 800907c:	625a      	str	r2, [r3, #36]	; 0x24
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2253      	movs	r2, #83	; 0x53
 8009084:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f000 fa44 	bl	8009514 <RTC_EnterInitMode>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00b      	beq.n	80090aa <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	22ff      	movs	r2, #255	; 0xff
 8009098:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2204      	movs	r2, #4
 800909e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e045      	b.n	8009136 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	6979      	ldr	r1, [r7, #20]
 80090b0:	4b23      	ldr	r3, [pc, #140]	; (8009140 <HAL_RTC_SetTime+0x178>)
 80090b2:	400b      	ands	r3, r1
 80090b4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	689a      	ldr	r2, [r3, #8]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80090c4:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	6899      	ldr	r1, [r3, #8]
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	691a      	ldr	r2, [r3, #16]
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	695b      	ldr	r3, [r3, #20]
 80090d4:	431a      	orrs	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	430a      	orrs	r2, r1
 80090dc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68da      	ldr	r2, [r3, #12]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090ec:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	f003 0320 	and.w	r3, r3, #32
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d111      	bne.n	8009120 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f000 f9e1 	bl	80094c4 <HAL_RTC_WaitForSynchro>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00b      	beq.n	8009120 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	22ff      	movs	r2, #255	; 0xff
 800910e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2204      	movs	r2, #4
 8009114:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e00a      	b.n	8009136 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	22ff      	movs	r2, #255	; 0xff
 8009126:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2201      	movs	r2, #1
 800912c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009134:	2300      	movs	r3, #0
  }
}
 8009136:	4618      	mov	r0, r3
 8009138:	371c      	adds	r7, #28
 800913a:	46bd      	mov	sp, r7
 800913c:	bd90      	pop	{r4, r7, pc}
 800913e:	bf00      	nop
 8009140:	007f7f7f 	.word	0x007f7f7f

08009144 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009144:	b590      	push	{r4, r7, lr}
 8009146:	b087      	sub	sp, #28
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009150:	2300      	movs	r3, #0
 8009152:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	7f1b      	ldrb	r3, [r3, #28]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d101      	bne.n	8009160 <HAL_RTC_SetDate+0x1c>
 800915c:	2302      	movs	r3, #2
 800915e:	e092      	b.n	8009286 <HAL_RTC_SetDate+0x142>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2201      	movs	r2, #1
 8009164:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2202      	movs	r2, #2
 800916a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10e      	bne.n	8009190 <HAL_RTC_SetDate+0x4c>
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	785b      	ldrb	r3, [r3, #1]
 8009176:	f003 0310 	and.w	r3, r3, #16
 800917a:	2b00      	cmp	r3, #0
 800917c:	d008      	beq.n	8009190 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	785b      	ldrb	r3, [r3, #1]
 8009182:	f023 0310 	bic.w	r3, r3, #16
 8009186:	b2db      	uxtb	r3, r3
 8009188:	330a      	adds	r3, #10
 800918a:	b2da      	uxtb	r2, r3
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d11c      	bne.n	80091d0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	78db      	ldrb	r3, [r3, #3]
 800919a:	4618      	mov	r0, r3
 800919c:	f000 f9e6 	bl	800956c <RTC_ByteToBcd2>
 80091a0:	4603      	mov	r3, r0
 80091a2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	785b      	ldrb	r3, [r3, #1]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 f9df 	bl	800956c <RTC_ByteToBcd2>
 80091ae:	4603      	mov	r3, r0
 80091b0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80091b2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	789b      	ldrb	r3, [r3, #2]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 f9d7 	bl	800956c <RTC_ByteToBcd2>
 80091be:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80091c0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80091ca:	4313      	orrs	r3, r2
 80091cc:	617b      	str	r3, [r7, #20]
 80091ce:	e00e      	b.n	80091ee <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	78db      	ldrb	r3, [r3, #3]
 80091d4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	785b      	ldrb	r3, [r3, #1]
 80091da:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80091dc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80091e2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80091ea:	4313      	orrs	r3, r2
 80091ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	22ca      	movs	r2, #202	; 0xca
 80091f4:	625a      	str	r2, [r3, #36]	; 0x24
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2253      	movs	r2, #83	; 0x53
 80091fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f000 f988 	bl	8009514 <RTC_EnterInitMode>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00b      	beq.n	8009222 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	22ff      	movs	r2, #255	; 0xff
 8009210:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2204      	movs	r2, #4
 8009216:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e031      	b.n	8009286 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	6979      	ldr	r1, [r7, #20]
 8009228:	4b19      	ldr	r3, [pc, #100]	; (8009290 <HAL_RTC_SetDate+0x14c>)
 800922a:	400b      	ands	r3, r1
 800922c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68da      	ldr	r2, [r3, #12]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800923c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f003 0320 	and.w	r3, r3, #32
 8009248:	2b00      	cmp	r3, #0
 800924a:	d111      	bne.n	8009270 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 f939 	bl	80094c4 <HAL_RTC_WaitForSynchro>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00b      	beq.n	8009270 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	22ff      	movs	r2, #255	; 0xff
 800925e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2204      	movs	r2, #4
 8009264:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e00a      	b.n	8009286 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	22ff      	movs	r2, #255	; 0xff
 8009276:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2201      	movs	r2, #1
 800927c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009284:	2300      	movs	r3, #0
  }
}
 8009286:	4618      	mov	r0, r3
 8009288:	371c      	adds	r7, #28
 800928a:	46bd      	mov	sp, r7
 800928c:	bd90      	pop	{r4, r7, pc}
 800928e:	bf00      	nop
 8009290:	00ffff3f 	.word	0x00ffff3f

08009294 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009294:	b590      	push	{r4, r7, lr}
 8009296:	b089      	sub	sp, #36	; 0x24
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80092a4:	2300      	movs	r3, #0
 80092a6:	61fb      	str	r3, [r7, #28]
 80092a8:	2300      	movs	r3, #0
 80092aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	7f1b      	ldrb	r3, [r3, #28]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d101      	bne.n	80092b8 <HAL_RTC_SetAlarm+0x24>
 80092b4:	2302      	movs	r3, #2
 80092b6:	e101      	b.n	80094bc <HAL_RTC_SetAlarm+0x228>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2201      	movs	r2, #1
 80092bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2202      	movs	r2, #2
 80092c2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d137      	bne.n	800933a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d102      	bne.n	80092de <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2200      	movs	r2, #0
 80092dc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 f942 	bl	800956c <RTC_ByteToBcd2>
 80092e8:	4603      	mov	r3, r0
 80092ea:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	785b      	ldrb	r3, [r3, #1]
 80092f0:	4618      	mov	r0, r3
 80092f2:	f000 f93b 	bl	800956c <RTC_ByteToBcd2>
 80092f6:	4603      	mov	r3, r0
 80092f8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80092fa:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	789b      	ldrb	r3, [r3, #2]
 8009300:	4618      	mov	r0, r3
 8009302:	f000 f933 	bl	800956c <RTC_ByteToBcd2>
 8009306:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009308:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	7b1b      	ldrb	r3, [r3, #12]
 8009310:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009312:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800931c:	4618      	mov	r0, r3
 800931e:	f000 f925 	bl	800956c <RTC_ByteToBcd2>
 8009322:	4603      	mov	r3, r0
 8009324:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009326:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800932e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009334:	4313      	orrs	r3, r2
 8009336:	61fb      	str	r3, [r7, #28]
 8009338:	e023      	b.n	8009382 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009344:	2b00      	cmp	r3, #0
 8009346:	d102      	bne.n	800934e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	2200      	movs	r2, #0
 800934c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	785b      	ldrb	r3, [r3, #1]
 8009358:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800935a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800935c:	68ba      	ldr	r2, [r7, #8]
 800935e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009360:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	7b1b      	ldrb	r3, [r3, #12]
 8009366:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009368:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009370:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009372:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009378:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800937e:	4313      	orrs	r3, r2
 8009380:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	685a      	ldr	r2, [r3, #4]
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	69db      	ldr	r3, [r3, #28]
 800938a:	4313      	orrs	r3, r2
 800938c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	22ca      	movs	r2, #202	; 0xca
 8009394:	625a      	str	r2, [r3, #36]	; 0x24
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2253      	movs	r2, #83	; 0x53
 800939c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093a6:	d13f      	bne.n	8009428 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689a      	ldr	r2, [r3, #8]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093b6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	689a      	ldr	r2, [r3, #8]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80093c6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80093c8:	f7fb fbd2 	bl	8004b70 <HAL_GetTick>
 80093cc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80093ce:	e013      	b.n	80093f8 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80093d0:	f7fb fbce 	bl	8004b70 <HAL_GetTick>
 80093d4:	4602      	mov	r2, r0
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093de:	d90b      	bls.n	80093f8 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	22ff      	movs	r2, #255	; 0xff
 80093e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2203      	movs	r2, #3
 80093ec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e061      	b.n	80094bc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	d0e4      	beq.n	80093d0 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	69fa      	ldr	r2, [r7, #28]
 800940c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009424:	609a      	str	r2, [r3, #8]
 8009426:	e03e      	b.n	80094a6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	689a      	ldr	r2, [r3, #8]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009436:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	689a      	ldr	r2, [r3, #8]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009446:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009448:	f7fb fb92 	bl	8004b70 <HAL_GetTick>
 800944c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800944e:	e013      	b.n	8009478 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009450:	f7fb fb8e 	bl	8004b70 <HAL_GetTick>
 8009454:	4602      	mov	r2, r0
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800945e:	d90b      	bls.n	8009478 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	22ff      	movs	r2, #255	; 0xff
 8009466:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2203      	movs	r2, #3
 800946c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009474:	2303      	movs	r3, #3
 8009476:	e021      	b.n	80094bc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	f003 0302 	and.w	r3, r3, #2
 8009482:	2b00      	cmp	r3, #0
 8009484:	d0e4      	beq.n	8009450 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	69fa      	ldr	r2, [r7, #28]
 800948c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	697a      	ldr	r2, [r7, #20]
 8009494:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	689a      	ldr	r2, [r3, #8]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	22ff      	movs	r2, #255	; 0xff
 80094ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2201      	movs	r2, #1
 80094b2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3724      	adds	r7, #36	; 0x24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd90      	pop	{r4, r7, pc}

080094c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68da      	ldr	r2, [r3, #12]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80094de:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80094e0:	f7fb fb46 	bl	8004b70 <HAL_GetTick>
 80094e4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80094e6:	e009      	b.n	80094fc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80094e8:	f7fb fb42 	bl	8004b70 <HAL_GetTick>
 80094ec:	4602      	mov	r2, r0
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094f6:	d901      	bls.n	80094fc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e007      	b.n	800950c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	f003 0320 	and.w	r3, r3, #32
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0ee      	beq.n	80094e8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800951c:	2300      	movs	r3, #0
 800951e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952a:	2b00      	cmp	r3, #0
 800952c:	d119      	bne.n	8009562 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f04f 32ff 	mov.w	r2, #4294967295
 8009536:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009538:	f7fb fb1a 	bl	8004b70 <HAL_GetTick>
 800953c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800953e:	e009      	b.n	8009554 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009540:	f7fb fb16 	bl	8004b70 <HAL_GetTick>
 8009544:	4602      	mov	r2, r0
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	1ad3      	subs	r3, r2, r3
 800954a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800954e:	d901      	bls.n	8009554 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e007      	b.n	8009564 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800955e:	2b00      	cmp	r3, #0
 8009560:	d0ee      	beq.n	8009540 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	4603      	mov	r3, r0
 8009574:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8009576:	2300      	movs	r3, #0
 8009578:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800957a:	e005      	b.n	8009588 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	3301      	adds	r3, #1
 8009580:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8009582:	79fb      	ldrb	r3, [r7, #7]
 8009584:	3b0a      	subs	r3, #10
 8009586:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009588:	79fb      	ldrb	r3, [r7, #7]
 800958a:	2b09      	cmp	r3, #9
 800958c:	d8f6      	bhi.n	800957c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	b2db      	uxtb	r3, r3
 8009592:	011b      	lsls	r3, r3, #4
 8009594:	b2da      	uxtb	r2, r3
 8009596:	79fb      	ldrb	r3, [r7, #7]
 8009598:	4313      	orrs	r3, r2
 800959a:	b2db      	uxtb	r3, r3
}
 800959c:	4618      	mov	r0, r3
 800959e:	3714      	adds	r7, #20
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80095b4:	2300      	movs	r3, #0
 80095b6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	7f1b      	ldrb	r3, [r3, #28]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d101      	bne.n	80095c4 <HAL_RTCEx_SetTimeStamp+0x1c>
 80095c0:	2302      	movs	r3, #2
 80095c2:	e03e      	b.n	8009642 <HAL_RTCEx_SetTimeStamp+0x9a>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2201      	movs	r2, #1
 80095c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2202      	movs	r2, #2
 80095ce:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	689a      	ldr	r2, [r3, #8]
 80095d6:	4b1e      	ldr	r3, [pc, #120]	; (8009650 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80095d8:	4013      	ands	r3, r2
 80095da:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80095dc:	697a      	ldr	r2, [r7, #20]
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	22ca      	movs	r2, #202	; 0xca
 80095ea:	625a      	str	r2, [r3, #36]	; 0x24
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2253      	movs	r2, #83	; 0x53
 80095f2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f022 0206 	bic.w	r2, r2, #6
 8009602:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	430a      	orrs	r2, r1
 8009612:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689a      	ldr	r2, [r3, #8]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800962a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	22ff      	movs	r2, #255	; 0xff
 8009632:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2201      	movs	r2, #1
 8009638:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	371c      	adds	r7, #28
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	fffff7f7 	.word	0xfffff7f7

08009654 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e025      	b.n	80096b4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800966e:	b2db      	uxtb	r3, r3
 8009670:	2b00      	cmp	r3, #0
 8009672:	d106      	bne.n	8009682 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7fb f933 	bl	80048e8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2202      	movs	r2, #2
 8009686:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	3304      	adds	r3, #4
 8009692:	4619      	mov	r1, r3
 8009694:	4610      	mov	r0, r2
 8009696:	f001 fed9 	bl	800b44c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6818      	ldr	r0, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	461a      	mov	r2, r3
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	f001 ff2d 	bl	800b504 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80096ce:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80096d0:	7dfb      	ldrb	r3, [r7, #23]
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d101      	bne.n	80096da <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80096d6:	2302      	movs	r3, #2
 80096d8:	e021      	b.n	800971e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80096da:	7dfb      	ldrb	r3, [r7, #23]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d002      	beq.n	80096e6 <HAL_SDRAM_SendCommand+0x2a>
 80096e0:	7dfb      	ldrb	r3, [r7, #23]
 80096e2:	2b05      	cmp	r3, #5
 80096e4:	d118      	bne.n	8009718 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2202      	movs	r2, #2
 80096ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	68b9      	ldr	r1, [r7, #8]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f001 ff6e 	bl	800b5d8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b02      	cmp	r3, #2
 8009702:	d104      	bne.n	800970e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2205      	movs	r2, #5
 8009708:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800970c:	e006      	b.n	800971c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009716:	e001      	b.n	800971c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e000      	b.n	800971e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3718      	adds	r7, #24
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b082      	sub	sp, #8
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009736:	b2db      	uxtb	r3, r3
 8009738:	2b02      	cmp	r3, #2
 800973a:	d101      	bne.n	8009740 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800973c:	2302      	movs	r3, #2
 800973e:	e016      	b.n	800976e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2b01      	cmp	r3, #1
 800974a:	d10f      	bne.n	800976c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2202      	movs	r2, #2
 8009750:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	4618      	mov	r0, r3
 800975c:	f001 ff60 	bl	800b620 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	e000      	b.n	800976e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
}
 800976e:	4618      	mov	r0, r3
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d101      	bne.n	8009788 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	e09d      	b.n	80098c4 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978c:	2b00      	cmp	r3, #0
 800978e:	d108      	bne.n	80097a2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009798:	d009      	beq.n	80097ae <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	61da      	str	r2, [r3, #28]
 80097a0:	e005      	b.n	80097ae <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d106      	bne.n	80097ce <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f7fa fdf1 	bl	80043b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2202      	movs	r2, #2
 80097d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097e4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097ee:	d902      	bls.n	80097f6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80097f0:	2300      	movs	r3, #0
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	e002      	b.n	80097fc <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80097f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097fa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009804:	d007      	beq.n	8009816 <HAL_SPI_Init+0xa0>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800980e:	d002      	beq.n	8009816 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009826:	431a      	orrs	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	f003 0302 	and.w	r3, r3, #2
 8009830:	431a      	orrs	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	695b      	ldr	r3, [r3, #20]
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	431a      	orrs	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009844:	431a      	orrs	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	69db      	ldr	r3, [r3, #28]
 800984a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800984e:	431a      	orrs	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a1b      	ldr	r3, [r3, #32]
 8009854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009858:	ea42 0103 	orr.w	r1, r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009860:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	430a      	orrs	r2, r1
 800986a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	699b      	ldr	r3, [r3, #24]
 8009870:	0c1b      	lsrs	r3, r3, #16
 8009872:	f003 0204 	and.w	r2, r3, #4
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987a:	f003 0310 	and.w	r3, r3, #16
 800987e:	431a      	orrs	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009884:	f003 0308 	and.w	r3, r3, #8
 8009888:	431a      	orrs	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009892:	ea42 0103 	orr.w	r1, r2, r3
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	430a      	orrs	r2, r1
 80098a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	69da      	ldr	r2, [r3, #28]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b087      	sub	sp, #28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
 80098d8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d101      	bne.n	80098ec <HAL_SPI_TransmitReceive_IT+0x20>
 80098e8:	2302      	movs	r3, #2
 80098ea:	e091      	b.n	8009a10 <HAL_SPI_TransmitReceive_IT+0x144>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80098fa:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009902:	7dbb      	ldrb	r3, [r7, #22]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d00d      	beq.n	8009924 <HAL_SPI_TransmitReceive_IT+0x58>
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800990e:	d106      	bne.n	800991e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d102      	bne.n	800991e <HAL_SPI_TransmitReceive_IT+0x52>
 8009918:	7dbb      	ldrb	r3, [r7, #22]
 800991a:	2b04      	cmp	r3, #4
 800991c:	d002      	beq.n	8009924 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800991e:	2302      	movs	r3, #2
 8009920:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009922:	e070      	b.n	8009a06 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d005      	beq.n	8009936 <HAL_SPI_TransmitReceive_IT+0x6a>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <HAL_SPI_TransmitReceive_IT+0x6a>
 8009930:	887b      	ldrh	r3, [r7, #2]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d102      	bne.n	800993c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	75fb      	strb	r3, [r7, #23]
    goto error;
 800993a:	e064      	b.n	8009a06 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009942:	b2db      	uxtb	r3, r3
 8009944:	2b04      	cmp	r3, #4
 8009946:	d003      	beq.n	8009950 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2205      	movs	r2, #5
 800994c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2200      	movs	r2, #0
 8009954:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	887a      	ldrh	r2, [r7, #2]
 8009960:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	887a      	ldrh	r2, [r7, #2]
 8009966:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	887a      	ldrh	r2, [r7, #2]
 8009972:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	887a      	ldrh	r2, [r7, #2]
 800997a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009986:	d906      	bls.n	8009996 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	4a24      	ldr	r2, [pc, #144]	; (8009a1c <HAL_SPI_TransmitReceive_IT+0x150>)
 800998c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	4a23      	ldr	r2, [pc, #140]	; (8009a20 <HAL_SPI_TransmitReceive_IT+0x154>)
 8009992:	651a      	str	r2, [r3, #80]	; 0x50
 8009994:	e005      	b.n	80099a2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	4a22      	ldr	r2, [pc, #136]	; (8009a24 <HAL_SPI_TransmitReceive_IT+0x158>)
 800999a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	4a22      	ldr	r2, [pc, #136]	; (8009a28 <HAL_SPI_TransmitReceive_IT+0x15c>)
 80099a0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80099aa:	d802      	bhi.n	80099b2 <HAL_SPI_TransmitReceive_IT+0xe6>
 80099ac:	887b      	ldrh	r3, [r7, #2]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d908      	bls.n	80099c4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	685a      	ldr	r2, [r3, #4]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80099c0:	605a      	str	r2, [r3, #4]
 80099c2:	e007      	b.n	80099d4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685a      	ldr	r2, [r3, #4]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80099d2:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	685a      	ldr	r2, [r3, #4]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80099e2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ee:	2b40      	cmp	r3, #64	; 0x40
 80099f0:	d008      	beq.n	8009a04 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a00:	601a      	str	r2, [r3, #0]
 8009a02:	e000      	b.n	8009a06 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8009a04:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	371c      	adds	r7, #28
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	08009dcf 	.word	0x08009dcf
 8009a20:	08009e35 	.word	0x08009e35
 8009a24:	08009c7f 	.word	0x08009c7f
 8009a28:	08009d3d 	.word	0x08009d3d

08009a2c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b088      	sub	sp, #32
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	099b      	lsrs	r3, r3, #6
 8009a48:	f003 0301 	and.w	r3, r3, #1
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10f      	bne.n	8009a70 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00a      	beq.n	8009a70 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	099b      	lsrs	r3, r3, #6
 8009a5e:	f003 0301 	and.w	r3, r3, #1
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d004      	beq.n	8009a70 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	4798      	blx	r3
    return;
 8009a6e:	e0d7      	b.n	8009c20 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	085b      	lsrs	r3, r3, #1
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00a      	beq.n	8009a92 <HAL_SPI_IRQHandler+0x66>
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	09db      	lsrs	r3, r3, #7
 8009a80:	f003 0301 	and.w	r3, r3, #1
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d004      	beq.n	8009a92 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	4798      	blx	r3
    return;
 8009a90:	e0c6      	b.n	8009c20 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	095b      	lsrs	r3, r3, #5
 8009a96:	f003 0301 	and.w	r3, r3, #1
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d10c      	bne.n	8009ab8 <HAL_SPI_IRQHandler+0x8c>
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	099b      	lsrs	r3, r3, #6
 8009aa2:	f003 0301 	and.w	r3, r3, #1
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d106      	bne.n	8009ab8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	0a1b      	lsrs	r3, r3, #8
 8009aae:	f003 0301 	and.w	r3, r3, #1
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	f000 80b4 	beq.w	8009c20 <HAL_SPI_IRQHandler+0x1f4>
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	095b      	lsrs	r3, r3, #5
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f000 80ad 	beq.w	8009c20 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	099b      	lsrs	r3, r3, #6
 8009aca:	f003 0301 	and.w	r3, r3, #1
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d023      	beq.n	8009b1a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	d011      	beq.n	8009b02 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ae2:	f043 0204 	orr.w	r2, r3, #4
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009aea:	2300      	movs	r3, #0
 8009aec:	617b      	str	r3, [r7, #20]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	617b      	str	r3, [r7, #20]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	617b      	str	r3, [r7, #20]
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	e00b      	b.n	8009b1a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b02:	2300      	movs	r3, #0
 8009b04:	613b      	str	r3, [r7, #16]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	613b      	str	r3, [r7, #16]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	613b      	str	r3, [r7, #16]
 8009b16:	693b      	ldr	r3, [r7, #16]
        return;
 8009b18:	e082      	b.n	8009c20 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	095b      	lsrs	r3, r3, #5
 8009b1e:	f003 0301 	and.w	r3, r3, #1
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d014      	beq.n	8009b50 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b2a:	f043 0201 	orr.w	r2, r3, #1
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009b32:	2300      	movs	r3, #0
 8009b34:	60fb      	str	r3, [r7, #12]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	60fb      	str	r3, [r7, #12]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	0a1b      	lsrs	r3, r3, #8
 8009b54:	f003 0301 	and.w	r3, r3, #1
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00c      	beq.n	8009b76 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b60:	f043 0208 	orr.w	r2, r3, #8
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60bb      	str	r3, [r7, #8]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	60bb      	str	r3, [r7, #8]
 8009b74:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d04f      	beq.n	8009c1e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	685a      	ldr	r2, [r3, #4]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b8c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	f003 0302 	and.w	r3, r3, #2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d104      	bne.n	8009baa <HAL_SPI_IRQHandler+0x17e>
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d034      	beq.n	8009c14 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f022 0203 	bic.w	r2, r2, #3
 8009bb8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d011      	beq.n	8009be6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc6:	4a18      	ldr	r2, [pc, #96]	; (8009c28 <HAL_SPI_IRQHandler+0x1fc>)
 8009bc8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7fb fec6 	bl	8005960 <HAL_DMA_Abort_IT>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d005      	beq.n	8009be6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d016      	beq.n	8009c1c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf2:	4a0d      	ldr	r2, [pc, #52]	; (8009c28 <HAL_SPI_IRQHandler+0x1fc>)
 8009bf4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fb feb0 	bl	8005960 <HAL_DMA_Abort_IT>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00a      	beq.n	8009c1c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009c12:	e003      	b.n	8009c1c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f813 	bl	8009c40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009c1a:	e000      	b.n	8009c1e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009c1c:	bf00      	nop
    return;
 8009c1e:	bf00      	nop
  }
}
 8009c20:	3720      	adds	r7, #32
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	08009c55 	.word	0x08009c55

08009c2c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009c34:	bf00      	nop
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c60:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f7ff ffe5 	bl	8009c40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c76:	bf00      	nop
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b082      	sub	sp, #8
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d923      	bls.n	8009cda <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68da      	ldr	r2, [r3, #12]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9c:	b292      	uxth	r2, r2
 8009c9e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca4:	1c9a      	adds	r2, r3, #2
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	3b02      	subs	r3, #2
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d11f      	bne.n	8009d08 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	685a      	ldr	r2, [r3, #4]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009cd6:	605a      	str	r2, [r3, #4]
 8009cd8:	e016      	b.n	8009d08 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f103 020c 	add.w	r2, r3, #12
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce6:	7812      	ldrb	r2, [r2, #0]
 8009ce8:	b2d2      	uxtb	r2, r2
 8009cea:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf0:	1c5a      	adds	r2, r3, #1
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10f      	bne.n	8009d34 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	685a      	ldr	r2, [r3, #4]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009d22:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d102      	bne.n	8009d34 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fa38 	bl	800a1a4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009d34:	bf00      	nop
 8009d36:	3708      	adds	r7, #8
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d912      	bls.n	8009d74 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d52:	881a      	ldrh	r2, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5e:	1c9a      	adds	r2, r3, #2
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	3b02      	subs	r3, #2
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009d72:	e012      	b.n	8009d9a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	330c      	adds	r3, #12
 8009d7e:	7812      	ldrb	r2, [r2, #0]
 8009d80:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d86:	1c5a      	adds	r2, r3, #1
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	3b01      	subs	r3, #1
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d110      	bne.n	8009dc6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	685a      	ldr	r2, [r3, #4]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009db2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d102      	bne.n	8009dc6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 f9ef 	bl	800a1a4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009dc6:	bf00      	nop
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b082      	sub	sp, #8
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68da      	ldr	r2, [r3, #12]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de0:	b292      	uxth	r2, r2
 8009de2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de8:	1c9a      	adds	r2, r3, #2
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	3b01      	subs	r3, #1
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10f      	bne.n	8009e2c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	685a      	ldr	r2, [r3, #4]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e1a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d102      	bne.n	8009e2c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f9bc 	bl	800a1a4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009e2c:	bf00      	nop
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e40:	881a      	ldrh	r2, [r3, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e4c:	1c9a      	adds	r2, r3, #2
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d110      	bne.n	8009e8c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	685a      	ldr	r2, [r3, #4]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e78:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d102      	bne.n	8009e8c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f98c 	bl	800a1a4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009e8c:	bf00      	nop
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b088      	sub	sp, #32
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	603b      	str	r3, [r7, #0]
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009ea4:	f7fa fe64 	bl	8004b70 <HAL_GetTick>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eac:	1a9b      	subs	r3, r3, r2
 8009eae:	683a      	ldr	r2, [r7, #0]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009eb4:	f7fa fe5c 	bl	8004b70 <HAL_GetTick>
 8009eb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009eba:	4b39      	ldr	r3, [pc, #228]	; (8009fa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	015b      	lsls	r3, r3, #5
 8009ec0:	0d1b      	lsrs	r3, r3, #20
 8009ec2:	69fa      	ldr	r2, [r7, #28]
 8009ec4:	fb02 f303 	mul.w	r3, r2, r3
 8009ec8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009eca:	e054      	b.n	8009f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed2:	d050      	beq.n	8009f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009ed4:	f7fa fe4c 	bl	8004b70 <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	69fa      	ldr	r2, [r7, #28]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d902      	bls.n	8009eea <SPI_WaitFlagStateUntilTimeout+0x56>
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d13d      	bne.n	8009f66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	685a      	ldr	r2, [r3, #4]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ef8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f02:	d111      	bne.n	8009f28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f0c:	d004      	beq.n	8009f18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f16:	d107      	bne.n	8009f28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f30:	d10f      	bne.n	8009f52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f40:	601a      	str	r2, [r3, #0]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009f62:	2303      	movs	r3, #3
 8009f64:	e017      	b.n	8009f96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d101      	bne.n	8009f70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	3b01      	subs	r3, #1
 8009f74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	689a      	ldr	r2, [r3, #8]
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	4013      	ands	r3, r2
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	bf0c      	ite	eq
 8009f86:	2301      	moveq	r3, #1
 8009f88:	2300      	movne	r3, #0
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	79fb      	ldrb	r3, [r7, #7]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d19b      	bne.n	8009ecc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3720      	adds	r7, #32
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	20000050 	.word	0x20000050

08009fa4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b08a      	sub	sp, #40	; 0x28
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	607a      	str	r2, [r7, #4]
 8009fb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009fb6:	f7fa fddb 	bl	8004b70 <HAL_GetTick>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbe:	1a9b      	subs	r3, r3, r2
 8009fc0:	683a      	ldr	r2, [r7, #0]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009fc6:	f7fa fdd3 	bl	8004b70 <HAL_GetTick>
 8009fca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	330c      	adds	r3, #12
 8009fd2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009fd4:	4b3d      	ldr	r3, [pc, #244]	; (800a0cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	00da      	lsls	r2, r3, #3
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	0d1b      	lsrs	r3, r3, #20
 8009fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fe6:	fb02 f303 	mul.w	r3, r2, r3
 8009fea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009fec:	e060      	b.n	800a0b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009ff4:	d107      	bne.n	800a006 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d104      	bne.n	800a006 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	b2db      	uxtb	r3, r3
 800a002:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a004:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a00c:	d050      	beq.n	800a0b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a00e:	f7fa fdaf 	bl	8004b70 <HAL_GetTick>
 800a012:	4602      	mov	r2, r0
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	1ad3      	subs	r3, r2, r3
 800a018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d902      	bls.n	800a024 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	2b00      	cmp	r3, #0
 800a022:	d13d      	bne.n	800a0a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	685a      	ldr	r2, [r3, #4]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a032:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a03c:	d111      	bne.n	800a062 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a046:	d004      	beq.n	800a052 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a050:	d107      	bne.n	800a062 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a060:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a06a:	d10f      	bne.n	800a08c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a08a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2201      	movs	r2, #1
 800a090:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2200      	movs	r2, #0
 800a098:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a09c:	2303      	movs	r3, #3
 800a09e:	e010      	b.n	800a0c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d101      	bne.n	800a0aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	689a      	ldr	r2, [r3, #8]
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d196      	bne.n	8009fee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3728      	adds	r7, #40	; 0x28
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20000050 	.word	0x20000050

0800a0d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b088      	sub	sp, #32
 800a0d4:	af02      	add	r7, sp, #8
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f7ff ff5b 	bl	8009fa4 <SPI_WaitFifoStateUntilTimeout>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d007      	beq.n	800a104 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0f8:	f043 0220 	orr.w	r2, r3, #32
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a100:	2303      	movs	r3, #3
 800a102:	e046      	b.n	800a192 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a104:	4b25      	ldr	r3, [pc, #148]	; (800a19c <SPI_EndRxTxTransaction+0xcc>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a25      	ldr	r2, [pc, #148]	; (800a1a0 <SPI_EndRxTxTransaction+0xd0>)
 800a10a:	fba2 2303 	umull	r2, r3, r2, r3
 800a10e:	0d5b      	lsrs	r3, r3, #21
 800a110:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a114:	fb02 f303 	mul.w	r3, r2, r3
 800a118:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a122:	d112      	bne.n	800a14a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	2200      	movs	r2, #0
 800a12c:	2180      	movs	r1, #128	; 0x80
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f7ff feb0 	bl	8009e94 <SPI_WaitFlagStateUntilTimeout>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d016      	beq.n	800a168 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a13e:	f043 0220 	orr.w	r2, r3, #32
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e023      	b.n	800a192 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00a      	beq.n	800a166 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	3b01      	subs	r3, #1
 800a154:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a160:	2b80      	cmp	r3, #128	; 0x80
 800a162:	d0f2      	beq.n	800a14a <SPI_EndRxTxTransaction+0x7a>
 800a164:	e000      	b.n	800a168 <SPI_EndRxTxTransaction+0x98>
        break;
 800a166:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	2200      	movs	r2, #0
 800a170:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f7ff ff15 	bl	8009fa4 <SPI_WaitFifoStateUntilTimeout>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d007      	beq.n	800a190 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a184:	f043 0220 	orr.w	r2, r3, #32
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a18c:	2303      	movs	r3, #3
 800a18e:	e000      	b.n	800a192 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20000050 	.word	0x20000050
 800a1a0:	165e9f81 	.word	0x165e9f81

0800a1a4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1ac:	f7fa fce0 	bl	8004b70 <HAL_GetTick>
 800a1b0:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	685a      	ldr	r2, [r3, #4]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f022 0220 	bic.w	r2, r2, #32
 800a1c0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	2164      	movs	r1, #100	; 0x64
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7ff ff82 	bl	800a0d0 <SPI_EndRxTxTransaction>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d005      	beq.n	800a1de <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1d6:	f043 0220 	orr.w	r2, r3, #32
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d115      	bne.n	800a212 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b04      	cmp	r3, #4
 800a1f0:	d107      	bne.n	800a202 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7ff fd16 	bl	8009c2c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a200:	e00e      	b.n	800a220 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2201      	movs	r2, #1
 800a206:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7f7 fe56 	bl	8001ebc <HAL_SPI_TxRxCpltCallback>
}
 800a210:	e006      	b.n	800a220 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2201      	movs	r2, #1
 800a216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f7ff fd10 	bl	8009c40 <HAL_SPI_ErrorCallback>
}
 800a220:	bf00      	nop
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d101      	bne.n	800a23a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a236:	2301      	movs	r3, #1
 800a238:	e049      	b.n	800a2ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a240:	b2db      	uxtb	r3, r3
 800a242:	2b00      	cmp	r3, #0
 800a244:	d106      	bne.n	800a254 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f7fa f918 	bl	8004484 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2202      	movs	r2, #2
 800a258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	3304      	adds	r3, #4
 800a264:	4619      	mov	r1, r3
 800a266:	4610      	mov	r0, r2
 800a268:	f000 fac0 	bl	800a7ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2201      	movs	r2, #1
 800a298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
	...

0800a2d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d001      	beq.n	800a2f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e054      	b.n	800a39a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68da      	ldr	r2, [r3, #12]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f042 0201 	orr.w	r2, r2, #1
 800a306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a26      	ldr	r2, [pc, #152]	; (800a3a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d022      	beq.n	800a358 <HAL_TIM_Base_Start_IT+0x80>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a31a:	d01d      	beq.n	800a358 <HAL_TIM_Base_Start_IT+0x80>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a22      	ldr	r2, [pc, #136]	; (800a3ac <HAL_TIM_Base_Start_IT+0xd4>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d018      	beq.n	800a358 <HAL_TIM_Base_Start_IT+0x80>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a21      	ldr	r2, [pc, #132]	; (800a3b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d013      	beq.n	800a358 <HAL_TIM_Base_Start_IT+0x80>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a1f      	ldr	r2, [pc, #124]	; (800a3b4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d00e      	beq.n	800a358 <HAL_TIM_Base_Start_IT+0x80>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a1e      	ldr	r2, [pc, #120]	; (800a3b8 <HAL_TIM_Base_Start_IT+0xe0>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d009      	beq.n	800a358 <HAL_TIM_Base_Start_IT+0x80>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a1c      	ldr	r2, [pc, #112]	; (800a3bc <HAL_TIM_Base_Start_IT+0xe4>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d004      	beq.n	800a358 <HAL_TIM_Base_Start_IT+0x80>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a1b      	ldr	r2, [pc, #108]	; (800a3c0 <HAL_TIM_Base_Start_IT+0xe8>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d115      	bne.n	800a384 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	689a      	ldr	r2, [r3, #8]
 800a35e:	4b19      	ldr	r3, [pc, #100]	; (800a3c4 <HAL_TIM_Base_Start_IT+0xec>)
 800a360:	4013      	ands	r3, r2
 800a362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2b06      	cmp	r3, #6
 800a368:	d015      	beq.n	800a396 <HAL_TIM_Base_Start_IT+0xbe>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a370:	d011      	beq.n	800a396 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f042 0201 	orr.w	r2, r2, #1
 800a380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a382:	e008      	b.n	800a396 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f042 0201 	orr.w	r2, r2, #1
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	e000      	b.n	800a398 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a396:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3714      	adds	r7, #20
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	40010000 	.word	0x40010000
 800a3ac:	40000400 	.word	0x40000400
 800a3b0:	40000800 	.word	0x40000800
 800a3b4:	40000c00 	.word	0x40000c00
 800a3b8:	40010400 	.word	0x40010400
 800a3bc:	40014000 	.word	0x40014000
 800a3c0:	40001800 	.word	0x40001800
 800a3c4:	00010007 	.word	0x00010007

0800a3c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	f003 0302 	and.w	r3, r3, #2
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d122      	bne.n	800a424 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	f003 0302 	and.w	r3, r3, #2
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d11b      	bne.n	800a424 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f06f 0202 	mvn.w	r2, #2
 800a3f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	f003 0303 	and.w	r3, r3, #3
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f9d0 	bl	800a7b0 <HAL_TIM_IC_CaptureCallback>
 800a410:	e005      	b.n	800a41e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f9c2 	bl	800a79c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 f9d3 	bl	800a7c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	f003 0304 	and.w	r3, r3, #4
 800a42e:	2b04      	cmp	r3, #4
 800a430:	d122      	bne.n	800a478 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b04      	cmp	r3, #4
 800a43e:	d11b      	bne.n	800a478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f06f 0204 	mvn.w	r2, #4
 800a448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2202      	movs	r2, #2
 800a44e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	699b      	ldr	r3, [r3, #24]
 800a456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d003      	beq.n	800a466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f9a6 	bl	800a7b0 <HAL_TIM_IC_CaptureCallback>
 800a464:	e005      	b.n	800a472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f998 	bl	800a79c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 f9a9 	bl	800a7c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	f003 0308 	and.w	r3, r3, #8
 800a482:	2b08      	cmp	r3, #8
 800a484:	d122      	bne.n	800a4cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	f003 0308 	and.w	r3, r3, #8
 800a490:	2b08      	cmp	r3, #8
 800a492:	d11b      	bne.n	800a4cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f06f 0208 	mvn.w	r2, #8
 800a49c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2204      	movs	r2, #4
 800a4a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	69db      	ldr	r3, [r3, #28]
 800a4aa:	f003 0303 	and.w	r3, r3, #3
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d003      	beq.n	800a4ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 f97c 	bl	800a7b0 <HAL_TIM_IC_CaptureCallback>
 800a4b8:	e005      	b.n	800a4c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f96e 	bl	800a79c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f97f 	bl	800a7c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	f003 0310 	and.w	r3, r3, #16
 800a4d6:	2b10      	cmp	r3, #16
 800a4d8:	d122      	bne.n	800a520 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	f003 0310 	and.w	r3, r3, #16
 800a4e4:	2b10      	cmp	r3, #16
 800a4e6:	d11b      	bne.n	800a520 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f06f 0210 	mvn.w	r2, #16
 800a4f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2208      	movs	r2, #8
 800a4f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	69db      	ldr	r3, [r3, #28]
 800a4fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a502:	2b00      	cmp	r3, #0
 800a504:	d003      	beq.n	800a50e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f952 	bl	800a7b0 <HAL_TIM_IC_CaptureCallback>
 800a50c:	e005      	b.n	800a51a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f944 	bl	800a79c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f955 	bl	800a7c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	f003 0301 	and.w	r3, r3, #1
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d10e      	bne.n	800a54c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	f003 0301 	and.w	r3, r3, #1
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d107      	bne.n	800a54c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f06f 0201 	mvn.w	r2, #1
 800a544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f7f8 f900 	bl	800274c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a556:	2b80      	cmp	r3, #128	; 0x80
 800a558:	d10e      	bne.n	800a578 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a564:	2b80      	cmp	r3, #128	; 0x80
 800a566:	d107      	bne.n	800a578 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fb0c 	bl	800ab90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a586:	d10e      	bne.n	800a5a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a592:	2b80      	cmp	r3, #128	; 0x80
 800a594:	d107      	bne.n	800a5a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a59e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 faff 	bl	800aba4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b0:	2b40      	cmp	r3, #64	; 0x40
 800a5b2:	d10e      	bne.n	800a5d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5be:	2b40      	cmp	r3, #64	; 0x40
 800a5c0:	d107      	bne.n	800a5d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a5ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 f903 	bl	800a7d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	f003 0320 	and.w	r3, r3, #32
 800a5dc:	2b20      	cmp	r3, #32
 800a5de:	d10e      	bne.n	800a5fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	f003 0320 	and.w	r3, r3, #32
 800a5ea:	2b20      	cmp	r3, #32
 800a5ec:	d107      	bne.n	800a5fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f06f 0220 	mvn.w	r2, #32
 800a5f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 fabf 	bl	800ab7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a5fe:	bf00      	nop
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
	...

0800a608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a612:	2300      	movs	r3, #0
 800a614:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d101      	bne.n	800a624 <HAL_TIM_ConfigClockSource+0x1c>
 800a620:	2302      	movs	r3, #2
 800a622:	e0b4      	b.n	800a78e <HAL_TIM_ConfigClockSource+0x186>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2202      	movs	r2, #2
 800a630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a63c:	68ba      	ldr	r2, [r7, #8]
 800a63e:	4b56      	ldr	r3, [pc, #344]	; (800a798 <HAL_TIM_ConfigClockSource+0x190>)
 800a640:	4013      	ands	r3, r2
 800a642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a64a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a65c:	d03e      	beq.n	800a6dc <HAL_TIM_ConfigClockSource+0xd4>
 800a65e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a662:	f200 8087 	bhi.w	800a774 <HAL_TIM_ConfigClockSource+0x16c>
 800a666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a66a:	f000 8086 	beq.w	800a77a <HAL_TIM_ConfigClockSource+0x172>
 800a66e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a672:	d87f      	bhi.n	800a774 <HAL_TIM_ConfigClockSource+0x16c>
 800a674:	2b70      	cmp	r3, #112	; 0x70
 800a676:	d01a      	beq.n	800a6ae <HAL_TIM_ConfigClockSource+0xa6>
 800a678:	2b70      	cmp	r3, #112	; 0x70
 800a67a:	d87b      	bhi.n	800a774 <HAL_TIM_ConfigClockSource+0x16c>
 800a67c:	2b60      	cmp	r3, #96	; 0x60
 800a67e:	d050      	beq.n	800a722 <HAL_TIM_ConfigClockSource+0x11a>
 800a680:	2b60      	cmp	r3, #96	; 0x60
 800a682:	d877      	bhi.n	800a774 <HAL_TIM_ConfigClockSource+0x16c>
 800a684:	2b50      	cmp	r3, #80	; 0x50
 800a686:	d03c      	beq.n	800a702 <HAL_TIM_ConfigClockSource+0xfa>
 800a688:	2b50      	cmp	r3, #80	; 0x50
 800a68a:	d873      	bhi.n	800a774 <HAL_TIM_ConfigClockSource+0x16c>
 800a68c:	2b40      	cmp	r3, #64	; 0x40
 800a68e:	d058      	beq.n	800a742 <HAL_TIM_ConfigClockSource+0x13a>
 800a690:	2b40      	cmp	r3, #64	; 0x40
 800a692:	d86f      	bhi.n	800a774 <HAL_TIM_ConfigClockSource+0x16c>
 800a694:	2b30      	cmp	r3, #48	; 0x30
 800a696:	d064      	beq.n	800a762 <HAL_TIM_ConfigClockSource+0x15a>
 800a698:	2b30      	cmp	r3, #48	; 0x30
 800a69a:	d86b      	bhi.n	800a774 <HAL_TIM_ConfigClockSource+0x16c>
 800a69c:	2b20      	cmp	r3, #32
 800a69e:	d060      	beq.n	800a762 <HAL_TIM_ConfigClockSource+0x15a>
 800a6a0:	2b20      	cmp	r3, #32
 800a6a2:	d867      	bhi.n	800a774 <HAL_TIM_ConfigClockSource+0x16c>
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d05c      	beq.n	800a762 <HAL_TIM_ConfigClockSource+0x15a>
 800a6a8:	2b10      	cmp	r3, #16
 800a6aa:	d05a      	beq.n	800a762 <HAL_TIM_ConfigClockSource+0x15a>
 800a6ac:	e062      	b.n	800a774 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6818      	ldr	r0, [r3, #0]
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	6899      	ldr	r1, [r3, #8]
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	685a      	ldr	r2, [r3, #4]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	f000 f9af 	bl	800aa20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a6d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	68ba      	ldr	r2, [r7, #8]
 800a6d8:	609a      	str	r2, [r3, #8]
      break;
 800a6da:	e04f      	b.n	800a77c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6818      	ldr	r0, [r3, #0]
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	6899      	ldr	r1, [r3, #8]
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	685a      	ldr	r2, [r3, #4]
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	f000 f998 	bl	800aa20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	689a      	ldr	r2, [r3, #8]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6fe:	609a      	str	r2, [r3, #8]
      break;
 800a700:	e03c      	b.n	800a77c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6818      	ldr	r0, [r3, #0]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	6859      	ldr	r1, [r3, #4]
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	461a      	mov	r2, r3
 800a710:	f000 f90c 	bl	800a92c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2150      	movs	r1, #80	; 0x50
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 f965 	bl	800a9ea <TIM_ITRx_SetConfig>
      break;
 800a720:	e02c      	b.n	800a77c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6818      	ldr	r0, [r3, #0]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	6859      	ldr	r1, [r3, #4]
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	461a      	mov	r2, r3
 800a730:	f000 f92b 	bl	800a98a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2160      	movs	r1, #96	; 0x60
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 f955 	bl	800a9ea <TIM_ITRx_SetConfig>
      break;
 800a740:	e01c      	b.n	800a77c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6818      	ldr	r0, [r3, #0]
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	6859      	ldr	r1, [r3, #4]
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	461a      	mov	r2, r3
 800a750:	f000 f8ec 	bl	800a92c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2140      	movs	r1, #64	; 0x40
 800a75a:	4618      	mov	r0, r3
 800a75c:	f000 f945 	bl	800a9ea <TIM_ITRx_SetConfig>
      break;
 800a760:	e00c      	b.n	800a77c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4619      	mov	r1, r3
 800a76c:	4610      	mov	r0, r2
 800a76e:	f000 f93c 	bl	800a9ea <TIM_ITRx_SetConfig>
      break;
 800a772:	e003      	b.n	800a77c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	73fb      	strb	r3, [r7, #15]
      break;
 800a778:	e000      	b.n	800a77c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a77a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a78c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	fffeff88 	.word	0xfffeff88

0800a79c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7a4:	bf00      	nop
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a7b8:	bf00      	nop
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4a40      	ldr	r2, [pc, #256]	; (800a900 <TIM_Base_SetConfig+0x114>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d013      	beq.n	800a82c <TIM_Base_SetConfig+0x40>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a80a:	d00f      	beq.n	800a82c <TIM_Base_SetConfig+0x40>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4a3d      	ldr	r2, [pc, #244]	; (800a904 <TIM_Base_SetConfig+0x118>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d00b      	beq.n	800a82c <TIM_Base_SetConfig+0x40>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a3c      	ldr	r2, [pc, #240]	; (800a908 <TIM_Base_SetConfig+0x11c>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d007      	beq.n	800a82c <TIM_Base_SetConfig+0x40>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4a3b      	ldr	r2, [pc, #236]	; (800a90c <TIM_Base_SetConfig+0x120>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d003      	beq.n	800a82c <TIM_Base_SetConfig+0x40>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a3a      	ldr	r2, [pc, #232]	; (800a910 <TIM_Base_SetConfig+0x124>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d108      	bne.n	800a83e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	4313      	orrs	r3, r2
 800a83c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4a2f      	ldr	r2, [pc, #188]	; (800a900 <TIM_Base_SetConfig+0x114>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d02b      	beq.n	800a89e <TIM_Base_SetConfig+0xb2>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a84c:	d027      	beq.n	800a89e <TIM_Base_SetConfig+0xb2>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4a2c      	ldr	r2, [pc, #176]	; (800a904 <TIM_Base_SetConfig+0x118>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d023      	beq.n	800a89e <TIM_Base_SetConfig+0xb2>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	4a2b      	ldr	r2, [pc, #172]	; (800a908 <TIM_Base_SetConfig+0x11c>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d01f      	beq.n	800a89e <TIM_Base_SetConfig+0xb2>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a2a      	ldr	r2, [pc, #168]	; (800a90c <TIM_Base_SetConfig+0x120>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d01b      	beq.n	800a89e <TIM_Base_SetConfig+0xb2>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a29      	ldr	r2, [pc, #164]	; (800a910 <TIM_Base_SetConfig+0x124>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d017      	beq.n	800a89e <TIM_Base_SetConfig+0xb2>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4a28      	ldr	r2, [pc, #160]	; (800a914 <TIM_Base_SetConfig+0x128>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d013      	beq.n	800a89e <TIM_Base_SetConfig+0xb2>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a27      	ldr	r2, [pc, #156]	; (800a918 <TIM_Base_SetConfig+0x12c>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d00f      	beq.n	800a89e <TIM_Base_SetConfig+0xb2>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a26      	ldr	r2, [pc, #152]	; (800a91c <TIM_Base_SetConfig+0x130>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d00b      	beq.n	800a89e <TIM_Base_SetConfig+0xb2>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4a25      	ldr	r2, [pc, #148]	; (800a920 <TIM_Base_SetConfig+0x134>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d007      	beq.n	800a89e <TIM_Base_SetConfig+0xb2>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a24      	ldr	r2, [pc, #144]	; (800a924 <TIM_Base_SetConfig+0x138>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d003      	beq.n	800a89e <TIM_Base_SetConfig+0xb2>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4a23      	ldr	r2, [pc, #140]	; (800a928 <TIM_Base_SetConfig+0x13c>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d108      	bne.n	800a8b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	695b      	ldr	r3, [r3, #20]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	689a      	ldr	r2, [r3, #8]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a0a      	ldr	r2, [pc, #40]	; (800a900 <TIM_Base_SetConfig+0x114>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d003      	beq.n	800a8e4 <TIM_Base_SetConfig+0xf8>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a0c      	ldr	r2, [pc, #48]	; (800a910 <TIM_Base_SetConfig+0x124>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d103      	bne.n	800a8ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	691a      	ldr	r2, [r3, #16]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	615a      	str	r2, [r3, #20]
}
 800a8f2:	bf00      	nop
 800a8f4:	3714      	adds	r7, #20
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	40010000 	.word	0x40010000
 800a904:	40000400 	.word	0x40000400
 800a908:	40000800 	.word	0x40000800
 800a90c:	40000c00 	.word	0x40000c00
 800a910:	40010400 	.word	0x40010400
 800a914:	40014000 	.word	0x40014000
 800a918:	40014400 	.word	0x40014400
 800a91c:	40014800 	.word	0x40014800
 800a920:	40001800 	.word	0x40001800
 800a924:	40001c00 	.word	0x40001c00
 800a928:	40002000 	.word	0x40002000

0800a92c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b087      	sub	sp, #28
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	6a1b      	ldr	r3, [r3, #32]
 800a93c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	f023 0201 	bic.w	r2, r3, #1
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	011b      	lsls	r3, r3, #4
 800a95c:	693a      	ldr	r2, [r7, #16]
 800a95e:	4313      	orrs	r3, r2
 800a960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	f023 030a 	bic.w	r3, r3, #10
 800a968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	4313      	orrs	r3, r2
 800a970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	693a      	ldr	r2, [r7, #16]
 800a976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	621a      	str	r2, [r3, #32]
}
 800a97e:	bf00      	nop
 800a980:	371c      	adds	r7, #28
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr

0800a98a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b087      	sub	sp, #28
 800a98e:	af00      	add	r7, sp, #0
 800a990:	60f8      	str	r0, [r7, #12]
 800a992:	60b9      	str	r1, [r7, #8]
 800a994:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	f023 0210 	bic.w	r2, r3, #16
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	699b      	ldr	r3, [r3, #24]
 800a9a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6a1b      	ldr	r3, [r3, #32]
 800a9ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a9b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	031b      	lsls	r3, r3, #12
 800a9ba:	697a      	ldr	r2, [r7, #20]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a9c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	011b      	lsls	r3, r3, #4
 800a9cc:	693a      	ldr	r2, [r7, #16]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	697a      	ldr	r2, [r7, #20]
 800a9d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	693a      	ldr	r2, [r7, #16]
 800a9dc:	621a      	str	r2, [r3, #32]
}
 800a9de:	bf00      	nop
 800a9e0:	371c      	adds	r7, #28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b085      	sub	sp, #20
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa02:	683a      	ldr	r2, [r7, #0]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	f043 0307 	orr.w	r3, r3, #7
 800aa0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	609a      	str	r2, [r3, #8]
}
 800aa14:	bf00      	nop
 800aa16:	3714      	adds	r7, #20
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b087      	sub	sp, #28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
 800aa2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	021a      	lsls	r2, r3, #8
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	431a      	orrs	r2, r3
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	609a      	str	r2, [r3, #8]
}
 800aa54:	bf00      	nop
 800aa56:	371c      	adds	r7, #28
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d101      	bne.n	800aa78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa74:	2302      	movs	r3, #2
 800aa76:	e06d      	b.n	800ab54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2202      	movs	r2, #2
 800aa84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a30      	ldr	r2, [pc, #192]	; (800ab60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d004      	beq.n	800aaac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a2f      	ldr	r2, [pc, #188]	; (800ab64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d108      	bne.n	800aabe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aab2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	4313      	orrs	r3, r2
 800aabc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aac4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	4313      	orrs	r3, r2
 800aace:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a20      	ldr	r2, [pc, #128]	; (800ab60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d022      	beq.n	800ab28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaea:	d01d      	beq.n	800ab28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a1d      	ldr	r2, [pc, #116]	; (800ab68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d018      	beq.n	800ab28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a1c      	ldr	r2, [pc, #112]	; (800ab6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d013      	beq.n	800ab28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a1a      	ldr	r2, [pc, #104]	; (800ab70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d00e      	beq.n	800ab28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a15      	ldr	r2, [pc, #84]	; (800ab64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d009      	beq.n	800ab28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a16      	ldr	r2, [pc, #88]	; (800ab74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d004      	beq.n	800ab28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a15      	ldr	r2, [pc, #84]	; (800ab78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d10c      	bne.n	800ab42 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2201      	movs	r2, #1
 800ab46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3714      	adds	r7, #20
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr
 800ab60:	40010000 	.word	0x40010000
 800ab64:	40010400 	.word	0x40010400
 800ab68:	40000400 	.word	0x40000400
 800ab6c:	40000800 	.word	0x40000800
 800ab70:	40000c00 	.word	0x40000c00
 800ab74:	40014000 	.word	0x40014000
 800ab78:	40001800 	.word	0x40001800

0800ab7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab84:	bf00      	nop
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab98:	bf00      	nop
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800abac:	bf00      	nop
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d101      	bne.n	800abca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abc6:	2301      	movs	r3, #1
 800abc8:	e040      	b.n	800ac4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d106      	bne.n	800abe0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7f9 fce4 	bl	80045a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2224      	movs	r2, #36	; 0x24
 800abe4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f022 0201 	bic.w	r2, r2, #1
 800abf4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 f82c 	bl	800ac54 <UART_SetConfig>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d101      	bne.n	800ac06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e022      	b.n	800ac4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d002      	beq.n	800ac14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fa82 	bl	800b118 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	689a      	ldr	r2, [r3, #8]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f042 0201 	orr.w	r2, r2, #1
 800ac42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 fb09 	bl	800b25c <UART_CheckIdleState>
 800ac4a:	4603      	mov	r3, r0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b088      	sub	sp, #32
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	689a      	ldr	r2, [r3, #8]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	431a      	orrs	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	695b      	ldr	r3, [r3, #20]
 800ac6e:	431a      	orrs	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	69db      	ldr	r3, [r3, #28]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	4ba7      	ldr	r3, [pc, #668]	; (800af1c <UART_SetConfig+0x2c8>)
 800ac80:	4013      	ands	r3, r2
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	6812      	ldr	r2, [r2, #0]
 800ac86:	6979      	ldr	r1, [r7, #20]
 800ac88:	430b      	orrs	r3, r1
 800ac8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	68da      	ldr	r2, [r3, #12]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	430a      	orrs	r2, r1
 800aca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a1b      	ldr	r3, [r3, #32]
 800acac:	697a      	ldr	r2, [r7, #20]
 800acae:	4313      	orrs	r3, r2
 800acb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	430a      	orrs	r2, r1
 800acc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a95      	ldr	r2, [pc, #596]	; (800af20 <UART_SetConfig+0x2cc>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d120      	bne.n	800ad12 <UART_SetConfig+0xbe>
 800acd0:	4b94      	ldr	r3, [pc, #592]	; (800af24 <UART_SetConfig+0x2d0>)
 800acd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acd6:	f003 0303 	and.w	r3, r3, #3
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d816      	bhi.n	800ad0c <UART_SetConfig+0xb8>
 800acde:	a201      	add	r2, pc, #4	; (adr r2, 800ace4 <UART_SetConfig+0x90>)
 800ace0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace4:	0800acf5 	.word	0x0800acf5
 800ace8:	0800ad01 	.word	0x0800ad01
 800acec:	0800acfb 	.word	0x0800acfb
 800acf0:	0800ad07 	.word	0x0800ad07
 800acf4:	2301      	movs	r3, #1
 800acf6:	77fb      	strb	r3, [r7, #31]
 800acf8:	e14f      	b.n	800af9a <UART_SetConfig+0x346>
 800acfa:	2302      	movs	r3, #2
 800acfc:	77fb      	strb	r3, [r7, #31]
 800acfe:	e14c      	b.n	800af9a <UART_SetConfig+0x346>
 800ad00:	2304      	movs	r3, #4
 800ad02:	77fb      	strb	r3, [r7, #31]
 800ad04:	e149      	b.n	800af9a <UART_SetConfig+0x346>
 800ad06:	2308      	movs	r3, #8
 800ad08:	77fb      	strb	r3, [r7, #31]
 800ad0a:	e146      	b.n	800af9a <UART_SetConfig+0x346>
 800ad0c:	2310      	movs	r3, #16
 800ad0e:	77fb      	strb	r3, [r7, #31]
 800ad10:	e143      	b.n	800af9a <UART_SetConfig+0x346>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a84      	ldr	r2, [pc, #528]	; (800af28 <UART_SetConfig+0x2d4>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d132      	bne.n	800ad82 <UART_SetConfig+0x12e>
 800ad1c:	4b81      	ldr	r3, [pc, #516]	; (800af24 <UART_SetConfig+0x2d0>)
 800ad1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad22:	f003 030c 	and.w	r3, r3, #12
 800ad26:	2b0c      	cmp	r3, #12
 800ad28:	d828      	bhi.n	800ad7c <UART_SetConfig+0x128>
 800ad2a:	a201      	add	r2, pc, #4	; (adr r2, 800ad30 <UART_SetConfig+0xdc>)
 800ad2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad30:	0800ad65 	.word	0x0800ad65
 800ad34:	0800ad7d 	.word	0x0800ad7d
 800ad38:	0800ad7d 	.word	0x0800ad7d
 800ad3c:	0800ad7d 	.word	0x0800ad7d
 800ad40:	0800ad71 	.word	0x0800ad71
 800ad44:	0800ad7d 	.word	0x0800ad7d
 800ad48:	0800ad7d 	.word	0x0800ad7d
 800ad4c:	0800ad7d 	.word	0x0800ad7d
 800ad50:	0800ad6b 	.word	0x0800ad6b
 800ad54:	0800ad7d 	.word	0x0800ad7d
 800ad58:	0800ad7d 	.word	0x0800ad7d
 800ad5c:	0800ad7d 	.word	0x0800ad7d
 800ad60:	0800ad77 	.word	0x0800ad77
 800ad64:	2300      	movs	r3, #0
 800ad66:	77fb      	strb	r3, [r7, #31]
 800ad68:	e117      	b.n	800af9a <UART_SetConfig+0x346>
 800ad6a:	2302      	movs	r3, #2
 800ad6c:	77fb      	strb	r3, [r7, #31]
 800ad6e:	e114      	b.n	800af9a <UART_SetConfig+0x346>
 800ad70:	2304      	movs	r3, #4
 800ad72:	77fb      	strb	r3, [r7, #31]
 800ad74:	e111      	b.n	800af9a <UART_SetConfig+0x346>
 800ad76:	2308      	movs	r3, #8
 800ad78:	77fb      	strb	r3, [r7, #31]
 800ad7a:	e10e      	b.n	800af9a <UART_SetConfig+0x346>
 800ad7c:	2310      	movs	r3, #16
 800ad7e:	77fb      	strb	r3, [r7, #31]
 800ad80:	e10b      	b.n	800af9a <UART_SetConfig+0x346>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a69      	ldr	r2, [pc, #420]	; (800af2c <UART_SetConfig+0x2d8>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d120      	bne.n	800adce <UART_SetConfig+0x17a>
 800ad8c:	4b65      	ldr	r3, [pc, #404]	; (800af24 <UART_SetConfig+0x2d0>)
 800ad8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ad96:	2b30      	cmp	r3, #48	; 0x30
 800ad98:	d013      	beq.n	800adc2 <UART_SetConfig+0x16e>
 800ad9a:	2b30      	cmp	r3, #48	; 0x30
 800ad9c:	d814      	bhi.n	800adc8 <UART_SetConfig+0x174>
 800ad9e:	2b20      	cmp	r3, #32
 800ada0:	d009      	beq.n	800adb6 <UART_SetConfig+0x162>
 800ada2:	2b20      	cmp	r3, #32
 800ada4:	d810      	bhi.n	800adc8 <UART_SetConfig+0x174>
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d002      	beq.n	800adb0 <UART_SetConfig+0x15c>
 800adaa:	2b10      	cmp	r3, #16
 800adac:	d006      	beq.n	800adbc <UART_SetConfig+0x168>
 800adae:	e00b      	b.n	800adc8 <UART_SetConfig+0x174>
 800adb0:	2300      	movs	r3, #0
 800adb2:	77fb      	strb	r3, [r7, #31]
 800adb4:	e0f1      	b.n	800af9a <UART_SetConfig+0x346>
 800adb6:	2302      	movs	r3, #2
 800adb8:	77fb      	strb	r3, [r7, #31]
 800adba:	e0ee      	b.n	800af9a <UART_SetConfig+0x346>
 800adbc:	2304      	movs	r3, #4
 800adbe:	77fb      	strb	r3, [r7, #31]
 800adc0:	e0eb      	b.n	800af9a <UART_SetConfig+0x346>
 800adc2:	2308      	movs	r3, #8
 800adc4:	77fb      	strb	r3, [r7, #31]
 800adc6:	e0e8      	b.n	800af9a <UART_SetConfig+0x346>
 800adc8:	2310      	movs	r3, #16
 800adca:	77fb      	strb	r3, [r7, #31]
 800adcc:	e0e5      	b.n	800af9a <UART_SetConfig+0x346>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a57      	ldr	r2, [pc, #348]	; (800af30 <UART_SetConfig+0x2dc>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d120      	bne.n	800ae1a <UART_SetConfig+0x1c6>
 800add8:	4b52      	ldr	r3, [pc, #328]	; (800af24 <UART_SetConfig+0x2d0>)
 800adda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ade2:	2bc0      	cmp	r3, #192	; 0xc0
 800ade4:	d013      	beq.n	800ae0e <UART_SetConfig+0x1ba>
 800ade6:	2bc0      	cmp	r3, #192	; 0xc0
 800ade8:	d814      	bhi.n	800ae14 <UART_SetConfig+0x1c0>
 800adea:	2b80      	cmp	r3, #128	; 0x80
 800adec:	d009      	beq.n	800ae02 <UART_SetConfig+0x1ae>
 800adee:	2b80      	cmp	r3, #128	; 0x80
 800adf0:	d810      	bhi.n	800ae14 <UART_SetConfig+0x1c0>
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d002      	beq.n	800adfc <UART_SetConfig+0x1a8>
 800adf6:	2b40      	cmp	r3, #64	; 0x40
 800adf8:	d006      	beq.n	800ae08 <UART_SetConfig+0x1b4>
 800adfa:	e00b      	b.n	800ae14 <UART_SetConfig+0x1c0>
 800adfc:	2300      	movs	r3, #0
 800adfe:	77fb      	strb	r3, [r7, #31]
 800ae00:	e0cb      	b.n	800af9a <UART_SetConfig+0x346>
 800ae02:	2302      	movs	r3, #2
 800ae04:	77fb      	strb	r3, [r7, #31]
 800ae06:	e0c8      	b.n	800af9a <UART_SetConfig+0x346>
 800ae08:	2304      	movs	r3, #4
 800ae0a:	77fb      	strb	r3, [r7, #31]
 800ae0c:	e0c5      	b.n	800af9a <UART_SetConfig+0x346>
 800ae0e:	2308      	movs	r3, #8
 800ae10:	77fb      	strb	r3, [r7, #31]
 800ae12:	e0c2      	b.n	800af9a <UART_SetConfig+0x346>
 800ae14:	2310      	movs	r3, #16
 800ae16:	77fb      	strb	r3, [r7, #31]
 800ae18:	e0bf      	b.n	800af9a <UART_SetConfig+0x346>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a45      	ldr	r2, [pc, #276]	; (800af34 <UART_SetConfig+0x2e0>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d125      	bne.n	800ae70 <UART_SetConfig+0x21c>
 800ae24:	4b3f      	ldr	r3, [pc, #252]	; (800af24 <UART_SetConfig+0x2d0>)
 800ae26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae32:	d017      	beq.n	800ae64 <UART_SetConfig+0x210>
 800ae34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae38:	d817      	bhi.n	800ae6a <UART_SetConfig+0x216>
 800ae3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae3e:	d00b      	beq.n	800ae58 <UART_SetConfig+0x204>
 800ae40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae44:	d811      	bhi.n	800ae6a <UART_SetConfig+0x216>
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d003      	beq.n	800ae52 <UART_SetConfig+0x1fe>
 800ae4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae4e:	d006      	beq.n	800ae5e <UART_SetConfig+0x20a>
 800ae50:	e00b      	b.n	800ae6a <UART_SetConfig+0x216>
 800ae52:	2300      	movs	r3, #0
 800ae54:	77fb      	strb	r3, [r7, #31]
 800ae56:	e0a0      	b.n	800af9a <UART_SetConfig+0x346>
 800ae58:	2302      	movs	r3, #2
 800ae5a:	77fb      	strb	r3, [r7, #31]
 800ae5c:	e09d      	b.n	800af9a <UART_SetConfig+0x346>
 800ae5e:	2304      	movs	r3, #4
 800ae60:	77fb      	strb	r3, [r7, #31]
 800ae62:	e09a      	b.n	800af9a <UART_SetConfig+0x346>
 800ae64:	2308      	movs	r3, #8
 800ae66:	77fb      	strb	r3, [r7, #31]
 800ae68:	e097      	b.n	800af9a <UART_SetConfig+0x346>
 800ae6a:	2310      	movs	r3, #16
 800ae6c:	77fb      	strb	r3, [r7, #31]
 800ae6e:	e094      	b.n	800af9a <UART_SetConfig+0x346>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a30      	ldr	r2, [pc, #192]	; (800af38 <UART_SetConfig+0x2e4>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d125      	bne.n	800aec6 <UART_SetConfig+0x272>
 800ae7a:	4b2a      	ldr	r3, [pc, #168]	; (800af24 <UART_SetConfig+0x2d0>)
 800ae7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ae84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae88:	d017      	beq.n	800aeba <UART_SetConfig+0x266>
 800ae8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae8e:	d817      	bhi.n	800aec0 <UART_SetConfig+0x26c>
 800ae90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae94:	d00b      	beq.n	800aeae <UART_SetConfig+0x25a>
 800ae96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae9a:	d811      	bhi.n	800aec0 <UART_SetConfig+0x26c>
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d003      	beq.n	800aea8 <UART_SetConfig+0x254>
 800aea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aea4:	d006      	beq.n	800aeb4 <UART_SetConfig+0x260>
 800aea6:	e00b      	b.n	800aec0 <UART_SetConfig+0x26c>
 800aea8:	2301      	movs	r3, #1
 800aeaa:	77fb      	strb	r3, [r7, #31]
 800aeac:	e075      	b.n	800af9a <UART_SetConfig+0x346>
 800aeae:	2302      	movs	r3, #2
 800aeb0:	77fb      	strb	r3, [r7, #31]
 800aeb2:	e072      	b.n	800af9a <UART_SetConfig+0x346>
 800aeb4:	2304      	movs	r3, #4
 800aeb6:	77fb      	strb	r3, [r7, #31]
 800aeb8:	e06f      	b.n	800af9a <UART_SetConfig+0x346>
 800aeba:	2308      	movs	r3, #8
 800aebc:	77fb      	strb	r3, [r7, #31]
 800aebe:	e06c      	b.n	800af9a <UART_SetConfig+0x346>
 800aec0:	2310      	movs	r3, #16
 800aec2:	77fb      	strb	r3, [r7, #31]
 800aec4:	e069      	b.n	800af9a <UART_SetConfig+0x346>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4a1c      	ldr	r2, [pc, #112]	; (800af3c <UART_SetConfig+0x2e8>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d137      	bne.n	800af40 <UART_SetConfig+0x2ec>
 800aed0:	4b14      	ldr	r3, [pc, #80]	; (800af24 <UART_SetConfig+0x2d0>)
 800aed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aed6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800aeda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aede:	d017      	beq.n	800af10 <UART_SetConfig+0x2bc>
 800aee0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aee4:	d817      	bhi.n	800af16 <UART_SetConfig+0x2c2>
 800aee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aeea:	d00b      	beq.n	800af04 <UART_SetConfig+0x2b0>
 800aeec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aef0:	d811      	bhi.n	800af16 <UART_SetConfig+0x2c2>
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d003      	beq.n	800aefe <UART_SetConfig+0x2aa>
 800aef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aefa:	d006      	beq.n	800af0a <UART_SetConfig+0x2b6>
 800aefc:	e00b      	b.n	800af16 <UART_SetConfig+0x2c2>
 800aefe:	2300      	movs	r3, #0
 800af00:	77fb      	strb	r3, [r7, #31]
 800af02:	e04a      	b.n	800af9a <UART_SetConfig+0x346>
 800af04:	2302      	movs	r3, #2
 800af06:	77fb      	strb	r3, [r7, #31]
 800af08:	e047      	b.n	800af9a <UART_SetConfig+0x346>
 800af0a:	2304      	movs	r3, #4
 800af0c:	77fb      	strb	r3, [r7, #31]
 800af0e:	e044      	b.n	800af9a <UART_SetConfig+0x346>
 800af10:	2308      	movs	r3, #8
 800af12:	77fb      	strb	r3, [r7, #31]
 800af14:	e041      	b.n	800af9a <UART_SetConfig+0x346>
 800af16:	2310      	movs	r3, #16
 800af18:	77fb      	strb	r3, [r7, #31]
 800af1a:	e03e      	b.n	800af9a <UART_SetConfig+0x346>
 800af1c:	efff69f3 	.word	0xefff69f3
 800af20:	40011000 	.word	0x40011000
 800af24:	40023800 	.word	0x40023800
 800af28:	40004400 	.word	0x40004400
 800af2c:	40004800 	.word	0x40004800
 800af30:	40004c00 	.word	0x40004c00
 800af34:	40005000 	.word	0x40005000
 800af38:	40011400 	.word	0x40011400
 800af3c:	40007800 	.word	0x40007800
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a71      	ldr	r2, [pc, #452]	; (800b10c <UART_SetConfig+0x4b8>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d125      	bne.n	800af96 <UART_SetConfig+0x342>
 800af4a:	4b71      	ldr	r3, [pc, #452]	; (800b110 <UART_SetConfig+0x4bc>)
 800af4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800af54:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800af58:	d017      	beq.n	800af8a <UART_SetConfig+0x336>
 800af5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800af5e:	d817      	bhi.n	800af90 <UART_SetConfig+0x33c>
 800af60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af64:	d00b      	beq.n	800af7e <UART_SetConfig+0x32a>
 800af66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af6a:	d811      	bhi.n	800af90 <UART_SetConfig+0x33c>
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d003      	beq.n	800af78 <UART_SetConfig+0x324>
 800af70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af74:	d006      	beq.n	800af84 <UART_SetConfig+0x330>
 800af76:	e00b      	b.n	800af90 <UART_SetConfig+0x33c>
 800af78:	2300      	movs	r3, #0
 800af7a:	77fb      	strb	r3, [r7, #31]
 800af7c:	e00d      	b.n	800af9a <UART_SetConfig+0x346>
 800af7e:	2302      	movs	r3, #2
 800af80:	77fb      	strb	r3, [r7, #31]
 800af82:	e00a      	b.n	800af9a <UART_SetConfig+0x346>
 800af84:	2304      	movs	r3, #4
 800af86:	77fb      	strb	r3, [r7, #31]
 800af88:	e007      	b.n	800af9a <UART_SetConfig+0x346>
 800af8a:	2308      	movs	r3, #8
 800af8c:	77fb      	strb	r3, [r7, #31]
 800af8e:	e004      	b.n	800af9a <UART_SetConfig+0x346>
 800af90:	2310      	movs	r3, #16
 800af92:	77fb      	strb	r3, [r7, #31]
 800af94:	e001      	b.n	800af9a <UART_SetConfig+0x346>
 800af96:	2310      	movs	r3, #16
 800af98:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	69db      	ldr	r3, [r3, #28]
 800af9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afa2:	d15a      	bne.n	800b05a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800afa4:	7ffb      	ldrb	r3, [r7, #31]
 800afa6:	2b08      	cmp	r3, #8
 800afa8:	d827      	bhi.n	800affa <UART_SetConfig+0x3a6>
 800afaa:	a201      	add	r2, pc, #4	; (adr r2, 800afb0 <UART_SetConfig+0x35c>)
 800afac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb0:	0800afd5 	.word	0x0800afd5
 800afb4:	0800afdd 	.word	0x0800afdd
 800afb8:	0800afe5 	.word	0x0800afe5
 800afbc:	0800affb 	.word	0x0800affb
 800afc0:	0800afeb 	.word	0x0800afeb
 800afc4:	0800affb 	.word	0x0800affb
 800afc8:	0800affb 	.word	0x0800affb
 800afcc:	0800affb 	.word	0x0800affb
 800afd0:	0800aff3 	.word	0x0800aff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afd4:	f7fd fa9c 	bl	8008510 <HAL_RCC_GetPCLK1Freq>
 800afd8:	61b8      	str	r0, [r7, #24]
        break;
 800afda:	e013      	b.n	800b004 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afdc:	f7fd faac 	bl	8008538 <HAL_RCC_GetPCLK2Freq>
 800afe0:	61b8      	str	r0, [r7, #24]
        break;
 800afe2:	e00f      	b.n	800b004 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800afe4:	4b4b      	ldr	r3, [pc, #300]	; (800b114 <UART_SetConfig+0x4c0>)
 800afe6:	61bb      	str	r3, [r7, #24]
        break;
 800afe8:	e00c      	b.n	800b004 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afea:	f7fd f9cf 	bl	800838c <HAL_RCC_GetSysClockFreq>
 800afee:	61b8      	str	r0, [r7, #24]
        break;
 800aff0:	e008      	b.n	800b004 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aff6:	61bb      	str	r3, [r7, #24]
        break;
 800aff8:	e004      	b.n	800b004 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800affa:	2300      	movs	r3, #0
 800affc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	77bb      	strb	r3, [r7, #30]
        break;
 800b002:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d074      	beq.n	800b0f4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	005a      	lsls	r2, r3, #1
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	085b      	lsrs	r3, r3, #1
 800b014:	441a      	add	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b01e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	2b0f      	cmp	r3, #15
 800b024:	d916      	bls.n	800b054 <UART_SetConfig+0x400>
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b02c:	d212      	bcs.n	800b054 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	b29b      	uxth	r3, r3
 800b032:	f023 030f 	bic.w	r3, r3, #15
 800b036:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	085b      	lsrs	r3, r3, #1
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	f003 0307 	and.w	r3, r3, #7
 800b042:	b29a      	uxth	r2, r3
 800b044:	89fb      	ldrh	r3, [r7, #14]
 800b046:	4313      	orrs	r3, r2
 800b048:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	89fa      	ldrh	r2, [r7, #14]
 800b050:	60da      	str	r2, [r3, #12]
 800b052:	e04f      	b.n	800b0f4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	77bb      	strb	r3, [r7, #30]
 800b058:	e04c      	b.n	800b0f4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b05a:	7ffb      	ldrb	r3, [r7, #31]
 800b05c:	2b08      	cmp	r3, #8
 800b05e:	d828      	bhi.n	800b0b2 <UART_SetConfig+0x45e>
 800b060:	a201      	add	r2, pc, #4	; (adr r2, 800b068 <UART_SetConfig+0x414>)
 800b062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b066:	bf00      	nop
 800b068:	0800b08d 	.word	0x0800b08d
 800b06c:	0800b095 	.word	0x0800b095
 800b070:	0800b09d 	.word	0x0800b09d
 800b074:	0800b0b3 	.word	0x0800b0b3
 800b078:	0800b0a3 	.word	0x0800b0a3
 800b07c:	0800b0b3 	.word	0x0800b0b3
 800b080:	0800b0b3 	.word	0x0800b0b3
 800b084:	0800b0b3 	.word	0x0800b0b3
 800b088:	0800b0ab 	.word	0x0800b0ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b08c:	f7fd fa40 	bl	8008510 <HAL_RCC_GetPCLK1Freq>
 800b090:	61b8      	str	r0, [r7, #24]
        break;
 800b092:	e013      	b.n	800b0bc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b094:	f7fd fa50 	bl	8008538 <HAL_RCC_GetPCLK2Freq>
 800b098:	61b8      	str	r0, [r7, #24]
        break;
 800b09a:	e00f      	b.n	800b0bc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b09c:	4b1d      	ldr	r3, [pc, #116]	; (800b114 <UART_SetConfig+0x4c0>)
 800b09e:	61bb      	str	r3, [r7, #24]
        break;
 800b0a0:	e00c      	b.n	800b0bc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0a2:	f7fd f973 	bl	800838c <HAL_RCC_GetSysClockFreq>
 800b0a6:	61b8      	str	r0, [r7, #24]
        break;
 800b0a8:	e008      	b.n	800b0bc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0ae:	61bb      	str	r3, [r7, #24]
        break;
 800b0b0:	e004      	b.n	800b0bc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	77bb      	strb	r3, [r7, #30]
        break;
 800b0ba:	bf00      	nop
    }

    if (pclk != 0U)
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d018      	beq.n	800b0f4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	085a      	lsrs	r2, r3, #1
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	441a      	add	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	2b0f      	cmp	r3, #15
 800b0da:	d909      	bls.n	800b0f0 <UART_SetConfig+0x49c>
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0e2:	d205      	bcs.n	800b0f0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	60da      	str	r2, [r3, #12]
 800b0ee:	e001      	b.n	800b0f4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b100:	7fbb      	ldrb	r3, [r7, #30]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3720      	adds	r7, #32
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	40007c00 	.word	0x40007c00
 800b110:	40023800 	.word	0x40023800
 800b114:	00f42400 	.word	0x00f42400

0800b118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b124:	f003 0301 	and.w	r3, r3, #1
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00a      	beq.n	800b142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	430a      	orrs	r2, r1
 800b140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b146:	f003 0302 	and.w	r3, r3, #2
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00a      	beq.n	800b164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	430a      	orrs	r2, r1
 800b162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b168:	f003 0304 	and.w	r3, r3, #4
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00a      	beq.n	800b186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	430a      	orrs	r2, r1
 800b184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18a:	f003 0308 	and.w	r3, r3, #8
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00a      	beq.n	800b1a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	430a      	orrs	r2, r1
 800b1a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ac:	f003 0310 	and.w	r3, r3, #16
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00a      	beq.n	800b1ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	430a      	orrs	r2, r1
 800b1c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ce:	f003 0320 	and.w	r3, r3, #32
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00a      	beq.n	800b1ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	430a      	orrs	r2, r1
 800b1ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d01a      	beq.n	800b22e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	430a      	orrs	r2, r1
 800b20c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b216:	d10a      	bne.n	800b22e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	430a      	orrs	r2, r1
 800b22c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00a      	beq.n	800b250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	430a      	orrs	r2, r1
 800b24e:	605a      	str	r2, [r3, #4]
  }
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b086      	sub	sp, #24
 800b260:	af02      	add	r7, sp, #8
 800b262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b26c:	f7f9 fc80 	bl	8004b70 <HAL_GetTick>
 800b270:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 0308 	and.w	r3, r3, #8
 800b27c:	2b08      	cmp	r3, #8
 800b27e:	d10e      	bne.n	800b29e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b280:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b284:	9300      	str	r3, [sp, #0]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 f817 	bl	800b2c2 <UART_WaitOnFlagUntilTimeout>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d001      	beq.n	800b29e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b29a:	2303      	movs	r3, #3
 800b29c:	e00d      	b.n	800b2ba <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2220      	movs	r2, #32
 800b2a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2220      	movs	r2, #32
 800b2a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b09c      	sub	sp, #112	; 0x70
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	60f8      	str	r0, [r7, #12]
 800b2ca:	60b9      	str	r1, [r7, #8]
 800b2cc:	603b      	str	r3, [r7, #0]
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2d2:	e0a5      	b.n	800b420 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2da:	f000 80a1 	beq.w	800b420 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2de:	f7f9 fc47 	bl	8004b70 <HAL_GetTick>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	1ad3      	subs	r3, r2, r3
 800b2e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d302      	bcc.n	800b2f4 <UART_WaitOnFlagUntilTimeout+0x32>
 800b2ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d13e      	bne.n	800b372 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2fc:	e853 3f00 	ldrex	r3, [r3]
 800b300:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b304:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b308:	667b      	str	r3, [r7, #100]	; 0x64
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	461a      	mov	r2, r3
 800b310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b312:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b314:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b316:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b318:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b31a:	e841 2300 	strex	r3, r2, [r1]
 800b31e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1e6      	bne.n	800b2f4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3308      	adds	r3, #8
 800b32c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b330:	e853 3f00 	ldrex	r3, [r3]
 800b334:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b338:	f023 0301 	bic.w	r3, r3, #1
 800b33c:	663b      	str	r3, [r7, #96]	; 0x60
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3308      	adds	r3, #8
 800b344:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b346:	64ba      	str	r2, [r7, #72]	; 0x48
 800b348:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b34c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b34e:	e841 2300 	strex	r3, r2, [r1]
 800b352:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1e5      	bne.n	800b326 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2220      	movs	r2, #32
 800b35e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2220      	movs	r2, #32
 800b364:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b36e:	2303      	movs	r3, #3
 800b370:	e067      	b.n	800b442 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f003 0304 	and.w	r3, r3, #4
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d04f      	beq.n	800b420 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	69db      	ldr	r3, [r3, #28]
 800b386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b38a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b38e:	d147      	bne.n	800b420 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b398:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a2:	e853 3f00 	ldrex	r3, [r3]
 800b3a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b3ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3b8:	637b      	str	r3, [r7, #52]	; 0x34
 800b3ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b3be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3c0:	e841 2300 	strex	r3, r2, [r1]
 800b3c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d1e6      	bne.n	800b39a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	3308      	adds	r3, #8
 800b3d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	e853 3f00 	ldrex	r3, [r3]
 800b3da:	613b      	str	r3, [r7, #16]
   return(result);
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	f023 0301 	bic.w	r3, r3, #1
 800b3e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3308      	adds	r3, #8
 800b3ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b3ec:	623a      	str	r2, [r7, #32]
 800b3ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f0:	69f9      	ldr	r1, [r7, #28]
 800b3f2:	6a3a      	ldr	r2, [r7, #32]
 800b3f4:	e841 2300 	strex	r3, r2, [r1]
 800b3f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1e5      	bne.n	800b3cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2220      	movs	r2, #32
 800b404:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2220      	movs	r2, #32
 800b40a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2220      	movs	r2, #32
 800b410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2200      	movs	r2, #0
 800b418:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b41c:	2303      	movs	r3, #3
 800b41e:	e010      	b.n	800b442 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	69da      	ldr	r2, [r3, #28]
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	4013      	ands	r3, r2
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	bf0c      	ite	eq
 800b430:	2301      	moveq	r3, #1
 800b432:	2300      	movne	r3, #0
 800b434:	b2db      	uxtb	r3, r3
 800b436:	461a      	mov	r2, r3
 800b438:	79fb      	ldrb	r3, [r7, #7]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	f43f af4a 	beq.w	800b2d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b440:	2300      	movs	r3, #0
}
 800b442:	4618      	mov	r0, r3
 800b444:	3770      	adds	r7, #112	; 0x70
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
	...

0800b44c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d121      	bne.n	800b4a2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	4b27      	ldr	r3, [pc, #156]	; (800b500 <FMC_SDRAM_Init+0xb4>)
 800b464:	4013      	ands	r3, r2
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	6851      	ldr	r1, [r2, #4]
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	6892      	ldr	r2, [r2, #8]
 800b46e:	4311      	orrs	r1, r2
 800b470:	683a      	ldr	r2, [r7, #0]
 800b472:	68d2      	ldr	r2, [r2, #12]
 800b474:	4311      	orrs	r1, r2
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	6912      	ldr	r2, [r2, #16]
 800b47a:	4311      	orrs	r1, r2
 800b47c:	683a      	ldr	r2, [r7, #0]
 800b47e:	6952      	ldr	r2, [r2, #20]
 800b480:	4311      	orrs	r1, r2
 800b482:	683a      	ldr	r2, [r7, #0]
 800b484:	6992      	ldr	r2, [r2, #24]
 800b486:	4311      	orrs	r1, r2
 800b488:	683a      	ldr	r2, [r7, #0]
 800b48a:	69d2      	ldr	r2, [r2, #28]
 800b48c:	4311      	orrs	r1, r2
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	6a12      	ldr	r2, [r2, #32]
 800b492:	4311      	orrs	r1, r2
 800b494:	683a      	ldr	r2, [r7, #0]
 800b496:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b498:	430a      	orrs	r2, r1
 800b49a:	431a      	orrs	r2, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	601a      	str	r2, [r3, #0]
 800b4a0:	e026      	b.n	800b4f0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	69d9      	ldr	r1, [r3, #28]
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	6a1b      	ldr	r3, [r3, #32]
 800b4b2:	4319      	orrs	r1, r3
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b8:	430b      	orrs	r3, r1
 800b4ba:	431a      	orrs	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	685a      	ldr	r2, [r3, #4]
 800b4c4:	4b0e      	ldr	r3, [pc, #56]	; (800b500 <FMC_SDRAM_Init+0xb4>)
 800b4c6:	4013      	ands	r3, r2
 800b4c8:	683a      	ldr	r2, [r7, #0]
 800b4ca:	6851      	ldr	r1, [r2, #4]
 800b4cc:	683a      	ldr	r2, [r7, #0]
 800b4ce:	6892      	ldr	r2, [r2, #8]
 800b4d0:	4311      	orrs	r1, r2
 800b4d2:	683a      	ldr	r2, [r7, #0]
 800b4d4:	68d2      	ldr	r2, [r2, #12]
 800b4d6:	4311      	orrs	r1, r2
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	6912      	ldr	r2, [r2, #16]
 800b4dc:	4311      	orrs	r1, r2
 800b4de:	683a      	ldr	r2, [r7, #0]
 800b4e0:	6952      	ldr	r2, [r2, #20]
 800b4e2:	4311      	orrs	r1, r2
 800b4e4:	683a      	ldr	r2, [r7, #0]
 800b4e6:	6992      	ldr	r2, [r2, #24]
 800b4e8:	430a      	orrs	r2, r1
 800b4ea:	431a      	orrs	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	370c      	adds	r7, #12
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	ffff8000 	.word	0xffff8000

0800b504 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b504:	b480      	push	{r7}
 800b506:	b085      	sub	sp, #20
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d128      	bne.n	800b568 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	1e59      	subs	r1, r3, #1
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	3b01      	subs	r3, #1
 800b52a:	011b      	lsls	r3, r3, #4
 800b52c:	4319      	orrs	r1, r3
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	3b01      	subs	r3, #1
 800b534:	021b      	lsls	r3, r3, #8
 800b536:	4319      	orrs	r1, r3
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	031b      	lsls	r3, r3, #12
 800b540:	4319      	orrs	r1, r3
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	691b      	ldr	r3, [r3, #16]
 800b546:	3b01      	subs	r3, #1
 800b548:	041b      	lsls	r3, r3, #16
 800b54a:	4319      	orrs	r1, r3
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	695b      	ldr	r3, [r3, #20]
 800b550:	3b01      	subs	r3, #1
 800b552:	051b      	lsls	r3, r3, #20
 800b554:	4319      	orrs	r1, r3
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	699b      	ldr	r3, [r3, #24]
 800b55a:	3b01      	subs	r3, #1
 800b55c:	061b      	lsls	r3, r3, #24
 800b55e:	430b      	orrs	r3, r1
 800b560:	431a      	orrs	r2, r3
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	609a      	str	r2, [r3, #8]
 800b566:	e02d      	b.n	800b5c4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	689a      	ldr	r2, [r3, #8]
 800b56c:	4b19      	ldr	r3, [pc, #100]	; (800b5d4 <FMC_SDRAM_Timing_Init+0xd0>)
 800b56e:	4013      	ands	r3, r2
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	68d2      	ldr	r2, [r2, #12]
 800b574:	3a01      	subs	r2, #1
 800b576:	0311      	lsls	r1, r2, #12
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	6952      	ldr	r2, [r2, #20]
 800b57c:	3a01      	subs	r2, #1
 800b57e:	0512      	lsls	r2, r2, #20
 800b580:	430a      	orrs	r2, r1
 800b582:	431a      	orrs	r2, r3
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	1e59      	subs	r1, r3, #1
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	3b01      	subs	r3, #1
 800b59c:	011b      	lsls	r3, r3, #4
 800b59e:	4319      	orrs	r1, r3
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	021b      	lsls	r3, r3, #8
 800b5a8:	4319      	orrs	r1, r3
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	691b      	ldr	r3, [r3, #16]
 800b5ae:	3b01      	subs	r3, #1
 800b5b0:	041b      	lsls	r3, r3, #16
 800b5b2:	4319      	orrs	r1, r3
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	699b      	ldr	r3, [r3, #24]
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	061b      	lsls	r3, r3, #24
 800b5bc:	430b      	orrs	r3, r1
 800b5be:	431a      	orrs	r2, r3
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3714      	adds	r7, #20
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	ff0f0fff 	.word	0xff0f0fff

0800b5d8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	691a      	ldr	r2, [r3, #16]
 800b5e8:	4b0c      	ldr	r3, [pc, #48]	; (800b61c <FMC_SDRAM_SendCommand+0x44>)
 800b5ea:	4013      	ands	r3, r2
 800b5ec:	68ba      	ldr	r2, [r7, #8]
 800b5ee:	6811      	ldr	r1, [r2, #0]
 800b5f0:	68ba      	ldr	r2, [r7, #8]
 800b5f2:	6852      	ldr	r2, [r2, #4]
 800b5f4:	4311      	orrs	r1, r2
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	6892      	ldr	r2, [r2, #8]
 800b5fa:	3a01      	subs	r2, #1
 800b5fc:	0152      	lsls	r2, r2, #5
 800b5fe:	4311      	orrs	r1, r2
 800b600:	68ba      	ldr	r2, [r7, #8]
 800b602:	68d2      	ldr	r2, [r2, #12]
 800b604:	0252      	lsls	r2, r2, #9
 800b606:	430a      	orrs	r2, r1
 800b608:	431a      	orrs	r2, r3
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr
 800b61c:	ffc00000 	.word	0xffc00000

0800b620 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	695a      	ldr	r2, [r3, #20]
 800b62e:	4b07      	ldr	r3, [pc, #28]	; (800b64c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b630:	4013      	ands	r3, r2
 800b632:	683a      	ldr	r2, [r7, #0]
 800b634:	0052      	lsls	r2, r2, #1
 800b636:	431a      	orrs	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	370c      	adds	r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	ffffc001 	.word	0xffffc001

0800b650 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	4603      	mov	r3, r0
 800b658:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b65a:	2300      	movs	r3, #0
 800b65c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b65e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b662:	2b84      	cmp	r3, #132	; 0x84
 800b664:	d005      	beq.n	800b672 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b666:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	4413      	add	r3, r2
 800b66e:	3303      	adds	r3, #3
 800b670:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b672:	68fb      	ldr	r3, [r7, #12]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3714      	adds	r7, #20
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b684:	f001 fa02 	bl	800ca8c <vTaskStartScheduler>
  
  return osOK;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b68e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b690:	b089      	sub	sp, #36	; 0x24
 800b692:	af04      	add	r7, sp, #16
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	695b      	ldr	r3, [r3, #20]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d020      	beq.n	800b6e2 <osThreadCreate+0x54>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	699b      	ldr	r3, [r3, #24]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d01c      	beq.n	800b6e2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	685c      	ldr	r4, [r3, #4]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681d      	ldr	r5, [r3, #0]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	691e      	ldr	r6, [r3, #16]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7ff ffc8 	bl	800b650 <makeFreeRtosPriority>
 800b6c0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	695b      	ldr	r3, [r3, #20]
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b6ca:	9202      	str	r2, [sp, #8]
 800b6cc:	9301      	str	r3, [sp, #4]
 800b6ce:	9100      	str	r1, [sp, #0]
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	4632      	mov	r2, r6
 800b6d4:	4629      	mov	r1, r5
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	f000 ff5e 	bl	800c598 <xTaskCreateStatic>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	60fb      	str	r3, [r7, #12]
 800b6e0:	e01c      	b.n	800b71c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	685c      	ldr	r4, [r3, #4]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b6ee:	b29e      	uxth	r6, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7ff ffaa 	bl	800b650 <makeFreeRtosPriority>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	f107 030c 	add.w	r3, r7, #12
 800b702:	9301      	str	r3, [sp, #4]
 800b704:	9200      	str	r2, [sp, #0]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	4632      	mov	r2, r6
 800b70a:	4629      	mov	r1, r5
 800b70c:	4620      	mov	r0, r4
 800b70e:	f000 ffa6 	bl	800c65e <xTaskCreate>
 800b712:	4603      	mov	r3, r0
 800b714:	2b01      	cmp	r3, #1
 800b716:	d001      	beq.n	800b71c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b718:	2300      	movs	r3, #0
 800b71a:	e000      	b.n	800b71e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b71c:	68fb      	ldr	r3, [r7, #12]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3714      	adds	r7, #20
 800b722:	46bd      	mov	sp, r7
 800b724:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b726 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b084      	sub	sp, #16
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d001      	beq.n	800b73c <osDelay+0x16>
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	e000      	b.n	800b73e <osDelay+0x18>
 800b73c:	2301      	movs	r3, #1
 800b73e:	4618      	mov	r0, r3
 800b740:	f001 f96e 	bl	800ca20 <vTaskDelay>
  
  return osOK;
 800b744:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b746:	4618      	mov	r0, r3
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b74e:	b580      	push	{r7, lr}
 800b750:	b086      	sub	sp, #24
 800b752:	af02      	add	r7, sp, #8
 800b754:	6078      	str	r0, [r7, #4]
 800b756:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00f      	beq.n	800b780 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	2b01      	cmp	r3, #1
 800b764:	d10a      	bne.n	800b77c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	2203      	movs	r2, #3
 800b76c:	9200      	str	r2, [sp, #0]
 800b76e:	2200      	movs	r2, #0
 800b770:	2100      	movs	r1, #0
 800b772:	2001      	movs	r0, #1
 800b774:	f000 f964 	bl	800ba40 <xQueueGenericCreateStatic>
 800b778:	4603      	mov	r3, r0
 800b77a:	e016      	b.n	800b7aa <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b77c:	2300      	movs	r3, #0
 800b77e:	e014      	b.n	800b7aa <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	2b01      	cmp	r3, #1
 800b784:	d110      	bne.n	800b7a8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b786:	2203      	movs	r2, #3
 800b788:	2100      	movs	r1, #0
 800b78a:	2001      	movs	r0, #1
 800b78c:	f000 f9da 	bl	800bb44 <xQueueGenericCreate>
 800b790:	60f8      	str	r0, [r7, #12]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d005      	beq.n	800b7a4 <osSemaphoreCreate+0x56>
 800b798:	2300      	movs	r3, #0
 800b79a:	2200      	movs	r2, #0
 800b79c:	2100      	movs	r1, #0
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f000 fa32 	bl	800bc08 <xQueueGenericSend>
      return sema;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	e000      	b.n	800b7aa <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b7a8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b7b2:	b590      	push	{r4, r7, lr}
 800b7b4:	b085      	sub	sp, #20
 800b7b6:	af02      	add	r7, sp, #8
 800b7b8:	6078      	str	r0, [r7, #4]
 800b7ba:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	689b      	ldr	r3, [r3, #8]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d011      	beq.n	800b7e8 <osMessageCreate+0x36>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00d      	beq.n	800b7e8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6818      	ldr	r0, [r3, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6859      	ldr	r1, [r3, #4]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	689a      	ldr	r2, [r3, #8]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	2400      	movs	r4, #0
 800b7de:	9400      	str	r4, [sp, #0]
 800b7e0:	f000 f92e 	bl	800ba40 <xQueueGenericCreateStatic>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	e008      	b.n	800b7fa <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6818      	ldr	r0, [r3, #0]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	f000 f9a6 	bl	800bb44 <xQueueGenericCreate>
 800b7f8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	370c      	adds	r7, #12
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd90      	pop	{r4, r7, pc}

0800b802 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b802:	b480      	push	{r7}
 800b804:	b083      	sub	sp, #12
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f103 0208 	add.w	r2, r3, #8
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f04f 32ff 	mov.w	r2, #4294967295
 800b81a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f103 0208 	add.w	r2, r3, #8
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f103 0208 	add.w	r2, r3, #8
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b836:	bf00      	nop
 800b838:	370c      	adds	r7, #12
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b842:	b480      	push	{r7}
 800b844:	b083      	sub	sp, #12
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b85c:	b480      	push	{r7}
 800b85e:	b085      	sub	sp, #20
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	689a      	ldr	r2, [r3, #8]
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	683a      	ldr	r2, [r7, #0]
 800b880:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	683a      	ldr	r2, [r7, #0]
 800b886:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	1c5a      	adds	r2, r3, #1
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	601a      	str	r2, [r3, #0]
}
 800b898:	bf00      	nop
 800b89a:	3714      	adds	r7, #20
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ba:	d103      	bne.n	800b8c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	60fb      	str	r3, [r7, #12]
 800b8c2:	e00c      	b.n	800b8de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	3308      	adds	r3, #8
 800b8c8:	60fb      	str	r3, [r7, #12]
 800b8ca:	e002      	b.n	800b8d2 <vListInsert+0x2e>
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	60fb      	str	r3, [r7, #12]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d2f6      	bcs.n	800b8cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	685a      	ldr	r2, [r3, #4]
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	683a      	ldr	r2, [r7, #0]
 800b8ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	1c5a      	adds	r2, r3, #1
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	601a      	str	r2, [r3, #0]
}
 800b90a:	bf00      	nop
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b916:	b480      	push	{r7}
 800b918:	b085      	sub	sp, #20
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	691b      	ldr	r3, [r3, #16]
 800b922:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	6892      	ldr	r2, [r2, #8]
 800b92c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	689b      	ldr	r3, [r3, #8]
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	6852      	ldr	r2, [r2, #4]
 800b936:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d103      	bne.n	800b94a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	689a      	ldr	r2, [r3, #8]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	1e5a      	subs	r2, r3, #1
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3714      	adds	r7, #20
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
	...

0800b96c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d10c      	bne.n	800b99a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b984:	b672      	cpsid	i
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	b662      	cpsie	i
 800b994:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b996:	bf00      	nop
 800b998:	e7fe      	b.n	800b998 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b99a:	f001 ffe7 	bl	800d96c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9a6:	68f9      	ldr	r1, [r7, #12]
 800b9a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b9aa:	fb01 f303 	mul.w	r3, r1, r3
 800b9ae:	441a      	add	r2, r3
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	68f9      	ldr	r1, [r7, #12]
 800b9ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b9d0:	fb01 f303 	mul.w	r3, r1, r3
 800b9d4:	441a      	add	r2, r3
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	22ff      	movs	r2, #255	; 0xff
 800b9de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	22ff      	movs	r2, #255	; 0xff
 800b9e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d114      	bne.n	800ba1a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	691b      	ldr	r3, [r3, #16]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d01a      	beq.n	800ba2e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	3310      	adds	r3, #16
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f001 faa3 	bl	800cf48 <xTaskRemoveFromEventList>
 800ba02:	4603      	mov	r3, r0
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d012      	beq.n	800ba2e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ba08:	4b0c      	ldr	r3, [pc, #48]	; (800ba3c <xQueueGenericReset+0xd0>)
 800ba0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba0e:	601a      	str	r2, [r3, #0]
 800ba10:	f3bf 8f4f 	dsb	sy
 800ba14:	f3bf 8f6f 	isb	sy
 800ba18:	e009      	b.n	800ba2e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	3310      	adds	r3, #16
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7ff feef 	bl	800b802 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	3324      	adds	r3, #36	; 0x24
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7ff feea 	bl	800b802 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ba2e:	f001 ffd1 	bl	800d9d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ba32:	2301      	movs	r3, #1
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	e000ed04 	.word	0xe000ed04

0800ba40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b08e      	sub	sp, #56	; 0x38
 800ba44:	af02      	add	r7, sp, #8
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
 800ba4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d10c      	bne.n	800ba6e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800ba54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba58:	b672      	cpsid	i
 800ba5a:	f383 8811 	msr	BASEPRI, r3
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f3bf 8f4f 	dsb	sy
 800ba66:	b662      	cpsie	i
 800ba68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba6a:	bf00      	nop
 800ba6c:	e7fe      	b.n	800ba6c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d10c      	bne.n	800ba8e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800ba74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba78:	b672      	cpsid	i
 800ba7a:	f383 8811 	msr	BASEPRI, r3
 800ba7e:	f3bf 8f6f 	isb	sy
 800ba82:	f3bf 8f4f 	dsb	sy
 800ba86:	b662      	cpsie	i
 800ba88:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba8a:	bf00      	nop
 800ba8c:	e7fe      	b.n	800ba8c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <xQueueGenericCreateStatic+0x5a>
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d001      	beq.n	800ba9e <xQueueGenericCreateStatic+0x5e>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e000      	b.n	800baa0 <xQueueGenericCreateStatic+0x60>
 800ba9e:	2300      	movs	r3, #0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10c      	bne.n	800babe <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800baa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa8:	b672      	cpsid	i
 800baaa:	f383 8811 	msr	BASEPRI, r3
 800baae:	f3bf 8f6f 	isb	sy
 800bab2:	f3bf 8f4f 	dsb	sy
 800bab6:	b662      	cpsie	i
 800bab8:	623b      	str	r3, [r7, #32]
}
 800baba:	bf00      	nop
 800babc:	e7fe      	b.n	800babc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d102      	bne.n	800baca <xQueueGenericCreateStatic+0x8a>
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d101      	bne.n	800bace <xQueueGenericCreateStatic+0x8e>
 800baca:	2301      	movs	r3, #1
 800bacc:	e000      	b.n	800bad0 <xQueueGenericCreateStatic+0x90>
 800bace:	2300      	movs	r3, #0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10c      	bne.n	800baee <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800bad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad8:	b672      	cpsid	i
 800bada:	f383 8811 	msr	BASEPRI, r3
 800bade:	f3bf 8f6f 	isb	sy
 800bae2:	f3bf 8f4f 	dsb	sy
 800bae6:	b662      	cpsie	i
 800bae8:	61fb      	str	r3, [r7, #28]
}
 800baea:	bf00      	nop
 800baec:	e7fe      	b.n	800baec <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800baee:	2348      	movs	r3, #72	; 0x48
 800baf0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	2b48      	cmp	r3, #72	; 0x48
 800baf6:	d00c      	beq.n	800bb12 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800baf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafc:	b672      	cpsid	i
 800bafe:	f383 8811 	msr	BASEPRI, r3
 800bb02:	f3bf 8f6f 	isb	sy
 800bb06:	f3bf 8f4f 	dsb	sy
 800bb0a:	b662      	cpsie	i
 800bb0c:	61bb      	str	r3, [r7, #24]
}
 800bb0e:	bf00      	nop
 800bb10:	e7fe      	b.n	800bb10 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bb12:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00d      	beq.n	800bb3a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb20:	2201      	movs	r2, #1
 800bb22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2c:	9300      	str	r3, [sp, #0]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	68b9      	ldr	r1, [r7, #8]
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f000 f847 	bl	800bbc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3730      	adds	r7, #48	; 0x30
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b08a      	sub	sp, #40	; 0x28
 800bb48:	af02      	add	r7, sp, #8
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	4613      	mov	r3, r2
 800bb50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10c      	bne.n	800bb72 <xQueueGenericCreate+0x2e>
	__asm volatile
 800bb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5c:	b672      	cpsid	i
 800bb5e:	f383 8811 	msr	BASEPRI, r3
 800bb62:	f3bf 8f6f 	isb	sy
 800bb66:	f3bf 8f4f 	dsb	sy
 800bb6a:	b662      	cpsie	i
 800bb6c:	613b      	str	r3, [r7, #16]
}
 800bb6e:	bf00      	nop
 800bb70:	e7fe      	b.n	800bb70 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d102      	bne.n	800bb7e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	61fb      	str	r3, [r7, #28]
 800bb7c:	e004      	b.n	800bb88 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	68ba      	ldr	r2, [r7, #8]
 800bb82:	fb02 f303 	mul.w	r3, r2, r3
 800bb86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	3348      	adds	r3, #72	; 0x48
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f002 f819 	bl	800dbc4 <pvPortMalloc>
 800bb92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d011      	beq.n	800bbbe <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	3348      	adds	r3, #72	; 0x48
 800bba2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bbac:	79fa      	ldrb	r2, [r7, #7]
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	68b9      	ldr	r1, [r7, #8]
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	f000 f805 	bl	800bbc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bbbe:	69bb      	ldr	r3, [r7, #24]
	}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3720      	adds	r7, #32
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
 800bbd4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d103      	bne.n	800bbe4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	69ba      	ldr	r2, [r7, #24]
 800bbe0:	601a      	str	r2, [r3, #0]
 800bbe2:	e002      	b.n	800bbea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bbf6:	2101      	movs	r1, #1
 800bbf8:	69b8      	ldr	r0, [r7, #24]
 800bbfa:	f7ff feb7 	bl	800b96c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bbfe:	bf00      	nop
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
	...

0800bc08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b08e      	sub	sp, #56	; 0x38
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
 800bc14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bc16:	2300      	movs	r3, #0
 800bc18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d10c      	bne.n	800bc3e <xQueueGenericSend+0x36>
	__asm volatile
 800bc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc28:	b672      	cpsid	i
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	b662      	cpsie	i
 800bc38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc3a:	bf00      	nop
 800bc3c:	e7fe      	b.n	800bc3c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d103      	bne.n	800bc4c <xQueueGenericSend+0x44>
 800bc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d101      	bne.n	800bc50 <xQueueGenericSend+0x48>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e000      	b.n	800bc52 <xQueueGenericSend+0x4a>
 800bc50:	2300      	movs	r3, #0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d10c      	bne.n	800bc70 <xQueueGenericSend+0x68>
	__asm volatile
 800bc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5a:	b672      	cpsid	i
 800bc5c:	f383 8811 	msr	BASEPRI, r3
 800bc60:	f3bf 8f6f 	isb	sy
 800bc64:	f3bf 8f4f 	dsb	sy
 800bc68:	b662      	cpsie	i
 800bc6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc6c:	bf00      	nop
 800bc6e:	e7fe      	b.n	800bc6e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	2b02      	cmp	r3, #2
 800bc74:	d103      	bne.n	800bc7e <xQueueGenericSend+0x76>
 800bc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d101      	bne.n	800bc82 <xQueueGenericSend+0x7a>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e000      	b.n	800bc84 <xQueueGenericSend+0x7c>
 800bc82:	2300      	movs	r3, #0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d10c      	bne.n	800bca2 <xQueueGenericSend+0x9a>
	__asm volatile
 800bc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8c:	b672      	cpsid	i
 800bc8e:	f383 8811 	msr	BASEPRI, r3
 800bc92:	f3bf 8f6f 	isb	sy
 800bc96:	f3bf 8f4f 	dsb	sy
 800bc9a:	b662      	cpsie	i
 800bc9c:	623b      	str	r3, [r7, #32]
}
 800bc9e:	bf00      	nop
 800bca0:	e7fe      	b.n	800bca0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bca2:	f001 fb19 	bl	800d2d8 <xTaskGetSchedulerState>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d102      	bne.n	800bcb2 <xQueueGenericSend+0xaa>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d101      	bne.n	800bcb6 <xQueueGenericSend+0xae>
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e000      	b.n	800bcb8 <xQueueGenericSend+0xb0>
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d10c      	bne.n	800bcd6 <xQueueGenericSend+0xce>
	__asm volatile
 800bcbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc0:	b672      	cpsid	i
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	b662      	cpsie	i
 800bcd0:	61fb      	str	r3, [r7, #28]
}
 800bcd2:	bf00      	nop
 800bcd4:	e7fe      	b.n	800bcd4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcd6:	f001 fe49 	bl	800d96c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d302      	bcc.n	800bcec <xQueueGenericSend+0xe4>
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	2b02      	cmp	r3, #2
 800bcea:	d129      	bne.n	800bd40 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bcec:	683a      	ldr	r2, [r7, #0]
 800bcee:	68b9      	ldr	r1, [r7, #8]
 800bcf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcf2:	f000 fb41 	bl	800c378 <prvCopyDataToQueue>
 800bcf6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d010      	beq.n	800bd22 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd02:	3324      	adds	r3, #36	; 0x24
 800bd04:	4618      	mov	r0, r3
 800bd06:	f001 f91f 	bl	800cf48 <xTaskRemoveFromEventList>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d013      	beq.n	800bd38 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bd10:	4b3f      	ldr	r3, [pc, #252]	; (800be10 <xQueueGenericSend+0x208>)
 800bd12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd16:	601a      	str	r2, [r3, #0]
 800bd18:	f3bf 8f4f 	dsb	sy
 800bd1c:	f3bf 8f6f 	isb	sy
 800bd20:	e00a      	b.n	800bd38 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d007      	beq.n	800bd38 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bd28:	4b39      	ldr	r3, [pc, #228]	; (800be10 <xQueueGenericSend+0x208>)
 800bd2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd2e:	601a      	str	r2, [r3, #0]
 800bd30:	f3bf 8f4f 	dsb	sy
 800bd34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bd38:	f001 fe4c 	bl	800d9d4 <vPortExitCritical>
				return pdPASS;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	e063      	b.n	800be08 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d103      	bne.n	800bd4e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd46:	f001 fe45 	bl	800d9d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	e05c      	b.n	800be08 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d106      	bne.n	800bd62 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd54:	f107 0314 	add.w	r3, r7, #20
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f001 f959 	bl	800d010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd62:	f001 fe37 	bl	800d9d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd66:	f000 feff 	bl	800cb68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd6a:	f001 fdff 	bl	800d96c <vPortEnterCritical>
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd74:	b25b      	sxtb	r3, r3
 800bd76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd7a:	d103      	bne.n	800bd84 <xQueueGenericSend+0x17c>
 800bd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd8a:	b25b      	sxtb	r3, r3
 800bd8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd90:	d103      	bne.n	800bd9a <xQueueGenericSend+0x192>
 800bd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd94:	2200      	movs	r2, #0
 800bd96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd9a:	f001 fe1b 	bl	800d9d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd9e:	1d3a      	adds	r2, r7, #4
 800bda0:	f107 0314 	add.w	r3, r7, #20
 800bda4:	4611      	mov	r1, r2
 800bda6:	4618      	mov	r0, r3
 800bda8:	f001 f948 	bl	800d03c <xTaskCheckForTimeOut>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d124      	bne.n	800bdfc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bdb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdb4:	f000 fbd8 	bl	800c568 <prvIsQueueFull>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d018      	beq.n	800bdf0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc0:	3310      	adds	r3, #16
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	4611      	mov	r1, r2
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f001 f898 	bl	800cefc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bdcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdce:	f000 fb63 	bl	800c498 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bdd2:	f000 fed7 	bl	800cb84 <xTaskResumeAll>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	f47f af7c 	bne.w	800bcd6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800bdde:	4b0c      	ldr	r3, [pc, #48]	; (800be10 <xQueueGenericSend+0x208>)
 800bde0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bde4:	601a      	str	r2, [r3, #0]
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	f3bf 8f6f 	isb	sy
 800bdee:	e772      	b.n	800bcd6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bdf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdf2:	f000 fb51 	bl	800c498 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdf6:	f000 fec5 	bl	800cb84 <xTaskResumeAll>
 800bdfa:	e76c      	b.n	800bcd6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bdfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdfe:	f000 fb4b 	bl	800c498 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be02:	f000 febf 	bl	800cb84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800be06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3738      	adds	r7, #56	; 0x38
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	e000ed04 	.word	0xe000ed04

0800be14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b08e      	sub	sp, #56	; 0x38
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
 800be20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d10c      	bne.n	800be46 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800be2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be30:	b672      	cpsid	i
 800be32:	f383 8811 	msr	BASEPRI, r3
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	b662      	cpsie	i
 800be40:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be42:	bf00      	nop
 800be44:	e7fe      	b.n	800be44 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d103      	bne.n	800be54 <xQueueGenericSendFromISR+0x40>
 800be4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be50:	2b00      	cmp	r3, #0
 800be52:	d101      	bne.n	800be58 <xQueueGenericSendFromISR+0x44>
 800be54:	2301      	movs	r3, #1
 800be56:	e000      	b.n	800be5a <xQueueGenericSendFromISR+0x46>
 800be58:	2300      	movs	r3, #0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d10c      	bne.n	800be78 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800be5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be62:	b672      	cpsid	i
 800be64:	f383 8811 	msr	BASEPRI, r3
 800be68:	f3bf 8f6f 	isb	sy
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	b662      	cpsie	i
 800be72:	623b      	str	r3, [r7, #32]
}
 800be74:	bf00      	nop
 800be76:	e7fe      	b.n	800be76 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2b02      	cmp	r3, #2
 800be7c:	d103      	bne.n	800be86 <xQueueGenericSendFromISR+0x72>
 800be7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be82:	2b01      	cmp	r3, #1
 800be84:	d101      	bne.n	800be8a <xQueueGenericSendFromISR+0x76>
 800be86:	2301      	movs	r3, #1
 800be88:	e000      	b.n	800be8c <xQueueGenericSendFromISR+0x78>
 800be8a:	2300      	movs	r3, #0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d10c      	bne.n	800beaa <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800be90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be94:	b672      	cpsid	i
 800be96:	f383 8811 	msr	BASEPRI, r3
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	b662      	cpsie	i
 800bea4:	61fb      	str	r3, [r7, #28]
}
 800bea6:	bf00      	nop
 800bea8:	e7fe      	b.n	800bea8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800beaa:	f001 fe47 	bl	800db3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800beae:	f3ef 8211 	mrs	r2, BASEPRI
 800beb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb6:	b672      	cpsid	i
 800beb8:	f383 8811 	msr	BASEPRI, r3
 800bebc:	f3bf 8f6f 	isb	sy
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	b662      	cpsie	i
 800bec6:	61ba      	str	r2, [r7, #24]
 800bec8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800beca:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800becc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d302      	bcc.n	800bee0 <xQueueGenericSendFromISR+0xcc>
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	2b02      	cmp	r3, #2
 800bede:	d12c      	bne.n	800bf3a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	68b9      	ldr	r1, [r7, #8]
 800beee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bef0:	f000 fa42 	bl	800c378 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bef4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800befc:	d112      	bne.n	800bf24 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800befe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d016      	beq.n	800bf34 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf08:	3324      	adds	r3, #36	; 0x24
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f001 f81c 	bl	800cf48 <xTaskRemoveFromEventList>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00e      	beq.n	800bf34 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00b      	beq.n	800bf34 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	601a      	str	r2, [r3, #0]
 800bf22:	e007      	b.n	800bf34 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf28:	3301      	adds	r3, #1
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	b25a      	sxtb	r2, r3
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bf34:	2301      	movs	r3, #1
 800bf36:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bf38:	e001      	b.n	800bf3e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf40:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bf48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3738      	adds	r7, #56	; 0x38
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b08c      	sub	sp, #48	; 0x30
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf60:	2300      	movs	r3, #0
 800bf62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d10c      	bne.n	800bf88 <xQueueReceive+0x34>
	__asm volatile
 800bf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf72:	b672      	cpsid	i
 800bf74:	f383 8811 	msr	BASEPRI, r3
 800bf78:	f3bf 8f6f 	isb	sy
 800bf7c:	f3bf 8f4f 	dsb	sy
 800bf80:	b662      	cpsie	i
 800bf82:	623b      	str	r3, [r7, #32]
}
 800bf84:	bf00      	nop
 800bf86:	e7fe      	b.n	800bf86 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d103      	bne.n	800bf96 <xQueueReceive+0x42>
 800bf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <xQueueReceive+0x46>
 800bf96:	2301      	movs	r3, #1
 800bf98:	e000      	b.n	800bf9c <xQueueReceive+0x48>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d10c      	bne.n	800bfba <xQueueReceive+0x66>
	__asm volatile
 800bfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa4:	b672      	cpsid	i
 800bfa6:	f383 8811 	msr	BASEPRI, r3
 800bfaa:	f3bf 8f6f 	isb	sy
 800bfae:	f3bf 8f4f 	dsb	sy
 800bfb2:	b662      	cpsie	i
 800bfb4:	61fb      	str	r3, [r7, #28]
}
 800bfb6:	bf00      	nop
 800bfb8:	e7fe      	b.n	800bfb8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bfba:	f001 f98d 	bl	800d2d8 <xTaskGetSchedulerState>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d102      	bne.n	800bfca <xQueueReceive+0x76>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d101      	bne.n	800bfce <xQueueReceive+0x7a>
 800bfca:	2301      	movs	r3, #1
 800bfcc:	e000      	b.n	800bfd0 <xQueueReceive+0x7c>
 800bfce:	2300      	movs	r3, #0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10c      	bne.n	800bfee <xQueueReceive+0x9a>
	__asm volatile
 800bfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd8:	b672      	cpsid	i
 800bfda:	f383 8811 	msr	BASEPRI, r3
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f3bf 8f4f 	dsb	sy
 800bfe6:	b662      	cpsie	i
 800bfe8:	61bb      	str	r3, [r7, #24]
}
 800bfea:	bf00      	nop
 800bfec:	e7fe      	b.n	800bfec <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bfee:	f001 fcbd 	bl	800d96c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bff6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d01f      	beq.n	800c03e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bffe:	68b9      	ldr	r1, [r7, #8]
 800c000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c002:	f000 fa23 	bl	800c44c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c008:	1e5a      	subs	r2, r3, #1
 800c00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00f      	beq.n	800c036 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c018:	3310      	adds	r3, #16
 800c01a:	4618      	mov	r0, r3
 800c01c:	f000 ff94 	bl	800cf48 <xTaskRemoveFromEventList>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d007      	beq.n	800c036 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c026:	4b3d      	ldr	r3, [pc, #244]	; (800c11c <xQueueReceive+0x1c8>)
 800c028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c02c:	601a      	str	r2, [r3, #0]
 800c02e:	f3bf 8f4f 	dsb	sy
 800c032:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c036:	f001 fccd 	bl	800d9d4 <vPortExitCritical>
				return pdPASS;
 800c03a:	2301      	movs	r3, #1
 800c03c:	e069      	b.n	800c112 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d103      	bne.n	800c04c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c044:	f001 fcc6 	bl	800d9d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c048:	2300      	movs	r3, #0
 800c04a:	e062      	b.n	800c112 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d106      	bne.n	800c060 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c052:	f107 0310 	add.w	r3, r7, #16
 800c056:	4618      	mov	r0, r3
 800c058:	f000 ffda 	bl	800d010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c05c:	2301      	movs	r3, #1
 800c05e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c060:	f001 fcb8 	bl	800d9d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c064:	f000 fd80 	bl	800cb68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c068:	f001 fc80 	bl	800d96c <vPortEnterCritical>
 800c06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c072:	b25b      	sxtb	r3, r3
 800c074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c078:	d103      	bne.n	800c082 <xQueueReceive+0x12e>
 800c07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07c:	2200      	movs	r2, #0
 800c07e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c084:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c088:	b25b      	sxtb	r3, r3
 800c08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c08e:	d103      	bne.n	800c098 <xQueueReceive+0x144>
 800c090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c092:	2200      	movs	r2, #0
 800c094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c098:	f001 fc9c 	bl	800d9d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c09c:	1d3a      	adds	r2, r7, #4
 800c09e:	f107 0310 	add.w	r3, r7, #16
 800c0a2:	4611      	mov	r1, r2
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f000 ffc9 	bl	800d03c <xTaskCheckForTimeOut>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d123      	bne.n	800c0f8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0b2:	f000 fa43 	bl	800c53c <prvIsQueueEmpty>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d017      	beq.n	800c0ec <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0be:	3324      	adds	r3, #36	; 0x24
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	4611      	mov	r1, r2
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f000 ff19 	bl	800cefc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c0ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0cc:	f000 f9e4 	bl	800c498 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c0d0:	f000 fd58 	bl	800cb84 <xTaskResumeAll>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d189      	bne.n	800bfee <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800c0da:	4b10      	ldr	r3, [pc, #64]	; (800c11c <xQueueReceive+0x1c8>)
 800c0dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0e0:	601a      	str	r2, [r3, #0]
 800c0e2:	f3bf 8f4f 	dsb	sy
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	e780      	b.n	800bfee <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c0ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0ee:	f000 f9d3 	bl	800c498 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0f2:	f000 fd47 	bl	800cb84 <xTaskResumeAll>
 800c0f6:	e77a      	b.n	800bfee <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c0f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0fa:	f000 f9cd 	bl	800c498 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0fe:	f000 fd41 	bl	800cb84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c104:	f000 fa1a 	bl	800c53c <prvIsQueueEmpty>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f43f af6f 	beq.w	800bfee <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c110:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c112:	4618      	mov	r0, r3
 800c114:	3730      	adds	r7, #48	; 0x30
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop
 800c11c:	e000ed04 	.word	0xe000ed04

0800c120 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b08e      	sub	sp, #56	; 0x38
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c12a:	2300      	movs	r3, #0
 800c12c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c132:	2300      	movs	r3, #0
 800c134:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d10c      	bne.n	800c156 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800c13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c140:	b672      	cpsid	i
 800c142:	f383 8811 	msr	BASEPRI, r3
 800c146:	f3bf 8f6f 	isb	sy
 800c14a:	f3bf 8f4f 	dsb	sy
 800c14e:	b662      	cpsie	i
 800c150:	623b      	str	r3, [r7, #32]
}
 800c152:	bf00      	nop
 800c154:	e7fe      	b.n	800c154 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00c      	beq.n	800c178 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c162:	b672      	cpsid	i
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	b662      	cpsie	i
 800c172:	61fb      	str	r3, [r7, #28]
}
 800c174:	bf00      	nop
 800c176:	e7fe      	b.n	800c176 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c178:	f001 f8ae 	bl	800d2d8 <xTaskGetSchedulerState>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d102      	bne.n	800c188 <xQueueSemaphoreTake+0x68>
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d101      	bne.n	800c18c <xQueueSemaphoreTake+0x6c>
 800c188:	2301      	movs	r3, #1
 800c18a:	e000      	b.n	800c18e <xQueueSemaphoreTake+0x6e>
 800c18c:	2300      	movs	r3, #0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d10c      	bne.n	800c1ac <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800c192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c196:	b672      	cpsid	i
 800c198:	f383 8811 	msr	BASEPRI, r3
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	f3bf 8f4f 	dsb	sy
 800c1a4:	b662      	cpsie	i
 800c1a6:	61bb      	str	r3, [r7, #24]
}
 800c1a8:	bf00      	nop
 800c1aa:	e7fe      	b.n	800c1aa <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1ac:	f001 fbde 	bl	800d96c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d024      	beq.n	800c206 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1be:	1e5a      	subs	r2, r3, #1
 800c1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d104      	bne.n	800c1d6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c1cc:	f001 fa4a 	bl	800d664 <pvTaskIncrementMutexHeldCount>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d8:	691b      	ldr	r3, [r3, #16]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00f      	beq.n	800c1fe <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e0:	3310      	adds	r3, #16
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f000 feb0 	bl	800cf48 <xTaskRemoveFromEventList>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d007      	beq.n	800c1fe <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c1ee:	4b55      	ldr	r3, [pc, #340]	; (800c344 <xQueueSemaphoreTake+0x224>)
 800c1f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1f4:	601a      	str	r2, [r3, #0]
 800c1f6:	f3bf 8f4f 	dsb	sy
 800c1fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c1fe:	f001 fbe9 	bl	800d9d4 <vPortExitCritical>
				return pdPASS;
 800c202:	2301      	movs	r3, #1
 800c204:	e099      	b.n	800c33a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d113      	bne.n	800c234 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00c      	beq.n	800c22c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800c212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c216:	b672      	cpsid	i
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	b662      	cpsie	i
 800c226:	617b      	str	r3, [r7, #20]
}
 800c228:	bf00      	nop
 800c22a:	e7fe      	b.n	800c22a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c22c:	f001 fbd2 	bl	800d9d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c230:	2300      	movs	r3, #0
 800c232:	e082      	b.n	800c33a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c236:	2b00      	cmp	r3, #0
 800c238:	d106      	bne.n	800c248 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c23a:	f107 030c 	add.w	r3, r7, #12
 800c23e:	4618      	mov	r0, r3
 800c240:	f000 fee6 	bl	800d010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c244:	2301      	movs	r3, #1
 800c246:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c248:	f001 fbc4 	bl	800d9d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c24c:	f000 fc8c 	bl	800cb68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c250:	f001 fb8c 	bl	800d96c <vPortEnterCritical>
 800c254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c256:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c25a:	b25b      	sxtb	r3, r3
 800c25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c260:	d103      	bne.n	800c26a <xQueueSemaphoreTake+0x14a>
 800c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c264:	2200      	movs	r2, #0
 800c266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c270:	b25b      	sxtb	r3, r3
 800c272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c276:	d103      	bne.n	800c280 <xQueueSemaphoreTake+0x160>
 800c278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c280:	f001 fba8 	bl	800d9d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c284:	463a      	mov	r2, r7
 800c286:	f107 030c 	add.w	r3, r7, #12
 800c28a:	4611      	mov	r1, r2
 800c28c:	4618      	mov	r0, r3
 800c28e:	f000 fed5 	bl	800d03c <xTaskCheckForTimeOut>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d132      	bne.n	800c2fe <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c298:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c29a:	f000 f94f 	bl	800c53c <prvIsQueueEmpty>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d026      	beq.n	800c2f2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d109      	bne.n	800c2c0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800c2ac:	f001 fb5e 	bl	800d96c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f001 f82d 	bl	800d314 <xTaskPriorityInherit>
 800c2ba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c2bc:	f001 fb8a 	bl	800d9d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c2:	3324      	adds	r3, #36	; 0x24
 800c2c4:	683a      	ldr	r2, [r7, #0]
 800c2c6:	4611      	mov	r1, r2
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f000 fe17 	bl	800cefc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2d0:	f000 f8e2 	bl	800c498 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2d4:	f000 fc56 	bl	800cb84 <xTaskResumeAll>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	f47f af66 	bne.w	800c1ac <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800c2e0:	4b18      	ldr	r3, [pc, #96]	; (800c344 <xQueueSemaphoreTake+0x224>)
 800c2e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2e6:	601a      	str	r2, [r3, #0]
 800c2e8:	f3bf 8f4f 	dsb	sy
 800c2ec:	f3bf 8f6f 	isb	sy
 800c2f0:	e75c      	b.n	800c1ac <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c2f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2f4:	f000 f8d0 	bl	800c498 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2f8:	f000 fc44 	bl	800cb84 <xTaskResumeAll>
 800c2fc:	e756      	b.n	800c1ac <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c2fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c300:	f000 f8ca 	bl	800c498 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c304:	f000 fc3e 	bl	800cb84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c308:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c30a:	f000 f917 	bl	800c53c <prvIsQueueEmpty>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	f43f af4b 	beq.w	800c1ac <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d00d      	beq.n	800c338 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800c31c:	f001 fb26 	bl	800d96c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c320:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c322:	f000 f811 	bl	800c348 <prvGetDisinheritPriorityAfterTimeout>
 800c326:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c32e:	4618      	mov	r0, r3
 800c330:	f001 f8fa 	bl	800d528 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c334:	f001 fb4e 	bl	800d9d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c338:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3738      	adds	r7, #56	; 0x38
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	e000ed04 	.word	0xe000ed04

0800c348 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c354:	2b00      	cmp	r3, #0
 800c356:	d006      	beq.n	800c366 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f1c3 0307 	rsb	r3, r3, #7
 800c362:	60fb      	str	r3, [r7, #12]
 800c364:	e001      	b.n	800c36a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c366:	2300      	movs	r3, #0
 800c368:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c36a:	68fb      	ldr	r3, [r7, #12]
	}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3714      	adds	r7, #20
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c384:	2300      	movs	r3, #0
 800c386:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c38c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c392:	2b00      	cmp	r3, #0
 800c394:	d10d      	bne.n	800c3b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d14d      	bne.n	800c43a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	689b      	ldr	r3, [r3, #8]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f001 f836 	bl	800d414 <xTaskPriorityDisinherit>
 800c3a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	609a      	str	r2, [r3, #8]
 800c3b0:	e043      	b.n	800c43a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d119      	bne.n	800c3ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6858      	ldr	r0, [r3, #4]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	68b9      	ldr	r1, [r7, #8]
 800c3c4:	f001 fe0e 	bl	800dfe4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	685a      	ldr	r2, [r3, #4]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d0:	441a      	add	r2, r3
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	685a      	ldr	r2, [r3, #4]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d32b      	bcc.n	800c43a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	605a      	str	r2, [r3, #4]
 800c3ea:	e026      	b.n	800c43a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	68d8      	ldr	r0, [r3, #12]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	68b9      	ldr	r1, [r7, #8]
 800c3f8:	f001 fdf4 	bl	800dfe4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	68da      	ldr	r2, [r3, #12]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c404:	425b      	negs	r3, r3
 800c406:	441a      	add	r2, r3
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	68da      	ldr	r2, [r3, #12]
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	429a      	cmp	r2, r3
 800c416:	d207      	bcs.n	800c428 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	689a      	ldr	r2, [r3, #8]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c420:	425b      	negs	r3, r3
 800c422:	441a      	add	r2, r3
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d105      	bne.n	800c43a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d002      	beq.n	800c43a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	3b01      	subs	r3, #1
 800c438:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	1c5a      	adds	r2, r3, #1
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c442:	697b      	ldr	r3, [r7, #20]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3718      	adds	r7, #24
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d018      	beq.n	800c490 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	68da      	ldr	r2, [r3, #12]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c466:	441a      	add	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	68da      	ldr	r2, [r3, #12]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	689b      	ldr	r3, [r3, #8]
 800c474:	429a      	cmp	r2, r3
 800c476:	d303      	bcc.n	800c480 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	68d9      	ldr	r1, [r3, #12]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c488:	461a      	mov	r2, r3
 800c48a:	6838      	ldr	r0, [r7, #0]
 800c48c:	f001 fdaa 	bl	800dfe4 <memcpy>
	}
}
 800c490:	bf00      	nop
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c4a0:	f001 fa64 	bl	800d96c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4ac:	e011      	b.n	800c4d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d012      	beq.n	800c4dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	3324      	adds	r3, #36	; 0x24
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f000 fd44 	bl	800cf48 <xTaskRemoveFromEventList>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d001      	beq.n	800c4ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c4c6:	f000 fe1f 	bl	800d108 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c4ca:	7bfb      	ldrb	r3, [r7, #15]
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	dce9      	bgt.n	800c4ae <prvUnlockQueue+0x16>
 800c4da:	e000      	b.n	800c4de <prvUnlockQueue+0x46>
					break;
 800c4dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	22ff      	movs	r2, #255	; 0xff
 800c4e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c4e6:	f001 fa75 	bl	800d9d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c4ea:	f001 fa3f 	bl	800d96c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4f6:	e011      	b.n	800c51c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	691b      	ldr	r3, [r3, #16]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d012      	beq.n	800c526 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	3310      	adds	r3, #16
 800c504:	4618      	mov	r0, r3
 800c506:	f000 fd1f 	bl	800cf48 <xTaskRemoveFromEventList>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d001      	beq.n	800c514 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c510:	f000 fdfa 	bl	800d108 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c514:	7bbb      	ldrb	r3, [r7, #14]
 800c516:	3b01      	subs	r3, #1
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c51c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c520:	2b00      	cmp	r3, #0
 800c522:	dce9      	bgt.n	800c4f8 <prvUnlockQueue+0x60>
 800c524:	e000      	b.n	800c528 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c526:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	22ff      	movs	r2, #255	; 0xff
 800c52c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c530:	f001 fa50 	bl	800d9d4 <vPortExitCritical>
}
 800c534:	bf00      	nop
 800c536:	3710      	adds	r7, #16
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c544:	f001 fa12 	bl	800d96c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d102      	bne.n	800c556 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c550:	2301      	movs	r3, #1
 800c552:	60fb      	str	r3, [r7, #12]
 800c554:	e001      	b.n	800c55a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c556:	2300      	movs	r3, #0
 800c558:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c55a:	f001 fa3b 	bl	800d9d4 <vPortExitCritical>

	return xReturn;
 800c55e:	68fb      	ldr	r3, [r7, #12]
}
 800c560:	4618      	mov	r0, r3
 800c562:	3710      	adds	r7, #16
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c570:	f001 f9fc 	bl	800d96c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d102      	bne.n	800c586 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c580:	2301      	movs	r3, #1
 800c582:	60fb      	str	r3, [r7, #12]
 800c584:	e001      	b.n	800c58a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c586:	2300      	movs	r3, #0
 800c588:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c58a:	f001 fa23 	bl	800d9d4 <vPortExitCritical>

	return xReturn;
 800c58e:	68fb      	ldr	r3, [r7, #12]
}
 800c590:	4618      	mov	r0, r3
 800c592:	3710      	adds	r7, #16
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b08e      	sub	sp, #56	; 0x38
 800c59c:	af04      	add	r7, sp, #16
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	607a      	str	r2, [r7, #4]
 800c5a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d10c      	bne.n	800c5c6 <xTaskCreateStatic+0x2e>
	__asm volatile
 800c5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b0:	b672      	cpsid	i
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	b662      	cpsie	i
 800c5c0:	623b      	str	r3, [r7, #32]
}
 800c5c2:	bf00      	nop
 800c5c4:	e7fe      	b.n	800c5c4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10c      	bne.n	800c5e6 <xTaskCreateStatic+0x4e>
	__asm volatile
 800c5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d0:	b672      	cpsid	i
 800c5d2:	f383 8811 	msr	BASEPRI, r3
 800c5d6:	f3bf 8f6f 	isb	sy
 800c5da:	f3bf 8f4f 	dsb	sy
 800c5de:	b662      	cpsie	i
 800c5e0:	61fb      	str	r3, [r7, #28]
}
 800c5e2:	bf00      	nop
 800c5e4:	e7fe      	b.n	800c5e4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c5e6:	23b4      	movs	r3, #180	; 0xb4
 800c5e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	2bb4      	cmp	r3, #180	; 0xb4
 800c5ee:	d00c      	beq.n	800c60a <xTaskCreateStatic+0x72>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f4:	b672      	cpsid	i
 800c5f6:	f383 8811 	msr	BASEPRI, r3
 800c5fa:	f3bf 8f6f 	isb	sy
 800c5fe:	f3bf 8f4f 	dsb	sy
 800c602:	b662      	cpsie	i
 800c604:	61bb      	str	r3, [r7, #24]
}
 800c606:	bf00      	nop
 800c608:	e7fe      	b.n	800c608 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c60a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d01e      	beq.n	800c650 <xTaskCreateStatic+0xb8>
 800c612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c614:	2b00      	cmp	r3, #0
 800c616:	d01b      	beq.n	800c650 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c620:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c624:	2202      	movs	r2, #2
 800c626:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c62a:	2300      	movs	r3, #0
 800c62c:	9303      	str	r3, [sp, #12]
 800c62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c630:	9302      	str	r3, [sp, #8]
 800c632:	f107 0314 	add.w	r3, r7, #20
 800c636:	9301      	str	r3, [sp, #4]
 800c638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63a:	9300      	str	r3, [sp, #0]
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	68b9      	ldr	r1, [r7, #8]
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f000 f850 	bl	800c6e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c64a:	f000 f8ed 	bl	800c828 <prvAddNewTaskToReadyList>
 800c64e:	e001      	b.n	800c654 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c650:	2300      	movs	r3, #0
 800c652:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c654:	697b      	ldr	r3, [r7, #20]
	}
 800c656:	4618      	mov	r0, r3
 800c658:	3728      	adds	r7, #40	; 0x28
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c65e:	b580      	push	{r7, lr}
 800c660:	b08c      	sub	sp, #48	; 0x30
 800c662:	af04      	add	r7, sp, #16
 800c664:	60f8      	str	r0, [r7, #12]
 800c666:	60b9      	str	r1, [r7, #8]
 800c668:	603b      	str	r3, [r7, #0]
 800c66a:	4613      	mov	r3, r2
 800c66c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c66e:	88fb      	ldrh	r3, [r7, #6]
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4618      	mov	r0, r3
 800c674:	f001 faa6 	bl	800dbc4 <pvPortMalloc>
 800c678:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00e      	beq.n	800c69e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c680:	20b4      	movs	r0, #180	; 0xb4
 800c682:	f001 fa9f 	bl	800dbc4 <pvPortMalloc>
 800c686:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d003      	beq.n	800c696 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	697a      	ldr	r2, [r7, #20]
 800c692:	631a      	str	r2, [r3, #48]	; 0x30
 800c694:	e005      	b.n	800c6a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c696:	6978      	ldr	r0, [r7, #20]
 800c698:	f001 fb5e 	bl	800dd58 <vPortFree>
 800c69c:	e001      	b.n	800c6a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d017      	beq.n	800c6d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6b0:	88fa      	ldrh	r2, [r7, #6]
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	9303      	str	r3, [sp, #12]
 800c6b6:	69fb      	ldr	r3, [r7, #28]
 800c6b8:	9302      	str	r3, [sp, #8]
 800c6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6bc:	9301      	str	r3, [sp, #4]
 800c6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c0:	9300      	str	r3, [sp, #0]
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	68b9      	ldr	r1, [r7, #8]
 800c6c6:	68f8      	ldr	r0, [r7, #12]
 800c6c8:	f000 f80e 	bl	800c6e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6cc:	69f8      	ldr	r0, [r7, #28]
 800c6ce:	f000 f8ab 	bl	800c828 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	61bb      	str	r3, [r7, #24]
 800c6d6:	e002      	b.n	800c6de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c6de:	69bb      	ldr	r3, [r7, #24]
	}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3720      	adds	r7, #32
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b088      	sub	sp, #32
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
 800c6f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6fa:	6879      	ldr	r1, [r7, #4]
 800c6fc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c700:	440b      	add	r3, r1
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	4413      	add	r3, r2
 800c706:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	f023 0307 	bic.w	r3, r3, #7
 800c70e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c710:	69bb      	ldr	r3, [r7, #24]
 800c712:	f003 0307 	and.w	r3, r3, #7
 800c716:	2b00      	cmp	r3, #0
 800c718:	d00c      	beq.n	800c734 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800c71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71e:	b672      	cpsid	i
 800c720:	f383 8811 	msr	BASEPRI, r3
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	f3bf 8f4f 	dsb	sy
 800c72c:	b662      	cpsie	i
 800c72e:	617b      	str	r3, [r7, #20]
}
 800c730:	bf00      	nop
 800c732:	e7fe      	b.n	800c732 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d01f      	beq.n	800c77a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c73a:	2300      	movs	r3, #0
 800c73c:	61fb      	str	r3, [r7, #28]
 800c73e:	e012      	b.n	800c766 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c740:	68ba      	ldr	r2, [r7, #8]
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	4413      	add	r3, r2
 800c746:	7819      	ldrb	r1, [r3, #0]
 800c748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c74a:	69fb      	ldr	r3, [r7, #28]
 800c74c:	4413      	add	r3, r2
 800c74e:	3334      	adds	r3, #52	; 0x34
 800c750:	460a      	mov	r2, r1
 800c752:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c754:	68ba      	ldr	r2, [r7, #8]
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	4413      	add	r3, r2
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d006      	beq.n	800c76e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c760:	69fb      	ldr	r3, [r7, #28]
 800c762:	3301      	adds	r3, #1
 800c764:	61fb      	str	r3, [r7, #28]
 800c766:	69fb      	ldr	r3, [r7, #28]
 800c768:	2b0f      	cmp	r3, #15
 800c76a:	d9e9      	bls.n	800c740 <prvInitialiseNewTask+0x58>
 800c76c:	e000      	b.n	800c770 <prvInitialiseNewTask+0x88>
			{
				break;
 800c76e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c772:	2200      	movs	r2, #0
 800c774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c778:	e003      	b.n	800c782 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77c:	2200      	movs	r2, #0
 800c77e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c784:	2b06      	cmp	r3, #6
 800c786:	d901      	bls.n	800c78c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c788:	2306      	movs	r3, #6
 800c78a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c790:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c796:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79a:	2200      	movs	r2, #0
 800c79c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a0:	3304      	adds	r3, #4
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7ff f84d 	bl	800b842 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7aa:	3318      	adds	r3, #24
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7ff f848 	bl	800b842 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ba:	f1c3 0207 	rsb	r2, r3, #7
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7da:	334c      	adds	r3, #76	; 0x4c
 800c7dc:	2260      	movs	r2, #96	; 0x60
 800c7de:	2100      	movs	r1, #0
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f001 fc0d 	bl	800e000 <memset>
 800c7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e8:	4a0c      	ldr	r2, [pc, #48]	; (800c81c <prvInitialiseNewTask+0x134>)
 800c7ea:	651a      	str	r2, [r3, #80]	; 0x50
 800c7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ee:	4a0c      	ldr	r2, [pc, #48]	; (800c820 <prvInitialiseNewTask+0x138>)
 800c7f0:	655a      	str	r2, [r3, #84]	; 0x54
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f4:	4a0b      	ldr	r2, [pc, #44]	; (800c824 <prvInitialiseNewTask+0x13c>)
 800c7f6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c7f8:	683a      	ldr	r2, [r7, #0]
 800c7fa:	68f9      	ldr	r1, [r7, #12]
 800c7fc:	69b8      	ldr	r0, [r7, #24]
 800c7fe:	f000 ffab 	bl	800d758 <pxPortInitialiseStack>
 800c802:	4602      	mov	r2, r0
 800c804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c806:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d002      	beq.n	800c814 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c812:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c814:	bf00      	nop
 800c816:	3720      	adds	r7, #32
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	080109e8 	.word	0x080109e8
 800c820:	08010a08 	.word	0x08010a08
 800c824:	080109c8 	.word	0x080109c8

0800c828 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c830:	f001 f89c 	bl	800d96c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c834:	4b2a      	ldr	r3, [pc, #168]	; (800c8e0 <prvAddNewTaskToReadyList+0xb8>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	3301      	adds	r3, #1
 800c83a:	4a29      	ldr	r2, [pc, #164]	; (800c8e0 <prvAddNewTaskToReadyList+0xb8>)
 800c83c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c83e:	4b29      	ldr	r3, [pc, #164]	; (800c8e4 <prvAddNewTaskToReadyList+0xbc>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d109      	bne.n	800c85a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c846:	4a27      	ldr	r2, [pc, #156]	; (800c8e4 <prvAddNewTaskToReadyList+0xbc>)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c84c:	4b24      	ldr	r3, [pc, #144]	; (800c8e0 <prvAddNewTaskToReadyList+0xb8>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d110      	bne.n	800c876 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c854:	f000 fc7c 	bl	800d150 <prvInitialiseTaskLists>
 800c858:	e00d      	b.n	800c876 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c85a:	4b23      	ldr	r3, [pc, #140]	; (800c8e8 <prvAddNewTaskToReadyList+0xc0>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d109      	bne.n	800c876 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c862:	4b20      	ldr	r3, [pc, #128]	; (800c8e4 <prvAddNewTaskToReadyList+0xbc>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d802      	bhi.n	800c876 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c870:	4a1c      	ldr	r2, [pc, #112]	; (800c8e4 <prvAddNewTaskToReadyList+0xbc>)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c876:	4b1d      	ldr	r3, [pc, #116]	; (800c8ec <prvAddNewTaskToReadyList+0xc4>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	3301      	adds	r3, #1
 800c87c:	4a1b      	ldr	r2, [pc, #108]	; (800c8ec <prvAddNewTaskToReadyList+0xc4>)
 800c87e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c884:	2201      	movs	r2, #1
 800c886:	409a      	lsls	r2, r3
 800c888:	4b19      	ldr	r3, [pc, #100]	; (800c8f0 <prvAddNewTaskToReadyList+0xc8>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4313      	orrs	r3, r2
 800c88e:	4a18      	ldr	r2, [pc, #96]	; (800c8f0 <prvAddNewTaskToReadyList+0xc8>)
 800c890:	6013      	str	r3, [r2, #0]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c896:	4613      	mov	r3, r2
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	4413      	add	r3, r2
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	4a15      	ldr	r2, [pc, #84]	; (800c8f4 <prvAddNewTaskToReadyList+0xcc>)
 800c8a0:	441a      	add	r2, r3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	3304      	adds	r3, #4
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	4610      	mov	r0, r2
 800c8aa:	f7fe ffd7 	bl	800b85c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c8ae:	f001 f891 	bl	800d9d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c8b2:	4b0d      	ldr	r3, [pc, #52]	; (800c8e8 <prvAddNewTaskToReadyList+0xc0>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d00e      	beq.n	800c8d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c8ba:	4b0a      	ldr	r3, [pc, #40]	; (800c8e4 <prvAddNewTaskToReadyList+0xbc>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d207      	bcs.n	800c8d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c8c8:	4b0b      	ldr	r3, [pc, #44]	; (800c8f8 <prvAddNewTaskToReadyList+0xd0>)
 800c8ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8ce:	601a      	str	r2, [r3, #0]
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8d8:	bf00      	nop
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	20000668 	.word	0x20000668
 800c8e4:	20000568 	.word	0x20000568
 800c8e8:	20000674 	.word	0x20000674
 800c8ec:	20000684 	.word	0x20000684
 800c8f0:	20000670 	.word	0x20000670
 800c8f4:	2000056c 	.word	0x2000056c
 800c8f8:	e000ed04 	.word	0xe000ed04

0800c8fc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c904:	f001 f832 	bl	800d96c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d102      	bne.n	800c914 <vTaskDelete+0x18>
 800c90e:	4b3a      	ldr	r3, [pc, #232]	; (800c9f8 <vTaskDelete+0xfc>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	e000      	b.n	800c916 <vTaskDelete+0x1a>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	3304      	adds	r3, #4
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7fe fffa 	bl	800b916 <uxListRemove>
 800c922:	4603      	mov	r3, r0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d115      	bne.n	800c954 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c92c:	4933      	ldr	r1, [pc, #204]	; (800c9fc <vTaskDelete+0x100>)
 800c92e:	4613      	mov	r3, r2
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	4413      	add	r3, r2
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	440b      	add	r3, r1
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d10a      	bne.n	800c954 <vTaskDelete+0x58>
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c942:	2201      	movs	r2, #1
 800c944:	fa02 f303 	lsl.w	r3, r2, r3
 800c948:	43da      	mvns	r2, r3
 800c94a:	4b2d      	ldr	r3, [pc, #180]	; (800ca00 <vTaskDelete+0x104>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4013      	ands	r3, r2
 800c950:	4a2b      	ldr	r2, [pc, #172]	; (800ca00 <vTaskDelete+0x104>)
 800c952:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d004      	beq.n	800c966 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	3318      	adds	r3, #24
 800c960:	4618      	mov	r0, r3
 800c962:	f7fe ffd8 	bl	800b916 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c966:	4b27      	ldr	r3, [pc, #156]	; (800ca04 <vTaskDelete+0x108>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	3301      	adds	r3, #1
 800c96c:	4a25      	ldr	r2, [pc, #148]	; (800ca04 <vTaskDelete+0x108>)
 800c96e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c970:	4b21      	ldr	r3, [pc, #132]	; (800c9f8 <vTaskDelete+0xfc>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	429a      	cmp	r2, r3
 800c978:	d10b      	bne.n	800c992 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	3304      	adds	r3, #4
 800c97e:	4619      	mov	r1, r3
 800c980:	4821      	ldr	r0, [pc, #132]	; (800ca08 <vTaskDelete+0x10c>)
 800c982:	f7fe ff6b 	bl	800b85c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c986:	4b21      	ldr	r3, [pc, #132]	; (800ca0c <vTaskDelete+0x110>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	3301      	adds	r3, #1
 800c98c:	4a1f      	ldr	r2, [pc, #124]	; (800ca0c <vTaskDelete+0x110>)
 800c98e:	6013      	str	r3, [r2, #0]
 800c990:	e009      	b.n	800c9a6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c992:	4b1f      	ldr	r3, [pc, #124]	; (800ca10 <vTaskDelete+0x114>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	3b01      	subs	r3, #1
 800c998:	4a1d      	ldr	r2, [pc, #116]	; (800ca10 <vTaskDelete+0x114>)
 800c99a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800c99c:	68f8      	ldr	r0, [r7, #12]
 800c99e:	f000 fc45 	bl	800d22c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c9a2:	f000 fc79 	bl	800d298 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800c9a6:	f001 f815 	bl	800d9d4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c9aa:	4b1a      	ldr	r3, [pc, #104]	; (800ca14 <vTaskDelete+0x118>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d01d      	beq.n	800c9ee <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800c9b2:	4b11      	ldr	r3, [pc, #68]	; (800c9f8 <vTaskDelete+0xfc>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d118      	bne.n	800c9ee <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c9bc:	4b16      	ldr	r3, [pc, #88]	; (800ca18 <vTaskDelete+0x11c>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00c      	beq.n	800c9de <vTaskDelete+0xe2>
	__asm volatile
 800c9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c8:	b672      	cpsid	i
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	b662      	cpsie	i
 800c9d8:	60bb      	str	r3, [r7, #8]
}
 800c9da:	bf00      	nop
 800c9dc:	e7fe      	b.n	800c9dc <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800c9de:	4b0f      	ldr	r3, [pc, #60]	; (800ca1c <vTaskDelete+0x120>)
 800c9e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9e4:	601a      	str	r2, [r3, #0]
 800c9e6:	f3bf 8f4f 	dsb	sy
 800c9ea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c9ee:	bf00      	nop
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	20000568 	.word	0x20000568
 800c9fc:	2000056c 	.word	0x2000056c
 800ca00:	20000670 	.word	0x20000670
 800ca04:	20000684 	.word	0x20000684
 800ca08:	2000063c 	.word	0x2000063c
 800ca0c:	20000650 	.word	0x20000650
 800ca10:	20000668 	.word	0x20000668
 800ca14:	20000674 	.word	0x20000674
 800ca18:	20000690 	.word	0x20000690
 800ca1c:	e000ed04 	.word	0xe000ed04

0800ca20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d019      	beq.n	800ca66 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ca32:	4b14      	ldr	r3, [pc, #80]	; (800ca84 <vTaskDelay+0x64>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00c      	beq.n	800ca54 <vTaskDelay+0x34>
	__asm volatile
 800ca3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3e:	b672      	cpsid	i
 800ca40:	f383 8811 	msr	BASEPRI, r3
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	b662      	cpsie	i
 800ca4e:	60bb      	str	r3, [r7, #8]
}
 800ca50:	bf00      	nop
 800ca52:	e7fe      	b.n	800ca52 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800ca54:	f000 f888 	bl	800cb68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ca58:	2100      	movs	r1, #0
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 fe16 	bl	800d68c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ca60:	f000 f890 	bl	800cb84 <xTaskResumeAll>
 800ca64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d107      	bne.n	800ca7c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800ca6c:	4b06      	ldr	r3, [pc, #24]	; (800ca88 <vTaskDelay+0x68>)
 800ca6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca72:	601a      	str	r2, [r3, #0]
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca7c:	bf00      	nop
 800ca7e:	3710      	adds	r7, #16
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	20000690 	.word	0x20000690
 800ca88:	e000ed04 	.word	0xe000ed04

0800ca8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b08a      	sub	sp, #40	; 0x28
 800ca90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ca92:	2300      	movs	r3, #0
 800ca94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ca96:	2300      	movs	r3, #0
 800ca98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ca9a:	463a      	mov	r2, r7
 800ca9c:	1d39      	adds	r1, r7, #4
 800ca9e:	f107 0308 	add.w	r3, r7, #8
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7f3 fd80 	bl	80005a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800caa8:	6839      	ldr	r1, [r7, #0]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	68ba      	ldr	r2, [r7, #8]
 800caae:	9202      	str	r2, [sp, #8]
 800cab0:	9301      	str	r3, [sp, #4]
 800cab2:	2300      	movs	r3, #0
 800cab4:	9300      	str	r3, [sp, #0]
 800cab6:	2300      	movs	r3, #0
 800cab8:	460a      	mov	r2, r1
 800caba:	4923      	ldr	r1, [pc, #140]	; (800cb48 <vTaskStartScheduler+0xbc>)
 800cabc:	4823      	ldr	r0, [pc, #140]	; (800cb4c <vTaskStartScheduler+0xc0>)
 800cabe:	f7ff fd6b 	bl	800c598 <xTaskCreateStatic>
 800cac2:	4603      	mov	r3, r0
 800cac4:	4a22      	ldr	r2, [pc, #136]	; (800cb50 <vTaskStartScheduler+0xc4>)
 800cac6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cac8:	4b21      	ldr	r3, [pc, #132]	; (800cb50 <vTaskStartScheduler+0xc4>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d002      	beq.n	800cad6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cad0:	2301      	movs	r3, #1
 800cad2:	617b      	str	r3, [r7, #20]
 800cad4:	e001      	b.n	800cada <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cad6:	2300      	movs	r3, #0
 800cad8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d11d      	bne.n	800cb1c <vTaskStartScheduler+0x90>
	__asm volatile
 800cae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae4:	b672      	cpsid	i
 800cae6:	f383 8811 	msr	BASEPRI, r3
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	b662      	cpsie	i
 800caf4:	613b      	str	r3, [r7, #16]
}
 800caf6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800caf8:	4b16      	ldr	r3, [pc, #88]	; (800cb54 <vTaskStartScheduler+0xc8>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	334c      	adds	r3, #76	; 0x4c
 800cafe:	4a16      	ldr	r2, [pc, #88]	; (800cb58 <vTaskStartScheduler+0xcc>)
 800cb00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cb02:	4b16      	ldr	r3, [pc, #88]	; (800cb5c <vTaskStartScheduler+0xd0>)
 800cb04:	f04f 32ff 	mov.w	r2, #4294967295
 800cb08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cb0a:	4b15      	ldr	r3, [pc, #84]	; (800cb60 <vTaskStartScheduler+0xd4>)
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cb10:	4b14      	ldr	r3, [pc, #80]	; (800cb64 <vTaskStartScheduler+0xd8>)
 800cb12:	2200      	movs	r2, #0
 800cb14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cb16:	f000 feab 	bl	800d870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cb1a:	e010      	b.n	800cb3e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb22:	d10c      	bne.n	800cb3e <vTaskStartScheduler+0xb2>
	__asm volatile
 800cb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb28:	b672      	cpsid	i
 800cb2a:	f383 8811 	msr	BASEPRI, r3
 800cb2e:	f3bf 8f6f 	isb	sy
 800cb32:	f3bf 8f4f 	dsb	sy
 800cb36:	b662      	cpsie	i
 800cb38:	60fb      	str	r3, [r7, #12]
}
 800cb3a:	bf00      	nop
 800cb3c:	e7fe      	b.n	800cb3c <vTaskStartScheduler+0xb0>
}
 800cb3e:	bf00      	nop
 800cb40:	3718      	adds	r7, #24
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	0800ea74 	.word	0x0800ea74
 800cb4c:	0800d121 	.word	0x0800d121
 800cb50:	2000068c 	.word	0x2000068c
 800cb54:	20000568 	.word	0x20000568
 800cb58:	20000060 	.word	0x20000060
 800cb5c:	20000688 	.word	0x20000688
 800cb60:	20000674 	.word	0x20000674
 800cb64:	2000066c 	.word	0x2000066c

0800cb68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cb68:	b480      	push	{r7}
 800cb6a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cb6c:	4b04      	ldr	r3, [pc, #16]	; (800cb80 <vTaskSuspendAll+0x18>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	3301      	adds	r3, #1
 800cb72:	4a03      	ldr	r2, [pc, #12]	; (800cb80 <vTaskSuspendAll+0x18>)
 800cb74:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cb76:	bf00      	nop
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr
 800cb80:	20000690 	.word	0x20000690

0800cb84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cb92:	4b42      	ldr	r3, [pc, #264]	; (800cc9c <xTaskResumeAll+0x118>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d10c      	bne.n	800cbb4 <xTaskResumeAll+0x30>
	__asm volatile
 800cb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9e:	b672      	cpsid	i
 800cba0:	f383 8811 	msr	BASEPRI, r3
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	b662      	cpsie	i
 800cbae:	603b      	str	r3, [r7, #0]
}
 800cbb0:	bf00      	nop
 800cbb2:	e7fe      	b.n	800cbb2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cbb4:	f000 feda 	bl	800d96c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cbb8:	4b38      	ldr	r3, [pc, #224]	; (800cc9c <xTaskResumeAll+0x118>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	4a37      	ldr	r2, [pc, #220]	; (800cc9c <xTaskResumeAll+0x118>)
 800cbc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbc2:	4b36      	ldr	r3, [pc, #216]	; (800cc9c <xTaskResumeAll+0x118>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d161      	bne.n	800cc8e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cbca:	4b35      	ldr	r3, [pc, #212]	; (800cca0 <xTaskResumeAll+0x11c>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d05d      	beq.n	800cc8e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cbd2:	e02e      	b.n	800cc32 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbd4:	4b33      	ldr	r3, [pc, #204]	; (800cca4 <xTaskResumeAll+0x120>)
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	3318      	adds	r3, #24
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7fe fe98 	bl	800b916 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	3304      	adds	r3, #4
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7fe fe93 	bl	800b916 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	409a      	lsls	r2, r3
 800cbf8:	4b2b      	ldr	r3, [pc, #172]	; (800cca8 <xTaskResumeAll+0x124>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	4a2a      	ldr	r2, [pc, #168]	; (800cca8 <xTaskResumeAll+0x124>)
 800cc00:	6013      	str	r3, [r2, #0]
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc06:	4613      	mov	r3, r2
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	4413      	add	r3, r2
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	4a27      	ldr	r2, [pc, #156]	; (800ccac <xTaskResumeAll+0x128>)
 800cc10:	441a      	add	r2, r3
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	3304      	adds	r3, #4
 800cc16:	4619      	mov	r1, r3
 800cc18:	4610      	mov	r0, r2
 800cc1a:	f7fe fe1f 	bl	800b85c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc22:	4b23      	ldr	r3, [pc, #140]	; (800ccb0 <xTaskResumeAll+0x12c>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d302      	bcc.n	800cc32 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cc2c:	4b21      	ldr	r3, [pc, #132]	; (800ccb4 <xTaskResumeAll+0x130>)
 800cc2e:	2201      	movs	r2, #1
 800cc30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc32:	4b1c      	ldr	r3, [pc, #112]	; (800cca4 <xTaskResumeAll+0x120>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d1cc      	bne.n	800cbd4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d001      	beq.n	800cc44 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cc40:	f000 fb2a 	bl	800d298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cc44:	4b1c      	ldr	r3, [pc, #112]	; (800ccb8 <xTaskResumeAll+0x134>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d010      	beq.n	800cc72 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cc50:	f000 f836 	bl	800ccc0 <xTaskIncrementTick>
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d002      	beq.n	800cc60 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800cc5a:	4b16      	ldr	r3, [pc, #88]	; (800ccb4 <xTaskResumeAll+0x130>)
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	3b01      	subs	r3, #1
 800cc64:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d1f1      	bne.n	800cc50 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800cc6c:	4b12      	ldr	r3, [pc, #72]	; (800ccb8 <xTaskResumeAll+0x134>)
 800cc6e:	2200      	movs	r2, #0
 800cc70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cc72:	4b10      	ldr	r3, [pc, #64]	; (800ccb4 <xTaskResumeAll+0x130>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d009      	beq.n	800cc8e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cc7e:	4b0f      	ldr	r3, [pc, #60]	; (800ccbc <xTaskResumeAll+0x138>)
 800cc80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc84:	601a      	str	r2, [r3, #0]
 800cc86:	f3bf 8f4f 	dsb	sy
 800cc8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc8e:	f000 fea1 	bl	800d9d4 <vPortExitCritical>

	return xAlreadyYielded;
 800cc92:	68bb      	ldr	r3, [r7, #8]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3710      	adds	r7, #16
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	20000690 	.word	0x20000690
 800cca0:	20000668 	.word	0x20000668
 800cca4:	20000628 	.word	0x20000628
 800cca8:	20000670 	.word	0x20000670
 800ccac:	2000056c 	.word	0x2000056c
 800ccb0:	20000568 	.word	0x20000568
 800ccb4:	2000067c 	.word	0x2000067c
 800ccb8:	20000678 	.word	0x20000678
 800ccbc:	e000ed04 	.word	0xe000ed04

0800ccc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b086      	sub	sp, #24
 800ccc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccca:	4b4f      	ldr	r3, [pc, #316]	; (800ce08 <xTaskIncrementTick+0x148>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	f040 808a 	bne.w	800cde8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ccd4:	4b4d      	ldr	r3, [pc, #308]	; (800ce0c <xTaskIncrementTick+0x14c>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ccdc:	4a4b      	ldr	r2, [pc, #300]	; (800ce0c <xTaskIncrementTick+0x14c>)
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d122      	bne.n	800cd2e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800cce8:	4b49      	ldr	r3, [pc, #292]	; (800ce10 <xTaskIncrementTick+0x150>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d00c      	beq.n	800cd0c <xTaskIncrementTick+0x4c>
	__asm volatile
 800ccf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf6:	b672      	cpsid	i
 800ccf8:	f383 8811 	msr	BASEPRI, r3
 800ccfc:	f3bf 8f6f 	isb	sy
 800cd00:	f3bf 8f4f 	dsb	sy
 800cd04:	b662      	cpsie	i
 800cd06:	603b      	str	r3, [r7, #0]
}
 800cd08:	bf00      	nop
 800cd0a:	e7fe      	b.n	800cd0a <xTaskIncrementTick+0x4a>
 800cd0c:	4b40      	ldr	r3, [pc, #256]	; (800ce10 <xTaskIncrementTick+0x150>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	60fb      	str	r3, [r7, #12]
 800cd12:	4b40      	ldr	r3, [pc, #256]	; (800ce14 <xTaskIncrementTick+0x154>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a3e      	ldr	r2, [pc, #248]	; (800ce10 <xTaskIncrementTick+0x150>)
 800cd18:	6013      	str	r3, [r2, #0]
 800cd1a:	4a3e      	ldr	r2, [pc, #248]	; (800ce14 <xTaskIncrementTick+0x154>)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6013      	str	r3, [r2, #0]
 800cd20:	4b3d      	ldr	r3, [pc, #244]	; (800ce18 <xTaskIncrementTick+0x158>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	3301      	adds	r3, #1
 800cd26:	4a3c      	ldr	r2, [pc, #240]	; (800ce18 <xTaskIncrementTick+0x158>)
 800cd28:	6013      	str	r3, [r2, #0]
 800cd2a:	f000 fab5 	bl	800d298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cd2e:	4b3b      	ldr	r3, [pc, #236]	; (800ce1c <xTaskIncrementTick+0x15c>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	693a      	ldr	r2, [r7, #16]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d348      	bcc.n	800cdca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd38:	4b35      	ldr	r3, [pc, #212]	; (800ce10 <xTaskIncrementTick+0x150>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d104      	bne.n	800cd4c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd42:	4b36      	ldr	r3, [pc, #216]	; (800ce1c <xTaskIncrementTick+0x15c>)
 800cd44:	f04f 32ff 	mov.w	r2, #4294967295
 800cd48:	601a      	str	r2, [r3, #0]
					break;
 800cd4a:	e03e      	b.n	800cdca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd4c:	4b30      	ldr	r3, [pc, #192]	; (800ce10 <xTaskIncrementTick+0x150>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cd5c:	693a      	ldr	r2, [r7, #16]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d203      	bcs.n	800cd6c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cd64:	4a2d      	ldr	r2, [pc, #180]	; (800ce1c <xTaskIncrementTick+0x15c>)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cd6a:	e02e      	b.n	800cdca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	3304      	adds	r3, #4
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fe fdd0 	bl	800b916 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d004      	beq.n	800cd88 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	3318      	adds	r3, #24
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7fe fdc7 	bl	800b916 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	409a      	lsls	r2, r3
 800cd90:	4b23      	ldr	r3, [pc, #140]	; (800ce20 <xTaskIncrementTick+0x160>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4313      	orrs	r3, r2
 800cd96:	4a22      	ldr	r2, [pc, #136]	; (800ce20 <xTaskIncrementTick+0x160>)
 800cd98:	6013      	str	r3, [r2, #0]
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd9e:	4613      	mov	r3, r2
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	4413      	add	r3, r2
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	4a1f      	ldr	r2, [pc, #124]	; (800ce24 <xTaskIncrementTick+0x164>)
 800cda8:	441a      	add	r2, r3
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	3304      	adds	r3, #4
 800cdae:	4619      	mov	r1, r3
 800cdb0:	4610      	mov	r0, r2
 800cdb2:	f7fe fd53 	bl	800b85c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdba:	4b1b      	ldr	r3, [pc, #108]	; (800ce28 <xTaskIncrementTick+0x168>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d3b9      	bcc.n	800cd38 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdc8:	e7b6      	b.n	800cd38 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cdca:	4b17      	ldr	r3, [pc, #92]	; (800ce28 <xTaskIncrementTick+0x168>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd0:	4914      	ldr	r1, [pc, #80]	; (800ce24 <xTaskIncrementTick+0x164>)
 800cdd2:	4613      	mov	r3, r2
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	4413      	add	r3, r2
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	440b      	add	r3, r1
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d907      	bls.n	800cdf2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800cde2:	2301      	movs	r3, #1
 800cde4:	617b      	str	r3, [r7, #20]
 800cde6:	e004      	b.n	800cdf2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cde8:	4b10      	ldr	r3, [pc, #64]	; (800ce2c <xTaskIncrementTick+0x16c>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	3301      	adds	r3, #1
 800cdee:	4a0f      	ldr	r2, [pc, #60]	; (800ce2c <xTaskIncrementTick+0x16c>)
 800cdf0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cdf2:	4b0f      	ldr	r3, [pc, #60]	; (800ce30 <xTaskIncrementTick+0x170>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d001      	beq.n	800cdfe <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cdfe:	697b      	ldr	r3, [r7, #20]
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3718      	adds	r7, #24
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	20000690 	.word	0x20000690
 800ce0c:	2000066c 	.word	0x2000066c
 800ce10:	20000620 	.word	0x20000620
 800ce14:	20000624 	.word	0x20000624
 800ce18:	20000680 	.word	0x20000680
 800ce1c:	20000688 	.word	0x20000688
 800ce20:	20000670 	.word	0x20000670
 800ce24:	2000056c 	.word	0x2000056c
 800ce28:	20000568 	.word	0x20000568
 800ce2c:	20000678 	.word	0x20000678
 800ce30:	2000067c 	.word	0x2000067c

0800ce34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ce34:	b480      	push	{r7}
 800ce36:	b087      	sub	sp, #28
 800ce38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ce3a:	4b2a      	ldr	r3, [pc, #168]	; (800cee4 <vTaskSwitchContext+0xb0>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d003      	beq.n	800ce4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ce42:	4b29      	ldr	r3, [pc, #164]	; (800cee8 <vTaskSwitchContext+0xb4>)
 800ce44:	2201      	movs	r2, #1
 800ce46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ce48:	e046      	b.n	800ced8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ce4a:	4b27      	ldr	r3, [pc, #156]	; (800cee8 <vTaskSwitchContext+0xb4>)
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce50:	4b26      	ldr	r3, [pc, #152]	; (800ceec <vTaskSwitchContext+0xb8>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	fab3 f383 	clz	r3, r3
 800ce5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ce5e:	7afb      	ldrb	r3, [r7, #11]
 800ce60:	f1c3 031f 	rsb	r3, r3, #31
 800ce64:	617b      	str	r3, [r7, #20]
 800ce66:	4922      	ldr	r1, [pc, #136]	; (800cef0 <vTaskSwitchContext+0xbc>)
 800ce68:	697a      	ldr	r2, [r7, #20]
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	009b      	lsls	r3, r3, #2
 800ce6e:	4413      	add	r3, r2
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	440b      	add	r3, r1
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d10c      	bne.n	800ce94 <vTaskSwitchContext+0x60>
	__asm volatile
 800ce7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7e:	b672      	cpsid	i
 800ce80:	f383 8811 	msr	BASEPRI, r3
 800ce84:	f3bf 8f6f 	isb	sy
 800ce88:	f3bf 8f4f 	dsb	sy
 800ce8c:	b662      	cpsie	i
 800ce8e:	607b      	str	r3, [r7, #4]
}
 800ce90:	bf00      	nop
 800ce92:	e7fe      	b.n	800ce92 <vTaskSwitchContext+0x5e>
 800ce94:	697a      	ldr	r2, [r7, #20]
 800ce96:	4613      	mov	r3, r2
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	4413      	add	r3, r2
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	4a14      	ldr	r2, [pc, #80]	; (800cef0 <vTaskSwitchContext+0xbc>)
 800cea0:	4413      	add	r3, r2
 800cea2:	613b      	str	r3, [r7, #16]
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	685a      	ldr	r2, [r3, #4]
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	605a      	str	r2, [r3, #4]
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	685a      	ldr	r2, [r3, #4]
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	3308      	adds	r3, #8
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d104      	bne.n	800cec4 <vTaskSwitchContext+0x90>
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	685a      	ldr	r2, [r3, #4]
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	605a      	str	r2, [r3, #4]
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	4a0a      	ldr	r2, [pc, #40]	; (800cef4 <vTaskSwitchContext+0xc0>)
 800cecc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cece:	4b09      	ldr	r3, [pc, #36]	; (800cef4 <vTaskSwitchContext+0xc0>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	334c      	adds	r3, #76	; 0x4c
 800ced4:	4a08      	ldr	r2, [pc, #32]	; (800cef8 <vTaskSwitchContext+0xc4>)
 800ced6:	6013      	str	r3, [r2, #0]
}
 800ced8:	bf00      	nop
 800ceda:	371c      	adds	r7, #28
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr
 800cee4:	20000690 	.word	0x20000690
 800cee8:	2000067c 	.word	0x2000067c
 800ceec:	20000670 	.word	0x20000670
 800cef0:	2000056c 	.word	0x2000056c
 800cef4:	20000568 	.word	0x20000568
 800cef8:	20000060 	.word	0x20000060

0800cefc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d10c      	bne.n	800cf26 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800cf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf10:	b672      	cpsid	i
 800cf12:	f383 8811 	msr	BASEPRI, r3
 800cf16:	f3bf 8f6f 	isb	sy
 800cf1a:	f3bf 8f4f 	dsb	sy
 800cf1e:	b662      	cpsie	i
 800cf20:	60fb      	str	r3, [r7, #12]
}
 800cf22:	bf00      	nop
 800cf24:	e7fe      	b.n	800cf24 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf26:	4b07      	ldr	r3, [pc, #28]	; (800cf44 <vTaskPlaceOnEventList+0x48>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	3318      	adds	r3, #24
 800cf2c:	4619      	mov	r1, r3
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f7fe fcb8 	bl	800b8a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cf34:	2101      	movs	r1, #1
 800cf36:	6838      	ldr	r0, [r7, #0]
 800cf38:	f000 fba8 	bl	800d68c <prvAddCurrentTaskToDelayedList>
}
 800cf3c:	bf00      	nop
 800cf3e:	3710      	adds	r7, #16
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	20000568 	.word	0x20000568

0800cf48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b086      	sub	sp, #24
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d10c      	bne.n	800cf78 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800cf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf62:	b672      	cpsid	i
 800cf64:	f383 8811 	msr	BASEPRI, r3
 800cf68:	f3bf 8f6f 	isb	sy
 800cf6c:	f3bf 8f4f 	dsb	sy
 800cf70:	b662      	cpsie	i
 800cf72:	60fb      	str	r3, [r7, #12]
}
 800cf74:	bf00      	nop
 800cf76:	e7fe      	b.n	800cf76 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	3318      	adds	r3, #24
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7fe fcca 	bl	800b916 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf82:	4b1d      	ldr	r3, [pc, #116]	; (800cff8 <xTaskRemoveFromEventList+0xb0>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d11c      	bne.n	800cfc4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	3304      	adds	r3, #4
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7fe fcc1 	bl	800b916 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf98:	2201      	movs	r2, #1
 800cf9a:	409a      	lsls	r2, r3
 800cf9c:	4b17      	ldr	r3, [pc, #92]	; (800cffc <xTaskRemoveFromEventList+0xb4>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	4a16      	ldr	r2, [pc, #88]	; (800cffc <xTaskRemoveFromEventList+0xb4>)
 800cfa4:	6013      	str	r3, [r2, #0]
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfaa:	4613      	mov	r3, r2
 800cfac:	009b      	lsls	r3, r3, #2
 800cfae:	4413      	add	r3, r2
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	4a13      	ldr	r2, [pc, #76]	; (800d000 <xTaskRemoveFromEventList+0xb8>)
 800cfb4:	441a      	add	r2, r3
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	3304      	adds	r3, #4
 800cfba:	4619      	mov	r1, r3
 800cfbc:	4610      	mov	r0, r2
 800cfbe:	f7fe fc4d 	bl	800b85c <vListInsertEnd>
 800cfc2:	e005      	b.n	800cfd0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	3318      	adds	r3, #24
 800cfc8:	4619      	mov	r1, r3
 800cfca:	480e      	ldr	r0, [pc, #56]	; (800d004 <xTaskRemoveFromEventList+0xbc>)
 800cfcc:	f7fe fc46 	bl	800b85c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd4:	4b0c      	ldr	r3, [pc, #48]	; (800d008 <xTaskRemoveFromEventList+0xc0>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d905      	bls.n	800cfea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cfe2:	4b0a      	ldr	r3, [pc, #40]	; (800d00c <xTaskRemoveFromEventList+0xc4>)
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	601a      	str	r2, [r3, #0]
 800cfe8:	e001      	b.n	800cfee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800cfea:	2300      	movs	r3, #0
 800cfec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cfee:	697b      	ldr	r3, [r7, #20]
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3718      	adds	r7, #24
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	20000690 	.word	0x20000690
 800cffc:	20000670 	.word	0x20000670
 800d000:	2000056c 	.word	0x2000056c
 800d004:	20000628 	.word	0x20000628
 800d008:	20000568 	.word	0x20000568
 800d00c:	2000067c 	.word	0x2000067c

0800d010 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d018:	4b06      	ldr	r3, [pc, #24]	; (800d034 <vTaskInternalSetTimeOutState+0x24>)
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d020:	4b05      	ldr	r3, [pc, #20]	; (800d038 <vTaskInternalSetTimeOutState+0x28>)
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	605a      	str	r2, [r3, #4]
}
 800d028:	bf00      	nop
 800d02a:	370c      	adds	r7, #12
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr
 800d034:	20000680 	.word	0x20000680
 800d038:	2000066c 	.word	0x2000066c

0800d03c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b088      	sub	sp, #32
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d10c      	bne.n	800d066 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800d04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d050:	b672      	cpsid	i
 800d052:	f383 8811 	msr	BASEPRI, r3
 800d056:	f3bf 8f6f 	isb	sy
 800d05a:	f3bf 8f4f 	dsb	sy
 800d05e:	b662      	cpsie	i
 800d060:	613b      	str	r3, [r7, #16]
}
 800d062:	bf00      	nop
 800d064:	e7fe      	b.n	800d064 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d10c      	bne.n	800d086 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800d06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d070:	b672      	cpsid	i
 800d072:	f383 8811 	msr	BASEPRI, r3
 800d076:	f3bf 8f6f 	isb	sy
 800d07a:	f3bf 8f4f 	dsb	sy
 800d07e:	b662      	cpsie	i
 800d080:	60fb      	str	r3, [r7, #12]
}
 800d082:	bf00      	nop
 800d084:	e7fe      	b.n	800d084 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800d086:	f000 fc71 	bl	800d96c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d08a:	4b1d      	ldr	r3, [pc, #116]	; (800d100 <xTaskCheckForTimeOut+0xc4>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	69ba      	ldr	r2, [r7, #24]
 800d096:	1ad3      	subs	r3, r2, r3
 800d098:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0a2:	d102      	bne.n	800d0aa <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	61fb      	str	r3, [r7, #28]
 800d0a8:	e023      	b.n	800d0f2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	4b15      	ldr	r3, [pc, #84]	; (800d104 <xTaskCheckForTimeOut+0xc8>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d007      	beq.n	800d0c6 <xTaskCheckForTimeOut+0x8a>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	69ba      	ldr	r2, [r7, #24]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d302      	bcc.n	800d0c6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	61fb      	str	r3, [r7, #28]
 800d0c4:	e015      	b.n	800d0f2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	697a      	ldr	r2, [r7, #20]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d20b      	bcs.n	800d0e8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	1ad2      	subs	r2, r2, r3
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f7ff ff97 	bl	800d010 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	61fb      	str	r3, [r7, #28]
 800d0e6:	e004      	b.n	800d0f2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d0f2:	f000 fc6f 	bl	800d9d4 <vPortExitCritical>

	return xReturn;
 800d0f6:	69fb      	ldr	r3, [r7, #28]
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3720      	adds	r7, #32
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}
 800d100:	2000066c 	.word	0x2000066c
 800d104:	20000680 	.word	0x20000680

0800d108 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d108:	b480      	push	{r7}
 800d10a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d10c:	4b03      	ldr	r3, [pc, #12]	; (800d11c <vTaskMissedYield+0x14>)
 800d10e:	2201      	movs	r2, #1
 800d110:	601a      	str	r2, [r3, #0]
}
 800d112:	bf00      	nop
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr
 800d11c:	2000067c 	.word	0x2000067c

0800d120 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d128:	f000 f852 	bl	800d1d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d12c:	4b06      	ldr	r3, [pc, #24]	; (800d148 <prvIdleTask+0x28>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2b01      	cmp	r3, #1
 800d132:	d9f9      	bls.n	800d128 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d134:	4b05      	ldr	r3, [pc, #20]	; (800d14c <prvIdleTask+0x2c>)
 800d136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d13a:	601a      	str	r2, [r3, #0]
 800d13c:	f3bf 8f4f 	dsb	sy
 800d140:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d144:	e7f0      	b.n	800d128 <prvIdleTask+0x8>
 800d146:	bf00      	nop
 800d148:	2000056c 	.word	0x2000056c
 800d14c:	e000ed04 	.word	0xe000ed04

0800d150 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d156:	2300      	movs	r3, #0
 800d158:	607b      	str	r3, [r7, #4]
 800d15a:	e00c      	b.n	800d176 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	4613      	mov	r3, r2
 800d160:	009b      	lsls	r3, r3, #2
 800d162:	4413      	add	r3, r2
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	4a12      	ldr	r2, [pc, #72]	; (800d1b0 <prvInitialiseTaskLists+0x60>)
 800d168:	4413      	add	r3, r2
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7fe fb49 	bl	800b802 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	3301      	adds	r3, #1
 800d174:	607b      	str	r3, [r7, #4]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2b06      	cmp	r3, #6
 800d17a:	d9ef      	bls.n	800d15c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d17c:	480d      	ldr	r0, [pc, #52]	; (800d1b4 <prvInitialiseTaskLists+0x64>)
 800d17e:	f7fe fb40 	bl	800b802 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d182:	480d      	ldr	r0, [pc, #52]	; (800d1b8 <prvInitialiseTaskLists+0x68>)
 800d184:	f7fe fb3d 	bl	800b802 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d188:	480c      	ldr	r0, [pc, #48]	; (800d1bc <prvInitialiseTaskLists+0x6c>)
 800d18a:	f7fe fb3a 	bl	800b802 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d18e:	480c      	ldr	r0, [pc, #48]	; (800d1c0 <prvInitialiseTaskLists+0x70>)
 800d190:	f7fe fb37 	bl	800b802 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d194:	480b      	ldr	r0, [pc, #44]	; (800d1c4 <prvInitialiseTaskLists+0x74>)
 800d196:	f7fe fb34 	bl	800b802 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d19a:	4b0b      	ldr	r3, [pc, #44]	; (800d1c8 <prvInitialiseTaskLists+0x78>)
 800d19c:	4a05      	ldr	r2, [pc, #20]	; (800d1b4 <prvInitialiseTaskLists+0x64>)
 800d19e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d1a0:	4b0a      	ldr	r3, [pc, #40]	; (800d1cc <prvInitialiseTaskLists+0x7c>)
 800d1a2:	4a05      	ldr	r2, [pc, #20]	; (800d1b8 <prvInitialiseTaskLists+0x68>)
 800d1a4:	601a      	str	r2, [r3, #0]
}
 800d1a6:	bf00      	nop
 800d1a8:	3708      	adds	r7, #8
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	2000056c 	.word	0x2000056c
 800d1b4:	200005f8 	.word	0x200005f8
 800d1b8:	2000060c 	.word	0x2000060c
 800d1bc:	20000628 	.word	0x20000628
 800d1c0:	2000063c 	.word	0x2000063c
 800d1c4:	20000654 	.word	0x20000654
 800d1c8:	20000620 	.word	0x20000620
 800d1cc:	20000624 	.word	0x20000624

0800d1d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1d6:	e019      	b.n	800d20c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d1d8:	f000 fbc8 	bl	800d96c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1dc:	4b10      	ldr	r3, [pc, #64]	; (800d220 <prvCheckTasksWaitingTermination+0x50>)
 800d1de:	68db      	ldr	r3, [r3, #12]
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	3304      	adds	r3, #4
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7fe fb94 	bl	800b916 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d1ee:	4b0d      	ldr	r3, [pc, #52]	; (800d224 <prvCheckTasksWaitingTermination+0x54>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	3b01      	subs	r3, #1
 800d1f4:	4a0b      	ldr	r2, [pc, #44]	; (800d224 <prvCheckTasksWaitingTermination+0x54>)
 800d1f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d1f8:	4b0b      	ldr	r3, [pc, #44]	; (800d228 <prvCheckTasksWaitingTermination+0x58>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	4a0a      	ldr	r2, [pc, #40]	; (800d228 <prvCheckTasksWaitingTermination+0x58>)
 800d200:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d202:	f000 fbe7 	bl	800d9d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 f810 	bl	800d22c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d20c:	4b06      	ldr	r3, [pc, #24]	; (800d228 <prvCheckTasksWaitingTermination+0x58>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d1e1      	bne.n	800d1d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d214:	bf00      	nop
 800d216:	bf00      	nop
 800d218:	3708      	adds	r7, #8
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop
 800d220:	2000063c 	.word	0x2000063c
 800d224:	20000668 	.word	0x20000668
 800d228:	20000650 	.word	0x20000650

0800d22c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	334c      	adds	r3, #76	; 0x4c
 800d238:	4618      	mov	r0, r3
 800d23a:	f000 ff51 	bl	800e0e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d244:	2b00      	cmp	r3, #0
 800d246:	d108      	bne.n	800d25a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d24c:	4618      	mov	r0, r3
 800d24e:	f000 fd83 	bl	800dd58 <vPortFree>
				vPortFree( pxTCB );
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f000 fd80 	bl	800dd58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d258:	e01a      	b.n	800d290 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d260:	2b01      	cmp	r3, #1
 800d262:	d103      	bne.n	800d26c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f000 fd77 	bl	800dd58 <vPortFree>
	}
 800d26a:	e011      	b.n	800d290 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d272:	2b02      	cmp	r3, #2
 800d274:	d00c      	beq.n	800d290 <prvDeleteTCB+0x64>
	__asm volatile
 800d276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27a:	b672      	cpsid	i
 800d27c:	f383 8811 	msr	BASEPRI, r3
 800d280:	f3bf 8f6f 	isb	sy
 800d284:	f3bf 8f4f 	dsb	sy
 800d288:	b662      	cpsie	i
 800d28a:	60fb      	str	r3, [r7, #12]
}
 800d28c:	bf00      	nop
 800d28e:	e7fe      	b.n	800d28e <prvDeleteTCB+0x62>
	}
 800d290:	bf00      	nop
 800d292:	3710      	adds	r7, #16
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d298:	b480      	push	{r7}
 800d29a:	b083      	sub	sp, #12
 800d29c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d29e:	4b0c      	ldr	r3, [pc, #48]	; (800d2d0 <prvResetNextTaskUnblockTime+0x38>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d104      	bne.n	800d2b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d2a8:	4b0a      	ldr	r3, [pc, #40]	; (800d2d4 <prvResetNextTaskUnblockTime+0x3c>)
 800d2aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d2b0:	e008      	b.n	800d2c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2b2:	4b07      	ldr	r3, [pc, #28]	; (800d2d0 <prvResetNextTaskUnblockTime+0x38>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	4a04      	ldr	r2, [pc, #16]	; (800d2d4 <prvResetNextTaskUnblockTime+0x3c>)
 800d2c2:	6013      	str	r3, [r2, #0]
}
 800d2c4:	bf00      	nop
 800d2c6:	370c      	adds	r7, #12
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr
 800d2d0:	20000620 	.word	0x20000620
 800d2d4:	20000688 	.word	0x20000688

0800d2d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d2d8:	b480      	push	{r7}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d2de:	4b0b      	ldr	r3, [pc, #44]	; (800d30c <xTaskGetSchedulerState+0x34>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d102      	bne.n	800d2ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	607b      	str	r3, [r7, #4]
 800d2ea:	e008      	b.n	800d2fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2ec:	4b08      	ldr	r3, [pc, #32]	; (800d310 <xTaskGetSchedulerState+0x38>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d102      	bne.n	800d2fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d2f4:	2302      	movs	r3, #2
 800d2f6:	607b      	str	r3, [r7, #4]
 800d2f8:	e001      	b.n	800d2fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d2fe:	687b      	ldr	r3, [r7, #4]
	}
 800d300:	4618      	mov	r0, r3
 800d302:	370c      	adds	r7, #12
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr
 800d30c:	20000674 	.word	0x20000674
 800d310:	20000690 	.word	0x20000690

0800d314 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d320:	2300      	movs	r3, #0
 800d322:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d069      	beq.n	800d3fe <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d32e:	4b36      	ldr	r3, [pc, #216]	; (800d408 <xTaskPriorityInherit+0xf4>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d334:	429a      	cmp	r2, r3
 800d336:	d259      	bcs.n	800d3ec <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	699b      	ldr	r3, [r3, #24]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	db06      	blt.n	800d34e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d340:	4b31      	ldr	r3, [pc, #196]	; (800d408 <xTaskPriorityInherit+0xf4>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d346:	f1c3 0207 	rsb	r2, r3, #7
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	6959      	ldr	r1, [r3, #20]
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d356:	4613      	mov	r3, r2
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	4413      	add	r3, r2
 800d35c:	009b      	lsls	r3, r3, #2
 800d35e:	4a2b      	ldr	r2, [pc, #172]	; (800d40c <xTaskPriorityInherit+0xf8>)
 800d360:	4413      	add	r3, r2
 800d362:	4299      	cmp	r1, r3
 800d364:	d13a      	bne.n	800d3dc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	3304      	adds	r3, #4
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7fe fad3 	bl	800b916 <uxListRemove>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d115      	bne.n	800d3a2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d37a:	4924      	ldr	r1, [pc, #144]	; (800d40c <xTaskPriorityInherit+0xf8>)
 800d37c:	4613      	mov	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	4413      	add	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	440b      	add	r3, r1
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d10a      	bne.n	800d3a2 <xTaskPriorityInherit+0x8e>
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d390:	2201      	movs	r2, #1
 800d392:	fa02 f303 	lsl.w	r3, r2, r3
 800d396:	43da      	mvns	r2, r3
 800d398:	4b1d      	ldr	r3, [pc, #116]	; (800d410 <xTaskPriorityInherit+0xfc>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4013      	ands	r3, r2
 800d39e:	4a1c      	ldr	r2, [pc, #112]	; (800d410 <xTaskPriorityInherit+0xfc>)
 800d3a0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d3a2:	4b19      	ldr	r3, [pc, #100]	; (800d408 <xTaskPriorityInherit+0xf4>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	409a      	lsls	r2, r3
 800d3b4:	4b16      	ldr	r3, [pc, #88]	; (800d410 <xTaskPriorityInherit+0xfc>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	4a15      	ldr	r2, [pc, #84]	; (800d410 <xTaskPriorityInherit+0xfc>)
 800d3bc:	6013      	str	r3, [r2, #0]
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	009b      	lsls	r3, r3, #2
 800d3c6:	4413      	add	r3, r2
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	4a10      	ldr	r2, [pc, #64]	; (800d40c <xTaskPriorityInherit+0xf8>)
 800d3cc:	441a      	add	r2, r3
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	3304      	adds	r3, #4
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	4610      	mov	r0, r2
 800d3d6:	f7fe fa41 	bl	800b85c <vListInsertEnd>
 800d3da:	e004      	b.n	800d3e6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d3dc:	4b0a      	ldr	r3, [pc, #40]	; (800d408 <xTaskPriorityInherit+0xf4>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	60fb      	str	r3, [r7, #12]
 800d3ea:	e008      	b.n	800d3fe <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3f0:	4b05      	ldr	r3, [pc, #20]	; (800d408 <xTaskPriorityInherit+0xf4>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d201      	bcs.n	800d3fe <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
	}
 800d400:	4618      	mov	r0, r3
 800d402:	3710      	adds	r7, #16
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	20000568 	.word	0x20000568
 800d40c:	2000056c 	.word	0x2000056c
 800d410:	20000670 	.word	0x20000670

0800d414 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d414:	b580      	push	{r7, lr}
 800d416:	b086      	sub	sp, #24
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d420:	2300      	movs	r3, #0
 800d422:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d072      	beq.n	800d510 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d42a:	4b3c      	ldr	r3, [pc, #240]	; (800d51c <xTaskPriorityDisinherit+0x108>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	693a      	ldr	r2, [r7, #16]
 800d430:	429a      	cmp	r2, r3
 800d432:	d00c      	beq.n	800d44e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d438:	b672      	cpsid	i
 800d43a:	f383 8811 	msr	BASEPRI, r3
 800d43e:	f3bf 8f6f 	isb	sy
 800d442:	f3bf 8f4f 	dsb	sy
 800d446:	b662      	cpsie	i
 800d448:	60fb      	str	r3, [r7, #12]
}
 800d44a:	bf00      	nop
 800d44c:	e7fe      	b.n	800d44c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d452:	2b00      	cmp	r3, #0
 800d454:	d10c      	bne.n	800d470 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45a:	b672      	cpsid	i
 800d45c:	f383 8811 	msr	BASEPRI, r3
 800d460:	f3bf 8f6f 	isb	sy
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	b662      	cpsie	i
 800d46a:	60bb      	str	r3, [r7, #8]
}
 800d46c:	bf00      	nop
 800d46e:	e7fe      	b.n	800d46e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d474:	1e5a      	subs	r2, r3, #1
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d482:	429a      	cmp	r2, r3
 800d484:	d044      	beq.n	800d510 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d140      	bne.n	800d510 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	3304      	adds	r3, #4
 800d492:	4618      	mov	r0, r3
 800d494:	f7fe fa3f 	bl	800b916 <uxListRemove>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d115      	bne.n	800d4ca <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4a2:	491f      	ldr	r1, [pc, #124]	; (800d520 <xTaskPriorityDisinherit+0x10c>)
 800d4a4:	4613      	mov	r3, r2
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	4413      	add	r3, r2
 800d4aa:	009b      	lsls	r3, r3, #2
 800d4ac:	440b      	add	r3, r1
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d10a      	bne.n	800d4ca <xTaskPriorityDisinherit+0xb6>
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d4be:	43da      	mvns	r2, r3
 800d4c0:	4b18      	ldr	r3, [pc, #96]	; (800d524 <xTaskPriorityDisinherit+0x110>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4013      	ands	r3, r2
 800d4c6:	4a17      	ldr	r2, [pc, #92]	; (800d524 <xTaskPriorityDisinherit+0x110>)
 800d4c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d6:	f1c3 0207 	rsb	r2, r3, #7
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	409a      	lsls	r2, r3
 800d4e6:	4b0f      	ldr	r3, [pc, #60]	; (800d524 <xTaskPriorityDisinherit+0x110>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	4a0d      	ldr	r2, [pc, #52]	; (800d524 <xTaskPriorityDisinherit+0x110>)
 800d4ee:	6013      	str	r3, [r2, #0]
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4f4:	4613      	mov	r3, r2
 800d4f6:	009b      	lsls	r3, r3, #2
 800d4f8:	4413      	add	r3, r2
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	4a08      	ldr	r2, [pc, #32]	; (800d520 <xTaskPriorityDisinherit+0x10c>)
 800d4fe:	441a      	add	r2, r3
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	3304      	adds	r3, #4
 800d504:	4619      	mov	r1, r3
 800d506:	4610      	mov	r0, r2
 800d508:	f7fe f9a8 	bl	800b85c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d50c:	2301      	movs	r3, #1
 800d50e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d510:	697b      	ldr	r3, [r7, #20]
	}
 800d512:	4618      	mov	r0, r3
 800d514:	3718      	adds	r7, #24
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	20000568 	.word	0x20000568
 800d520:	2000056c 	.word	0x2000056c
 800d524:	20000670 	.word	0x20000670

0800d528 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b088      	sub	sp, #32
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d536:	2301      	movs	r3, #1
 800d538:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	f000 8087 	beq.w	800d650 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d542:	69bb      	ldr	r3, [r7, #24]
 800d544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d546:	2b00      	cmp	r3, #0
 800d548:	d10c      	bne.n	800d564 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800d54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54e:	b672      	cpsid	i
 800d550:	f383 8811 	msr	BASEPRI, r3
 800d554:	f3bf 8f6f 	isb	sy
 800d558:	f3bf 8f4f 	dsb	sy
 800d55c:	b662      	cpsie	i
 800d55e:	60fb      	str	r3, [r7, #12]
}
 800d560:	bf00      	nop
 800d562:	e7fe      	b.n	800d562 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d564:	69bb      	ldr	r3, [r7, #24]
 800d566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d568:	683a      	ldr	r2, [r7, #0]
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d902      	bls.n	800d574 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	61fb      	str	r3, [r7, #28]
 800d572:	e002      	b.n	800d57a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d574:	69bb      	ldr	r3, [r7, #24]
 800d576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d578:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d57a:	69bb      	ldr	r3, [r7, #24]
 800d57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d57e:	69fa      	ldr	r2, [r7, #28]
 800d580:	429a      	cmp	r2, r3
 800d582:	d065      	beq.n	800d650 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d584:	69bb      	ldr	r3, [r7, #24]
 800d586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d588:	697a      	ldr	r2, [r7, #20]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d160      	bne.n	800d650 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d58e:	4b32      	ldr	r3, [pc, #200]	; (800d658 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	69ba      	ldr	r2, [r7, #24]
 800d594:	429a      	cmp	r2, r3
 800d596:	d10c      	bne.n	800d5b2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800d598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d59c:	b672      	cpsid	i
 800d59e:	f383 8811 	msr	BASEPRI, r3
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	f3bf 8f4f 	dsb	sy
 800d5aa:	b662      	cpsie	i
 800d5ac:	60bb      	str	r3, [r7, #8]
}
 800d5ae:	bf00      	nop
 800d5b0:	e7fe      	b.n	800d5b0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d5b2:	69bb      	ldr	r3, [r7, #24]
 800d5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	69fa      	ldr	r2, [r7, #28]
 800d5bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	699b      	ldr	r3, [r3, #24]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	db04      	blt.n	800d5d0 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5c6:	69fb      	ldr	r3, [r7, #28]
 800d5c8:	f1c3 0207 	rsb	r2, r3, #7
 800d5cc:	69bb      	ldr	r3, [r7, #24]
 800d5ce:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	6959      	ldr	r1, [r3, #20]
 800d5d4:	693a      	ldr	r2, [r7, #16]
 800d5d6:	4613      	mov	r3, r2
 800d5d8:	009b      	lsls	r3, r3, #2
 800d5da:	4413      	add	r3, r2
 800d5dc:	009b      	lsls	r3, r3, #2
 800d5de:	4a1f      	ldr	r2, [pc, #124]	; (800d65c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d5e0:	4413      	add	r3, r2
 800d5e2:	4299      	cmp	r1, r3
 800d5e4:	d134      	bne.n	800d650 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	3304      	adds	r3, #4
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7fe f993 	bl	800b916 <uxListRemove>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d115      	bne.n	800d622 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5fa:	4918      	ldr	r1, [pc, #96]	; (800d65c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d5fc:	4613      	mov	r3, r2
 800d5fe:	009b      	lsls	r3, r3, #2
 800d600:	4413      	add	r3, r2
 800d602:	009b      	lsls	r3, r3, #2
 800d604:	440b      	add	r3, r1
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d10a      	bne.n	800d622 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800d60c:	69bb      	ldr	r3, [r7, #24]
 800d60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d610:	2201      	movs	r2, #1
 800d612:	fa02 f303 	lsl.w	r3, r2, r3
 800d616:	43da      	mvns	r2, r3
 800d618:	4b11      	ldr	r3, [pc, #68]	; (800d660 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4013      	ands	r3, r2
 800d61e:	4a10      	ldr	r2, [pc, #64]	; (800d660 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d620:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d626:	2201      	movs	r2, #1
 800d628:	409a      	lsls	r2, r3
 800d62a:	4b0d      	ldr	r3, [pc, #52]	; (800d660 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	4313      	orrs	r3, r2
 800d630:	4a0b      	ldr	r2, [pc, #44]	; (800d660 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d632:	6013      	str	r3, [r2, #0]
 800d634:	69bb      	ldr	r3, [r7, #24]
 800d636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d638:	4613      	mov	r3, r2
 800d63a:	009b      	lsls	r3, r3, #2
 800d63c:	4413      	add	r3, r2
 800d63e:	009b      	lsls	r3, r3, #2
 800d640:	4a06      	ldr	r2, [pc, #24]	; (800d65c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d642:	441a      	add	r2, r3
 800d644:	69bb      	ldr	r3, [r7, #24]
 800d646:	3304      	adds	r3, #4
 800d648:	4619      	mov	r1, r3
 800d64a:	4610      	mov	r0, r2
 800d64c:	f7fe f906 	bl	800b85c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d650:	bf00      	nop
 800d652:	3720      	adds	r7, #32
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	20000568 	.word	0x20000568
 800d65c:	2000056c 	.word	0x2000056c
 800d660:	20000670 	.word	0x20000670

0800d664 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d664:	b480      	push	{r7}
 800d666:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d668:	4b07      	ldr	r3, [pc, #28]	; (800d688 <pvTaskIncrementMutexHeldCount+0x24>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d004      	beq.n	800d67a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d670:	4b05      	ldr	r3, [pc, #20]	; (800d688 <pvTaskIncrementMutexHeldCount+0x24>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d676:	3201      	adds	r2, #1
 800d678:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d67a:	4b03      	ldr	r3, [pc, #12]	; (800d688 <pvTaskIncrementMutexHeldCount+0x24>)
 800d67c:	681b      	ldr	r3, [r3, #0]
	}
 800d67e:	4618      	mov	r0, r3
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr
 800d688:	20000568 	.word	0x20000568

0800d68c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b084      	sub	sp, #16
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d696:	4b29      	ldr	r3, [pc, #164]	; (800d73c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d69c:	4b28      	ldr	r3, [pc, #160]	; (800d740 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	3304      	adds	r3, #4
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7fe f937 	bl	800b916 <uxListRemove>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d10b      	bne.n	800d6c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d6ae:	4b24      	ldr	r3, [pc, #144]	; (800d740 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b4:	2201      	movs	r2, #1
 800d6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d6ba:	43da      	mvns	r2, r3
 800d6bc:	4b21      	ldr	r3, [pc, #132]	; (800d744 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4013      	ands	r3, r2
 800d6c2:	4a20      	ldr	r2, [pc, #128]	; (800d744 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d6c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6cc:	d10a      	bne.n	800d6e4 <prvAddCurrentTaskToDelayedList+0x58>
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d007      	beq.n	800d6e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6d4:	4b1a      	ldr	r3, [pc, #104]	; (800d740 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	3304      	adds	r3, #4
 800d6da:	4619      	mov	r1, r3
 800d6dc:	481a      	ldr	r0, [pc, #104]	; (800d748 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d6de:	f7fe f8bd 	bl	800b85c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d6e2:	e026      	b.n	800d732 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d6e4:	68fa      	ldr	r2, [r7, #12]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d6ec:	4b14      	ldr	r3, [pc, #80]	; (800d740 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	68ba      	ldr	r2, [r7, #8]
 800d6f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d6f4:	68ba      	ldr	r2, [r7, #8]
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d209      	bcs.n	800d710 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6fc:	4b13      	ldr	r3, [pc, #76]	; (800d74c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d6fe:	681a      	ldr	r2, [r3, #0]
 800d700:	4b0f      	ldr	r3, [pc, #60]	; (800d740 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	3304      	adds	r3, #4
 800d706:	4619      	mov	r1, r3
 800d708:	4610      	mov	r0, r2
 800d70a:	f7fe f8cb 	bl	800b8a4 <vListInsert>
}
 800d70e:	e010      	b.n	800d732 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d710:	4b0f      	ldr	r3, [pc, #60]	; (800d750 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d712:	681a      	ldr	r2, [r3, #0]
 800d714:	4b0a      	ldr	r3, [pc, #40]	; (800d740 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	3304      	adds	r3, #4
 800d71a:	4619      	mov	r1, r3
 800d71c:	4610      	mov	r0, r2
 800d71e:	f7fe f8c1 	bl	800b8a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d722:	4b0c      	ldr	r3, [pc, #48]	; (800d754 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	68ba      	ldr	r2, [r7, #8]
 800d728:	429a      	cmp	r2, r3
 800d72a:	d202      	bcs.n	800d732 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d72c:	4a09      	ldr	r2, [pc, #36]	; (800d754 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	6013      	str	r3, [r2, #0]
}
 800d732:	bf00      	nop
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	2000066c 	.word	0x2000066c
 800d740:	20000568 	.word	0x20000568
 800d744:	20000670 	.word	0x20000670
 800d748:	20000654 	.word	0x20000654
 800d74c:	20000624 	.word	0x20000624
 800d750:	20000620 	.word	0x20000620
 800d754:	20000688 	.word	0x20000688

0800d758 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d758:	b480      	push	{r7}
 800d75a:	b085      	sub	sp, #20
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	60b9      	str	r1, [r7, #8]
 800d762:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	3b04      	subs	r3, #4
 800d768:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	3b04      	subs	r3, #4
 800d776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	f023 0201 	bic.w	r2, r3, #1
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	3b04      	subs	r3, #4
 800d786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d788:	4a0c      	ldr	r2, [pc, #48]	; (800d7bc <pxPortInitialiseStack+0x64>)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	3b14      	subs	r3, #20
 800d792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	3b04      	subs	r3, #4
 800d79e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f06f 0202 	mvn.w	r2, #2
 800d7a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	3b20      	subs	r3, #32
 800d7ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3714      	adds	r7, #20
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr
 800d7bc:	0800d7c1 	.word	0x0800d7c1

0800d7c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b085      	sub	sp, #20
 800d7c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d7ca:	4b14      	ldr	r3, [pc, #80]	; (800d81c <prvTaskExitError+0x5c>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d2:	d00c      	beq.n	800d7ee <prvTaskExitError+0x2e>
	__asm volatile
 800d7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d8:	b672      	cpsid	i
 800d7da:	f383 8811 	msr	BASEPRI, r3
 800d7de:	f3bf 8f6f 	isb	sy
 800d7e2:	f3bf 8f4f 	dsb	sy
 800d7e6:	b662      	cpsie	i
 800d7e8:	60fb      	str	r3, [r7, #12]
}
 800d7ea:	bf00      	nop
 800d7ec:	e7fe      	b.n	800d7ec <prvTaskExitError+0x2c>
	__asm volatile
 800d7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f2:	b672      	cpsid	i
 800d7f4:	f383 8811 	msr	BASEPRI, r3
 800d7f8:	f3bf 8f6f 	isb	sy
 800d7fc:	f3bf 8f4f 	dsb	sy
 800d800:	b662      	cpsie	i
 800d802:	60bb      	str	r3, [r7, #8]
}
 800d804:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d806:	bf00      	nop
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d0fc      	beq.n	800d808 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d80e:	bf00      	nop
 800d810:	bf00      	nop
 800d812:	3714      	adds	r7, #20
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr
 800d81c:	2000005c 	.word	0x2000005c

0800d820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d820:	4b07      	ldr	r3, [pc, #28]	; (800d840 <pxCurrentTCBConst2>)
 800d822:	6819      	ldr	r1, [r3, #0]
 800d824:	6808      	ldr	r0, [r1, #0]
 800d826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82a:	f380 8809 	msr	PSP, r0
 800d82e:	f3bf 8f6f 	isb	sy
 800d832:	f04f 0000 	mov.w	r0, #0
 800d836:	f380 8811 	msr	BASEPRI, r0
 800d83a:	4770      	bx	lr
 800d83c:	f3af 8000 	nop.w

0800d840 <pxCurrentTCBConst2>:
 800d840:	20000568 	.word	0x20000568
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d844:	bf00      	nop
 800d846:	bf00      	nop

0800d848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d848:	4808      	ldr	r0, [pc, #32]	; (800d86c <prvPortStartFirstTask+0x24>)
 800d84a:	6800      	ldr	r0, [r0, #0]
 800d84c:	6800      	ldr	r0, [r0, #0]
 800d84e:	f380 8808 	msr	MSP, r0
 800d852:	f04f 0000 	mov.w	r0, #0
 800d856:	f380 8814 	msr	CONTROL, r0
 800d85a:	b662      	cpsie	i
 800d85c:	b661      	cpsie	f
 800d85e:	f3bf 8f4f 	dsb	sy
 800d862:	f3bf 8f6f 	isb	sy
 800d866:	df00      	svc	0
 800d868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d86a:	bf00      	nop
 800d86c:	e000ed08 	.word	0xe000ed08

0800d870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d876:	4b37      	ldr	r3, [pc, #220]	; (800d954 <xPortStartScheduler+0xe4>)
 800d878:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	22ff      	movs	r2, #255	; 0xff
 800d886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d890:	78fb      	ldrb	r3, [r7, #3]
 800d892:	b2db      	uxtb	r3, r3
 800d894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d898:	b2da      	uxtb	r2, r3
 800d89a:	4b2f      	ldr	r3, [pc, #188]	; (800d958 <xPortStartScheduler+0xe8>)
 800d89c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d89e:	4b2f      	ldr	r3, [pc, #188]	; (800d95c <xPortStartScheduler+0xec>)
 800d8a0:	2207      	movs	r2, #7
 800d8a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8a4:	e009      	b.n	800d8ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d8a6:	4b2d      	ldr	r3, [pc, #180]	; (800d95c <xPortStartScheduler+0xec>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	3b01      	subs	r3, #1
 800d8ac:	4a2b      	ldr	r2, [pc, #172]	; (800d95c <xPortStartScheduler+0xec>)
 800d8ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d8b0:	78fb      	ldrb	r3, [r7, #3]
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	005b      	lsls	r3, r3, #1
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8ba:	78fb      	ldrb	r3, [r7, #3]
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8c2:	2b80      	cmp	r3, #128	; 0x80
 800d8c4:	d0ef      	beq.n	800d8a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d8c6:	4b25      	ldr	r3, [pc, #148]	; (800d95c <xPortStartScheduler+0xec>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f1c3 0307 	rsb	r3, r3, #7
 800d8ce:	2b04      	cmp	r3, #4
 800d8d0:	d00c      	beq.n	800d8ec <xPortStartScheduler+0x7c>
	__asm volatile
 800d8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d6:	b672      	cpsid	i
 800d8d8:	f383 8811 	msr	BASEPRI, r3
 800d8dc:	f3bf 8f6f 	isb	sy
 800d8e0:	f3bf 8f4f 	dsb	sy
 800d8e4:	b662      	cpsie	i
 800d8e6:	60bb      	str	r3, [r7, #8]
}
 800d8e8:	bf00      	nop
 800d8ea:	e7fe      	b.n	800d8ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d8ec:	4b1b      	ldr	r3, [pc, #108]	; (800d95c <xPortStartScheduler+0xec>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	021b      	lsls	r3, r3, #8
 800d8f2:	4a1a      	ldr	r2, [pc, #104]	; (800d95c <xPortStartScheduler+0xec>)
 800d8f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d8f6:	4b19      	ldr	r3, [pc, #100]	; (800d95c <xPortStartScheduler+0xec>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d8fe:	4a17      	ldr	r2, [pc, #92]	; (800d95c <xPortStartScheduler+0xec>)
 800d900:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	b2da      	uxtb	r2, r3
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d90a:	4b15      	ldr	r3, [pc, #84]	; (800d960 <xPortStartScheduler+0xf0>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4a14      	ldr	r2, [pc, #80]	; (800d960 <xPortStartScheduler+0xf0>)
 800d910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d914:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d916:	4b12      	ldr	r3, [pc, #72]	; (800d960 <xPortStartScheduler+0xf0>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4a11      	ldr	r2, [pc, #68]	; (800d960 <xPortStartScheduler+0xf0>)
 800d91c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d920:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d922:	f000 f8dd 	bl	800dae0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d926:	4b0f      	ldr	r3, [pc, #60]	; (800d964 <xPortStartScheduler+0xf4>)
 800d928:	2200      	movs	r2, #0
 800d92a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d92c:	f000 f8fc 	bl	800db28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d930:	4b0d      	ldr	r3, [pc, #52]	; (800d968 <xPortStartScheduler+0xf8>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4a0c      	ldr	r2, [pc, #48]	; (800d968 <xPortStartScheduler+0xf8>)
 800d936:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d93a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d93c:	f7ff ff84 	bl	800d848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d940:	f7ff fa78 	bl	800ce34 <vTaskSwitchContext>
	prvTaskExitError();
 800d944:	f7ff ff3c 	bl	800d7c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d948:	2300      	movs	r3, #0
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	e000e400 	.word	0xe000e400
 800d958:	20000694 	.word	0x20000694
 800d95c:	20000698 	.word	0x20000698
 800d960:	e000ed20 	.word	0xe000ed20
 800d964:	2000005c 	.word	0x2000005c
 800d968:	e000ef34 	.word	0xe000ef34

0800d96c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
	__asm volatile
 800d972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d976:	b672      	cpsid	i
 800d978:	f383 8811 	msr	BASEPRI, r3
 800d97c:	f3bf 8f6f 	isb	sy
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	b662      	cpsie	i
 800d986:	607b      	str	r3, [r7, #4]
}
 800d988:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d98a:	4b10      	ldr	r3, [pc, #64]	; (800d9cc <vPortEnterCritical+0x60>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	3301      	adds	r3, #1
 800d990:	4a0e      	ldr	r2, [pc, #56]	; (800d9cc <vPortEnterCritical+0x60>)
 800d992:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d994:	4b0d      	ldr	r3, [pc, #52]	; (800d9cc <vPortEnterCritical+0x60>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	2b01      	cmp	r3, #1
 800d99a:	d111      	bne.n	800d9c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d99c:	4b0c      	ldr	r3, [pc, #48]	; (800d9d0 <vPortEnterCritical+0x64>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00c      	beq.n	800d9c0 <vPortEnterCritical+0x54>
	__asm volatile
 800d9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9aa:	b672      	cpsid	i
 800d9ac:	f383 8811 	msr	BASEPRI, r3
 800d9b0:	f3bf 8f6f 	isb	sy
 800d9b4:	f3bf 8f4f 	dsb	sy
 800d9b8:	b662      	cpsie	i
 800d9ba:	603b      	str	r3, [r7, #0]
}
 800d9bc:	bf00      	nop
 800d9be:	e7fe      	b.n	800d9be <vPortEnterCritical+0x52>
	}
}
 800d9c0:	bf00      	nop
 800d9c2:	370c      	adds	r7, #12
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr
 800d9cc:	2000005c 	.word	0x2000005c
 800d9d0:	e000ed04 	.word	0xe000ed04

0800d9d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d9da:	4b13      	ldr	r3, [pc, #76]	; (800da28 <vPortExitCritical+0x54>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d10c      	bne.n	800d9fc <vPortExitCritical+0x28>
	__asm volatile
 800d9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e6:	b672      	cpsid	i
 800d9e8:	f383 8811 	msr	BASEPRI, r3
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	f3bf 8f4f 	dsb	sy
 800d9f4:	b662      	cpsie	i
 800d9f6:	607b      	str	r3, [r7, #4]
}
 800d9f8:	bf00      	nop
 800d9fa:	e7fe      	b.n	800d9fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d9fc:	4b0a      	ldr	r3, [pc, #40]	; (800da28 <vPortExitCritical+0x54>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	3b01      	subs	r3, #1
 800da02:	4a09      	ldr	r2, [pc, #36]	; (800da28 <vPortExitCritical+0x54>)
 800da04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800da06:	4b08      	ldr	r3, [pc, #32]	; (800da28 <vPortExitCritical+0x54>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d105      	bne.n	800da1a <vPortExitCritical+0x46>
 800da0e:	2300      	movs	r3, #0
 800da10:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	f383 8811 	msr	BASEPRI, r3
}
 800da18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800da1a:	bf00      	nop
 800da1c:	370c      	adds	r7, #12
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	2000005c 	.word	0x2000005c
 800da2c:	00000000 	.word	0x00000000

0800da30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800da30:	f3ef 8009 	mrs	r0, PSP
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	4b15      	ldr	r3, [pc, #84]	; (800da90 <pxCurrentTCBConst>)
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	f01e 0f10 	tst.w	lr, #16
 800da40:	bf08      	it	eq
 800da42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800da46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da4a:	6010      	str	r0, [r2, #0]
 800da4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800da50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800da54:	b672      	cpsid	i
 800da56:	f380 8811 	msr	BASEPRI, r0
 800da5a:	f3bf 8f4f 	dsb	sy
 800da5e:	f3bf 8f6f 	isb	sy
 800da62:	b662      	cpsie	i
 800da64:	f7ff f9e6 	bl	800ce34 <vTaskSwitchContext>
 800da68:	f04f 0000 	mov.w	r0, #0
 800da6c:	f380 8811 	msr	BASEPRI, r0
 800da70:	bc09      	pop	{r0, r3}
 800da72:	6819      	ldr	r1, [r3, #0]
 800da74:	6808      	ldr	r0, [r1, #0]
 800da76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da7a:	f01e 0f10 	tst.w	lr, #16
 800da7e:	bf08      	it	eq
 800da80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800da84:	f380 8809 	msr	PSP, r0
 800da88:	f3bf 8f6f 	isb	sy
 800da8c:	4770      	bx	lr
 800da8e:	bf00      	nop

0800da90 <pxCurrentTCBConst>:
 800da90:	20000568 	.word	0x20000568
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800da94:	bf00      	nop
 800da96:	bf00      	nop

0800da98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
	__asm volatile
 800da9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa2:	b672      	cpsid	i
 800daa4:	f383 8811 	msr	BASEPRI, r3
 800daa8:	f3bf 8f6f 	isb	sy
 800daac:	f3bf 8f4f 	dsb	sy
 800dab0:	b662      	cpsie	i
 800dab2:	607b      	str	r3, [r7, #4]
}
 800dab4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dab6:	f7ff f903 	bl	800ccc0 <xTaskIncrementTick>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d003      	beq.n	800dac8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dac0:	4b06      	ldr	r3, [pc, #24]	; (800dadc <SysTick_Handler+0x44>)
 800dac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dac6:	601a      	str	r2, [r3, #0]
 800dac8:	2300      	movs	r3, #0
 800daca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	f383 8811 	msr	BASEPRI, r3
}
 800dad2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dad4:	bf00      	nop
 800dad6:	3708      	adds	r7, #8
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	e000ed04 	.word	0xe000ed04

0800dae0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dae0:	b480      	push	{r7}
 800dae2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dae4:	4b0b      	ldr	r3, [pc, #44]	; (800db14 <vPortSetupTimerInterrupt+0x34>)
 800dae6:	2200      	movs	r2, #0
 800dae8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800daea:	4b0b      	ldr	r3, [pc, #44]	; (800db18 <vPortSetupTimerInterrupt+0x38>)
 800daec:	2200      	movs	r2, #0
 800daee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800daf0:	4b0a      	ldr	r3, [pc, #40]	; (800db1c <vPortSetupTimerInterrupt+0x3c>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4a0a      	ldr	r2, [pc, #40]	; (800db20 <vPortSetupTimerInterrupt+0x40>)
 800daf6:	fba2 2303 	umull	r2, r3, r2, r3
 800dafa:	099b      	lsrs	r3, r3, #6
 800dafc:	4a09      	ldr	r2, [pc, #36]	; (800db24 <vPortSetupTimerInterrupt+0x44>)
 800dafe:	3b01      	subs	r3, #1
 800db00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800db02:	4b04      	ldr	r3, [pc, #16]	; (800db14 <vPortSetupTimerInterrupt+0x34>)
 800db04:	2207      	movs	r2, #7
 800db06:	601a      	str	r2, [r3, #0]
}
 800db08:	bf00      	nop
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr
 800db12:	bf00      	nop
 800db14:	e000e010 	.word	0xe000e010
 800db18:	e000e018 	.word	0xe000e018
 800db1c:	20000050 	.word	0x20000050
 800db20:	10624dd3 	.word	0x10624dd3
 800db24:	e000e014 	.word	0xe000e014

0800db28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800db28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800db38 <vPortEnableVFP+0x10>
 800db2c:	6801      	ldr	r1, [r0, #0]
 800db2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800db32:	6001      	str	r1, [r0, #0]
 800db34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800db36:	bf00      	nop
 800db38:	e000ed88 	.word	0xe000ed88

0800db3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800db3c:	b480      	push	{r7}
 800db3e:	b085      	sub	sp, #20
 800db40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800db42:	f3ef 8305 	mrs	r3, IPSR
 800db46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2b0f      	cmp	r3, #15
 800db4c:	d916      	bls.n	800db7c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800db4e:	4a19      	ldr	r2, [pc, #100]	; (800dbb4 <vPortValidateInterruptPriority+0x78>)
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	4413      	add	r3, r2
 800db54:	781b      	ldrb	r3, [r3, #0]
 800db56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800db58:	4b17      	ldr	r3, [pc, #92]	; (800dbb8 <vPortValidateInterruptPriority+0x7c>)
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	7afa      	ldrb	r2, [r7, #11]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d20c      	bcs.n	800db7c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800db62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db66:	b672      	cpsid	i
 800db68:	f383 8811 	msr	BASEPRI, r3
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	f3bf 8f4f 	dsb	sy
 800db74:	b662      	cpsie	i
 800db76:	607b      	str	r3, [r7, #4]
}
 800db78:	bf00      	nop
 800db7a:	e7fe      	b.n	800db7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800db7c:	4b0f      	ldr	r3, [pc, #60]	; (800dbbc <vPortValidateInterruptPriority+0x80>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800db84:	4b0e      	ldr	r3, [pc, #56]	; (800dbc0 <vPortValidateInterruptPriority+0x84>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d90c      	bls.n	800dba6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800db8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db90:	b672      	cpsid	i
 800db92:	f383 8811 	msr	BASEPRI, r3
 800db96:	f3bf 8f6f 	isb	sy
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	b662      	cpsie	i
 800dba0:	603b      	str	r3, [r7, #0]
}
 800dba2:	bf00      	nop
 800dba4:	e7fe      	b.n	800dba4 <vPortValidateInterruptPriority+0x68>
	}
 800dba6:	bf00      	nop
 800dba8:	3714      	adds	r7, #20
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr
 800dbb2:	bf00      	nop
 800dbb4:	e000e3f0 	.word	0xe000e3f0
 800dbb8:	20000694 	.word	0x20000694
 800dbbc:	e000ed0c 	.word	0xe000ed0c
 800dbc0:	20000698 	.word	0x20000698

0800dbc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b08a      	sub	sp, #40	; 0x28
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dbd0:	f7fe ffca 	bl	800cb68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dbd4:	4b5b      	ldr	r3, [pc, #364]	; (800dd44 <pvPortMalloc+0x180>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d101      	bne.n	800dbe0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dbdc:	f000 f91a 	bl	800de14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dbe0:	4b59      	ldr	r3, [pc, #356]	; (800dd48 <pvPortMalloc+0x184>)
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	4013      	ands	r3, r2
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	f040 8092 	bne.w	800dd12 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d01f      	beq.n	800dc34 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800dbf4:	2208      	movs	r2, #8
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f003 0307 	and.w	r3, r3, #7
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d016      	beq.n	800dc34 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f023 0307 	bic.w	r3, r3, #7
 800dc0c:	3308      	adds	r3, #8
 800dc0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f003 0307 	and.w	r3, r3, #7
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00c      	beq.n	800dc34 <pvPortMalloc+0x70>
	__asm volatile
 800dc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1e:	b672      	cpsid	i
 800dc20:	f383 8811 	msr	BASEPRI, r3
 800dc24:	f3bf 8f6f 	isb	sy
 800dc28:	f3bf 8f4f 	dsb	sy
 800dc2c:	b662      	cpsie	i
 800dc2e:	617b      	str	r3, [r7, #20]
}
 800dc30:	bf00      	nop
 800dc32:	e7fe      	b.n	800dc32 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d06b      	beq.n	800dd12 <pvPortMalloc+0x14e>
 800dc3a:	4b44      	ldr	r3, [pc, #272]	; (800dd4c <pvPortMalloc+0x188>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d866      	bhi.n	800dd12 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dc44:	4b42      	ldr	r3, [pc, #264]	; (800dd50 <pvPortMalloc+0x18c>)
 800dc46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dc48:	4b41      	ldr	r3, [pc, #260]	; (800dd50 <pvPortMalloc+0x18c>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc4e:	e004      	b.n	800dc5a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800dc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d903      	bls.n	800dc6c <pvPortMalloc+0xa8>
 800dc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d1f1      	bne.n	800dc50 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dc6c:	4b35      	ldr	r3, [pc, #212]	; (800dd44 <pvPortMalloc+0x180>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d04d      	beq.n	800dd12 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dc76:	6a3b      	ldr	r3, [r7, #32]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2208      	movs	r2, #8
 800dc7c:	4413      	add	r3, r2
 800dc7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc82:	681a      	ldr	r2, [r3, #0]
 800dc84:	6a3b      	ldr	r3, [r7, #32]
 800dc86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8a:	685a      	ldr	r2, [r3, #4]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	1ad2      	subs	r2, r2, r3
 800dc90:	2308      	movs	r3, #8
 800dc92:	005b      	lsls	r3, r3, #1
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d921      	bls.n	800dcdc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dc98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	4413      	add	r3, r2
 800dc9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	f003 0307 	and.w	r3, r3, #7
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d00c      	beq.n	800dcc4 <pvPortMalloc+0x100>
	__asm volatile
 800dcaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcae:	b672      	cpsid	i
 800dcb0:	f383 8811 	msr	BASEPRI, r3
 800dcb4:	f3bf 8f6f 	isb	sy
 800dcb8:	f3bf 8f4f 	dsb	sy
 800dcbc:	b662      	cpsie	i
 800dcbe:	613b      	str	r3, [r7, #16]
}
 800dcc0:	bf00      	nop
 800dcc2:	e7fe      	b.n	800dcc2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc6:	685a      	ldr	r2, [r3, #4]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	1ad2      	subs	r2, r2, r3
 800dccc:	69bb      	ldr	r3, [r7, #24]
 800dcce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dcd6:	69b8      	ldr	r0, [r7, #24]
 800dcd8:	f000 f8fe 	bl	800ded8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dcdc:	4b1b      	ldr	r3, [pc, #108]	; (800dd4c <pvPortMalloc+0x188>)
 800dcde:	681a      	ldr	r2, [r3, #0]
 800dce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	1ad3      	subs	r3, r2, r3
 800dce6:	4a19      	ldr	r2, [pc, #100]	; (800dd4c <pvPortMalloc+0x188>)
 800dce8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dcea:	4b18      	ldr	r3, [pc, #96]	; (800dd4c <pvPortMalloc+0x188>)
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	4b19      	ldr	r3, [pc, #100]	; (800dd54 <pvPortMalloc+0x190>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d203      	bcs.n	800dcfe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dcf6:	4b15      	ldr	r3, [pc, #84]	; (800dd4c <pvPortMalloc+0x188>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4a16      	ldr	r2, [pc, #88]	; (800dd54 <pvPortMalloc+0x190>)
 800dcfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd00:	685a      	ldr	r2, [r3, #4]
 800dd02:	4b11      	ldr	r3, [pc, #68]	; (800dd48 <pvPortMalloc+0x184>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	431a      	orrs	r2, r3
 800dd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0e:	2200      	movs	r2, #0
 800dd10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dd12:	f7fe ff37 	bl	800cb84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	f003 0307 	and.w	r3, r3, #7
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d00c      	beq.n	800dd3a <pvPortMalloc+0x176>
	__asm volatile
 800dd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd24:	b672      	cpsid	i
 800dd26:	f383 8811 	msr	BASEPRI, r3
 800dd2a:	f3bf 8f6f 	isb	sy
 800dd2e:	f3bf 8f4f 	dsb	sy
 800dd32:	b662      	cpsie	i
 800dd34:	60fb      	str	r3, [r7, #12]
}
 800dd36:	bf00      	nop
 800dd38:	e7fe      	b.n	800dd38 <pvPortMalloc+0x174>
	return pvReturn;
 800dd3a:	69fb      	ldr	r3, [r7, #28]
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3728      	adds	r7, #40	; 0x28
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	200042a4 	.word	0x200042a4
 800dd48:	200042b0 	.word	0x200042b0
 800dd4c:	200042a8 	.word	0x200042a8
 800dd50:	2000429c 	.word	0x2000429c
 800dd54:	200042ac 	.word	0x200042ac

0800dd58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d04c      	beq.n	800de04 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dd6a:	2308      	movs	r3, #8
 800dd6c:	425b      	negs	r3, r3
 800dd6e:	697a      	ldr	r2, [r7, #20]
 800dd70:	4413      	add	r3, r2
 800dd72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	685a      	ldr	r2, [r3, #4]
 800dd7c:	4b23      	ldr	r3, [pc, #140]	; (800de0c <vPortFree+0xb4>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4013      	ands	r3, r2
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d10c      	bne.n	800dda0 <vPortFree+0x48>
	__asm volatile
 800dd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd8a:	b672      	cpsid	i
 800dd8c:	f383 8811 	msr	BASEPRI, r3
 800dd90:	f3bf 8f6f 	isb	sy
 800dd94:	f3bf 8f4f 	dsb	sy
 800dd98:	b662      	cpsie	i
 800dd9a:	60fb      	str	r3, [r7, #12]
}
 800dd9c:	bf00      	nop
 800dd9e:	e7fe      	b.n	800dd9e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00c      	beq.n	800ddc2 <vPortFree+0x6a>
	__asm volatile
 800dda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddac:	b672      	cpsid	i
 800ddae:	f383 8811 	msr	BASEPRI, r3
 800ddb2:	f3bf 8f6f 	isb	sy
 800ddb6:	f3bf 8f4f 	dsb	sy
 800ddba:	b662      	cpsie	i
 800ddbc:	60bb      	str	r3, [r7, #8]
}
 800ddbe:	bf00      	nop
 800ddc0:	e7fe      	b.n	800ddc0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	685a      	ldr	r2, [r3, #4]
 800ddc6:	4b11      	ldr	r3, [pc, #68]	; (800de0c <vPortFree+0xb4>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4013      	ands	r3, r2
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d019      	beq.n	800de04 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d115      	bne.n	800de04 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	685a      	ldr	r2, [r3, #4]
 800dddc:	4b0b      	ldr	r3, [pc, #44]	; (800de0c <vPortFree+0xb4>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	43db      	mvns	r3, r3
 800dde2:	401a      	ands	r2, r3
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dde8:	f7fe febe 	bl	800cb68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	685a      	ldr	r2, [r3, #4]
 800ddf0:	4b07      	ldr	r3, [pc, #28]	; (800de10 <vPortFree+0xb8>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4413      	add	r3, r2
 800ddf6:	4a06      	ldr	r2, [pc, #24]	; (800de10 <vPortFree+0xb8>)
 800ddf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ddfa:	6938      	ldr	r0, [r7, #16]
 800ddfc:	f000 f86c 	bl	800ded8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800de00:	f7fe fec0 	bl	800cb84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800de04:	bf00      	nop
 800de06:	3718      	adds	r7, #24
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	200042b0 	.word	0x200042b0
 800de10:	200042a8 	.word	0x200042a8

0800de14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800de14:	b480      	push	{r7}
 800de16:	b085      	sub	sp, #20
 800de18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800de1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800de1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800de20:	4b27      	ldr	r3, [pc, #156]	; (800dec0 <prvHeapInit+0xac>)
 800de22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f003 0307 	and.w	r3, r3, #7
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00c      	beq.n	800de48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	3307      	adds	r3, #7
 800de32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f023 0307 	bic.w	r3, r3, #7
 800de3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800de3c:	68ba      	ldr	r2, [r7, #8]
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	1ad3      	subs	r3, r2, r3
 800de42:	4a1f      	ldr	r2, [pc, #124]	; (800dec0 <prvHeapInit+0xac>)
 800de44:	4413      	add	r3, r2
 800de46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800de4c:	4a1d      	ldr	r2, [pc, #116]	; (800dec4 <prvHeapInit+0xb0>)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800de52:	4b1c      	ldr	r3, [pc, #112]	; (800dec4 <prvHeapInit+0xb0>)
 800de54:	2200      	movs	r2, #0
 800de56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	68ba      	ldr	r2, [r7, #8]
 800de5c:	4413      	add	r3, r2
 800de5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800de60:	2208      	movs	r2, #8
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	1a9b      	subs	r3, r3, r2
 800de66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f023 0307 	bic.w	r3, r3, #7
 800de6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	4a15      	ldr	r2, [pc, #84]	; (800dec8 <prvHeapInit+0xb4>)
 800de74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800de76:	4b14      	ldr	r3, [pc, #80]	; (800dec8 <prvHeapInit+0xb4>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2200      	movs	r2, #0
 800de7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800de7e:	4b12      	ldr	r3, [pc, #72]	; (800dec8 <prvHeapInit+0xb4>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2200      	movs	r2, #0
 800de84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	1ad2      	subs	r2, r2, r3
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800de94:	4b0c      	ldr	r3, [pc, #48]	; (800dec8 <prvHeapInit+0xb4>)
 800de96:	681a      	ldr	r2, [r3, #0]
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	4a0a      	ldr	r2, [pc, #40]	; (800decc <prvHeapInit+0xb8>)
 800dea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	685b      	ldr	r3, [r3, #4]
 800dea8:	4a09      	ldr	r2, [pc, #36]	; (800ded0 <prvHeapInit+0xbc>)
 800deaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800deac:	4b09      	ldr	r3, [pc, #36]	; (800ded4 <prvHeapInit+0xc0>)
 800deae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800deb2:	601a      	str	r2, [r3, #0]
}
 800deb4:	bf00      	nop
 800deb6:	3714      	adds	r7, #20
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr
 800dec0:	2000069c 	.word	0x2000069c
 800dec4:	2000429c 	.word	0x2000429c
 800dec8:	200042a4 	.word	0x200042a4
 800decc:	200042ac 	.word	0x200042ac
 800ded0:	200042a8 	.word	0x200042a8
 800ded4:	200042b0 	.word	0x200042b0

0800ded8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ded8:	b480      	push	{r7}
 800deda:	b085      	sub	sp, #20
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dee0:	4b28      	ldr	r3, [pc, #160]	; (800df84 <prvInsertBlockIntoFreeList+0xac>)
 800dee2:	60fb      	str	r3, [r7, #12]
 800dee4:	e002      	b.n	800deec <prvInsertBlockIntoFreeList+0x14>
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	60fb      	str	r3, [r7, #12]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	687a      	ldr	r2, [r7, #4]
 800def2:	429a      	cmp	r2, r3
 800def4:	d8f7      	bhi.n	800dee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	68ba      	ldr	r2, [r7, #8]
 800df00:	4413      	add	r3, r2
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	429a      	cmp	r2, r3
 800df06:	d108      	bne.n	800df1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	685a      	ldr	r2, [r3, #4]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	441a      	add	r2, r3
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	68ba      	ldr	r2, [r7, #8]
 800df24:	441a      	add	r2, r3
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d118      	bne.n	800df60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	4b15      	ldr	r3, [pc, #84]	; (800df88 <prvInsertBlockIntoFreeList+0xb0>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	429a      	cmp	r2, r3
 800df38:	d00d      	beq.n	800df56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	685a      	ldr	r2, [r3, #4]
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	441a      	add	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	601a      	str	r2, [r3, #0]
 800df54:	e008      	b.n	800df68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800df56:	4b0c      	ldr	r3, [pc, #48]	; (800df88 <prvInsertBlockIntoFreeList+0xb0>)
 800df58:	681a      	ldr	r2, [r3, #0]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	601a      	str	r2, [r3, #0]
 800df5e:	e003      	b.n	800df68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800df68:	68fa      	ldr	r2, [r7, #12]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d002      	beq.n	800df76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df76:	bf00      	nop
 800df78:	3714      	adds	r7, #20
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	2000429c 	.word	0x2000429c
 800df88:	200042a4 	.word	0x200042a4

0800df8c <__errno>:
 800df8c:	4b01      	ldr	r3, [pc, #4]	; (800df94 <__errno+0x8>)
 800df8e:	6818      	ldr	r0, [r3, #0]
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	20000060 	.word	0x20000060

0800df98 <__libc_init_array>:
 800df98:	b570      	push	{r4, r5, r6, lr}
 800df9a:	4d0d      	ldr	r5, [pc, #52]	; (800dfd0 <__libc_init_array+0x38>)
 800df9c:	4c0d      	ldr	r4, [pc, #52]	; (800dfd4 <__libc_init_array+0x3c>)
 800df9e:	1b64      	subs	r4, r4, r5
 800dfa0:	10a4      	asrs	r4, r4, #2
 800dfa2:	2600      	movs	r6, #0
 800dfa4:	42a6      	cmp	r6, r4
 800dfa6:	d109      	bne.n	800dfbc <__libc_init_array+0x24>
 800dfa8:	4d0b      	ldr	r5, [pc, #44]	; (800dfd8 <__libc_init_array+0x40>)
 800dfaa:	4c0c      	ldr	r4, [pc, #48]	; (800dfdc <__libc_init_array+0x44>)
 800dfac:	f000 fcb8 	bl	800e920 <_init>
 800dfb0:	1b64      	subs	r4, r4, r5
 800dfb2:	10a4      	asrs	r4, r4, #2
 800dfb4:	2600      	movs	r6, #0
 800dfb6:	42a6      	cmp	r6, r4
 800dfb8:	d105      	bne.n	800dfc6 <__libc_init_array+0x2e>
 800dfba:	bd70      	pop	{r4, r5, r6, pc}
 800dfbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfc0:	4798      	blx	r3
 800dfc2:	3601      	adds	r6, #1
 800dfc4:	e7ee      	b.n	800dfa4 <__libc_init_array+0xc>
 800dfc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfca:	4798      	blx	r3
 800dfcc:	3601      	adds	r6, #1
 800dfce:	e7f2      	b.n	800dfb6 <__libc_init_array+0x1e>
 800dfd0:	08010a64 	.word	0x08010a64
 800dfd4:	08010a64 	.word	0x08010a64
 800dfd8:	08010a64 	.word	0x08010a64
 800dfdc:	08010a68 	.word	0x08010a68

0800dfe0 <__retarget_lock_acquire_recursive>:
 800dfe0:	4770      	bx	lr

0800dfe2 <__retarget_lock_release_recursive>:
 800dfe2:	4770      	bx	lr

0800dfe4 <memcpy>:
 800dfe4:	440a      	add	r2, r1
 800dfe6:	4291      	cmp	r1, r2
 800dfe8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dfec:	d100      	bne.n	800dff0 <memcpy+0xc>
 800dfee:	4770      	bx	lr
 800dff0:	b510      	push	{r4, lr}
 800dff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dffa:	4291      	cmp	r1, r2
 800dffc:	d1f9      	bne.n	800dff2 <memcpy+0xe>
 800dffe:	bd10      	pop	{r4, pc}

0800e000 <memset>:
 800e000:	4402      	add	r2, r0
 800e002:	4603      	mov	r3, r0
 800e004:	4293      	cmp	r3, r2
 800e006:	d100      	bne.n	800e00a <memset+0xa>
 800e008:	4770      	bx	lr
 800e00a:	f803 1b01 	strb.w	r1, [r3], #1
 800e00e:	e7f9      	b.n	800e004 <memset+0x4>

0800e010 <_malloc_r>:
 800e010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e012:	1ccd      	adds	r5, r1, #3
 800e014:	f025 0503 	bic.w	r5, r5, #3
 800e018:	3508      	adds	r5, #8
 800e01a:	2d0c      	cmp	r5, #12
 800e01c:	bf38      	it	cc
 800e01e:	250c      	movcc	r5, #12
 800e020:	2d00      	cmp	r5, #0
 800e022:	4606      	mov	r6, r0
 800e024:	db01      	blt.n	800e02a <_malloc_r+0x1a>
 800e026:	42a9      	cmp	r1, r5
 800e028:	d903      	bls.n	800e032 <_malloc_r+0x22>
 800e02a:	230c      	movs	r3, #12
 800e02c:	6033      	str	r3, [r6, #0]
 800e02e:	2000      	movs	r0, #0
 800e030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e032:	f000 f8e1 	bl	800e1f8 <__malloc_lock>
 800e036:	4921      	ldr	r1, [pc, #132]	; (800e0bc <_malloc_r+0xac>)
 800e038:	680a      	ldr	r2, [r1, #0]
 800e03a:	4614      	mov	r4, r2
 800e03c:	b99c      	cbnz	r4, 800e066 <_malloc_r+0x56>
 800e03e:	4f20      	ldr	r7, [pc, #128]	; (800e0c0 <_malloc_r+0xb0>)
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	b923      	cbnz	r3, 800e04e <_malloc_r+0x3e>
 800e044:	4621      	mov	r1, r4
 800e046:	4630      	mov	r0, r6
 800e048:	f000 f8a6 	bl	800e198 <_sbrk_r>
 800e04c:	6038      	str	r0, [r7, #0]
 800e04e:	4629      	mov	r1, r5
 800e050:	4630      	mov	r0, r6
 800e052:	f000 f8a1 	bl	800e198 <_sbrk_r>
 800e056:	1c43      	adds	r3, r0, #1
 800e058:	d123      	bne.n	800e0a2 <_malloc_r+0x92>
 800e05a:	230c      	movs	r3, #12
 800e05c:	6033      	str	r3, [r6, #0]
 800e05e:	4630      	mov	r0, r6
 800e060:	f000 f8d0 	bl	800e204 <__malloc_unlock>
 800e064:	e7e3      	b.n	800e02e <_malloc_r+0x1e>
 800e066:	6823      	ldr	r3, [r4, #0]
 800e068:	1b5b      	subs	r3, r3, r5
 800e06a:	d417      	bmi.n	800e09c <_malloc_r+0x8c>
 800e06c:	2b0b      	cmp	r3, #11
 800e06e:	d903      	bls.n	800e078 <_malloc_r+0x68>
 800e070:	6023      	str	r3, [r4, #0]
 800e072:	441c      	add	r4, r3
 800e074:	6025      	str	r5, [r4, #0]
 800e076:	e004      	b.n	800e082 <_malloc_r+0x72>
 800e078:	6863      	ldr	r3, [r4, #4]
 800e07a:	42a2      	cmp	r2, r4
 800e07c:	bf0c      	ite	eq
 800e07e:	600b      	streq	r3, [r1, #0]
 800e080:	6053      	strne	r3, [r2, #4]
 800e082:	4630      	mov	r0, r6
 800e084:	f000 f8be 	bl	800e204 <__malloc_unlock>
 800e088:	f104 000b 	add.w	r0, r4, #11
 800e08c:	1d23      	adds	r3, r4, #4
 800e08e:	f020 0007 	bic.w	r0, r0, #7
 800e092:	1ac2      	subs	r2, r0, r3
 800e094:	d0cc      	beq.n	800e030 <_malloc_r+0x20>
 800e096:	1a1b      	subs	r3, r3, r0
 800e098:	50a3      	str	r3, [r4, r2]
 800e09a:	e7c9      	b.n	800e030 <_malloc_r+0x20>
 800e09c:	4622      	mov	r2, r4
 800e09e:	6864      	ldr	r4, [r4, #4]
 800e0a0:	e7cc      	b.n	800e03c <_malloc_r+0x2c>
 800e0a2:	1cc4      	adds	r4, r0, #3
 800e0a4:	f024 0403 	bic.w	r4, r4, #3
 800e0a8:	42a0      	cmp	r0, r4
 800e0aa:	d0e3      	beq.n	800e074 <_malloc_r+0x64>
 800e0ac:	1a21      	subs	r1, r4, r0
 800e0ae:	4630      	mov	r0, r6
 800e0b0:	f000 f872 	bl	800e198 <_sbrk_r>
 800e0b4:	3001      	adds	r0, #1
 800e0b6:	d1dd      	bne.n	800e074 <_malloc_r+0x64>
 800e0b8:	e7cf      	b.n	800e05a <_malloc_r+0x4a>
 800e0ba:	bf00      	nop
 800e0bc:	200042b4 	.word	0x200042b4
 800e0c0:	200042b8 	.word	0x200042b8

0800e0c4 <cleanup_glue>:
 800e0c4:	b538      	push	{r3, r4, r5, lr}
 800e0c6:	460c      	mov	r4, r1
 800e0c8:	6809      	ldr	r1, [r1, #0]
 800e0ca:	4605      	mov	r5, r0
 800e0cc:	b109      	cbz	r1, 800e0d2 <cleanup_glue+0xe>
 800e0ce:	f7ff fff9 	bl	800e0c4 <cleanup_glue>
 800e0d2:	4621      	mov	r1, r4
 800e0d4:	4628      	mov	r0, r5
 800e0d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0da:	f000 b899 	b.w	800e210 <_free_r>
	...

0800e0e0 <_reclaim_reent>:
 800e0e0:	4b2c      	ldr	r3, [pc, #176]	; (800e194 <_reclaim_reent+0xb4>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4283      	cmp	r3, r0
 800e0e6:	b570      	push	{r4, r5, r6, lr}
 800e0e8:	4604      	mov	r4, r0
 800e0ea:	d051      	beq.n	800e190 <_reclaim_reent+0xb0>
 800e0ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e0ee:	b143      	cbz	r3, 800e102 <_reclaim_reent+0x22>
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d14a      	bne.n	800e18c <_reclaim_reent+0xac>
 800e0f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0f8:	6819      	ldr	r1, [r3, #0]
 800e0fa:	b111      	cbz	r1, 800e102 <_reclaim_reent+0x22>
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	f000 f887 	bl	800e210 <_free_r>
 800e102:	6961      	ldr	r1, [r4, #20]
 800e104:	b111      	cbz	r1, 800e10c <_reclaim_reent+0x2c>
 800e106:	4620      	mov	r0, r4
 800e108:	f000 f882 	bl	800e210 <_free_r>
 800e10c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e10e:	b111      	cbz	r1, 800e116 <_reclaim_reent+0x36>
 800e110:	4620      	mov	r0, r4
 800e112:	f000 f87d 	bl	800e210 <_free_r>
 800e116:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e118:	b111      	cbz	r1, 800e120 <_reclaim_reent+0x40>
 800e11a:	4620      	mov	r0, r4
 800e11c:	f000 f878 	bl	800e210 <_free_r>
 800e120:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e122:	b111      	cbz	r1, 800e12a <_reclaim_reent+0x4a>
 800e124:	4620      	mov	r0, r4
 800e126:	f000 f873 	bl	800e210 <_free_r>
 800e12a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e12c:	b111      	cbz	r1, 800e134 <_reclaim_reent+0x54>
 800e12e:	4620      	mov	r0, r4
 800e130:	f000 f86e 	bl	800e210 <_free_r>
 800e134:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e136:	b111      	cbz	r1, 800e13e <_reclaim_reent+0x5e>
 800e138:	4620      	mov	r0, r4
 800e13a:	f000 f869 	bl	800e210 <_free_r>
 800e13e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e140:	b111      	cbz	r1, 800e148 <_reclaim_reent+0x68>
 800e142:	4620      	mov	r0, r4
 800e144:	f000 f864 	bl	800e210 <_free_r>
 800e148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e14a:	b111      	cbz	r1, 800e152 <_reclaim_reent+0x72>
 800e14c:	4620      	mov	r0, r4
 800e14e:	f000 f85f 	bl	800e210 <_free_r>
 800e152:	69a3      	ldr	r3, [r4, #24]
 800e154:	b1e3      	cbz	r3, 800e190 <_reclaim_reent+0xb0>
 800e156:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e158:	4620      	mov	r0, r4
 800e15a:	4798      	blx	r3
 800e15c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e15e:	b1b9      	cbz	r1, 800e190 <_reclaim_reent+0xb0>
 800e160:	4620      	mov	r0, r4
 800e162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e166:	f7ff bfad 	b.w	800e0c4 <cleanup_glue>
 800e16a:	5949      	ldr	r1, [r1, r5]
 800e16c:	b941      	cbnz	r1, 800e180 <_reclaim_reent+0xa0>
 800e16e:	3504      	adds	r5, #4
 800e170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e172:	2d80      	cmp	r5, #128	; 0x80
 800e174:	68d9      	ldr	r1, [r3, #12]
 800e176:	d1f8      	bne.n	800e16a <_reclaim_reent+0x8a>
 800e178:	4620      	mov	r0, r4
 800e17a:	f000 f849 	bl	800e210 <_free_r>
 800e17e:	e7ba      	b.n	800e0f6 <_reclaim_reent+0x16>
 800e180:	680e      	ldr	r6, [r1, #0]
 800e182:	4620      	mov	r0, r4
 800e184:	f000 f844 	bl	800e210 <_free_r>
 800e188:	4631      	mov	r1, r6
 800e18a:	e7ef      	b.n	800e16c <_reclaim_reent+0x8c>
 800e18c:	2500      	movs	r5, #0
 800e18e:	e7ef      	b.n	800e170 <_reclaim_reent+0x90>
 800e190:	bd70      	pop	{r4, r5, r6, pc}
 800e192:	bf00      	nop
 800e194:	20000060 	.word	0x20000060

0800e198 <_sbrk_r>:
 800e198:	b538      	push	{r3, r4, r5, lr}
 800e19a:	4d06      	ldr	r5, [pc, #24]	; (800e1b4 <_sbrk_r+0x1c>)
 800e19c:	2300      	movs	r3, #0
 800e19e:	4604      	mov	r4, r0
 800e1a0:	4608      	mov	r0, r1
 800e1a2:	602b      	str	r3, [r5, #0]
 800e1a4:	f7f6 fc52 	bl	8004a4c <_sbrk>
 800e1a8:	1c43      	adds	r3, r0, #1
 800e1aa:	d102      	bne.n	800e1b2 <_sbrk_r+0x1a>
 800e1ac:	682b      	ldr	r3, [r5, #0]
 800e1ae:	b103      	cbz	r3, 800e1b2 <_sbrk_r+0x1a>
 800e1b0:	6023      	str	r3, [r4, #0]
 800e1b2:	bd38      	pop	{r3, r4, r5, pc}
 800e1b4:	20004a24 	.word	0x20004a24

0800e1b8 <siprintf>:
 800e1b8:	b40e      	push	{r1, r2, r3}
 800e1ba:	b500      	push	{lr}
 800e1bc:	b09c      	sub	sp, #112	; 0x70
 800e1be:	ab1d      	add	r3, sp, #116	; 0x74
 800e1c0:	9002      	str	r0, [sp, #8]
 800e1c2:	9006      	str	r0, [sp, #24]
 800e1c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e1c8:	4809      	ldr	r0, [pc, #36]	; (800e1f0 <siprintf+0x38>)
 800e1ca:	9107      	str	r1, [sp, #28]
 800e1cc:	9104      	str	r1, [sp, #16]
 800e1ce:	4909      	ldr	r1, [pc, #36]	; (800e1f4 <siprintf+0x3c>)
 800e1d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1d4:	9105      	str	r1, [sp, #20]
 800e1d6:	6800      	ldr	r0, [r0, #0]
 800e1d8:	9301      	str	r3, [sp, #4]
 800e1da:	a902      	add	r1, sp, #8
 800e1dc:	f000 f8c4 	bl	800e368 <_svfiprintf_r>
 800e1e0:	9b02      	ldr	r3, [sp, #8]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	701a      	strb	r2, [r3, #0]
 800e1e6:	b01c      	add	sp, #112	; 0x70
 800e1e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1ec:	b003      	add	sp, #12
 800e1ee:	4770      	bx	lr
 800e1f0:	20000060 	.word	0x20000060
 800e1f4:	ffff0208 	.word	0xffff0208

0800e1f8 <__malloc_lock>:
 800e1f8:	4801      	ldr	r0, [pc, #4]	; (800e200 <__malloc_lock+0x8>)
 800e1fa:	f7ff bef1 	b.w	800dfe0 <__retarget_lock_acquire_recursive>
 800e1fe:	bf00      	nop
 800e200:	20004a1c 	.word	0x20004a1c

0800e204 <__malloc_unlock>:
 800e204:	4801      	ldr	r0, [pc, #4]	; (800e20c <__malloc_unlock+0x8>)
 800e206:	f7ff beec 	b.w	800dfe2 <__retarget_lock_release_recursive>
 800e20a:	bf00      	nop
 800e20c:	20004a1c 	.word	0x20004a1c

0800e210 <_free_r>:
 800e210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e212:	2900      	cmp	r1, #0
 800e214:	d048      	beq.n	800e2a8 <_free_r+0x98>
 800e216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e21a:	9001      	str	r0, [sp, #4]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	f1a1 0404 	sub.w	r4, r1, #4
 800e222:	bfb8      	it	lt
 800e224:	18e4      	addlt	r4, r4, r3
 800e226:	f7ff ffe7 	bl	800e1f8 <__malloc_lock>
 800e22a:	4a20      	ldr	r2, [pc, #128]	; (800e2ac <_free_r+0x9c>)
 800e22c:	9801      	ldr	r0, [sp, #4]
 800e22e:	6813      	ldr	r3, [r2, #0]
 800e230:	4615      	mov	r5, r2
 800e232:	b933      	cbnz	r3, 800e242 <_free_r+0x32>
 800e234:	6063      	str	r3, [r4, #4]
 800e236:	6014      	str	r4, [r2, #0]
 800e238:	b003      	add	sp, #12
 800e23a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e23e:	f7ff bfe1 	b.w	800e204 <__malloc_unlock>
 800e242:	42a3      	cmp	r3, r4
 800e244:	d90b      	bls.n	800e25e <_free_r+0x4e>
 800e246:	6821      	ldr	r1, [r4, #0]
 800e248:	1862      	adds	r2, r4, r1
 800e24a:	4293      	cmp	r3, r2
 800e24c:	bf04      	itt	eq
 800e24e:	681a      	ldreq	r2, [r3, #0]
 800e250:	685b      	ldreq	r3, [r3, #4]
 800e252:	6063      	str	r3, [r4, #4]
 800e254:	bf04      	itt	eq
 800e256:	1852      	addeq	r2, r2, r1
 800e258:	6022      	streq	r2, [r4, #0]
 800e25a:	602c      	str	r4, [r5, #0]
 800e25c:	e7ec      	b.n	800e238 <_free_r+0x28>
 800e25e:	461a      	mov	r2, r3
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	b10b      	cbz	r3, 800e268 <_free_r+0x58>
 800e264:	42a3      	cmp	r3, r4
 800e266:	d9fa      	bls.n	800e25e <_free_r+0x4e>
 800e268:	6811      	ldr	r1, [r2, #0]
 800e26a:	1855      	adds	r5, r2, r1
 800e26c:	42a5      	cmp	r5, r4
 800e26e:	d10b      	bne.n	800e288 <_free_r+0x78>
 800e270:	6824      	ldr	r4, [r4, #0]
 800e272:	4421      	add	r1, r4
 800e274:	1854      	adds	r4, r2, r1
 800e276:	42a3      	cmp	r3, r4
 800e278:	6011      	str	r1, [r2, #0]
 800e27a:	d1dd      	bne.n	800e238 <_free_r+0x28>
 800e27c:	681c      	ldr	r4, [r3, #0]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	6053      	str	r3, [r2, #4]
 800e282:	4421      	add	r1, r4
 800e284:	6011      	str	r1, [r2, #0]
 800e286:	e7d7      	b.n	800e238 <_free_r+0x28>
 800e288:	d902      	bls.n	800e290 <_free_r+0x80>
 800e28a:	230c      	movs	r3, #12
 800e28c:	6003      	str	r3, [r0, #0]
 800e28e:	e7d3      	b.n	800e238 <_free_r+0x28>
 800e290:	6825      	ldr	r5, [r4, #0]
 800e292:	1961      	adds	r1, r4, r5
 800e294:	428b      	cmp	r3, r1
 800e296:	bf04      	itt	eq
 800e298:	6819      	ldreq	r1, [r3, #0]
 800e29a:	685b      	ldreq	r3, [r3, #4]
 800e29c:	6063      	str	r3, [r4, #4]
 800e29e:	bf04      	itt	eq
 800e2a0:	1949      	addeq	r1, r1, r5
 800e2a2:	6021      	streq	r1, [r4, #0]
 800e2a4:	6054      	str	r4, [r2, #4]
 800e2a6:	e7c7      	b.n	800e238 <_free_r+0x28>
 800e2a8:	b003      	add	sp, #12
 800e2aa:	bd30      	pop	{r4, r5, pc}
 800e2ac:	200042b4 	.word	0x200042b4

0800e2b0 <__ssputs_r>:
 800e2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2b4:	688e      	ldr	r6, [r1, #8]
 800e2b6:	429e      	cmp	r6, r3
 800e2b8:	4682      	mov	sl, r0
 800e2ba:	460c      	mov	r4, r1
 800e2bc:	4690      	mov	r8, r2
 800e2be:	461f      	mov	r7, r3
 800e2c0:	d838      	bhi.n	800e334 <__ssputs_r+0x84>
 800e2c2:	898a      	ldrh	r2, [r1, #12]
 800e2c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e2c8:	d032      	beq.n	800e330 <__ssputs_r+0x80>
 800e2ca:	6825      	ldr	r5, [r4, #0]
 800e2cc:	6909      	ldr	r1, [r1, #16]
 800e2ce:	eba5 0901 	sub.w	r9, r5, r1
 800e2d2:	6965      	ldr	r5, [r4, #20]
 800e2d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e2dc:	3301      	adds	r3, #1
 800e2de:	444b      	add	r3, r9
 800e2e0:	106d      	asrs	r5, r5, #1
 800e2e2:	429d      	cmp	r5, r3
 800e2e4:	bf38      	it	cc
 800e2e6:	461d      	movcc	r5, r3
 800e2e8:	0553      	lsls	r3, r2, #21
 800e2ea:	d531      	bpl.n	800e350 <__ssputs_r+0xa0>
 800e2ec:	4629      	mov	r1, r5
 800e2ee:	f7ff fe8f 	bl	800e010 <_malloc_r>
 800e2f2:	4606      	mov	r6, r0
 800e2f4:	b950      	cbnz	r0, 800e30c <__ssputs_r+0x5c>
 800e2f6:	230c      	movs	r3, #12
 800e2f8:	f8ca 3000 	str.w	r3, [sl]
 800e2fc:	89a3      	ldrh	r3, [r4, #12]
 800e2fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e302:	81a3      	strh	r3, [r4, #12]
 800e304:	f04f 30ff 	mov.w	r0, #4294967295
 800e308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e30c:	6921      	ldr	r1, [r4, #16]
 800e30e:	464a      	mov	r2, r9
 800e310:	f7ff fe68 	bl	800dfe4 <memcpy>
 800e314:	89a3      	ldrh	r3, [r4, #12]
 800e316:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e31a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e31e:	81a3      	strh	r3, [r4, #12]
 800e320:	6126      	str	r6, [r4, #16]
 800e322:	6165      	str	r5, [r4, #20]
 800e324:	444e      	add	r6, r9
 800e326:	eba5 0509 	sub.w	r5, r5, r9
 800e32a:	6026      	str	r6, [r4, #0]
 800e32c:	60a5      	str	r5, [r4, #8]
 800e32e:	463e      	mov	r6, r7
 800e330:	42be      	cmp	r6, r7
 800e332:	d900      	bls.n	800e336 <__ssputs_r+0x86>
 800e334:	463e      	mov	r6, r7
 800e336:	4632      	mov	r2, r6
 800e338:	6820      	ldr	r0, [r4, #0]
 800e33a:	4641      	mov	r1, r8
 800e33c:	f000 faa8 	bl	800e890 <memmove>
 800e340:	68a3      	ldr	r3, [r4, #8]
 800e342:	6822      	ldr	r2, [r4, #0]
 800e344:	1b9b      	subs	r3, r3, r6
 800e346:	4432      	add	r2, r6
 800e348:	60a3      	str	r3, [r4, #8]
 800e34a:	6022      	str	r2, [r4, #0]
 800e34c:	2000      	movs	r0, #0
 800e34e:	e7db      	b.n	800e308 <__ssputs_r+0x58>
 800e350:	462a      	mov	r2, r5
 800e352:	f000 fab7 	bl	800e8c4 <_realloc_r>
 800e356:	4606      	mov	r6, r0
 800e358:	2800      	cmp	r0, #0
 800e35a:	d1e1      	bne.n	800e320 <__ssputs_r+0x70>
 800e35c:	6921      	ldr	r1, [r4, #16]
 800e35e:	4650      	mov	r0, sl
 800e360:	f7ff ff56 	bl	800e210 <_free_r>
 800e364:	e7c7      	b.n	800e2f6 <__ssputs_r+0x46>
	...

0800e368 <_svfiprintf_r>:
 800e368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e36c:	4698      	mov	r8, r3
 800e36e:	898b      	ldrh	r3, [r1, #12]
 800e370:	061b      	lsls	r3, r3, #24
 800e372:	b09d      	sub	sp, #116	; 0x74
 800e374:	4607      	mov	r7, r0
 800e376:	460d      	mov	r5, r1
 800e378:	4614      	mov	r4, r2
 800e37a:	d50e      	bpl.n	800e39a <_svfiprintf_r+0x32>
 800e37c:	690b      	ldr	r3, [r1, #16]
 800e37e:	b963      	cbnz	r3, 800e39a <_svfiprintf_r+0x32>
 800e380:	2140      	movs	r1, #64	; 0x40
 800e382:	f7ff fe45 	bl	800e010 <_malloc_r>
 800e386:	6028      	str	r0, [r5, #0]
 800e388:	6128      	str	r0, [r5, #16]
 800e38a:	b920      	cbnz	r0, 800e396 <_svfiprintf_r+0x2e>
 800e38c:	230c      	movs	r3, #12
 800e38e:	603b      	str	r3, [r7, #0]
 800e390:	f04f 30ff 	mov.w	r0, #4294967295
 800e394:	e0d1      	b.n	800e53a <_svfiprintf_r+0x1d2>
 800e396:	2340      	movs	r3, #64	; 0x40
 800e398:	616b      	str	r3, [r5, #20]
 800e39a:	2300      	movs	r3, #0
 800e39c:	9309      	str	r3, [sp, #36]	; 0x24
 800e39e:	2320      	movs	r3, #32
 800e3a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3a8:	2330      	movs	r3, #48	; 0x30
 800e3aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e554 <_svfiprintf_r+0x1ec>
 800e3ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3b2:	f04f 0901 	mov.w	r9, #1
 800e3b6:	4623      	mov	r3, r4
 800e3b8:	469a      	mov	sl, r3
 800e3ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3be:	b10a      	cbz	r2, 800e3c4 <_svfiprintf_r+0x5c>
 800e3c0:	2a25      	cmp	r2, #37	; 0x25
 800e3c2:	d1f9      	bne.n	800e3b8 <_svfiprintf_r+0x50>
 800e3c4:	ebba 0b04 	subs.w	fp, sl, r4
 800e3c8:	d00b      	beq.n	800e3e2 <_svfiprintf_r+0x7a>
 800e3ca:	465b      	mov	r3, fp
 800e3cc:	4622      	mov	r2, r4
 800e3ce:	4629      	mov	r1, r5
 800e3d0:	4638      	mov	r0, r7
 800e3d2:	f7ff ff6d 	bl	800e2b0 <__ssputs_r>
 800e3d6:	3001      	adds	r0, #1
 800e3d8:	f000 80aa 	beq.w	800e530 <_svfiprintf_r+0x1c8>
 800e3dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3de:	445a      	add	r2, fp
 800e3e0:	9209      	str	r2, [sp, #36]	; 0x24
 800e3e2:	f89a 3000 	ldrb.w	r3, [sl]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	f000 80a2 	beq.w	800e530 <_svfiprintf_r+0x1c8>
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e3f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3f6:	f10a 0a01 	add.w	sl, sl, #1
 800e3fa:	9304      	str	r3, [sp, #16]
 800e3fc:	9307      	str	r3, [sp, #28]
 800e3fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e402:	931a      	str	r3, [sp, #104]	; 0x68
 800e404:	4654      	mov	r4, sl
 800e406:	2205      	movs	r2, #5
 800e408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e40c:	4851      	ldr	r0, [pc, #324]	; (800e554 <_svfiprintf_r+0x1ec>)
 800e40e:	f7f1 feff 	bl	8000210 <memchr>
 800e412:	9a04      	ldr	r2, [sp, #16]
 800e414:	b9d8      	cbnz	r0, 800e44e <_svfiprintf_r+0xe6>
 800e416:	06d0      	lsls	r0, r2, #27
 800e418:	bf44      	itt	mi
 800e41a:	2320      	movmi	r3, #32
 800e41c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e420:	0711      	lsls	r1, r2, #28
 800e422:	bf44      	itt	mi
 800e424:	232b      	movmi	r3, #43	; 0x2b
 800e426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e42a:	f89a 3000 	ldrb.w	r3, [sl]
 800e42e:	2b2a      	cmp	r3, #42	; 0x2a
 800e430:	d015      	beq.n	800e45e <_svfiprintf_r+0xf6>
 800e432:	9a07      	ldr	r2, [sp, #28]
 800e434:	4654      	mov	r4, sl
 800e436:	2000      	movs	r0, #0
 800e438:	f04f 0c0a 	mov.w	ip, #10
 800e43c:	4621      	mov	r1, r4
 800e43e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e442:	3b30      	subs	r3, #48	; 0x30
 800e444:	2b09      	cmp	r3, #9
 800e446:	d94e      	bls.n	800e4e6 <_svfiprintf_r+0x17e>
 800e448:	b1b0      	cbz	r0, 800e478 <_svfiprintf_r+0x110>
 800e44a:	9207      	str	r2, [sp, #28]
 800e44c:	e014      	b.n	800e478 <_svfiprintf_r+0x110>
 800e44e:	eba0 0308 	sub.w	r3, r0, r8
 800e452:	fa09 f303 	lsl.w	r3, r9, r3
 800e456:	4313      	orrs	r3, r2
 800e458:	9304      	str	r3, [sp, #16]
 800e45a:	46a2      	mov	sl, r4
 800e45c:	e7d2      	b.n	800e404 <_svfiprintf_r+0x9c>
 800e45e:	9b03      	ldr	r3, [sp, #12]
 800e460:	1d19      	adds	r1, r3, #4
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	9103      	str	r1, [sp, #12]
 800e466:	2b00      	cmp	r3, #0
 800e468:	bfbb      	ittet	lt
 800e46a:	425b      	neglt	r3, r3
 800e46c:	f042 0202 	orrlt.w	r2, r2, #2
 800e470:	9307      	strge	r3, [sp, #28]
 800e472:	9307      	strlt	r3, [sp, #28]
 800e474:	bfb8      	it	lt
 800e476:	9204      	strlt	r2, [sp, #16]
 800e478:	7823      	ldrb	r3, [r4, #0]
 800e47a:	2b2e      	cmp	r3, #46	; 0x2e
 800e47c:	d10c      	bne.n	800e498 <_svfiprintf_r+0x130>
 800e47e:	7863      	ldrb	r3, [r4, #1]
 800e480:	2b2a      	cmp	r3, #42	; 0x2a
 800e482:	d135      	bne.n	800e4f0 <_svfiprintf_r+0x188>
 800e484:	9b03      	ldr	r3, [sp, #12]
 800e486:	1d1a      	adds	r2, r3, #4
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	9203      	str	r2, [sp, #12]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	bfb8      	it	lt
 800e490:	f04f 33ff 	movlt.w	r3, #4294967295
 800e494:	3402      	adds	r4, #2
 800e496:	9305      	str	r3, [sp, #20]
 800e498:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e564 <_svfiprintf_r+0x1fc>
 800e49c:	7821      	ldrb	r1, [r4, #0]
 800e49e:	2203      	movs	r2, #3
 800e4a0:	4650      	mov	r0, sl
 800e4a2:	f7f1 feb5 	bl	8000210 <memchr>
 800e4a6:	b140      	cbz	r0, 800e4ba <_svfiprintf_r+0x152>
 800e4a8:	2340      	movs	r3, #64	; 0x40
 800e4aa:	eba0 000a 	sub.w	r0, r0, sl
 800e4ae:	fa03 f000 	lsl.w	r0, r3, r0
 800e4b2:	9b04      	ldr	r3, [sp, #16]
 800e4b4:	4303      	orrs	r3, r0
 800e4b6:	3401      	adds	r4, #1
 800e4b8:	9304      	str	r3, [sp, #16]
 800e4ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4be:	4826      	ldr	r0, [pc, #152]	; (800e558 <_svfiprintf_r+0x1f0>)
 800e4c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4c4:	2206      	movs	r2, #6
 800e4c6:	f7f1 fea3 	bl	8000210 <memchr>
 800e4ca:	2800      	cmp	r0, #0
 800e4cc:	d038      	beq.n	800e540 <_svfiprintf_r+0x1d8>
 800e4ce:	4b23      	ldr	r3, [pc, #140]	; (800e55c <_svfiprintf_r+0x1f4>)
 800e4d0:	bb1b      	cbnz	r3, 800e51a <_svfiprintf_r+0x1b2>
 800e4d2:	9b03      	ldr	r3, [sp, #12]
 800e4d4:	3307      	adds	r3, #7
 800e4d6:	f023 0307 	bic.w	r3, r3, #7
 800e4da:	3308      	adds	r3, #8
 800e4dc:	9303      	str	r3, [sp, #12]
 800e4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4e0:	4433      	add	r3, r6
 800e4e2:	9309      	str	r3, [sp, #36]	; 0x24
 800e4e4:	e767      	b.n	800e3b6 <_svfiprintf_r+0x4e>
 800e4e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4ea:	460c      	mov	r4, r1
 800e4ec:	2001      	movs	r0, #1
 800e4ee:	e7a5      	b.n	800e43c <_svfiprintf_r+0xd4>
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	3401      	adds	r4, #1
 800e4f4:	9305      	str	r3, [sp, #20]
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	f04f 0c0a 	mov.w	ip, #10
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e502:	3a30      	subs	r2, #48	; 0x30
 800e504:	2a09      	cmp	r2, #9
 800e506:	d903      	bls.n	800e510 <_svfiprintf_r+0x1a8>
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d0c5      	beq.n	800e498 <_svfiprintf_r+0x130>
 800e50c:	9105      	str	r1, [sp, #20]
 800e50e:	e7c3      	b.n	800e498 <_svfiprintf_r+0x130>
 800e510:	fb0c 2101 	mla	r1, ip, r1, r2
 800e514:	4604      	mov	r4, r0
 800e516:	2301      	movs	r3, #1
 800e518:	e7f0      	b.n	800e4fc <_svfiprintf_r+0x194>
 800e51a:	ab03      	add	r3, sp, #12
 800e51c:	9300      	str	r3, [sp, #0]
 800e51e:	462a      	mov	r2, r5
 800e520:	4b0f      	ldr	r3, [pc, #60]	; (800e560 <_svfiprintf_r+0x1f8>)
 800e522:	a904      	add	r1, sp, #16
 800e524:	4638      	mov	r0, r7
 800e526:	f3af 8000 	nop.w
 800e52a:	1c42      	adds	r2, r0, #1
 800e52c:	4606      	mov	r6, r0
 800e52e:	d1d6      	bne.n	800e4de <_svfiprintf_r+0x176>
 800e530:	89ab      	ldrh	r3, [r5, #12]
 800e532:	065b      	lsls	r3, r3, #25
 800e534:	f53f af2c 	bmi.w	800e390 <_svfiprintf_r+0x28>
 800e538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e53a:	b01d      	add	sp, #116	; 0x74
 800e53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e540:	ab03      	add	r3, sp, #12
 800e542:	9300      	str	r3, [sp, #0]
 800e544:	462a      	mov	r2, r5
 800e546:	4b06      	ldr	r3, [pc, #24]	; (800e560 <_svfiprintf_r+0x1f8>)
 800e548:	a904      	add	r1, sp, #16
 800e54a:	4638      	mov	r0, r7
 800e54c:	f000 f87a 	bl	800e644 <_printf_i>
 800e550:	e7eb      	b.n	800e52a <_svfiprintf_r+0x1c2>
 800e552:	bf00      	nop
 800e554:	08010a28 	.word	0x08010a28
 800e558:	08010a32 	.word	0x08010a32
 800e55c:	00000000 	.word	0x00000000
 800e560:	0800e2b1 	.word	0x0800e2b1
 800e564:	08010a2e 	.word	0x08010a2e

0800e568 <_printf_common>:
 800e568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e56c:	4616      	mov	r6, r2
 800e56e:	4699      	mov	r9, r3
 800e570:	688a      	ldr	r2, [r1, #8]
 800e572:	690b      	ldr	r3, [r1, #16]
 800e574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e578:	4293      	cmp	r3, r2
 800e57a:	bfb8      	it	lt
 800e57c:	4613      	movlt	r3, r2
 800e57e:	6033      	str	r3, [r6, #0]
 800e580:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e584:	4607      	mov	r7, r0
 800e586:	460c      	mov	r4, r1
 800e588:	b10a      	cbz	r2, 800e58e <_printf_common+0x26>
 800e58a:	3301      	adds	r3, #1
 800e58c:	6033      	str	r3, [r6, #0]
 800e58e:	6823      	ldr	r3, [r4, #0]
 800e590:	0699      	lsls	r1, r3, #26
 800e592:	bf42      	ittt	mi
 800e594:	6833      	ldrmi	r3, [r6, #0]
 800e596:	3302      	addmi	r3, #2
 800e598:	6033      	strmi	r3, [r6, #0]
 800e59a:	6825      	ldr	r5, [r4, #0]
 800e59c:	f015 0506 	ands.w	r5, r5, #6
 800e5a0:	d106      	bne.n	800e5b0 <_printf_common+0x48>
 800e5a2:	f104 0a19 	add.w	sl, r4, #25
 800e5a6:	68e3      	ldr	r3, [r4, #12]
 800e5a8:	6832      	ldr	r2, [r6, #0]
 800e5aa:	1a9b      	subs	r3, r3, r2
 800e5ac:	42ab      	cmp	r3, r5
 800e5ae:	dc26      	bgt.n	800e5fe <_printf_common+0x96>
 800e5b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e5b4:	1e13      	subs	r3, r2, #0
 800e5b6:	6822      	ldr	r2, [r4, #0]
 800e5b8:	bf18      	it	ne
 800e5ba:	2301      	movne	r3, #1
 800e5bc:	0692      	lsls	r2, r2, #26
 800e5be:	d42b      	bmi.n	800e618 <_printf_common+0xb0>
 800e5c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e5c4:	4649      	mov	r1, r9
 800e5c6:	4638      	mov	r0, r7
 800e5c8:	47c0      	blx	r8
 800e5ca:	3001      	adds	r0, #1
 800e5cc:	d01e      	beq.n	800e60c <_printf_common+0xa4>
 800e5ce:	6823      	ldr	r3, [r4, #0]
 800e5d0:	68e5      	ldr	r5, [r4, #12]
 800e5d2:	6832      	ldr	r2, [r6, #0]
 800e5d4:	f003 0306 	and.w	r3, r3, #6
 800e5d8:	2b04      	cmp	r3, #4
 800e5da:	bf08      	it	eq
 800e5dc:	1aad      	subeq	r5, r5, r2
 800e5de:	68a3      	ldr	r3, [r4, #8]
 800e5e0:	6922      	ldr	r2, [r4, #16]
 800e5e2:	bf0c      	ite	eq
 800e5e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5e8:	2500      	movne	r5, #0
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	bfc4      	itt	gt
 800e5ee:	1a9b      	subgt	r3, r3, r2
 800e5f0:	18ed      	addgt	r5, r5, r3
 800e5f2:	2600      	movs	r6, #0
 800e5f4:	341a      	adds	r4, #26
 800e5f6:	42b5      	cmp	r5, r6
 800e5f8:	d11a      	bne.n	800e630 <_printf_common+0xc8>
 800e5fa:	2000      	movs	r0, #0
 800e5fc:	e008      	b.n	800e610 <_printf_common+0xa8>
 800e5fe:	2301      	movs	r3, #1
 800e600:	4652      	mov	r2, sl
 800e602:	4649      	mov	r1, r9
 800e604:	4638      	mov	r0, r7
 800e606:	47c0      	blx	r8
 800e608:	3001      	adds	r0, #1
 800e60a:	d103      	bne.n	800e614 <_printf_common+0xac>
 800e60c:	f04f 30ff 	mov.w	r0, #4294967295
 800e610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e614:	3501      	adds	r5, #1
 800e616:	e7c6      	b.n	800e5a6 <_printf_common+0x3e>
 800e618:	18e1      	adds	r1, r4, r3
 800e61a:	1c5a      	adds	r2, r3, #1
 800e61c:	2030      	movs	r0, #48	; 0x30
 800e61e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e622:	4422      	add	r2, r4
 800e624:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e628:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e62c:	3302      	adds	r3, #2
 800e62e:	e7c7      	b.n	800e5c0 <_printf_common+0x58>
 800e630:	2301      	movs	r3, #1
 800e632:	4622      	mov	r2, r4
 800e634:	4649      	mov	r1, r9
 800e636:	4638      	mov	r0, r7
 800e638:	47c0      	blx	r8
 800e63a:	3001      	adds	r0, #1
 800e63c:	d0e6      	beq.n	800e60c <_printf_common+0xa4>
 800e63e:	3601      	adds	r6, #1
 800e640:	e7d9      	b.n	800e5f6 <_printf_common+0x8e>
	...

0800e644 <_printf_i>:
 800e644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e648:	460c      	mov	r4, r1
 800e64a:	4691      	mov	r9, r2
 800e64c:	7e27      	ldrb	r7, [r4, #24]
 800e64e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e650:	2f78      	cmp	r7, #120	; 0x78
 800e652:	4680      	mov	r8, r0
 800e654:	469a      	mov	sl, r3
 800e656:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e65a:	d807      	bhi.n	800e66c <_printf_i+0x28>
 800e65c:	2f62      	cmp	r7, #98	; 0x62
 800e65e:	d80a      	bhi.n	800e676 <_printf_i+0x32>
 800e660:	2f00      	cmp	r7, #0
 800e662:	f000 80d8 	beq.w	800e816 <_printf_i+0x1d2>
 800e666:	2f58      	cmp	r7, #88	; 0x58
 800e668:	f000 80a3 	beq.w	800e7b2 <_printf_i+0x16e>
 800e66c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e674:	e03a      	b.n	800e6ec <_printf_i+0xa8>
 800e676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e67a:	2b15      	cmp	r3, #21
 800e67c:	d8f6      	bhi.n	800e66c <_printf_i+0x28>
 800e67e:	a001      	add	r0, pc, #4	; (adr r0, 800e684 <_printf_i+0x40>)
 800e680:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e684:	0800e6dd 	.word	0x0800e6dd
 800e688:	0800e6f1 	.word	0x0800e6f1
 800e68c:	0800e66d 	.word	0x0800e66d
 800e690:	0800e66d 	.word	0x0800e66d
 800e694:	0800e66d 	.word	0x0800e66d
 800e698:	0800e66d 	.word	0x0800e66d
 800e69c:	0800e6f1 	.word	0x0800e6f1
 800e6a0:	0800e66d 	.word	0x0800e66d
 800e6a4:	0800e66d 	.word	0x0800e66d
 800e6a8:	0800e66d 	.word	0x0800e66d
 800e6ac:	0800e66d 	.word	0x0800e66d
 800e6b0:	0800e7fd 	.word	0x0800e7fd
 800e6b4:	0800e721 	.word	0x0800e721
 800e6b8:	0800e7df 	.word	0x0800e7df
 800e6bc:	0800e66d 	.word	0x0800e66d
 800e6c0:	0800e66d 	.word	0x0800e66d
 800e6c4:	0800e81f 	.word	0x0800e81f
 800e6c8:	0800e66d 	.word	0x0800e66d
 800e6cc:	0800e721 	.word	0x0800e721
 800e6d0:	0800e66d 	.word	0x0800e66d
 800e6d4:	0800e66d 	.word	0x0800e66d
 800e6d8:	0800e7e7 	.word	0x0800e7e7
 800e6dc:	680b      	ldr	r3, [r1, #0]
 800e6de:	1d1a      	adds	r2, r3, #4
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	600a      	str	r2, [r1, #0]
 800e6e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e6e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	e0a3      	b.n	800e838 <_printf_i+0x1f4>
 800e6f0:	6825      	ldr	r5, [r4, #0]
 800e6f2:	6808      	ldr	r0, [r1, #0]
 800e6f4:	062e      	lsls	r6, r5, #24
 800e6f6:	f100 0304 	add.w	r3, r0, #4
 800e6fa:	d50a      	bpl.n	800e712 <_printf_i+0xce>
 800e6fc:	6805      	ldr	r5, [r0, #0]
 800e6fe:	600b      	str	r3, [r1, #0]
 800e700:	2d00      	cmp	r5, #0
 800e702:	da03      	bge.n	800e70c <_printf_i+0xc8>
 800e704:	232d      	movs	r3, #45	; 0x2d
 800e706:	426d      	negs	r5, r5
 800e708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e70c:	485e      	ldr	r0, [pc, #376]	; (800e888 <_printf_i+0x244>)
 800e70e:	230a      	movs	r3, #10
 800e710:	e019      	b.n	800e746 <_printf_i+0x102>
 800e712:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e716:	6805      	ldr	r5, [r0, #0]
 800e718:	600b      	str	r3, [r1, #0]
 800e71a:	bf18      	it	ne
 800e71c:	b22d      	sxthne	r5, r5
 800e71e:	e7ef      	b.n	800e700 <_printf_i+0xbc>
 800e720:	680b      	ldr	r3, [r1, #0]
 800e722:	6825      	ldr	r5, [r4, #0]
 800e724:	1d18      	adds	r0, r3, #4
 800e726:	6008      	str	r0, [r1, #0]
 800e728:	0628      	lsls	r0, r5, #24
 800e72a:	d501      	bpl.n	800e730 <_printf_i+0xec>
 800e72c:	681d      	ldr	r5, [r3, #0]
 800e72e:	e002      	b.n	800e736 <_printf_i+0xf2>
 800e730:	0669      	lsls	r1, r5, #25
 800e732:	d5fb      	bpl.n	800e72c <_printf_i+0xe8>
 800e734:	881d      	ldrh	r5, [r3, #0]
 800e736:	4854      	ldr	r0, [pc, #336]	; (800e888 <_printf_i+0x244>)
 800e738:	2f6f      	cmp	r7, #111	; 0x6f
 800e73a:	bf0c      	ite	eq
 800e73c:	2308      	moveq	r3, #8
 800e73e:	230a      	movne	r3, #10
 800e740:	2100      	movs	r1, #0
 800e742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e746:	6866      	ldr	r6, [r4, #4]
 800e748:	60a6      	str	r6, [r4, #8]
 800e74a:	2e00      	cmp	r6, #0
 800e74c:	bfa2      	ittt	ge
 800e74e:	6821      	ldrge	r1, [r4, #0]
 800e750:	f021 0104 	bicge.w	r1, r1, #4
 800e754:	6021      	strge	r1, [r4, #0]
 800e756:	b90d      	cbnz	r5, 800e75c <_printf_i+0x118>
 800e758:	2e00      	cmp	r6, #0
 800e75a:	d04d      	beq.n	800e7f8 <_printf_i+0x1b4>
 800e75c:	4616      	mov	r6, r2
 800e75e:	fbb5 f1f3 	udiv	r1, r5, r3
 800e762:	fb03 5711 	mls	r7, r3, r1, r5
 800e766:	5dc7      	ldrb	r7, [r0, r7]
 800e768:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e76c:	462f      	mov	r7, r5
 800e76e:	42bb      	cmp	r3, r7
 800e770:	460d      	mov	r5, r1
 800e772:	d9f4      	bls.n	800e75e <_printf_i+0x11a>
 800e774:	2b08      	cmp	r3, #8
 800e776:	d10b      	bne.n	800e790 <_printf_i+0x14c>
 800e778:	6823      	ldr	r3, [r4, #0]
 800e77a:	07df      	lsls	r7, r3, #31
 800e77c:	d508      	bpl.n	800e790 <_printf_i+0x14c>
 800e77e:	6923      	ldr	r3, [r4, #16]
 800e780:	6861      	ldr	r1, [r4, #4]
 800e782:	4299      	cmp	r1, r3
 800e784:	bfde      	ittt	le
 800e786:	2330      	movle	r3, #48	; 0x30
 800e788:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e78c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e790:	1b92      	subs	r2, r2, r6
 800e792:	6122      	str	r2, [r4, #16]
 800e794:	f8cd a000 	str.w	sl, [sp]
 800e798:	464b      	mov	r3, r9
 800e79a:	aa03      	add	r2, sp, #12
 800e79c:	4621      	mov	r1, r4
 800e79e:	4640      	mov	r0, r8
 800e7a0:	f7ff fee2 	bl	800e568 <_printf_common>
 800e7a4:	3001      	adds	r0, #1
 800e7a6:	d14c      	bne.n	800e842 <_printf_i+0x1fe>
 800e7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ac:	b004      	add	sp, #16
 800e7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7b2:	4835      	ldr	r0, [pc, #212]	; (800e888 <_printf_i+0x244>)
 800e7b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e7b8:	6823      	ldr	r3, [r4, #0]
 800e7ba:	680e      	ldr	r6, [r1, #0]
 800e7bc:	061f      	lsls	r7, r3, #24
 800e7be:	f856 5b04 	ldr.w	r5, [r6], #4
 800e7c2:	600e      	str	r6, [r1, #0]
 800e7c4:	d514      	bpl.n	800e7f0 <_printf_i+0x1ac>
 800e7c6:	07d9      	lsls	r1, r3, #31
 800e7c8:	bf44      	itt	mi
 800e7ca:	f043 0320 	orrmi.w	r3, r3, #32
 800e7ce:	6023      	strmi	r3, [r4, #0]
 800e7d0:	b91d      	cbnz	r5, 800e7da <_printf_i+0x196>
 800e7d2:	6823      	ldr	r3, [r4, #0]
 800e7d4:	f023 0320 	bic.w	r3, r3, #32
 800e7d8:	6023      	str	r3, [r4, #0]
 800e7da:	2310      	movs	r3, #16
 800e7dc:	e7b0      	b.n	800e740 <_printf_i+0xfc>
 800e7de:	6823      	ldr	r3, [r4, #0]
 800e7e0:	f043 0320 	orr.w	r3, r3, #32
 800e7e4:	6023      	str	r3, [r4, #0]
 800e7e6:	2378      	movs	r3, #120	; 0x78
 800e7e8:	4828      	ldr	r0, [pc, #160]	; (800e88c <_printf_i+0x248>)
 800e7ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e7ee:	e7e3      	b.n	800e7b8 <_printf_i+0x174>
 800e7f0:	065e      	lsls	r6, r3, #25
 800e7f2:	bf48      	it	mi
 800e7f4:	b2ad      	uxthmi	r5, r5
 800e7f6:	e7e6      	b.n	800e7c6 <_printf_i+0x182>
 800e7f8:	4616      	mov	r6, r2
 800e7fa:	e7bb      	b.n	800e774 <_printf_i+0x130>
 800e7fc:	680b      	ldr	r3, [r1, #0]
 800e7fe:	6826      	ldr	r6, [r4, #0]
 800e800:	6960      	ldr	r0, [r4, #20]
 800e802:	1d1d      	adds	r5, r3, #4
 800e804:	600d      	str	r5, [r1, #0]
 800e806:	0635      	lsls	r5, r6, #24
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	d501      	bpl.n	800e810 <_printf_i+0x1cc>
 800e80c:	6018      	str	r0, [r3, #0]
 800e80e:	e002      	b.n	800e816 <_printf_i+0x1d2>
 800e810:	0671      	lsls	r1, r6, #25
 800e812:	d5fb      	bpl.n	800e80c <_printf_i+0x1c8>
 800e814:	8018      	strh	r0, [r3, #0]
 800e816:	2300      	movs	r3, #0
 800e818:	6123      	str	r3, [r4, #16]
 800e81a:	4616      	mov	r6, r2
 800e81c:	e7ba      	b.n	800e794 <_printf_i+0x150>
 800e81e:	680b      	ldr	r3, [r1, #0]
 800e820:	1d1a      	adds	r2, r3, #4
 800e822:	600a      	str	r2, [r1, #0]
 800e824:	681e      	ldr	r6, [r3, #0]
 800e826:	6862      	ldr	r2, [r4, #4]
 800e828:	2100      	movs	r1, #0
 800e82a:	4630      	mov	r0, r6
 800e82c:	f7f1 fcf0 	bl	8000210 <memchr>
 800e830:	b108      	cbz	r0, 800e836 <_printf_i+0x1f2>
 800e832:	1b80      	subs	r0, r0, r6
 800e834:	6060      	str	r0, [r4, #4]
 800e836:	6863      	ldr	r3, [r4, #4]
 800e838:	6123      	str	r3, [r4, #16]
 800e83a:	2300      	movs	r3, #0
 800e83c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e840:	e7a8      	b.n	800e794 <_printf_i+0x150>
 800e842:	6923      	ldr	r3, [r4, #16]
 800e844:	4632      	mov	r2, r6
 800e846:	4649      	mov	r1, r9
 800e848:	4640      	mov	r0, r8
 800e84a:	47d0      	blx	sl
 800e84c:	3001      	adds	r0, #1
 800e84e:	d0ab      	beq.n	800e7a8 <_printf_i+0x164>
 800e850:	6823      	ldr	r3, [r4, #0]
 800e852:	079b      	lsls	r3, r3, #30
 800e854:	d413      	bmi.n	800e87e <_printf_i+0x23a>
 800e856:	68e0      	ldr	r0, [r4, #12]
 800e858:	9b03      	ldr	r3, [sp, #12]
 800e85a:	4298      	cmp	r0, r3
 800e85c:	bfb8      	it	lt
 800e85e:	4618      	movlt	r0, r3
 800e860:	e7a4      	b.n	800e7ac <_printf_i+0x168>
 800e862:	2301      	movs	r3, #1
 800e864:	4632      	mov	r2, r6
 800e866:	4649      	mov	r1, r9
 800e868:	4640      	mov	r0, r8
 800e86a:	47d0      	blx	sl
 800e86c:	3001      	adds	r0, #1
 800e86e:	d09b      	beq.n	800e7a8 <_printf_i+0x164>
 800e870:	3501      	adds	r5, #1
 800e872:	68e3      	ldr	r3, [r4, #12]
 800e874:	9903      	ldr	r1, [sp, #12]
 800e876:	1a5b      	subs	r3, r3, r1
 800e878:	42ab      	cmp	r3, r5
 800e87a:	dcf2      	bgt.n	800e862 <_printf_i+0x21e>
 800e87c:	e7eb      	b.n	800e856 <_printf_i+0x212>
 800e87e:	2500      	movs	r5, #0
 800e880:	f104 0619 	add.w	r6, r4, #25
 800e884:	e7f5      	b.n	800e872 <_printf_i+0x22e>
 800e886:	bf00      	nop
 800e888:	08010a39 	.word	0x08010a39
 800e88c:	08010a4a 	.word	0x08010a4a

0800e890 <memmove>:
 800e890:	4288      	cmp	r0, r1
 800e892:	b510      	push	{r4, lr}
 800e894:	eb01 0402 	add.w	r4, r1, r2
 800e898:	d902      	bls.n	800e8a0 <memmove+0x10>
 800e89a:	4284      	cmp	r4, r0
 800e89c:	4623      	mov	r3, r4
 800e89e:	d807      	bhi.n	800e8b0 <memmove+0x20>
 800e8a0:	1e43      	subs	r3, r0, #1
 800e8a2:	42a1      	cmp	r1, r4
 800e8a4:	d008      	beq.n	800e8b8 <memmove+0x28>
 800e8a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8ae:	e7f8      	b.n	800e8a2 <memmove+0x12>
 800e8b0:	4402      	add	r2, r0
 800e8b2:	4601      	mov	r1, r0
 800e8b4:	428a      	cmp	r2, r1
 800e8b6:	d100      	bne.n	800e8ba <memmove+0x2a>
 800e8b8:	bd10      	pop	{r4, pc}
 800e8ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e8be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e8c2:	e7f7      	b.n	800e8b4 <memmove+0x24>

0800e8c4 <_realloc_r>:
 800e8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c6:	4607      	mov	r7, r0
 800e8c8:	4614      	mov	r4, r2
 800e8ca:	460e      	mov	r6, r1
 800e8cc:	b921      	cbnz	r1, 800e8d8 <_realloc_r+0x14>
 800e8ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e8d2:	4611      	mov	r1, r2
 800e8d4:	f7ff bb9c 	b.w	800e010 <_malloc_r>
 800e8d8:	b922      	cbnz	r2, 800e8e4 <_realloc_r+0x20>
 800e8da:	f7ff fc99 	bl	800e210 <_free_r>
 800e8de:	4625      	mov	r5, r4
 800e8e0:	4628      	mov	r0, r5
 800e8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8e4:	f000 f814 	bl	800e910 <_malloc_usable_size_r>
 800e8e8:	42a0      	cmp	r0, r4
 800e8ea:	d20f      	bcs.n	800e90c <_realloc_r+0x48>
 800e8ec:	4621      	mov	r1, r4
 800e8ee:	4638      	mov	r0, r7
 800e8f0:	f7ff fb8e 	bl	800e010 <_malloc_r>
 800e8f4:	4605      	mov	r5, r0
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	d0f2      	beq.n	800e8e0 <_realloc_r+0x1c>
 800e8fa:	4631      	mov	r1, r6
 800e8fc:	4622      	mov	r2, r4
 800e8fe:	f7ff fb71 	bl	800dfe4 <memcpy>
 800e902:	4631      	mov	r1, r6
 800e904:	4638      	mov	r0, r7
 800e906:	f7ff fc83 	bl	800e210 <_free_r>
 800e90a:	e7e9      	b.n	800e8e0 <_realloc_r+0x1c>
 800e90c:	4635      	mov	r5, r6
 800e90e:	e7e7      	b.n	800e8e0 <_realloc_r+0x1c>

0800e910 <_malloc_usable_size_r>:
 800e910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e914:	1f18      	subs	r0, r3, #4
 800e916:	2b00      	cmp	r3, #0
 800e918:	bfbc      	itt	lt
 800e91a:	580b      	ldrlt	r3, [r1, r0]
 800e91c:	18c0      	addlt	r0, r0, r3
 800e91e:	4770      	bx	lr

0800e920 <_init>:
 800e920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e922:	bf00      	nop
 800e924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e926:	bc08      	pop	{r3}
 800e928:	469e      	mov	lr, r3
 800e92a:	4770      	bx	lr

0800e92c <_fini>:
 800e92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e92e:	bf00      	nop
 800e930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e932:	bc08      	pop	{r3}
 800e934:	469e      	mov	lr, r3
 800e936:	4770      	bx	lr
