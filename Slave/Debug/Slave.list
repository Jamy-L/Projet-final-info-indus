
Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e138  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002100  0800e308  0800e308  0001e308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010408  08010408  000300c4  2**0
                  CONTENTS
  4 .ARM          00000008  08010408  08010408  00020408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010410  08010410  000300c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010410  08010410  00020410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010414  08010414  00020414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08010418  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004954  200000c4  080104dc  000300c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a18  080104dc  00034a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000338ad  00000000  00000000  000300f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f0b  00000000  00000000  000639a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002678  00000000  00000000  000698b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002410  00000000  00000000  0006bf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eb74  00000000  00000000  0006e338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fe6b  00000000  00000000  0009ceac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117cc5  00000000  00000000  000ccd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e49dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a844  00000000  00000000  001e4a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e2f0 	.word	0x0800e2f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c8 	.word	0x200000c8
 800020c:	0800e2f0 	.word	0x0800e2f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <vApplicationGetIdleTaskMemory+0x30>)
 80005be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	200000e0 	.word	0x200000e0
 80005d8:	20000194 	.word	0x20000194

080005dc <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005e6:	20c8      	movs	r0, #200	; 0xc8
 80005e8:	f002 f83c 	bl	8002664 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005ec:	f000 f9b4 	bl	8000958 <ft5336_I2C_InitializeIfRequired>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b084      	sub	sp, #16
 8000612:	af00      	add	r7, sp, #0
 8000614:	4603      	mov	r3, r0
 8000616:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000620:	2300      	movs	r3, #0
 8000622:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000624:	f000 f998 	bl	8000958 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	e010      	b.n	8000650 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	21a8      	movs	r1, #168	; 0xa8
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fff7 	bl	8002628 <TS_IO_Read>
 800063a:	4603      	mov	r3, r0
 800063c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800063e:	7b7b      	ldrb	r3, [r7, #13]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b51      	cmp	r3, #81	; 0x51
 8000644:	d101      	bne.n	800064a <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000646:	2301      	movs	r3, #1
 8000648:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	3301      	adds	r3, #1
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d802      	bhi.n	800065c <ft5336_ReadID+0x4e>
 8000656:	7bbb      	ldrb	r3, [r7, #14]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0e8      	beq.n	800062e <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 800065c:	7b7b      	ldrb	r3, [r7, #13]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	b29b      	uxth	r3, r3
}
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	4603      	mov	r3, r0
 8000672:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	4618      	mov	r0, r3
 8000678:	f000 f97e 	bl	8000978 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f932 	bl	80008e8 <ft5336_TS_DisableIT>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2102      	movs	r1, #2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 ffc1 	bl	8002628 <TS_IO_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 030f 	and.w	r3, r3, #15
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	2b05      	cmp	r3, #5
 80006bc:	d901      	bls.n	80006c2 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <ft5336_TS_DetectTouch+0x50>)
 80006c8:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <ft5336_TS_DetectTouch+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	b2db      	uxtb	r3, r3
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000394 	.word	0x20000394

080006e0 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000702:	4b6d      	ldr	r3, [pc, #436]	; (80008b8 <ft5336_TS_GetXY+0x1d8>)
 8000704:	789a      	ldrb	r2, [r3, #2]
 8000706:	4b6c      	ldr	r3, [pc, #432]	; (80008b8 <ft5336_TS_GetXY+0x1d8>)
 8000708:	785b      	ldrb	r3, [r3, #1]
 800070a:	429a      	cmp	r2, r3
 800070c:	f080 80cf 	bcs.w	80008ae <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000710:	4b69      	ldr	r3, [pc, #420]	; (80008b8 <ft5336_TS_GetXY+0x1d8>)
 8000712:	789b      	ldrb	r3, [r3, #2]
 8000714:	2b09      	cmp	r3, #9
 8000716:	d871      	bhi.n	80007fc <ft5336_TS_GetXY+0x11c>
 8000718:	a201      	add	r2, pc, #4	; (adr r2, 8000720 <ft5336_TS_GetXY+0x40>)
 800071a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071e:	bf00      	nop
 8000720:	08000749 	.word	0x08000749
 8000724:	0800075b 	.word	0x0800075b
 8000728:	0800076d 	.word	0x0800076d
 800072c:	0800077f 	.word	0x0800077f
 8000730:	08000791 	.word	0x08000791
 8000734:	080007a3 	.word	0x080007a3
 8000738:	080007b5 	.word	0x080007b5
 800073c:	080007c7 	.word	0x080007c7
 8000740:	080007d9 	.word	0x080007d9
 8000744:	080007eb 	.word	0x080007eb
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000748:	2304      	movs	r3, #4
 800074a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 800074c:	2303      	movs	r3, #3
 800074e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000750:	2306      	movs	r3, #6
 8000752:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000754:	2305      	movs	r3, #5
 8000756:	753b      	strb	r3, [r7, #20]
      break;
 8000758:	e051      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800075a:	230a      	movs	r3, #10
 800075c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800075e:	2309      	movs	r3, #9
 8000760:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000762:	230c      	movs	r3, #12
 8000764:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000766:	230b      	movs	r3, #11
 8000768:	753b      	strb	r3, [r7, #20]
      break;
 800076a:	e048      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 800076c:	2310      	movs	r3, #16
 800076e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000770:	230f      	movs	r3, #15
 8000772:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000774:	2312      	movs	r3, #18
 8000776:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000778:	2311      	movs	r3, #17
 800077a:	753b      	strb	r3, [r7, #20]
      break;
 800077c:	e03f      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800077e:	2316      	movs	r3, #22
 8000780:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000782:	2315      	movs	r3, #21
 8000784:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000786:	2318      	movs	r3, #24
 8000788:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800078a:	2317      	movs	r3, #23
 800078c:	753b      	strb	r3, [r7, #20]
      break;
 800078e:	e036      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000790:	231c      	movs	r3, #28
 8000792:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000794:	231b      	movs	r3, #27
 8000796:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000798:	231e      	movs	r3, #30
 800079a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 800079c:	231d      	movs	r3, #29
 800079e:	753b      	strb	r3, [r7, #20]
      break;
 80007a0:	e02d      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007a2:	2322      	movs	r3, #34	; 0x22
 80007a4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007a6:	2321      	movs	r3, #33	; 0x21
 80007a8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007aa:	2324      	movs	r3, #36	; 0x24
 80007ac:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007ae:	2323      	movs	r3, #35	; 0x23
 80007b0:	753b      	strb	r3, [r7, #20]
      break;
 80007b2:	e024      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007b4:	2328      	movs	r3, #40	; 0x28
 80007b6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007b8:	2327      	movs	r3, #39	; 0x27
 80007ba:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007bc:	232a      	movs	r3, #42	; 0x2a
 80007be:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007c0:	2329      	movs	r3, #41	; 0x29
 80007c2:	753b      	strb	r3, [r7, #20]
      break;
 80007c4:	e01b      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80007c6:	232e      	movs	r3, #46	; 0x2e
 80007c8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80007ca:	232d      	movs	r3, #45	; 0x2d
 80007cc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007ce:	2330      	movs	r3, #48	; 0x30
 80007d0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007d2:	232f      	movs	r3, #47	; 0x2f
 80007d4:	753b      	strb	r3, [r7, #20]
      break;
 80007d6:	e012      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007d8:	2334      	movs	r3, #52	; 0x34
 80007da:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007dc:	2333      	movs	r3, #51	; 0x33
 80007de:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007e0:	2336      	movs	r3, #54	; 0x36
 80007e2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007e4:	2335      	movs	r3, #53	; 0x35
 80007e6:	753b      	strb	r3, [r7, #20]
      break;
 80007e8:	e009      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007ea:	233a      	movs	r3, #58	; 0x3a
 80007ec:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007ee:	2339      	movs	r3, #57	; 0x39
 80007f0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007f2:	233c      	movs	r3, #60	; 0x3c
 80007f4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007f6:	233b      	movs	r3, #59	; 0x3b
 80007f8:	753b      	strb	r3, [r7, #20]
      break;
 80007fa:	e000      	b.n	80007fe <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007fc:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	7dfa      	ldrb	r2, [r7, #23]
 8000804:	4611      	mov	r1, r2
 8000806:	4618      	mov	r0, r3
 8000808:	f001 ff0e 	bl	8002628 <TS_IO_Read>
 800080c:	4603      	mov	r3, r0
 800080e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000810:	7cfb      	ldrb	r3, [r7, #19]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	b29a      	uxth	r2, r3
 8000816:	4b29      	ldr	r3, [pc, #164]	; (80008bc <ft5336_TS_GetXY+0x1dc>)
 8000818:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800081a:	89fb      	ldrh	r3, [r7, #14]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	7dba      	ldrb	r2, [r7, #22]
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f001 ff00 	bl	8002628 <TS_IO_Read>
 8000828:	4603      	mov	r3, r0
 800082a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800082c:	7cfb      	ldrb	r3, [r7, #19]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	021b      	lsls	r3, r3, #8
 8000832:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000836:	b21a      	sxth	r2, r3
 8000838:	4b20      	ldr	r3, [pc, #128]	; (80008bc <ft5336_TS_GetXY+0x1dc>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21b      	sxth	r3, r3
 8000842:	b29a      	uxth	r2, r3
 8000844:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <ft5336_TS_GetXY+0x1dc>)
 8000846:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <ft5336_TS_GetXY+0x1dc>)
 800084a:	881a      	ldrh	r2, [r3, #0]
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000850:	89fb      	ldrh	r3, [r7, #14]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	7d7a      	ldrb	r2, [r7, #21]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fee5 	bl	8002628 <TS_IO_Read>
 800085e:	4603      	mov	r3, r0
 8000860:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000862:	7cfb      	ldrb	r3, [r7, #19]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	b29a      	uxth	r2, r3
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <ft5336_TS_GetXY+0x1dc>)
 800086a:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800086c:	89fb      	ldrh	r3, [r7, #14]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	7d3a      	ldrb	r2, [r7, #20]
 8000872:	4611      	mov	r1, r2
 8000874:	4618      	mov	r0, r3
 8000876:	f001 fed7 	bl	8002628 <TS_IO_Read>
 800087a:	4603      	mov	r3, r0
 800087c:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800087e:	7cfb      	ldrb	r3, [r7, #19]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	021b      	lsls	r3, r3, #8
 8000884:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000888:	b21a      	sxth	r2, r3
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <ft5336_TS_GetXY+0x1dc>)
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	b21b      	sxth	r3, r3
 8000890:	4313      	orrs	r3, r2
 8000892:	b21b      	sxth	r3, r3
 8000894:	b29a      	uxth	r2, r3
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <ft5336_TS_GetXY+0x1dc>)
 8000898:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <ft5336_TS_GetXY+0x1dc>)
 800089c:	881a      	ldrh	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <ft5336_TS_GetXY+0x1d8>)
 80008a4:	789b      	ldrb	r3, [r3, #2]
 80008a6:	3301      	adds	r3, #1
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <ft5336_TS_GetXY+0x1d8>)
 80008ac:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000394 	.word	0x20000394
 80008bc:	20000398 	.word	0x20000398

080008c0 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ce:	2301      	movs	r3, #1
 80008d0:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008d2:	88fb      	ldrh	r3, [r7, #6]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	7bfa      	ldrb	r2, [r7, #15]
 80008d8:	21a4      	movs	r1, #164	; 0xa4
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 fe8a 	bl	80025f4 <TS_IO_Write>
}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	7bfa      	ldrb	r2, [r7, #15]
 8000900:	21a4      	movs	r1, #164	; 0xa4
 8000902:	4618      	mov	r0, r3
 8000904:	f001 fe76 	bl	80025f4 <TS_IO_Write>
}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000944:	4b03      	ldr	r3, [pc, #12]	; (8000954 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000946:	781b      	ldrb	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000394 	.word	0x20000394

08000958 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800095c:	f7ff fff0 	bl	8000940 <ft5336_Get_I2C_InitializedStatus>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d104      	bne.n	8000970 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000966:	f001 fe3b 	bl	80025e0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800096a:	4b02      	ldr	r3, [pc, #8]	; (8000974 <ft5336_I2C_InitializeIfRequired+0x1c>)
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
  }
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000394 	.word	0x20000394

08000978 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <test_hitbox>:
uint16_t x_ennemi =100 ;
uint16_t y_ennemi =100 ;
uint8_t score1 = 0;
uint8_t score2 = 0;

int test_hitbox(int x1, int y1, int x2, int y2){
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	603b      	str	r3, [r7, #0]
	if ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)<=400){
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	68f9      	ldr	r1, [r7, #12]
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	1a8a      	subs	r2, r1, r2
 80009ae:	fb02 f203 	mul.w	r2, r2, r3
 80009b2:	68b9      	ldr	r1, [r7, #8]
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	1acb      	subs	r3, r1, r3
 80009b8:	68b8      	ldr	r0, [r7, #8]
 80009ba:	6839      	ldr	r1, [r7, #0]
 80009bc:	1a41      	subs	r1, r0, r1
 80009be:	fb01 f303 	mul.w	r3, r1, r3
 80009c2:	4413      	add	r3, r2
 80009c4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80009c8:	dc01      	bgt.n	80009ce <test_hitbox+0x3a>
		return 1;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <test_hitbox+0x3c>
	}
	else
		return 0;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009dc:	b5b0      	push	{r4, r5, r7, lr}
 80009de:	b0b8      	sub	sp, #224	; 0xe0
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e2:	f003 fe9a 	bl	800471a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e6:	f000 f939 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ea:	f000 ff05 	bl	80017f8 <MX_GPIO_Init>
  MX_ADC3_Init();
 80009ee:	f000 f9f9 	bl	8000de4 <MX_ADC3_Init>
  MX_DMA2D_Init();
 80009f2:	f000 fa73 	bl	8000edc <MX_DMA2D_Init>
  MX_FMC_Init();
 80009f6:	f000 feaf 	bl	8001758 <MX_FMC_Init>
  MX_I2C1_Init();
 80009fa:	f000 faa1 	bl	8000f40 <MX_I2C1_Init>
  MX_I2C3_Init();
 80009fe:	f000 fadf 	bl	8000fc0 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000a02:	f000 fb1d 	bl	8001040 <MX_LTDC_Init>
  MX_RTC_Init();
 8000a06:	f000 fb9d 	bl	8001144 <MX_RTC_Init>
  MX_SPI2_Init();
 8000a0a:	f000 fc41 	bl	8001290 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000a0e:	f000 fc79 	bl	8001304 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a12:	f000 fccb 	bl	80013ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a16:	f000 fd17 	bl	8001448 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000a1a:	f000 fd63 	bl	80014e4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000a1e:	f000 fdaf 	bl	8001580 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000a22:	f000 fe31 	bl	8001688 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000a26:	f000 fe67 	bl	80016f8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000a2a:	f000 f989 	bl	8000d40 <MX_ADC1_Init>
  MX_DAC_Init();
 8000a2e:	f000 fa2b 	bl	8000e88 <MX_DAC_Init>
  MX_UART7_Init();
 8000a32:	f000 fdf9 	bl	8001628 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000a36:	f001 fe21 	bl	800267c <BSP_LCD_Init>
BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000a3a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f001 feb4 	bl	80027ac <BSP_LCD_LayerDefaultInit>
BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000a44:	f001 fe8a 	bl	800275c <BSP_LCD_GetXSize>
 8000a48:	4604      	mov	r4, r0
 8000a4a:	f001 fe9b 	bl	8002784 <BSP_LCD_GetYSize>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	fb03 f304 	mul.w	r3, r3, r4
 8000a54:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f001 fea5 	bl	80027ac <BSP_LCD_LayerDefaultInit>
BSP_LCD_DisplayOn();
 8000a62:	f002 fb75 	bl	8003150 <BSP_LCD_DisplayOn>
BSP_LCD_SelectLayer(0);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f001 ff00 	bl	800286c <BSP_LCD_SelectLayer>
BSP_LCD_SelectLayer(1);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f001 fefd 	bl	800286c <BSP_LCD_SelectLayer>
BSP_LCD_Clear(00);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f001 ff3c 	bl	80028f0 <BSP_LCD_Clear>
BSP_LCD_SetFont(&Font12);
 8000a78:	4862      	ldr	r0, [pc, #392]	; (8000c04 <main+0x228>)
 8000a7a:	f001 ff1f 	bl	80028bc <BSP_LCD_SetFont>

BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000a7e:	f001 fe6d 	bl	800275c <BSP_LCD_GetXSize>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b29c      	uxth	r4, r3
 8000a86:	f001 fe7d 	bl	8002784 <BSP_LCD_GetYSize>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4620      	mov	r0, r4
 8000a92:	f002 ff2b 	bl	80038ec <BSP_TS_Init>

HAL_SPI_TransmitReceive_IT(&hspi2, pData_transmit, pData_received, Size);
 8000a96:	4b5c      	ldr	r3, [pc, #368]	; (8000c08 <main+0x22c>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	4a5c      	ldr	r2, [pc, #368]	; (8000c0c <main+0x230>)
 8000a9c:	495c      	ldr	r1, [pc, #368]	; (8000c10 <main+0x234>)
 8000a9e:	485d      	ldr	r0, [pc, #372]	; (8000c14 <main+0x238>)
 8000aa0:	f008 fc8a 	bl	80093b8 <HAL_SPI_TransmitReceive_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Mutex_Ecran */
  osSemaphoreDef(Mutex_Ecran);
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  Mutex_EcranHandle = osSemaphoreCreate(osSemaphore(Mutex_Ecran), 1);
 8000ab0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f00a fbbf 	bl	800b23a <osSemaphoreCreate>
 8000abc:	4603      	mov	r3, r0
 8000abe:	4a56      	ldr	r2, [pc, #344]	; (8000c18 <main+0x23c>)
 8000ac0:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Queue_Tir */
  osMessageQDef(Queue_Tir, 16, uint16_t);
 8000ac2:	4b56      	ldr	r3, [pc, #344]	; (8000c1c <main+0x240>)
 8000ac4:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000ac8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_TirHandle = osMessageCreate(osMessageQ(Queue_Tir), NULL);
 8000ace:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f00a fbe2 	bl	800b29e <osMessageCreate>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4a50      	ldr	r2, [pc, #320]	; (8000c20 <main+0x244>)
 8000ade:	6013      	str	r3, [r2, #0]

  /* definition and creation of Queue_hit */
  osMessageQDef(Queue_hit, 16, uint16_t);
 8000ae0:	4b4e      	ldr	r3, [pc, #312]	; (8000c1c <main+0x240>)
 8000ae2:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8000ae6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ae8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_hitHandle = osMessageCreate(osMessageQ(Queue_hit), NULL);
 8000aec:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f00a fbd3 	bl	800b29e <osMessageCreate>
 8000af8:	4603      	mov	r3, r0
 8000afa:	4a4a      	ldr	r2, [pc, #296]	; (8000c24 <main+0x248>)
 8000afc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Queue_Recieve */
  osMessageQDef(Queue_Recieve, 16, uint16_t);
 8000afe:	4b47      	ldr	r3, [pc, #284]	; (8000c1c <main+0x240>)
 8000b00:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000b04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_RecieveHandle = osMessageCreate(osMessageQ(Queue_Recieve), NULL);
 8000b0a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f00a fbc4 	bl	800b29e <osMessageCreate>
 8000b16:	4603      	mov	r3, r0
 8000b18:	4a43      	ldr	r2, [pc, #268]	; (8000c28 <main+0x24c>)
 8000b1a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b1c:	4b43      	ldr	r3, [pc, #268]	; (8000c2c <main+0x250>)
 8000b1e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000b22:	461d      	mov	r5, r3
 8000b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b30:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f00a fb1f 	bl	800b17a <osThreadCreate>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a3c      	ldr	r2, [pc, #240]	; (8000c30 <main+0x254>)
 8000b40:	6013      	str	r3, [r2, #0]

  /* definition and creation of viseur */
  osThreadDef(viseur, Task_Viseur, osPriorityBelowNormal, 0, 128);
 8000b42:	4b3c      	ldr	r3, [pc, #240]	; (8000c34 <main+0x258>)
 8000b44:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000b48:	461d      	mov	r5, r3
 8000b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  viseurHandle = osThreadCreate(osThread(viseur), NULL);
 8000b56:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f00a fb0c 	bl	800b17a <osThreadCreate>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4a34      	ldr	r2, [pc, #208]	; (8000c38 <main+0x25c>)
 8000b66:	6013      	str	r3, [r2, #0]

  /* definition and creation of tir */
  osThreadDef(tir, Task_Tir, osPriorityNormal, 0, 128);
 8000b68:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <main+0x260>)
 8000b6a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000b6e:	461d      	mov	r5, r3
 8000b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tirHandle = osThreadCreate(osThread(tir), NULL);
 8000b7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f00a faf9 	bl	800b17a <osThreadCreate>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	4a2d      	ldr	r2, [pc, #180]	; (8000c40 <main+0x264>)
 8000b8c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Led */
  osThreadDef(Led, Task_Tir, osPriorityAboveNormal, 0, 128);
 8000b8e:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <main+0x268>)
 8000b90:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000b94:	461d      	mov	r5, r3
 8000b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LedHandle = osThreadCreate(osThread(Led), NULL);
 8000ba2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f00a fae6 	bl	800b17a <osThreadCreate>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a25      	ldr	r2, [pc, #148]	; (8000c48 <main+0x26c>)
 8000bb2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Affichage */
  osThreadDef(Affichage, Task_Affichage, osPriorityHigh, 0, 128);
 8000bb4:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <main+0x270>)
 8000bb6:	f107 041c 	add.w	r4, r7, #28
 8000bba:	461d      	mov	r5, r3
 8000bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AffichageHandle = osThreadCreate(osThread(Affichage), NULL);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f00a fad3 	bl	800b17a <osThreadCreate>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	4a1e      	ldr	r2, [pc, #120]	; (8000c50 <main+0x274>)
 8000bd8:	6013      	str	r3, [r2, #0]

  /* definition and creation of share */
  osThreadDef(share, Task_Share, osPriorityHigh, 0, 128);
 8000bda:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <main+0x278>)
 8000bdc:	463c      	mov	r4, r7
 8000bde:	461d      	mov	r5, r3
 8000be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  shareHandle = osThreadCreate(osThread(share), NULL);
 8000bec:	463b      	mov	r3, r7
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f00a fac2 	bl	800b17a <osThreadCreate>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <main+0x27c>)
 8000bfa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bfc:	f00a fab6 	bl	800b16c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <main+0x224>
 8000c02:	bf00      	nop
 8000c04:	20000044 	.word	0x20000044
 8000c08:	2000002c 	.word	0x2000002c
 8000c0c:	20004314 	.word	0x20004314
 8000c10:	200046fc 	.word	0x200046fc
 8000c14:	20004320 	.word	0x20004320
 8000c18:	20004538 	.word	0x20004538
 8000c1c:	0800e338 	.word	0x0800e338
 8000c20:	20004850 	.word	0x20004850
 8000c24:	200046f8 	.word	0x200046f8
 8000c28:	20004718 	.word	0x20004718
 8000c2c:	0800e348 	.word	0x0800e348
 8000c30:	200042c0 	.word	0x200042c0
 8000c34:	0800e364 	.word	0x0800e364
 8000c38:	200048d4 	.word	0x200048d4
 8000c3c:	0800e380 	.word	0x0800e380
 8000c40:	2000484c 	.word	0x2000484c
 8000c44:	0800e39c 	.word	0x0800e39c
 8000c48:	200042bc 	.word	0x200042bc
 8000c4c:	0800e3b8 	.word	0x0800e3b8
 8000c50:	20004310 	.word	0x20004310
 8000c54:	0800e3d4 	.word	0x0800e3d4
 8000c58:	200048d8 	.word	0x200048d8

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b094      	sub	sp, #80	; 0x50
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 0320 	add.w	r3, r7, #32
 8000c66:	2230      	movs	r2, #48	; 0x30
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f00c feb0 	bl	800d9d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c80:	f006 fd8a 	bl	8007798 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c84:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <SystemClock_Config+0xdc>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	4a2b      	ldr	r2, [pc, #172]	; (8000d38 <SystemClock_Config+0xdc>)
 8000c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c90:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <SystemClock_Config+0xdc>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9c:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <SystemClock_Config+0xe0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a26      	ldr	r2, [pc, #152]	; (8000d3c <SystemClock_Config+0xe0>)
 8000ca2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <SystemClock_Config+0xe0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000cb4:	2309      	movs	r3, #9
 8000cb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ccc:	2319      	movs	r3, #25
 8000cce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000cd0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000cd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000cda:	2309      	movs	r3, #9
 8000cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cde:	f107 0320 	add.w	r3, r7, #32
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f006 fdb8 	bl	8007858 <HAL_RCC_OscConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cee:	f001 fb1b 	bl	8002328 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cf2:	f006 fd61 	bl	80077b8 <HAL_PWREx_EnableOverDrive>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000cfc:	f001 fb14 	bl	8002328 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d00:	230f      	movs	r3, #15
 8000d02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d04:	2302      	movs	r3, #2
 8000d06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2106      	movs	r1, #6
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f007 f83e 	bl	8007da0 <HAL_RCC_ClockConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d2a:	f001 fafd 	bl	8002328 <Error_Handler>
  }
}
 8000d2e:	bf00      	nop
 8000d30:	3750      	adds	r7, #80	; 0x50
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40007000 	.word	0x40007000

08000d40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d46:	463b      	mov	r3, r7
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <MX_ADC1_Init+0x98>)
 8000d54:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <MX_ADC1_Init+0x9c>)
 8000d56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <MX_ADC1_Init+0x98>)
 8000d5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <MX_ADC1_Init+0x98>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_ADC1_Init+0x98>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <MX_ADC1_Init+0x98>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_ADC1_Init+0x98>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <MX_ADC1_Init+0x98>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <MX_ADC1_Init+0x98>)
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <MX_ADC1_Init+0xa0>)
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_ADC1_Init+0x98>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_ADC1_Init+0x98>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_ADC1_Init+0x98>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_ADC1_Init+0x98>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000da0:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <MX_ADC1_Init+0x98>)
 8000da2:	f003 fd0b 	bl	80047bc <HAL_ADC_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dac:	f001 fabc 	bl	8002328 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_ADC1_Init+0x98>)
 8000dc2:	f003 fea5 	bl	8004b10 <HAL_ADC_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000dcc:	f001 faac 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200045e4 	.word	0x200045e4
 8000ddc:	40012000 	.word	0x40012000
 8000de0:	0f000001 	.word	0x0f000001

08000de4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_ADC3_Init+0x98>)
 8000df8:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <MX_ADC3_Init+0x9c>)
 8000dfa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <MX_ADC3_Init+0x98>)
 8000dfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e02:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_ADC3_Init+0x98>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_ADC3_Init+0x98>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_ADC3_Init+0x98>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_ADC3_Init+0x98>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_ADC3_Init+0x98>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <MX_ADC3_Init+0x98>)
 8000e26:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <MX_ADC3_Init+0xa0>)
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_ADC3_Init+0x98>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_ADC3_Init+0x98>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_ADC3_Init+0x98>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_ADC3_Init+0x98>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <MX_ADC3_Init+0x98>)
 8000e46:	f003 fcb9 	bl	80047bc <HAL_ADC_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000e50:	f001 fa6a 	bl	8002328 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e54:	2306      	movs	r3, #6
 8000e56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e60:	463b      	mov	r3, r7
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_ADC3_Init+0x98>)
 8000e66:	f003 fe53 	bl	8004b10 <HAL_ADC_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000e70:	f001 fa5a 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	2000462c 	.word	0x2000462c
 8000e80:	40012200 	.word	0x40012200
 8000e84:	0f000001 	.word	0x0f000001

08000e88 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_DAC_Init+0x4c>)
 8000e98:	4a0f      	ldr	r2, [pc, #60]	; (8000ed8 <MX_DAC_Init+0x50>)
 8000e9a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e9c:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <MX_DAC_Init+0x4c>)
 8000e9e:	f004 f969 	bl	8005174 <HAL_DAC_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ea8:	f001 fa3e 	bl	8002328 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <MX_DAC_Init+0x4c>)
 8000ebc:	f004 f9e0 	bl	8005280 <HAL_DAC_ConfigChannel>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000ec6:	f001 fa2f 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20004704 	.word	0x20004704
 8000ed8:	40007400 	.word	0x40007400

08000edc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_DMA2D_Init+0x5c>)
 8000ee2:	4a16      	ldr	r2, [pc, #88]	; (8000f3c <MX_DMA2D_Init+0x60>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_DMA2D_Init+0x5c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_DMA2D_Init+0x5c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_DMA2D_Init+0x5c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_DMA2D_Init+0x5c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_DMA2D_Init+0x5c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_DMA2D_Init+0x5c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_DMA2D_Init+0x5c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <MX_DMA2D_Init+0x5c>)
 8000f12:	f004 fbef 	bl	80056f4 <HAL_DMA2D_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000f1c:	f001 fa04 	bl	8002328 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f20:	2101      	movs	r1, #1
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_DMA2D_Init+0x5c>)
 8000f24:	f004 fe54 	bl	8005bd0 <HAL_DMA2D_ConfigLayer>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000f2e:	f001 f9fb 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000480c 	.word	0x2000480c
 8000f3c:	4002b000 	.word	0x4002b000

08000f40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <MX_I2C1_Init+0x78>)
 8000f48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f4c:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <MX_I2C1_Init+0x7c>)
 8000f4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f7a:	480e      	ldr	r0, [pc, #56]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f7c:	f005 fa5a 	bl	8006434 <HAL_I2C_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f86:	f001 f9cf 	bl	8002328 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f8e:	f005 fff3 	bl	8006f78 <HAL_I2CEx_ConfigAnalogFilter>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f98:	f001 f9c6 	bl	8002328 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000fa0:	f006 f835 	bl	800700e <HAL_I2CEx_ConfigDigitalFilter>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000faa:	f001 f9bd 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20004454 	.word	0x20004454
 8000fb8:	40005400 	.word	0x40005400
 8000fbc:	00c0eaff 	.word	0x00c0eaff

08000fc0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_I2C3_Init+0x74>)
 8000fc6:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <MX_I2C3_Init+0x78>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_I2C3_Init+0x74>)
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	; (800103c <MX_I2C3_Init+0x7c>)
 8000fce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_I2C3_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_I2C3_Init+0x74>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <MX_I2C3_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_I2C3_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_I2C3_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_I2C3_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_I2C3_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <MX_I2C3_Init+0x74>)
 8000ffc:	f005 fa1a 	bl	8006434 <HAL_I2C_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001006:	f001 f98f 	bl	8002328 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800100a:	2100      	movs	r1, #0
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <MX_I2C3_Init+0x74>)
 800100e:	f005 ffb3 	bl	8006f78 <HAL_I2CEx_ConfigAnalogFilter>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001018:	f001 f986 	bl	8002328 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800101c:	2100      	movs	r1, #0
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_I2C3_Init+0x74>)
 8001020:	f005 fff5 	bl	800700e <HAL_I2CEx_ConfigDigitalFilter>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800102a:	f001 f97d 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200042c4 	.word	0x200042c4
 8001038:	40005c00 	.word	0x40005c00
 800103c:	00c0eaff 	.word	0x00c0eaff

08001040 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08e      	sub	sp, #56	; 0x38
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2234      	movs	r2, #52	; 0x34
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f00c fcbf 	bl	800d9d0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001052:	4b3a      	ldr	r3, [pc, #232]	; (800113c <MX_LTDC_Init+0xfc>)
 8001054:	4a3a      	ldr	r2, [pc, #232]	; (8001140 <MX_LTDC_Init+0x100>)
 8001056:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001058:	4b38      	ldr	r3, [pc, #224]	; (800113c <MX_LTDC_Init+0xfc>)
 800105a:	2200      	movs	r2, #0
 800105c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800105e:	4b37      	ldr	r3, [pc, #220]	; (800113c <MX_LTDC_Init+0xfc>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001064:	4b35      	ldr	r3, [pc, #212]	; (800113c <MX_LTDC_Init+0xfc>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800106a:	4b34      	ldr	r3, [pc, #208]	; (800113c <MX_LTDC_Init+0xfc>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001070:	4b32      	ldr	r3, [pc, #200]	; (800113c <MX_LTDC_Init+0xfc>)
 8001072:	2228      	movs	r2, #40	; 0x28
 8001074:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001076:	4b31      	ldr	r3, [pc, #196]	; (800113c <MX_LTDC_Init+0xfc>)
 8001078:	2209      	movs	r2, #9
 800107a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800107c:	4b2f      	ldr	r3, [pc, #188]	; (800113c <MX_LTDC_Init+0xfc>)
 800107e:	2235      	movs	r2, #53	; 0x35
 8001080:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001082:	4b2e      	ldr	r3, [pc, #184]	; (800113c <MX_LTDC_Init+0xfc>)
 8001084:	220b      	movs	r2, #11
 8001086:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001088:	4b2c      	ldr	r3, [pc, #176]	; (800113c <MX_LTDC_Init+0xfc>)
 800108a:	f240 2215 	movw	r2, #533	; 0x215
 800108e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001090:	4b2a      	ldr	r3, [pc, #168]	; (800113c <MX_LTDC_Init+0xfc>)
 8001092:	f240 121b 	movw	r2, #283	; 0x11b
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001098:	4b28      	ldr	r3, [pc, #160]	; (800113c <MX_LTDC_Init+0xfc>)
 800109a:	f240 2235 	movw	r2, #565	; 0x235
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80010a0:	4b26      	ldr	r3, [pc, #152]	; (800113c <MX_LTDC_Init+0xfc>)
 80010a2:	f240 121d 	movw	r2, #285	; 0x11d
 80010a6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <MX_LTDC_Init+0xfc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <MX_LTDC_Init+0xfc>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <MX_LTDC_Init+0xfc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80010c0:	481e      	ldr	r0, [pc, #120]	; (800113c <MX_LTDC_Init+0xfc>)
 80010c2:	f005 fff1 	bl	80070a8 <HAL_LTDC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80010cc:	f001 f92c 	bl	8002328 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80010d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80010d8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80010de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80010e2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80010e4:	2302      	movs	r3, #2
 80010e6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80010e8:	23ff      	movs	r3, #255	; 0xff
 80010ea:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80010f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010f4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80010f6:	2307      	movs	r3, #7
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80010fa:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001100:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001106:	f44f 7388 	mov.w	r3, #272	; 0x110
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2200      	movs	r2, #0
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_LTDC_Init+0xfc>)
 8001126:	f006 f951 	bl	80073cc <HAL_LTDC_ConfigLayer>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001130:	f001 f8fa 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	3738      	adds	r7, #56	; 0x38
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	2000453c 	.word	0x2000453c
 8001140:	40016800 	.word	0x40016800

08001144 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b092      	sub	sp, #72	; 0x48
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800114a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]
 800115a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001160:	463b      	mov	r3, r7
 8001162:	222c      	movs	r2, #44	; 0x2c
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f00c fc32 	bl	800d9d0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800116c:	4b46      	ldr	r3, [pc, #280]	; (8001288 <MX_RTC_Init+0x144>)
 800116e:	4a47      	ldr	r2, [pc, #284]	; (800128c <MX_RTC_Init+0x148>)
 8001170:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001172:	4b45      	ldr	r3, [pc, #276]	; (8001288 <MX_RTC_Init+0x144>)
 8001174:	2200      	movs	r2, #0
 8001176:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001178:	4b43      	ldr	r3, [pc, #268]	; (8001288 <MX_RTC_Init+0x144>)
 800117a:	227f      	movs	r2, #127	; 0x7f
 800117c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800117e:	4b42      	ldr	r3, [pc, #264]	; (8001288 <MX_RTC_Init+0x144>)
 8001180:	22ff      	movs	r2, #255	; 0xff
 8001182:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001184:	4b40      	ldr	r3, [pc, #256]	; (8001288 <MX_RTC_Init+0x144>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800118a:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <MX_RTC_Init+0x144>)
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001190:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <MX_RTC_Init+0x144>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001196:	483c      	ldr	r0, [pc, #240]	; (8001288 <MX_RTC_Init+0x144>)
 8001198:	f007 fbfa 	bl	8008990 <HAL_RTC_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80011a2:	f001 f8c1 	bl	8002328 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011c4:	2201      	movs	r2, #1
 80011c6:	4619      	mov	r1, r3
 80011c8:	482f      	ldr	r0, [pc, #188]	; (8001288 <MX_RTC_Init+0x144>)
 80011ca:	f007 fc73 	bl	8008ab4 <HAL_RTC_SetTime>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80011d4:	f001 f8a8 	bl	8002328 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011d8:	2301      	movs	r3, #1
 80011da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80011de:	2301      	movs	r3, #1
 80011e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f4:	2201      	movs	r2, #1
 80011f6:	4619      	mov	r1, r3
 80011f8:	4823      	ldr	r0, [pc, #140]	; (8001288 <MX_RTC_Init+0x144>)
 80011fa:	f007 fd19 	bl	8008c30 <HAL_RTC_SetDate>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001204:	f001 f890 	bl	8002328 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001208:	2300      	movs	r3, #0
 800120a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800120c:	2300      	movs	r3, #0
 800120e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001210:	2300      	movs	r3, #0
 8001212:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800122c:	2301      	movs	r3, #1
 800122e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	2201      	movs	r2, #1
 800123c:	4619      	mov	r1, r3
 800123e:	4812      	ldr	r0, [pc, #72]	; (8001288 <MX_RTC_Init+0x144>)
 8001240:	f007 fd9e 	bl	8008d80 <HAL_RTC_SetAlarm>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800124a:	f001 f86d 	bl	8002328 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800124e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	2201      	movs	r2, #1
 8001258:	4619      	mov	r1, r3
 800125a:	480b      	ldr	r0, [pc, #44]	; (8001288 <MX_RTC_Init+0x144>)
 800125c:	f007 fd90 	bl	8008d80 <HAL_RTC_SetAlarm>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001266:	f001 f85f 	bl	8002328 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800126a:	2202      	movs	r2, #2
 800126c:	2100      	movs	r1, #0
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <MX_RTC_Init+0x144>)
 8001270:	f007 ff10 	bl	8009094 <HAL_RTCEx_SetTimeStamp>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800127a:	f001 f855 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	3748      	adds	r7, #72	; 0x48
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000471c 	.word	0x2000471c
 800128c:	40002800 	.word	0x40002800

08001290 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_SPI2_Init+0x6c>)
 8001296:	4a1a      	ldr	r2, [pc, #104]	; (8001300 <MX_SPI2_Init+0x70>)
 8001298:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <MX_SPI2_Init+0x6c>)
 800129c:	2200      	movs	r2, #0
 800129e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_SPI2_Init+0x6c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_SPI2_Init+0x6c>)
 80012a8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80012ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_SPI2_Init+0x6c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_SPI2_Init+0x6c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <MX_SPI2_Init+0x6c>)
 80012bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_SPI2_Init+0x6c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_SPI2_Init+0x6c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_SPI2_Init+0x6c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_SPI2_Init+0x6c>)
 80012d6:	2207      	movs	r2, #7
 80012d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <MX_SPI2_Init+0x6c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_SPI2_Init+0x6c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_SPI2_Init+0x6c>)
 80012e8:	f007 ffbb 	bl	8009262 <HAL_SPI_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 80012f2:	f001 f819 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20004320 	.word	0x20004320
 8001300:	40003800 	.word	0x40003800

08001304 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <MX_TIM1_Init+0xa0>)
 8001324:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <MX_TIM1_Init+0xa4>)
 8001326:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <MX_TIM1_Init+0xa0>)
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <MX_TIM1_Init+0xa0>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_TIM1_Init+0xa0>)
 8001336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800133a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <MX_TIM1_Init+0xa0>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_TIM1_Init+0xa0>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <MX_TIM1_Init+0xa0>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800134e:	4815      	ldr	r0, [pc, #84]	; (80013a4 <MX_TIM1_Init+0xa0>)
 8001350:	f008 fce0 	bl	8009d14 <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800135a:	f000 ffe5 	bl	8002328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001362:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	4619      	mov	r1, r3
 800136a:	480e      	ldr	r0, [pc, #56]	; (80013a4 <MX_TIM1_Init+0xa0>)
 800136c:	f008 fec2 	bl	800a0f4 <HAL_TIM_ConfigClockSource>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001376:	f000 ffd7 	bl	8002328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <MX_TIM1_Init+0xa0>)
 800138c:	f009 f8de 	bl	800a54c <HAL_TIMEx_MasterConfigSynchronization>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001396:	f000 ffc7 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000473c 	.word	0x2000473c
 80013a8:	40010000 	.word	0x40010000

080013ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MX_TIM2_Init+0x98>)
 80013cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_TIM2_Init+0x98>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_TIM2_Init+0x98>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_TIM2_Init+0x98>)
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_TIM2_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b15      	ldr	r3, [pc, #84]	; (8001444 <MX_TIM2_Init+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f2:	4814      	ldr	r0, [pc, #80]	; (8001444 <MX_TIM2_Init+0x98>)
 80013f4:	f008 fc8e 	bl	8009d14 <HAL_TIM_Base_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013fe:	f000 ff93 	bl	8002328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001406:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	4619      	mov	r1, r3
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_TIM2_Init+0x98>)
 8001410:	f008 fe70 	bl	800a0f4 <HAL_TIM_ConfigClockSource>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800141a:	f000 ff85 	bl	8002328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	4619      	mov	r1, r3
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <MX_TIM2_Init+0x98>)
 800142c:	f009 f88e 	bl	800a54c <HAL_TIMEx_MasterConfigSynchronization>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001436:	f000 ff77 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	3720      	adds	r7, #32
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20004854 	.word	0x20004854

08001448 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <MX_TIM3_Init+0x94>)
 8001468:	4a1d      	ldr	r2, [pc, #116]	; (80014e0 <MX_TIM3_Init+0x98>)
 800146a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <MX_TIM3_Init+0x94>)
 800146e:	2200      	movs	r2, #0
 8001470:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <MX_TIM3_Init+0x94>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <MX_TIM3_Init+0x94>)
 800147a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_TIM3_Init+0x94>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <MX_TIM3_Init+0x94>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800148c:	4813      	ldr	r0, [pc, #76]	; (80014dc <MX_TIM3_Init+0x94>)
 800148e:	f008 fc41 	bl	8009d14 <HAL_TIM_Base_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001498:	f000 ff46 	bl	8002328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <MX_TIM3_Init+0x94>)
 80014aa:	f008 fe23 	bl	800a0f4 <HAL_TIM_ConfigClockSource>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014b4:	f000 ff38 	bl	8002328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_TIM3_Init+0x94>)
 80014c6:	f009 f841 	bl	800a54c <HAL_TIMEx_MasterConfigSynchronization>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014d0:	f000 ff2a 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	3720      	adds	r7, #32
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200044ec 	.word	0x200044ec
 80014e0:	40000400 	.word	0x40000400

080014e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ea:	f107 0310 	add.w	r3, r7, #16
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <MX_TIM5_Init+0x94>)
 8001504:	4a1d      	ldr	r2, [pc, #116]	; (800157c <MX_TIM5_Init+0x98>)
 8001506:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_TIM5_Init+0x94>)
 800150a:	2200      	movs	r2, #0
 800150c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_TIM5_Init+0x94>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_TIM5_Init+0x94>)
 8001516:	f04f 32ff 	mov.w	r2, #4294967295
 800151a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <MX_TIM5_Init+0x94>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MX_TIM5_Init+0x94>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001528:	4813      	ldr	r0, [pc, #76]	; (8001578 <MX_TIM5_Init+0x94>)
 800152a:	f008 fbf3 	bl	8009d14 <HAL_TIM_Base_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001534:	f000 fef8 	bl	8002328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	4619      	mov	r1, r3
 8001544:	480c      	ldr	r0, [pc, #48]	; (8001578 <MX_TIM5_Init+0x94>)
 8001546:	f008 fdd5 	bl	800a0f4 <HAL_TIM_ConfigClockSource>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001550:	f000 feea 	bl	8002328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_TIM5_Init+0x94>)
 8001562:	f008 fff3 	bl	800a54c <HAL_TIMEx_MasterConfigSynchronization>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800156c:	f000 fedc 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200044a0 	.word	0x200044a0
 800157c:	40000c00 	.word	0x40000c00

08001580 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001586:	f107 0310 	add.w	r3, r7, #16
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800159e:	4b20      	ldr	r3, [pc, #128]	; (8001620 <MX_TIM8_Init+0xa0>)
 80015a0:	4a20      	ldr	r2, [pc, #128]	; (8001624 <MX_TIM8_Init+0xa4>)
 80015a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <MX_TIM8_Init+0xa0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <MX_TIM8_Init+0xa0>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <MX_TIM8_Init+0xa0>)
 80015b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015b6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <MX_TIM8_Init+0xa0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <MX_TIM8_Init+0xa0>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <MX_TIM8_Init+0xa0>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015ca:	4815      	ldr	r0, [pc, #84]	; (8001620 <MX_TIM8_Init+0xa0>)
 80015cc:	f008 fba2 	bl	8009d14 <HAL_TIM_Base_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80015d6:	f000 fea7 	bl	8002328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4619      	mov	r1, r3
 80015e6:	480e      	ldr	r0, [pc, #56]	; (8001620 <MX_TIM8_Init+0xa0>)
 80015e8:	f008 fd84 	bl	800a0f4 <HAL_TIM_ConfigClockSource>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80015f2:	f000 fe99 	bl	8002328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	4619      	mov	r1, r3
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <MX_TIM8_Init+0xa0>)
 8001608:	f008 ffa0 	bl	800a54c <HAL_TIMEx_MasterConfigSynchronization>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001612:	f000 fe89 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20004408 	.word	0x20004408
 8001624:	40010400 	.word	0x40010400

08001628 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <MX_UART7_Init+0x58>)
 800162e:	4a15      	ldr	r2, [pc, #84]	; (8001684 <MX_UART7_Init+0x5c>)
 8001630:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <MX_UART7_Init+0x58>)
 8001634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001638:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_UART7_Init+0x58>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <MX_UART7_Init+0x58>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_UART7_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_UART7_Init+0x58>)
 800164e:	220c      	movs	r2, #12
 8001650:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <MX_UART7_Init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_UART7_Init+0x58>)
 800165a:	2200      	movs	r2, #0
 800165c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <MX_UART7_Init+0x58>)
 8001660:	2200      	movs	r2, #0
 8001662:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_UART7_Init+0x58>)
 8001666:	2200      	movs	r2, #0
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_UART7_Init+0x58>)
 800166c:	f009 f81a 	bl	800a6a4 <HAL_UART_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001676:	f000 fe57 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20004384 	.word	0x20004384
 8001684:	40007800 	.word	0x40007800

08001688 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_USART1_UART_Init+0x68>)
 800168e:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <MX_USART1_UART_Init+0x6c>)
 8001690:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_USART1_UART_Init+0x68>)
 8001694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001698:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_USART1_UART_Init+0x68>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a0:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MX_USART1_UART_Init+0x68>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <MX_USART1_UART_Init+0x68>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016ac:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <MX_USART1_UART_Init+0x68>)
 80016ae:	220c      	movs	r2, #12
 80016b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_USART1_UART_Init+0x68>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <MX_USART1_UART_Init+0x68>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_USART1_UART_Init+0x68>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <MX_USART1_UART_Init+0x68>)
 80016c6:	2230      	movs	r2, #48	; 0x30
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_USART1_UART_Init+0x68>)
 80016cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016d0:	639a      	str	r2, [r3, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <MX_USART1_UART_Init+0x68>)
 80016d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_USART1_UART_Init+0x68>)
 80016dc:	f008 ffe2 	bl	800a6a4 <HAL_UART_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 80016e6:	f000 fe1f 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20004674 	.word	0x20004674
 80016f4:	40011000 	.word	0x40011000

080016f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_USART6_UART_Init+0x58>)
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <MX_USART6_UART_Init+0x5c>)
 8001700:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_USART6_UART_Init+0x58>)
 8001704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001708:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_USART6_UART_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_USART6_UART_Init+0x58>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_USART6_UART_Init+0x58>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_USART6_UART_Init+0x58>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MX_USART6_UART_Init+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_USART6_UART_Init+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <MX_USART6_UART_Init+0x58>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_USART6_UART_Init+0x58>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_USART6_UART_Init+0x58>)
 800173c:	f008 ffb2 	bl	800a6a4 <HAL_UART_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001746:	f000 fdef 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20004788 	.word	0x20004788
 8001754:	40011400 	.word	0x40011400

08001758 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
 800176c:	615a      	str	r2, [r3, #20]
 800176e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <MX_FMC_Init+0x98>)
 8001772:	4a20      	ldr	r2, [pc, #128]	; (80017f4 <MX_FMC_Init+0x9c>)
 8001774:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <MX_FMC_Init+0x98>)
 8001778:	2200      	movs	r2, #0
 800177a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_FMC_Init+0x98>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <MX_FMC_Init+0x98>)
 8001784:	2204      	movs	r2, #4
 8001786:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_FMC_Init+0x98>)
 800178a:	2210      	movs	r2, #16
 800178c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <MX_FMC_Init+0x98>)
 8001790:	2240      	movs	r2, #64	; 0x40
 8001792:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_FMC_Init+0x98>)
 8001796:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800179a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_FMC_Init+0x98>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <MX_FMC_Init+0x98>)
 80017a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017a8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_FMC_Init+0x98>)
 80017ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_FMC_Init+0x98>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80017b8:	2302      	movs	r3, #2
 80017ba:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80017bc:	2307      	movs	r3, #7
 80017be:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80017c0:	2304      	movs	r3, #4
 80017c2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80017c4:	2307      	movs	r3, #7
 80017c6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80017c8:	2303      	movs	r3, #3
 80017ca:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80017cc:	2302      	movs	r3, #2
 80017ce:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_FMC_Init+0x98>)
 80017da:	f007 fcb1 	bl	8009140 <HAL_SDRAM_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80017e4:	f000 fda0 	bl	8002328 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017e8:	bf00      	nop
 80017ea:	3720      	adds	r7, #32
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200048a0 	.word	0x200048a0
 80017f4:	a0000140 	.word	0xa0000140

080017f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b090      	sub	sp, #64	; 0x40
 80017fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800180e:	4baf      	ldr	r3, [pc, #700]	; (8001acc <MX_GPIO_Init+0x2d4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4aae      	ldr	r2, [pc, #696]	; (8001acc <MX_GPIO_Init+0x2d4>)
 8001814:	f043 0310 	orr.w	r3, r3, #16
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4bac      	ldr	r3, [pc, #688]	; (8001acc <MX_GPIO_Init+0x2d4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
 8001824:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001826:	4ba9      	ldr	r3, [pc, #676]	; (8001acc <MX_GPIO_Init+0x2d4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4aa8      	ldr	r2, [pc, #672]	; (8001acc <MX_GPIO_Init+0x2d4>)
 800182c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4ba6      	ldr	r3, [pc, #664]	; (8001acc <MX_GPIO_Init+0x2d4>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	4ba3      	ldr	r3, [pc, #652]	; (8001acc <MX_GPIO_Init+0x2d4>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4aa2      	ldr	r2, [pc, #648]	; (8001acc <MX_GPIO_Init+0x2d4>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4ba0      	ldr	r3, [pc, #640]	; (8001acc <MX_GPIO_Init+0x2d4>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	623b      	str	r3, [r7, #32]
 8001854:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001856:	4b9d      	ldr	r3, [pc, #628]	; (8001acc <MX_GPIO_Init+0x2d4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a9c      	ldr	r2, [pc, #624]	; (8001acc <MX_GPIO_Init+0x2d4>)
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b9a      	ldr	r3, [pc, #616]	; (8001acc <MX_GPIO_Init+0x2d4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	4b97      	ldr	r3, [pc, #604]	; (8001acc <MX_GPIO_Init+0x2d4>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a96      	ldr	r2, [pc, #600]	; (8001acc <MX_GPIO_Init+0x2d4>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b94      	ldr	r3, [pc, #592]	; (8001acc <MX_GPIO_Init+0x2d4>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	61bb      	str	r3, [r7, #24]
 8001884:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	4b91      	ldr	r3, [pc, #580]	; (8001acc <MX_GPIO_Init+0x2d4>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a90      	ldr	r2, [pc, #576]	; (8001acc <MX_GPIO_Init+0x2d4>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b8e      	ldr	r3, [pc, #568]	; (8001acc <MX_GPIO_Init+0x2d4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800189e:	4b8b      	ldr	r3, [pc, #556]	; (8001acc <MX_GPIO_Init+0x2d4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a8a      	ldr	r2, [pc, #552]	; (8001acc <MX_GPIO_Init+0x2d4>)
 80018a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b88      	ldr	r3, [pc, #544]	; (8001acc <MX_GPIO_Init+0x2d4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80018b6:	4b85      	ldr	r3, [pc, #532]	; (8001acc <MX_GPIO_Init+0x2d4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a84      	ldr	r2, [pc, #528]	; (8001acc <MX_GPIO_Init+0x2d4>)
 80018bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b82      	ldr	r3, [pc, #520]	; (8001acc <MX_GPIO_Init+0x2d4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80018ce:	4b7f      	ldr	r3, [pc, #508]	; (8001acc <MX_GPIO_Init+0x2d4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a7e      	ldr	r2, [pc, #504]	; (8001acc <MX_GPIO_Init+0x2d4>)
 80018d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b7c      	ldr	r3, [pc, #496]	; (8001acc <MX_GPIO_Init+0x2d4>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018e6:	4b79      	ldr	r3, [pc, #484]	; (8001acc <MX_GPIO_Init+0x2d4>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a78      	ldr	r2, [pc, #480]	; (8001acc <MX_GPIO_Init+0x2d4>)
 80018ec:	f043 0320 	orr.w	r3, r3, #32
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b76      	ldr	r3, [pc, #472]	; (8001acc <MX_GPIO_Init+0x2d4>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0320 	and.w	r3, r3, #32
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018fe:	4b73      	ldr	r3, [pc, #460]	; (8001acc <MX_GPIO_Init+0x2d4>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a72      	ldr	r2, [pc, #456]	; (8001acc <MX_GPIO_Init+0x2d4>)
 8001904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b70      	ldr	r3, [pc, #448]	; (8001acc <MX_GPIO_Init+0x2d4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	2160      	movs	r1, #96	; 0x60
 800191a:	486d      	ldr	r0, [pc, #436]	; (8001ad0 <MX_GPIO_Init+0x2d8>)
 800191c:	f004 fd3e 	bl	800639c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	2120      	movs	r1, #32
 8001924:	486b      	ldr	r0, [pc, #428]	; (8001ad4 <MX_GPIO_Init+0x2dc>)
 8001926:	f004 fd39 	bl	800639c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	2108      	movs	r1, #8
 800192e:	4869      	ldr	r0, [pc, #420]	; (8001ad4 <MX_GPIO_Init+0x2dc>)
 8001930:	f004 fd34 	bl	800639c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001934:	2201      	movs	r2, #1
 8001936:	2108      	movs	r1, #8
 8001938:	4867      	ldr	r0, [pc, #412]	; (8001ad8 <MX_GPIO_Init+0x2e0>)
 800193a:	f004 fd2f 	bl	800639c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800193e:	2201      	movs	r2, #1
 8001940:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001944:	4865      	ldr	r0, [pc, #404]	; (8001adc <MX_GPIO_Init+0x2e4>)
 8001946:	f004 fd29 	bl	800639c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800194a:	2200      	movs	r2, #0
 800194c:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001950:	4863      	ldr	r0, [pc, #396]	; (8001ae0 <MX_GPIO_Init+0x2e8>)
 8001952:	f004 fd23 	bl	800639c <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	21c8      	movs	r1, #200	; 0xc8
 800195a:	4862      	ldr	r0, [pc, #392]	; (8001ae4 <MX_GPIO_Init+0x2ec>)
 800195c:	f004 fd1e 	bl	800639c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001960:	2308      	movs	r3, #8
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001964:	2300      	movs	r3, #0
 8001966:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001970:	4619      	mov	r1, r3
 8001972:	4857      	ldr	r0, [pc, #348]	; (8001ad0 <MX_GPIO_Init+0x2d8>)
 8001974:	f004 fa5a 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001978:	2304      	movs	r3, #4
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001988:	2309      	movs	r3, #9
 800198a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001990:	4619      	mov	r1, r3
 8001992:	484f      	ldr	r0, [pc, #316]	; (8001ad0 <MX_GPIO_Init+0x2d8>)
 8001994:	f004 fa4a 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001998:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019aa:	230b      	movs	r3, #11
 80019ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b2:	4619      	mov	r1, r3
 80019b4:	484b      	ldr	r0, [pc, #300]	; (8001ae4 <MX_GPIO_Init+0x2ec>)
 80019b6:	f004 fa39 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80019ba:	f643 0323 	movw	r3, #14371	; 0x3823
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019cc:	230a      	movs	r3, #10
 80019ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d4:	4619      	mov	r1, r3
 80019d6:	4844      	ldr	r0, [pc, #272]	; (8001ae8 <MX_GPIO_Init+0x2f0>)
 80019d8:	f004 fa28 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80019ec:	2308      	movs	r3, #8
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f4:	4619      	mov	r1, r3
 80019f6:	4837      	ldr	r0, [pc, #220]	; (8001ad4 <MX_GPIO_Init+0x2dc>)
 80019f8:	f004 fa18 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80019fc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a0e:	230c      	movs	r3, #12
 8001a10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a16:	4619      	mov	r1, r3
 8001a18:	4834      	ldr	r0, [pc, #208]	; (8001aec <MX_GPIO_Init+0x2f4>)
 8001a1a:	f004 fa07 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|GPIO_PIN_6;
 8001a1e:	f248 0340 	movw	r3, #32832	; 0x8040
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a24:	2300      	movs	r3, #0
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a30:	4619      	mov	r1, r3
 8001a32:	482f      	ldr	r0, [pc, #188]	; (8001af0 <MX_GPIO_Init+0x2f8>)
 8001a34:	f004 f9fa 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001a38:	2360      	movs	r3, #96	; 0x60
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4820      	ldr	r0, [pc, #128]	; (8001ad0 <MX_GPIO_Init+0x2d8>)
 8001a50:	f004 f9ec 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001a54:	2340      	movs	r3, #64	; 0x40
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a64:	230a      	movs	r3, #10
 8001a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	481e      	ldr	r0, [pc, #120]	; (8001ae8 <MX_GPIO_Init+0x2f0>)
 8001a70:	f004 f9dc 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a86:	4619      	mov	r1, r3
 8001a88:	481a      	ldr	r0, [pc, #104]	; (8001af4 <MX_GPIO_Init+0x2fc>)
 8001a8a:	f004 f9cf 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a8e:	2340      	movs	r3, #64	; 0x40
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a92:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <MX_GPIO_Init+0x2dc>)
 8001aa4:	f004 f9c2 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8001aa8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001aba:	230a      	movs	r3, #10
 8001abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480a      	ldr	r0, [pc, #40]	; (8001af0 <MX_GPIO_Init+0x2f8>)
 8001ac6:	f004 f9b1 	bl	8005e2c <HAL_GPIO_Init>
 8001aca:	e015      	b.n	8001af8 <MX_GPIO_Init+0x300>
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40020c00 	.word	0x40020c00
 8001ad8:	40022800 	.word	0x40022800
 8001adc:	40022000 	.word	0x40022000
 8001ae0:	40021c00 	.word	0x40021c00
 8001ae4:	40021800 	.word	0x40021800
 8001ae8:	40020400 	.word	0x40020400
 8001aec:	40020800 	.word	0x40020800
 8001af0:	40020000 	.word	0x40020000
 8001af4:	40022400 	.word	0x40022400

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001af8:	23f0      	movs	r3, #240	; 0xf0
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001b08:	230a      	movs	r3, #10
 8001b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b10:	4619      	mov	r1, r3
 8001b12:	489c      	ldr	r0, [pc, #624]	; (8001d84 <MX_GPIO_Init+0x58c>)
 8001b14:	f004 f98a 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001b2a:	230a      	movs	r3, #10
 8001b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b32:	4619      	mov	r1, r3
 8001b34:	4894      	ldr	r0, [pc, #592]	; (8001d88 <MX_GPIO_Init+0x590>)
 8001b36:	f004 f979 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001b3a:	2328      	movs	r3, #40	; 0x28
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b46:	2300      	movs	r3, #0
 8001b48:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4e:	4619      	mov	r1, r3
 8001b50:	488e      	ldr	r0, [pc, #568]	; (8001d8c <MX_GPIO_Init+0x594>)
 8001b52:	f004 f96b 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4889      	ldr	r0, [pc, #548]	; (8001d90 <MX_GPIO_Init+0x598>)
 8001b6c:	f004 f95e 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001b70:	2308      	movs	r3, #8
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b84:	4619      	mov	r1, r3
 8001b86:	4883      	ldr	r0, [pc, #524]	; (8001d94 <MX_GPIO_Init+0x59c>)
 8001b88:	f004 f950 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001b8c:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b92:	2300      	movs	r3, #0
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4879      	ldr	r0, [pc, #484]	; (8001d88 <MX_GPIO_Init+0x590>)
 8001ba2:	f004 f943 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ba6:	2310      	movs	r3, #16
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001baa:	2300      	movs	r3, #0
 8001bac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4874      	ldr	r0, [pc, #464]	; (8001d8c <MX_GPIO_Init+0x594>)
 8001bba:	f004 f937 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001bce:	230c      	movs	r3, #12
 8001bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	486c      	ldr	r0, [pc, #432]	; (8001d8c <MX_GPIO_Init+0x594>)
 8001bda:	f004 f927 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8001bde:	f24a 0304 	movw	r3, #40964	; 0xa004
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be4:	2300      	movs	r3, #0
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4869      	ldr	r0, [pc, #420]	; (8001d98 <MX_GPIO_Init+0x5a0>)
 8001bf4:	f004 f91a 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0e:	4619      	mov	r1, r3
 8001c10:	485c      	ldr	r0, [pc, #368]	; (8001d84 <MX_GPIO_Init+0x58c>)
 8001c12:	f004 f90b 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001c16:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	485a      	ldr	r0, [pc, #360]	; (8001d98 <MX_GPIO_Init+0x5a0>)
 8001c30:	f004 f8fc 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c3a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4854      	ldr	r0, [pc, #336]	; (8001d9c <MX_GPIO_Init+0x5a4>)
 8001c4c:	f004 f8ee 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c56:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001c60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c64:	4619      	mov	r1, r3
 8001c66:	4847      	ldr	r0, [pc, #284]	; (8001d84 <MX_GPIO_Init+0x58c>)
 8001c68:	f004 f8e0 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001c6c:	2310      	movs	r3, #16
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c7c:	230a      	movs	r3, #10
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c84:	4619      	mov	r1, r3
 8001c86:	4844      	ldr	r0, [pc, #272]	; (8001d98 <MX_GPIO_Init+0x5a0>)
 8001c88:	f004 f8d0 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001c8c:	23c8      	movs	r3, #200	; 0xc8
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4839      	ldr	r0, [pc, #228]	; (8001d88 <MX_GPIO_Init+0x590>)
 8001ca4:	f004 f8c2 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001ca8:	2305      	movs	r3, #5
 8001caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001cb8:	230a      	movs	r3, #10
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4833      	ldr	r0, [pc, #204]	; (8001d90 <MX_GPIO_Init+0x598>)
 8001cc4:	f004 f8b2 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001cc8:	2332      	movs	r3, #50	; 0x32
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cd8:	230b      	movs	r3, #11
 8001cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	482b      	ldr	r0, [pc, #172]	; (8001d90 <MX_GPIO_Init+0x598>)
 8001ce4:	f004 f8a2 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ce8:	2304      	movs	r3, #4
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001cf8:	2309      	movs	r3, #9
 8001cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d00:	4619      	mov	r1, r3
 8001d02:	4827      	ldr	r0, [pc, #156]	; (8001da0 <MX_GPIO_Init+0x5a8>)
 8001d04:	f004 f892 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001d08:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d1a:	2309      	movs	r3, #9
 8001d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d22:	4619      	mov	r1, r3
 8001d24:	4819      	ldr	r0, [pc, #100]	; (8001d8c <MX_GPIO_Init+0x594>)
 8001d26:	f004 f881 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001d2a:	2386      	movs	r3, #134	; 0x86
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d3a:	230b      	movs	r3, #11
 8001d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d42:	4619      	mov	r1, r3
 8001d44:	4815      	ldr	r0, [pc, #84]	; (8001d9c <MX_GPIO_Init+0x5a4>)
 8001d46:	f004 f871 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001d4a:	2328      	movs	r3, #40	; 0x28
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d5a:	230a      	movs	r3, #10
 8001d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d62:	4619      	mov	r1, r3
 8001d64:	480d      	ldr	r0, [pc, #52]	; (8001d9c <MX_GPIO_Init+0x5a4>)
 8001d66:	f004 f861 	bl	8005e2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2105      	movs	r1, #5
 8001d6e:	2017      	movs	r0, #23
 8001d70:	f003 f9d6 	bl	8005120 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d74:	2017      	movs	r0, #23
 8001d76:	f003 f9ef 	bl	8005158 <HAL_NVIC_EnableIRQ>

}
 8001d7a:	bf00      	nop
 8001d7c:	3740      	adds	r7, #64	; 0x40
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40022000 	.word	0x40022000
 8001d88:	40021800 	.word	0x40021800
 8001d8c:	40020c00 	.word	0x40020c00
 8001d90:	40020800 	.word	0x40020800
 8001d94:	40022800 	.word	0x40022800
 8001d98:	40021c00 	.word	0x40021c00
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	40020400 	.word	0x40020400

08001da4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	80fb      	strh	r3, [r7, #6]
	int Message = 1;
 8001dae:	2301      	movs	r3, #1
 8001db0:	60fb      	str	r3, [r7, #12]
	xQueueSendFromISR(Queue_TirHandle, &Message, 0);
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_GPIO_EXTI_Callback+0x28>)
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	f107 010c 	add.w	r1, r7, #12
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f009 fd9f 	bl	800b900 <xQueueGenericSendFromISR>
}
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20004850 	.word	0x20004850

08001dd0 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	HAL_SPI_TransmitReceive_IT(&hspi2, pData_transmit, pData_received, Size); // rappel de l'interruption
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_SPI_TxRxCpltCallback+0x34>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <HAL_SPI_TxRxCpltCallback+0x38>)
 8001dde:	490b      	ldr	r1, [pc, #44]	; (8001e0c <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001de0:	480b      	ldr	r0, [pc, #44]	; (8001e10 <HAL_SPI_TxRxCpltCallback+0x40>)
 8001de2:	f007 fae9 	bl	80093b8 <HAL_SPI_TransmitReceive_IT>

	int Message = 1;
 8001de6:	2301      	movs	r3, #1
 8001de8:	60fb      	str	r3, [r7, #12]
	xQueueSendFromISR(Queue_RecieveHandle, &Message, 0); // la tache share est notifiée
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_SPI_TxRxCpltCallback+0x44>)
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	f107 010c 	add.w	r1, r7, #12
 8001df2:	2300      	movs	r3, #0
 8001df4:	2200      	movs	r2, #0
 8001df6:	f009 fd83 	bl	800b900 <xQueueGenericSendFromISR>
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000002c 	.word	0x2000002c
 8001e08:	20004314 	.word	0x20004314
 8001e0c:	200046fc 	.word	0x200046fc
 8001e10:	20004320 	.word	0x20004320
 8001e14:	20004718 	.word	0x20004718

08001e18 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED15_GPIO_Port,LED15_Pin);
 8001e20:	2140      	movs	r1, #64	; 0x40
 8001e22:	4803      	ldr	r0, [pc, #12]	; (8001e30 <StartDefaultTask+0x18>)
 8001e24:	f004 fad3 	bl	80063ce <HAL_GPIO_TogglePin>
	  osDelay(100);
 8001e28:	2064      	movs	r0, #100	; 0x64
 8001e2a:	f009 f9f2 	bl	800b212 <osDelay>
	  HAL_GPIO_TogglePin(LED15_GPIO_Port,LED15_Pin);
 8001e2e:	e7f7      	b.n	8001e20 <StartDefaultTask+0x8>
 8001e30:	40021000 	.word	0x40021000

08001e34 <Task_Viseur>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Viseur */
void Task_Viseur(void const * argument)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Viseur */
	uint32_t joystick_h, joystick_v;

	ADC_ChannelConfTypeDef sConfig = {0};
 8001e3c:	f107 0308 	add.w	r3, r7, #8
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
	sConfig.Channel = ADC_CHANNEL_8;
 8001e52:	2308      	movs	r3, #8
 8001e54:	60bb      	str	r3, [r7, #8]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001e56:	f107 0308 	add.w	r3, r7, #8
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	483b      	ldr	r0, [pc, #236]	; (8001f4c <Task_Viseur+0x118>)
 8001e5e:	f002 fe57 	bl	8004b10 <HAL_ADC_ConfigChannel>

  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start(&hadc3);
 8001e62:	483a      	ldr	r0, [pc, #232]	; (8001f4c <Task_Viseur+0x118>)
 8001e64:	f002 fcee 	bl	8004844 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001e68:	bf00      	nop
 8001e6a:	2164      	movs	r1, #100	; 0x64
 8001e6c:	4837      	ldr	r0, [pc, #220]	; (8001f4c <Task_Viseur+0x118>)
 8001e6e:	f002 fdb7 	bl	80049e0 <HAL_ADC_PollForConversion>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f8      	bne.n	8001e6a <Task_Viseur+0x36>
	joystick_v = HAL_ADC_GetValue(&hadc3);
 8001e78:	4834      	ldr	r0, [pc, #208]	; (8001f4c <Task_Viseur+0x118>)
 8001e7a:	f002 fe3c 	bl	8004af6 <HAL_ADC_GetValue>
 8001e7e:	6278      	str	r0, [r7, #36]	; 0x24

	HAL_ADC_Start(&hadc1);
 8001e80:	4833      	ldr	r0, [pc, #204]	; (8001f50 <Task_Viseur+0x11c>)
 8001e82:	f002 fcdf 	bl	8004844 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8001e86:	bf00      	nop
 8001e88:	2164      	movs	r1, #100	; 0x64
 8001e8a:	4831      	ldr	r0, [pc, #196]	; (8001f50 <Task_Viseur+0x11c>)
 8001e8c:	f002 fda8 	bl	80049e0 <HAL_ADC_PollForConversion>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f8      	bne.n	8001e88 <Task_Viseur+0x54>
	joystick_h = HAL_ADC_GetValue(&hadc1);
 8001e96:	482e      	ldr	r0, [pc, #184]	; (8001f50 <Task_Viseur+0x11c>)
 8001e98:	f002 fe2d 	bl	8004af6 <HAL_ADC_GetValue>
 8001e9c:	6238      	str	r0, [r7, #32]


	int x = (2050-(int)joystick_h)*50/4100;
 8001e9e:	6a3a      	ldr	r2, [r7, #32]
 8001ea0:	f640 0302 	movw	r3, #2050	; 0x802
 8001ea4:	1a9b      	subs	r3, r3, r2
 8001ea6:	4a2b      	ldr	r2, [pc, #172]	; (8001f54 <Task_Viseur+0x120>)
 8001ea8:	fb82 1203 	smull	r1, r2, r2, r3
 8001eac:	1152      	asrs	r2, r2, #5
 8001eae:	17db      	asrs	r3, r3, #31
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	61fb      	str	r3, [r7, #28]
	int y = (2050-(int)joystick_v)*50/4100;
 8001eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb6:	f640 0302 	movw	r3, #2050	; 0x802
 8001eba:	1a9b      	subs	r3, r3, r2
 8001ebc:	4a25      	ldr	r2, [pc, #148]	; (8001f54 <Task_Viseur+0x120>)
 8001ebe:	fb82 1203 	smull	r1, r2, r2, r3
 8001ec2:	1152      	asrs	r2, r2, #5
 8001ec4:	17db      	asrs	r3, r3, #31
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	61bb      	str	r3, [r7, #24]

	xSemaphoreTake( Mutex_EcranHandle, portMAX_DELAY );
 8001eca:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <Task_Viseur+0x124>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f009 fe9a 	bl	800bc0c <xQueueSemaphoreTake>
	extern uint16_t x_viseur2;
	if ((x+x_viseur2>=1+10) && (x+x_viseur2<=480-10)){x_viseur2= x_viseur2 + x;};
 8001ed8:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <Task_Viseur+0x128>)
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	2b0a      	cmp	r3, #10
 8001ee4:	dd0f      	ble.n	8001f06 <Task_Viseur+0xd2>
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <Task_Viseur+0x128>)
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 8001ef4:	dc07      	bgt.n	8001f06 <Task_Viseur+0xd2>
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <Task_Viseur+0x128>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <Task_Viseur+0x128>)
 8001f04:	801a      	strh	r2, [r3, #0]

	extern uint16_t y_viseur2;
	if ((y+y_viseur2>=1+10)&&(y+y_viseur2<=272-10)){y_viseur2 = y_viseur2 + y;};
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <Task_Viseur+0x12c>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	4413      	add	r3, r2
 8001f10:	2b0a      	cmp	r3, #10
 8001f12:	dd0f      	ble.n	8001f34 <Task_Viseur+0x100>
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <Task_Viseur+0x12c>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8001f22:	dc07      	bgt.n	8001f34 <Task_Viseur+0x100>
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <Task_Viseur+0x12c>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <Task_Viseur+0x12c>)
 8001f32:	801a      	strh	r2, [r3, #0]

	xSemaphoreGive( Mutex_EcranHandle );
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <Task_Viseur+0x124>)
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	f009 fbd9 	bl	800b6f4 <xQueueGenericSend>

    osDelay(50);
 8001f42:	2032      	movs	r0, #50	; 0x32
 8001f44:	f009 f965 	bl	800b212 <osDelay>
  {
 8001f48:	e78b      	b.n	8001e62 <Task_Viseur+0x2e>
 8001f4a:	bf00      	nop
 8001f4c:	2000462c 	.word	0x2000462c
 8001f50:	200045e4 	.word	0x200045e4
 8001f54:	63e7063f 	.word	0x63e7063f
 8001f58:	20004538 	.word	0x20004538
 8001f5c:	20000032 	.word	0x20000032
 8001f60:	20000034 	.word	0x20000034

08001f64 <Task_Tir>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Tir */
void Task_Tir(void const * argument)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  {
	extern uint16_t x_viseur2;
	extern uint16_t y_viseur2;
	extern uint16_t x_ennemi;
	extern uint16_t y_ennemi;
	int Message = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
	xQueueReceive(Queue_TirHandle, &Message, 0);
 8001f70:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <Task_Tir+0xc4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f107 0110 	add.w	r1, r7, #16
 8001f78:	2200      	movs	r2, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f009 fd60 	bl	800ba40 <xQueueReceive>
	if (Message == 1){
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d14b      	bne.n	800201e <Task_Tir+0xba>

		HAL_GPIO_TogglePin(LED11_GPIO_Port,LED11_Pin);
 8001f86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f8a:	4828      	ldr	r0, [pc, #160]	; (800202c <Task_Tir+0xc8>)
 8001f8c:	f004 fa1f 	bl	80063ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED12_GPIO_Port,LED12_Pin);
 8001f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f94:	4825      	ldr	r0, [pc, #148]	; (800202c <Task_Tir+0xc8>)
 8001f96:	f004 fa1a 	bl	80063ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED13_GPIO_Port,LED13_Pin);
 8001f9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f9e:	4823      	ldr	r0, [pc, #140]	; (800202c <Task_Tir+0xc8>)
 8001fa0:	f004 fa15 	bl	80063ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED14_GPIO_Port,LED14_Pin);
 8001fa4:	2120      	movs	r1, #32
 8001fa6:	4822      	ldr	r0, [pc, #136]	; (8002030 <Task_Tir+0xcc>)
 8001fa8:	f004 fa11 	bl	80063ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED14_GPIO_Port,LED15_Pin);
 8001fac:	2140      	movs	r1, #64	; 0x40
 8001fae:	4820      	ldr	r0, [pc, #128]	; (8002030 <Task_Tir+0xcc>)
 8001fb0:	f004 fa0d 	bl	80063ce <HAL_GPIO_TogglePin>
		osDelay(100);
 8001fb4:	2064      	movs	r0, #100	; 0x64
 8001fb6:	f009 f92c 	bl	800b212 <osDelay>
		HAL_GPIO_TogglePin(LED11_GPIO_Port,LED11_Pin);
 8001fba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fbe:	481b      	ldr	r0, [pc, #108]	; (800202c <Task_Tir+0xc8>)
 8001fc0:	f004 fa05 	bl	80063ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED12_GPIO_Port,LED12_Pin);
 8001fc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc8:	4818      	ldr	r0, [pc, #96]	; (800202c <Task_Tir+0xc8>)
 8001fca:	f004 fa00 	bl	80063ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED13_GPIO_Port,LED13_Pin);
 8001fce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fd2:	4816      	ldr	r0, [pc, #88]	; (800202c <Task_Tir+0xc8>)
 8001fd4:	f004 f9fb 	bl	80063ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED14_GPIO_Port,LED14_Pin);
 8001fd8:	2120      	movs	r1, #32
 8001fda:	4815      	ldr	r0, [pc, #84]	; (8002030 <Task_Tir+0xcc>)
 8001fdc:	f004 f9f7 	bl	80063ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED14_GPIO_Port,LED15_Pin);
 8001fe0:	2140      	movs	r1, #64	; 0x40
 8001fe2:	4813      	ldr	r0, [pc, #76]	; (8002030 <Task_Tir+0xcc>)
 8001fe4:	f004 f9f3 	bl	80063ce <HAL_GPIO_TogglePin>

		int hit = test_hitbox(x_viseur2, y_viseur2, x_ennemi, y_ennemi);
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <Task_Tir+0xd0>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <Task_Tir+0xd4>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <Task_Tir+0xd8>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <Task_Tir+0xdc>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	f7fe fcc9 	bl	8000994 <test_hitbox>
 8002002:	6178      	str	r0, [r7, #20]
		int Message_hit = 1;
 8002004:	2301      	movs	r3, #1
 8002006:	60fb      	str	r3, [r7, #12]
		if (hit == 1){
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d107      	bne.n	800201e <Task_Tir+0xba>
			xQueueSend(Queue_hitHandle, &Message_hit, 0);
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <Task_Tir+0xe0>)
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	f107 010c 	add.w	r1, r7, #12
 8002016:	2300      	movs	r3, #0
 8002018:	2200      	movs	r2, #0
 800201a:	f009 fb6b 	bl	800b6f4 <xQueueGenericSend>
			};
	}
    osDelay(100);
 800201e:	2064      	movs	r0, #100	; 0x64
 8002020:	f009 f8f7 	bl	800b212 <osDelay>
  {
 8002024:	e7a2      	b.n	8001f6c <Task_Tir+0x8>
 8002026:	bf00      	nop
 8002028:	20004850 	.word	0x20004850
 800202c:	40021c00 	.word	0x40021c00
 8002030:	40021000 	.word	0x40021000
 8002034:	20000032 	.word	0x20000032
 8002038:	20000034 	.word	0x20000034
 800203c:	20000036 	.word	0x20000036
 8002040:	20000038 	.word	0x20000038
 8002044:	200046f8 	.word	0x200046f8

08002048 <Task_Affichage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Affichage */
void Task_Affichage(void const * argument)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b090      	sub	sp, #64	; 0x40
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Affichage */
	char text[50]={};
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	222e      	movs	r2, #46	; 0x2e
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f00b fcb7 	bl	800d9d0 <memset>
	extern uint16_t x_viseur2, y_viseur2;

	extern uint16_t x_ennemi;
	extern uint16_t y_ennemi;

	xSemaphoreTake( Mutex_EcranHandle, portMAX_DELAY );
 8002062:	4b4c      	ldr	r3, [pc, #304]	; (8002194 <Task_Affichage+0x14c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f04f 31ff 	mov.w	r1, #4294967295
 800206a:	4618      	mov	r0, r3
 800206c:	f009 fdce 	bl	800bc0c <xQueueSemaphoreTake>
	BSP_LCD_Clear(LCD_COLOR_GRAY);
 8002070:	4849      	ldr	r0, [pc, #292]	; (8002198 <Task_Affichage+0x150>)
 8002072:	f000 fc3d 	bl	80028f0 <BSP_LCD_Clear>

	//ennemi
	BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8002076:	4849      	ldr	r0, [pc, #292]	; (800219c <Task_Affichage+0x154>)
 8002078:	f000 fc08 	bl	800288c <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(x_ennemi,y_ennemi, 20);
 800207c:	4b48      	ldr	r3, [pc, #288]	; (80021a0 <Task_Affichage+0x158>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	4a48      	ldr	r2, [pc, #288]	; (80021a4 <Task_Affichage+0x15c>)
 8002082:	8811      	ldrh	r1, [r2, #0]
 8002084:	2214      	movs	r2, #20
 8002086:	4618      	mov	r0, r3
 8002088:	f000 ffc2 	bl	8003010 <BSP_LCD_FillCircle>

	//viseur1
	BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 800208c:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8002090:	f000 fbfc 	bl	800288c <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(x_viseur1, y_viseur1+10, x_viseur1, y_viseur1-10);
 8002094:	4b44      	ldr	r3, [pc, #272]	; (80021a8 <Task_Affichage+0x160>)
 8002096:	8818      	ldrh	r0, [r3, #0]
 8002098:	4b44      	ldr	r3, [pc, #272]	; (80021ac <Task_Affichage+0x164>)
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	330a      	adds	r3, #10
 800209e:	b299      	uxth	r1, r3
 80020a0:	4b41      	ldr	r3, [pc, #260]	; (80021a8 <Task_Affichage+0x160>)
 80020a2:	881a      	ldrh	r2, [r3, #0]
 80020a4:	4b41      	ldr	r3, [pc, #260]	; (80021ac <Task_Affichage+0x164>)
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	3b0a      	subs	r3, #10
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	f000 fdb2 	bl	8002c14 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(x_viseur1+10, y_viseur1, x_viseur1-10, y_viseur1);
 80020b0:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <Task_Affichage+0x160>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	330a      	adds	r3, #10
 80020b6:	b298      	uxth	r0, r3
 80020b8:	4b3c      	ldr	r3, [pc, #240]	; (80021ac <Task_Affichage+0x164>)
 80020ba:	8819      	ldrh	r1, [r3, #0]
 80020bc:	4b3a      	ldr	r3, [pc, #232]	; (80021a8 <Task_Affichage+0x160>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	3b0a      	subs	r3, #10
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	4b39      	ldr	r3, [pc, #228]	; (80021ac <Task_Affichage+0x164>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	f000 fda4 	bl	8002c14 <BSP_LCD_DrawLine>
	BSP_LCD_DrawCircle(x_viseur1, y_viseur1, 10);
 80020cc:	4b36      	ldr	r3, [pc, #216]	; (80021a8 <Task_Affichage+0x160>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	4a36      	ldr	r2, [pc, #216]	; (80021ac <Task_Affichage+0x164>)
 80020d2:	8811      	ldrh	r1, [r2, #0]
 80020d4:	220a      	movs	r2, #10
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 fe68 	bl	8002dac <BSP_LCD_DrawCircle>

	//viseur2
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTMAGENTA);
 80020dc:	f46f 40fe 	mvn.w	r0, #32512	; 0x7f00
 80020e0:	f000 fbd4 	bl	800288c <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(x_viseur2, y_viseur2+10, x_viseur2, y_viseur2-10);
 80020e4:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <Task_Affichage+0x168>)
 80020e6:	8818      	ldrh	r0, [r3, #0]
 80020e8:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <Task_Affichage+0x16c>)
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	330a      	adds	r3, #10
 80020ee:	b299      	uxth	r1, r3
 80020f0:	4b2f      	ldr	r3, [pc, #188]	; (80021b0 <Task_Affichage+0x168>)
 80020f2:	881a      	ldrh	r2, [r3, #0]
 80020f4:	4b2f      	ldr	r3, [pc, #188]	; (80021b4 <Task_Affichage+0x16c>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	3b0a      	subs	r3, #10
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	f000 fd8a 	bl	8002c14 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(x_viseur2+10, y_viseur2, x_viseur2-10, y_viseur2);
 8002100:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <Task_Affichage+0x168>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	330a      	adds	r3, #10
 8002106:	b298      	uxth	r0, r3
 8002108:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <Task_Affichage+0x16c>)
 800210a:	8819      	ldrh	r1, [r3, #0]
 800210c:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <Task_Affichage+0x168>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	3b0a      	subs	r3, #10
 8002112:	b29a      	uxth	r2, r3
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <Task_Affichage+0x16c>)
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	f000 fd7c 	bl	8002c14 <BSP_LCD_DrawLine>
	BSP_LCD_DrawCircle(x_viseur2, y_viseur2, 10);
 800211c:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <Task_Affichage+0x168>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	4a24      	ldr	r2, [pc, #144]	; (80021b4 <Task_Affichage+0x16c>)
 8002122:	8811      	ldrh	r1, [r2, #0]
 8002124:	220a      	movs	r2, #10
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fe40 	bl	8002dac <BSP_LCD_DrawCircle>

	//score
	sprintf(text,"Score joueur 1 : %02u", score1);
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <Task_Affichage+0x170>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	4921      	ldr	r1, [pc, #132]	; (80021bc <Task_Affichage+0x174>)
 8002138:	4618      	mov	r0, r3
 800213a:	f00b fd25 	bl	800db88 <siprintf>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800213e:	4820      	ldr	r0, [pc, #128]	; (80021c0 <Task_Affichage+0x178>)
 8002140:	f000 fba4 	bl	800288c <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(60,12,(uint8_t*) text,LEFT_MODE);
 8002144:	f107 020c 	add.w	r2, r7, #12
 8002148:	2303      	movs	r3, #3
 800214a:	210c      	movs	r1, #12
 800214c:	203c      	movs	r0, #60	; 0x3c
 800214e:	f000 fc3b 	bl	80029c8 <BSP_LCD_DisplayStringAt>

	sprintf(text,"Score joueur 2 : %02u", score2);
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <Task_Affichage+0x17c>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	491a      	ldr	r1, [pc, #104]	; (80021c8 <Task_Affichage+0x180>)
 800215e:	4618      	mov	r0, r3
 8002160:	f00b fd12 	bl	800db88 <siprintf>
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTMAGENTA);
 8002164:	f46f 40fe 	mvn.w	r0, #32512	; 0x7f00
 8002168:	f000 fb90 	bl	800288c <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(260,12,(uint8_t*) text,LEFT_MODE);
 800216c:	f107 020c 	add.w	r2, r7, #12
 8002170:	2303      	movs	r3, #3
 8002172:	210c      	movs	r1, #12
 8002174:	f44f 7082 	mov.w	r0, #260	; 0x104
 8002178:	f000 fc26 	bl	80029c8 <BSP_LCD_DisplayStringAt>



	xSemaphoreGive( Mutex_EcranHandle );
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <Task_Affichage+0x14c>)
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	2300      	movs	r3, #0
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	f009 fab5 	bl	800b6f4 <xQueueGenericSend>

    osDelay(40);
 800218a:	2028      	movs	r0, #40	; 0x28
 800218c:	f009 f841 	bl	800b212 <osDelay>
  {
 8002190:	e767      	b.n	8002062 <Task_Affichage+0x1a>
 8002192:	bf00      	nop
 8002194:	20004538 	.word	0x20004538
 8002198:	ff808080 	.word	0xff808080
 800219c:	ffffa500 	.word	0xffffa500
 80021a0:	20000036 	.word	0x20000036
 80021a4:	20000038 	.word	0x20000038
 80021a8:	2000002e 	.word	0x2000002e
 80021ac:	20000030 	.word	0x20000030
 80021b0:	20000032 	.word	0x20000032
 80021b4:	20000034 	.word	0x20000034
 80021b8:	2000039a 	.word	0x2000039a
 80021bc:	0800e3f0 	.word	0x0800e3f0
 80021c0:	ff0000ff 	.word	0xff0000ff
 80021c4:	2000039b 	.word	0x2000039b
 80021c8:	0800e408 	.word	0x0800e408

080021cc <Task_Share>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Share */
void Task_Share(void const * argument)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Share */
  /* Infinite loop */
  for(;;)
  {
	 uint16_t hit = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	827b      	strh	r3, [r7, #18]
	 xQueueReceive(Queue_hitHandle, &hit, 0);
 80021d8:	4b3c      	ldr	r3, [pc, #240]	; (80022cc <Task_Share+0x100>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f107 0112 	add.w	r1, r7, #18
 80021e0:	2200      	movs	r2, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f009 fc2c 	bl	800ba40 <xQueueReceive>

	 pData_transmit[0] = x_viseur2;
 80021e8:	4b39      	ldr	r3, [pc, #228]	; (80022d0 <Task_Share+0x104>)
 80021ea:	881a      	ldrh	r2, [r3, #0]
 80021ec:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <Task_Share+0x108>)
 80021ee:	801a      	strh	r2, [r3, #0]
	 pData_transmit[1] = y_viseur2;
 80021f0:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <Task_Share+0x10c>)
 80021f2:	881a      	ldrh	r2, [r3, #0]
 80021f4:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <Task_Share+0x108>)
 80021f6:	805a      	strh	r2, [r3, #2]
	 pData_transmit[2] = hit;
 80021f8:	8a7a      	ldrh	r2, [r7, #18]
 80021fa:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <Task_Share+0x108>)
 80021fc:	809a      	strh	r2, [r3, #4]
	 pData_transmit[3] = 0;
 80021fe:	4b35      	ldr	r3, [pc, #212]	; (80022d4 <Task_Share+0x108>)
 8002200:	2200      	movs	r2, #0
 8002202:	80da      	strh	r2, [r3, #6]




	int received_condition = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
	xQueueReceive(Queue_RecieveHandle, &received_condition, 0);
 8002208:	4b34      	ldr	r3, [pc, #208]	; (80022dc <Task_Share+0x110>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f107 010c 	add.w	r1, r7, #12
 8002210:	2200      	movs	r2, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f009 fc14 	bl	800ba40 <xQueueReceive>

	if (received_condition == 1){
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d14f      	bne.n	80022be <Task_Share+0xf2>

		extern uint16_t x_viseur1, y_viseur1;
		extern uint16_t x_viseur2, y_viseur2;
		extern uint16_t x_ennemi, y_ennemi;

		uint16_t x_v = pData_received[0];
 800221e:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <Task_Share+0x114>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	83fb      	strh	r3, [r7, #30]
		uint16_t y_v = pData_received[1];
 8002224:	4b2e      	ldr	r3, [pc, #184]	; (80022e0 <Task_Share+0x114>)
 8002226:	885b      	ldrh	r3, [r3, #2]
 8002228:	83bb      	strh	r3, [r7, #28]
		uint16_t x_e = pData_received[2];
 800222a:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <Task_Share+0x114>)
 800222c:	889b      	ldrh	r3, [r3, #4]
 800222e:	837b      	strh	r3, [r7, #26]
		uint16_t y_e = pData_received[3];
 8002230:	4b2b      	ldr	r3, [pc, #172]	; (80022e0 <Task_Share+0x114>)
 8002232:	88db      	ldrh	r3, [r3, #6]
 8002234:	833b      	strh	r3, [r7, #24]
		uint16_t scores = pData_received[4];
 8002236:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <Task_Share+0x114>)
 8002238:	891b      	ldrh	r3, [r3, #8]
 800223a:	82fb      	strh	r3, [r7, #22]
		uint8_t s1 = (uint8_t) (scores>>8);
 800223c:	8afb      	ldrh	r3, [r7, #22]
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	b29b      	uxth	r3, r3
 8002242:	757b      	strb	r3, [r7, #21]
		uint8_t s2 = (uint8_t) scores;
 8002244:	8afb      	ldrh	r3, [r7, #22]
 8002246:	753b      	strb	r3, [r7, #20]
		extern uint8_t score1, score2;
		score1 = s1;
 8002248:	4a26      	ldr	r2, [pc, #152]	; (80022e4 <Task_Share+0x118>)
 800224a:	7d7b      	ldrb	r3, [r7, #21]
 800224c:	7013      	strb	r3, [r2, #0]
		score2 = s2;
 800224e:	4a26      	ldr	r2, [pc, #152]	; (80022e8 <Task_Share+0x11c>)
 8002250:	7d3b      	ldrb	r3, [r7, #20]
 8002252:	7013      	strb	r3, [r2, #0]



		xSemaphoreTake( Mutex_EcranHandle, portMAX_DELAY );
 8002254:	4b25      	ldr	r3, [pc, #148]	; (80022ec <Task_Share+0x120>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f04f 31ff 	mov.w	r1, #4294967295
 800225c:	4618      	mov	r0, r3
 800225e:	f009 fcd5 	bl	800bc0c <xQueueSemaphoreTake>
		if ((x_v>=1+10) && (x_v<=480-10)){x_viseur1= x_v;};
 8002262:	8bfb      	ldrh	r3, [r7, #30]
 8002264:	2b0a      	cmp	r3, #10
 8002266:	d906      	bls.n	8002276 <Task_Share+0xaa>
 8002268:	8bfb      	ldrh	r3, [r7, #30]
 800226a:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 800226e:	d802      	bhi.n	8002276 <Task_Share+0xaa>
 8002270:	4a1f      	ldr	r2, [pc, #124]	; (80022f0 <Task_Share+0x124>)
 8002272:	8bfb      	ldrh	r3, [r7, #30]
 8002274:	8013      	strh	r3, [r2, #0]
		if ((y_v>=1+10)&&(y_v<=272-10)){y_viseur1 = y_v;};
 8002276:	8bbb      	ldrh	r3, [r7, #28]
 8002278:	2b0a      	cmp	r3, #10
 800227a:	d906      	bls.n	800228a <Task_Share+0xbe>
 800227c:	8bbb      	ldrh	r3, [r7, #28]
 800227e:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8002282:	d802      	bhi.n	800228a <Task_Share+0xbe>
 8002284:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <Task_Share+0x128>)
 8002286:	8bbb      	ldrh	r3, [r7, #28]
 8002288:	8013      	strh	r3, [r2, #0]

		if ((x_e>=1+20)&&(x_e<=480-20)&&(y_e>1+20)&&(y_e<=272-20)){
 800228a:	8b7b      	ldrh	r3, [r7, #26]
 800228c:	2b14      	cmp	r3, #20
 800228e:	d90f      	bls.n	80022b0 <Task_Share+0xe4>
 8002290:	8b7b      	ldrh	r3, [r7, #26]
 8002292:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8002296:	d80b      	bhi.n	80022b0 <Task_Share+0xe4>
 8002298:	8b3b      	ldrh	r3, [r7, #24]
 800229a:	2b15      	cmp	r3, #21
 800229c:	d908      	bls.n	80022b0 <Task_Share+0xe4>
 800229e:	8b3b      	ldrh	r3, [r7, #24]
 80022a0:	2bfc      	cmp	r3, #252	; 0xfc
 80022a2:	d805      	bhi.n	80022b0 <Task_Share+0xe4>
			x_ennemi = x_e;
 80022a4:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <Task_Share+0x12c>)
 80022a6:	8b7b      	ldrh	r3, [r7, #26]
 80022a8:	8013      	strh	r3, [r2, #0]
			y_ennemi = y_e;
 80022aa:	4a14      	ldr	r2, [pc, #80]	; (80022fc <Task_Share+0x130>)
 80022ac:	8b3b      	ldrh	r3, [r7, #24]
 80022ae:	8013      	strh	r3, [r2, #0]
		}
		xSemaphoreGive( Mutex_EcranHandle );
 80022b0:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <Task_Share+0x120>)
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	2300      	movs	r3, #0
 80022b6:	2200      	movs	r2, #0
 80022b8:	2100      	movs	r1, #0
 80022ba:	f009 fa1b 	bl	800b6f4 <xQueueGenericSend>

	}
	osDelay(SPI_PERIOD);
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <Task_Share+0x134>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f008 ffa5 	bl	800b212 <osDelay>
  {
 80022c8:	e784      	b.n	80021d4 <Task_Share+0x8>
 80022ca:	bf00      	nop
 80022cc:	200046f8 	.word	0x200046f8
 80022d0:	20000032 	.word	0x20000032
 80022d4:	200046fc 	.word	0x200046fc
 80022d8:	20000034 	.word	0x20000034
 80022dc:	20004718 	.word	0x20004718
 80022e0:	20004314 	.word	0x20004314
 80022e4:	2000039a 	.word	0x2000039a
 80022e8:	2000039b 	.word	0x2000039b
 80022ec:	20004538 	.word	0x20004538
 80022f0:	2000002e 	.word	0x2000002e
 80022f4:	20000030 	.word	0x20000030
 80022f8:	20000036 	.word	0x20000036
 80022fc:	20000038 	.word	0x20000038
 8002300:	20000028 	.word	0x20000028

08002304 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a04      	ldr	r2, [pc, #16]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002316:	f002 fa0d 	bl	8004734 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40001000 	.word	0x40001000

08002328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800232c:	b672      	cpsid	i
}
 800232e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002330:	e7fe      	b.n	8002330 <Error_Handler+0x8>
	...

08002334 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08c      	sub	sp, #48	; 0x30
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a51      	ldr	r2, [pc, #324]	; (8002484 <I2Cx_MspInit+0x150>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d14d      	bne.n	80023e0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002344:	4b50      	ldr	r3, [pc, #320]	; (8002488 <I2Cx_MspInit+0x154>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	4a4f      	ldr	r2, [pc, #316]	; (8002488 <I2Cx_MspInit+0x154>)
 800234a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800234e:	6313      	str	r3, [r2, #48]	; 0x30
 8002350:	4b4d      	ldr	r3, [pc, #308]	; (8002488 <I2Cx_MspInit+0x154>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002358:	61bb      	str	r3, [r7, #24]
 800235a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002360:	2312      	movs	r3, #18
 8002362:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002368:	2302      	movs	r3, #2
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800236c:	2304      	movs	r3, #4
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	4619      	mov	r1, r3
 8002376:	4845      	ldr	r0, [pc, #276]	; (800248c <I2Cx_MspInit+0x158>)
 8002378:	f003 fd58 	bl	8005e2c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800237c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002382:	f107 031c 	add.w	r3, r7, #28
 8002386:	4619      	mov	r1, r3
 8002388:	4840      	ldr	r0, [pc, #256]	; (800248c <I2Cx_MspInit+0x158>)
 800238a:	f003 fd4f 	bl	8005e2c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800238e:	4b3e      	ldr	r3, [pc, #248]	; (8002488 <I2Cx_MspInit+0x154>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	4a3d      	ldr	r2, [pc, #244]	; (8002488 <I2Cx_MspInit+0x154>)
 8002394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002398:	6413      	str	r3, [r2, #64]	; 0x40
 800239a:	4b3b      	ldr	r3, [pc, #236]	; (8002488 <I2Cx_MspInit+0x154>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80023a6:	4b38      	ldr	r3, [pc, #224]	; (8002488 <I2Cx_MspInit+0x154>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a37      	ldr	r2, [pc, #220]	; (8002488 <I2Cx_MspInit+0x154>)
 80023ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023b0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80023b2:	4b35      	ldr	r3, [pc, #212]	; (8002488 <I2Cx_MspInit+0x154>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4a34      	ldr	r2, [pc, #208]	; (8002488 <I2Cx_MspInit+0x154>)
 80023b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023bc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	210f      	movs	r1, #15
 80023c2:	2048      	movs	r0, #72	; 0x48
 80023c4:	f002 feac 	bl	8005120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80023c8:	2048      	movs	r0, #72	; 0x48
 80023ca:	f002 fec5 	bl	8005158 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80023ce:	2200      	movs	r2, #0
 80023d0:	210f      	movs	r1, #15
 80023d2:	2049      	movs	r0, #73	; 0x49
 80023d4:	f002 fea4 	bl	8005120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80023d8:	2049      	movs	r0, #73	; 0x49
 80023da:	f002 febd 	bl	8005158 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80023de:	e04d      	b.n	800247c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80023e0:	4b29      	ldr	r3, [pc, #164]	; (8002488 <I2Cx_MspInit+0x154>)
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	4a28      	ldr	r2, [pc, #160]	; (8002488 <I2Cx_MspInit+0x154>)
 80023e6:	f043 0302 	orr.w	r3, r3, #2
 80023ea:	6313      	str	r3, [r2, #48]	; 0x30
 80023ec:	4b26      	ldr	r3, [pc, #152]	; (8002488 <I2Cx_MspInit+0x154>)
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80023f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023fc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80023fe:	2312      	movs	r3, #18
 8002400:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002406:	2302      	movs	r3, #2
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800240a:	2304      	movs	r3, #4
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800240e:	f107 031c 	add.w	r3, r7, #28
 8002412:	4619      	mov	r1, r3
 8002414:	481e      	ldr	r0, [pc, #120]	; (8002490 <I2Cx_MspInit+0x15c>)
 8002416:	f003 fd09 	bl	8005e2c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800241a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800241e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002420:	f107 031c 	add.w	r3, r7, #28
 8002424:	4619      	mov	r1, r3
 8002426:	481a      	ldr	r0, [pc, #104]	; (8002490 <I2Cx_MspInit+0x15c>)
 8002428:	f003 fd00 	bl	8005e2c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800242c:	4b16      	ldr	r3, [pc, #88]	; (8002488 <I2Cx_MspInit+0x154>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	4a15      	ldr	r2, [pc, #84]	; (8002488 <I2Cx_MspInit+0x154>)
 8002432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002436:	6413      	str	r3, [r2, #64]	; 0x40
 8002438:	4b13      	ldr	r3, [pc, #76]	; (8002488 <I2Cx_MspInit+0x154>)
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002444:	4b10      	ldr	r3, [pc, #64]	; (8002488 <I2Cx_MspInit+0x154>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <I2Cx_MspInit+0x154>)
 800244a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800244e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002450:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <I2Cx_MspInit+0x154>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4a0c      	ldr	r2, [pc, #48]	; (8002488 <I2Cx_MspInit+0x154>)
 8002456:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800245a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800245c:	2200      	movs	r2, #0
 800245e:	210f      	movs	r1, #15
 8002460:	201f      	movs	r0, #31
 8002462:	f002 fe5d 	bl	8005120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002466:	201f      	movs	r0, #31
 8002468:	f002 fe76 	bl	8005158 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800246c:	2200      	movs	r2, #0
 800246e:	210f      	movs	r1, #15
 8002470:	2020      	movs	r0, #32
 8002472:	f002 fe55 	bl	8005120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002476:	2020      	movs	r0, #32
 8002478:	f002 fe6e 	bl	8005158 <HAL_NVIC_EnableIRQ>
}
 800247c:	bf00      	nop
 800247e:	3730      	adds	r7, #48	; 0x30
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	2000039c 	.word	0x2000039c
 8002488:	40023800 	.word	0x40023800
 800248c:	40021c00 	.word	0x40021c00
 8002490:	40020400 	.word	0x40020400

08002494 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f004 fab7 	bl	8006a10 <HAL_I2C_GetState>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d125      	bne.n	80024f4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a14      	ldr	r2, [pc, #80]	; (80024fc <I2Cx_Init+0x68>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d103      	bne.n	80024b8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a13      	ldr	r2, [pc, #76]	; (8002500 <I2Cx_Init+0x6c>)
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e002      	b.n	80024be <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a12      	ldr	r2, [pc, #72]	; (8002504 <I2Cx_Init+0x70>)
 80024bc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a11      	ldr	r2, [pc, #68]	; (8002508 <I2Cx_Init+0x74>)
 80024c2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ff23 	bl	8002334 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f003 ffa0 	bl	8006434 <HAL_I2C_Init>
  }
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	2000039c 	.word	0x2000039c
 8002500:	40005c00 	.word	0x40005c00
 8002504:	40005400 	.word	0x40005400
 8002508:	40912732 	.word	0x40912732

0800250c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	; 0x28
 8002510:	af04      	add	r7, sp, #16
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	4608      	mov	r0, r1
 8002516:	4611      	mov	r1, r2
 8002518:	461a      	mov	r2, r3
 800251a:	4603      	mov	r3, r0
 800251c:	72fb      	strb	r3, [r7, #11]
 800251e:	460b      	mov	r3, r1
 8002520:	813b      	strh	r3, [r7, #8]
 8002522:	4613      	mov	r3, r2
 8002524:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800252a:	7afb      	ldrb	r3, [r7, #11]
 800252c:	b299      	uxth	r1, r3
 800252e:	88f8      	ldrh	r0, [r7, #6]
 8002530:	893a      	ldrh	r2, [r7, #8]
 8002532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002536:	9302      	str	r3, [sp, #8]
 8002538:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	4603      	mov	r3, r0
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f004 f94a 	bl	80067dc <HAL_I2C_Mem_Read>
 8002548:	4603      	mov	r3, r0
 800254a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d004      	beq.n	800255c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002552:	7afb      	ldrb	r3, [r7, #11]
 8002554:	4619      	mov	r1, r3
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f832 	bl	80025c0 <I2Cx_Error>
  }
  return status;    
 800255c:	7dfb      	ldrb	r3, [r7, #23]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b08a      	sub	sp, #40	; 0x28
 800256a:	af04      	add	r7, sp, #16
 800256c:	60f8      	str	r0, [r7, #12]
 800256e:	4608      	mov	r0, r1
 8002570:	4611      	mov	r1, r2
 8002572:	461a      	mov	r2, r3
 8002574:	4603      	mov	r3, r0
 8002576:	72fb      	strb	r3, [r7, #11]
 8002578:	460b      	mov	r3, r1
 800257a:	813b      	strh	r3, [r7, #8]
 800257c:	4613      	mov	r3, r2
 800257e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002584:	7afb      	ldrb	r3, [r7, #11]
 8002586:	b299      	uxth	r1, r3
 8002588:	88f8      	ldrh	r0, [r7, #6]
 800258a:	893a      	ldrh	r2, [r7, #8]
 800258c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002590:	9302      	str	r3, [sp, #8]
 8002592:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	4603      	mov	r3, r0
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f004 f809 	bl	80065b4 <HAL_I2C_Mem_Write>
 80025a2:	4603      	mov	r3, r0
 80025a4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d004      	beq.n	80025b6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80025ac:	7afb      	ldrb	r3, [r7, #11]
 80025ae:	4619      	mov	r1, r3
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 f805 	bl	80025c0 <I2Cx_Error>
  }
  return status;
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f003 ffc1 	bl	8006554 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ff5e 	bl	8002494 <I2Cx_Init>
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <TS_IO_Init+0x10>)
 80025e6:	f7ff ff55 	bl	8002494 <I2Cx_Init>
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	2000039c 	.word	0x2000039c

080025f4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
 80025fe:	460b      	mov	r3, r1
 8002600:	71bb      	strb	r3, [r7, #6]
 8002602:	4613      	mov	r3, r2
 8002604:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002606:	79bb      	ldrb	r3, [r7, #6]
 8002608:	b29a      	uxth	r2, r3
 800260a:	79f9      	ldrb	r1, [r7, #7]
 800260c:	2301      	movs	r3, #1
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	1d7b      	adds	r3, r7, #5
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	2301      	movs	r3, #1
 8002616:	4803      	ldr	r0, [pc, #12]	; (8002624 <TS_IO_Write+0x30>)
 8002618:	f7ff ffa5 	bl	8002566 <I2Cx_WriteMultiple>
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	2000039c 	.word	0x2000039c

08002628 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af02      	add	r7, sp, #8
 800262e:	4603      	mov	r3, r0
 8002630:	460a      	mov	r2, r1
 8002632:	71fb      	strb	r3, [r7, #7]
 8002634:	4613      	mov	r3, r2
 8002636:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800263c:	79bb      	ldrb	r3, [r7, #6]
 800263e:	b29a      	uxth	r2, r3
 8002640:	79f9      	ldrb	r1, [r7, #7]
 8002642:	2301      	movs	r3, #1
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	f107 030f 	add.w	r3, r7, #15
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	2301      	movs	r3, #1
 800264e:	4804      	ldr	r0, [pc, #16]	; (8002660 <TS_IO_Read+0x38>)
 8002650:	f7ff ff5c 	bl	800250c <I2Cx_ReadMultiple>

  return read_value;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	2000039c 	.word	0x2000039c

08002664 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f002 f881 	bl	8004774 <HAL_Delay>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002680:	4b31      	ldr	r3, [pc, #196]	; (8002748 <BSP_LCD_Init+0xcc>)
 8002682:	2228      	movs	r2, #40	; 0x28
 8002684:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002686:	4b30      	ldr	r3, [pc, #192]	; (8002748 <BSP_LCD_Init+0xcc>)
 8002688:	2209      	movs	r2, #9
 800268a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800268c:	4b2e      	ldr	r3, [pc, #184]	; (8002748 <BSP_LCD_Init+0xcc>)
 800268e:	2235      	movs	r2, #53	; 0x35
 8002690:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002692:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <BSP_LCD_Init+0xcc>)
 8002694:	220b      	movs	r2, #11
 8002696:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002698:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <BSP_LCD_Init+0xcc>)
 800269a:	f240 121b 	movw	r2, #283	; 0x11b
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80026a0:	4b29      	ldr	r3, [pc, #164]	; (8002748 <BSP_LCD_Init+0xcc>)
 80026a2:	f240 2215 	movw	r2, #533	; 0x215
 80026a6:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80026a8:	4b27      	ldr	r3, [pc, #156]	; (8002748 <BSP_LCD_Init+0xcc>)
 80026aa:	f240 121d 	movw	r2, #285	; 0x11d
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <BSP_LCD_Init+0xcc>)
 80026b2:	f240 2235 	movw	r2, #565	; 0x235
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80026b8:	2100      	movs	r1, #0
 80026ba:	4823      	ldr	r0, [pc, #140]	; (8002748 <BSP_LCD_Init+0xcc>)
 80026bc:	f000 fe40 	bl	8003340 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80026c0:	4b21      	ldr	r3, [pc, #132]	; (8002748 <BSP_LCD_Init+0xcc>)
 80026c2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80026c6:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80026c8:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <BSP_LCD_Init+0xcc>)
 80026ca:	f44f 7288 	mov.w	r2, #272	; 0x110
 80026ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80026d0:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <BSP_LCD_Init+0xcc>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <BSP_LCD_Init+0xcc>)
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <BSP_LCD_Init+0xcc>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80026e8:	4b17      	ldr	r3, [pc, #92]	; (8002748 <BSP_LCD_Init+0xcc>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80026ee:	4b16      	ldr	r3, [pc, #88]	; (8002748 <BSP_LCD_Init+0xcc>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80026f4:	4b14      	ldr	r3, [pc, #80]	; (8002748 <BSP_LCD_Init+0xcc>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80026fa:	4b13      	ldr	r3, [pc, #76]	; (8002748 <BSP_LCD_Init+0xcc>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <BSP_LCD_Init+0xcc>)
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <BSP_LCD_Init+0xd0>)
 8002704:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002706:	4810      	ldr	r0, [pc, #64]	; (8002748 <BSP_LCD_Init+0xcc>)
 8002708:	f004 fe9e 	bl	8007448 <HAL_LTDC_GetState>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d103      	bne.n	800271a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002712:	2100      	movs	r1, #0
 8002714:	480c      	ldr	r0, [pc, #48]	; (8002748 <BSP_LCD_Init+0xcc>)
 8002716:	f000 fd39 	bl	800318c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800271a:	480b      	ldr	r0, [pc, #44]	; (8002748 <BSP_LCD_Init+0xcc>)
 800271c:	f004 fcc4 	bl	80070a8 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002720:	2201      	movs	r2, #1
 8002722:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002726:	480a      	ldr	r0, [pc, #40]	; (8002750 <BSP_LCD_Init+0xd4>)
 8002728:	f003 fe38 	bl	800639c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800272c:	2201      	movs	r2, #1
 800272e:	2108      	movs	r1, #8
 8002730:	4808      	ldr	r0, [pc, #32]	; (8002754 <BSP_LCD_Init+0xd8>)
 8002732:	f003 fe33 	bl	800639c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002736:	f000 ff23 	bl	8003580 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800273a:	4807      	ldr	r0, [pc, #28]	; (8002758 <BSP_LCD_Init+0xdc>)
 800273c:	f000 f8be 	bl	80028bc <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200048dc 	.word	0x200048dc
 800274c:	40016800 	.word	0x40016800
 8002750:	40022000 	.word	0x40022000
 8002754:	40022800 	.word	0x40022800
 8002758:	2000003c 	.word	0x2000003c

0800275c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <BSP_LCD_GetXSize+0x20>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a06      	ldr	r2, [pc, #24]	; (8002780 <BSP_LCD_GetXSize+0x24>)
 8002766:	2134      	movs	r1, #52	; 0x34
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	3360      	adds	r3, #96	; 0x60
 8002770:	681b      	ldr	r3, [r3, #0]
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	20000428 	.word	0x20000428
 8002780:	200048dc 	.word	0x200048dc

08002784 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <BSP_LCD_GetYSize+0x20>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a06      	ldr	r2, [pc, #24]	; (80027a8 <BSP_LCD_GetYSize+0x24>)
 800278e:	2134      	movs	r1, #52	; 0x34
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	3364      	adds	r3, #100	; 0x64
 8002798:	681b      	ldr	r3, [r3, #0]
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	20000428 	.word	0x20000428
 80027a8:	200048dc 	.word	0x200048dc

080027ac <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b090      	sub	sp, #64	; 0x40
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	6039      	str	r1, [r7, #0]
 80027b6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80027bc:	f7ff ffce 	bl	800275c <BSP_LCD_GetXSize>
 80027c0:	4603      	mov	r3, r0
 80027c2:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80027c8:	f7ff ffdc 	bl	8002784 <BSP_LCD_GetYSize>
 80027cc:	4603      	mov	r3, r0
 80027ce:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80027d8:	23ff      	movs	r3, #255	; 0xff
 80027da:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80027f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027f6:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80027f8:	2307      	movs	r3, #7
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80027fc:	f7ff ffae 	bl	800275c <BSP_LCD_GetXSize>
 8002800:	4603      	mov	r3, r0
 8002802:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002804:	f7ff ffbe 	bl	8002784 <BSP_LCD_GetYSize>
 8002808:	4603      	mov	r3, r0
 800280a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800280c:	88fa      	ldrh	r2, [r7, #6]
 800280e:	f107 030c 	add.w	r3, r7, #12
 8002812:	4619      	mov	r1, r3
 8002814:	4812      	ldr	r0, [pc, #72]	; (8002860 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002816:	f004 fdd9 	bl	80073cc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800281a:	88fa      	ldrh	r2, [r7, #6]
 800281c:	4911      	ldr	r1, [pc, #68]	; (8002864 <BSP_LCD_LayerDefaultInit+0xb8>)
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	3304      	adds	r3, #4
 800282a:	f04f 32ff 	mov.w	r2, #4294967295
 800282e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002830:	88fa      	ldrh	r2, [r7, #6]
 8002832:	490c      	ldr	r1, [pc, #48]	; (8002864 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002834:	4613      	mov	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	3308      	adds	r3, #8
 8002840:	4a09      	ldr	r2, [pc, #36]	; (8002868 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002842:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002844:	88fa      	ldrh	r2, [r7, #6]
 8002846:	4907      	ldr	r1, [pc, #28]	; (8002864 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002856:	601a      	str	r2, [r3, #0]
}
 8002858:	bf00      	nop
 800285a:	3740      	adds	r7, #64	; 0x40
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	200048dc 	.word	0x200048dc
 8002864:	2000042c 	.word	0x2000042c
 8002868:	2000003c 	.word	0x2000003c

0800286c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002874:	4a04      	ldr	r2, [pc, #16]	; (8002888 <BSP_LCD_SelectLayer+0x1c>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6013      	str	r3, [r2, #0]
} 
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000428 	.word	0x20000428

0800288c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002894:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <BSP_LCD_SetTextColor+0x28>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4907      	ldr	r1, [pc, #28]	; (80028b8 <BSP_LCD_SetTextColor+0x2c>)
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	601a      	str	r2, [r3, #0]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	20000428 	.word	0x20000428
 80028b8:	2000042c 	.word	0x2000042c

080028bc <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <BSP_LCD_SetFont+0x2c>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4908      	ldr	r1, [pc, #32]	; (80028ec <BSP_LCD_SetFont+0x30>)
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	3308      	adds	r3, #8
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	601a      	str	r2, [r3, #0]
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000428 	.word	0x20000428
 80028ec:	2000042c 	.word	0x2000042c

080028f0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80028f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <BSP_LCD_Clear+0x48>)
 80028fa:	681c      	ldr	r4, [r3, #0]
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <BSP_LCD_Clear+0x48>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0e      	ldr	r2, [pc, #56]	; (800293c <BSP_LCD_Clear+0x4c>)
 8002902:	2134      	movs	r1, #52	; 0x34
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	335c      	adds	r3, #92	; 0x5c
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	461e      	mov	r6, r3
 8002910:	f7ff ff24 	bl	800275c <BSP_LCD_GetXSize>
 8002914:	4605      	mov	r5, r0
 8002916:	f7ff ff35 	bl	8002784 <BSP_LCD_GetYSize>
 800291a:	4602      	mov	r2, r0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	2300      	movs	r3, #0
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	4613      	mov	r3, r2
 8002926:	462a      	mov	r2, r5
 8002928:	4631      	mov	r1, r6
 800292a:	4620      	mov	r0, r4
 800292c:	f000 fddc 	bl	80034e8 <LL_FillBuffer>
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002938:	20000428 	.word	0x20000428
 800293c:	200048dc 	.word	0x200048dc

08002940 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	80fb      	strh	r3, [r7, #6]
 800294a:	460b      	mov	r3, r1
 800294c:	80bb      	strh	r3, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002952:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <BSP_LCD_DisplayChar+0x80>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	491b      	ldr	r1, [pc, #108]	; (80029c4 <BSP_LCD_DisplayChar+0x84>)
 8002958:	4613      	mov	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3308      	adds	r3, #8
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6819      	ldr	r1, [r3, #0]
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800296e:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <BSP_LCD_DisplayChar+0x80>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4c14      	ldr	r4, [pc, #80]	; (80029c4 <BSP_LCD_DisplayChar+0x84>)
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4423      	add	r3, r4
 800297e:	3308      	adds	r3, #8
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002984:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002988:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <BSP_LCD_DisplayChar+0x80>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4c0d      	ldr	r4, [pc, #52]	; (80029c4 <BSP_LCD_DisplayChar+0x84>)
 800298e:	4613      	mov	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4423      	add	r3, r4
 8002998:	3308      	adds	r3, #8
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	889b      	ldrh	r3, [r3, #4]
 800299e:	3307      	adds	r3, #7
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	da00      	bge.n	80029a6 <BSP_LCD_DisplayChar+0x66>
 80029a4:	3307      	adds	r3, #7
 80029a6:	10db      	asrs	r3, r3, #3
 80029a8:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80029ac:	18ca      	adds	r2, r1, r3
 80029ae:	88b9      	ldrh	r1, [r7, #4]
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fce0 	bl	8003378 <DrawChar>
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd90      	pop	{r4, r7, pc}
 80029c0:	20000428 	.word	0x20000428
 80029c4:	2000042c 	.word	0x2000042c

080029c8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80029c8:	b5b0      	push	{r4, r5, r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60ba      	str	r2, [r7, #8]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	81fb      	strh	r3, [r7, #14]
 80029d6:	460b      	mov	r3, r1
 80029d8:	81bb      	strh	r3, [r7, #12]
 80029da:	4613      	mov	r3, r2
 80029dc:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80029de:	2301      	movs	r3, #1
 80029e0:	83fb      	strh	r3, [r7, #30]
 80029e2:	2300      	movs	r3, #0
 80029e4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80029f2:	e002      	b.n	80029fa <BSP_LCD_DisplayStringAt+0x32>
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	3301      	adds	r3, #1
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	617a      	str	r2, [r7, #20]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f6      	bne.n	80029f4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002a06:	f7ff fea9 	bl	800275c <BSP_LCD_GetXSize>
 8002a0a:	4601      	mov	r1, r0
 8002a0c:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <BSP_LCD_DisplayStringAt+0x188>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4850      	ldr	r0, [pc, #320]	; (8002b54 <BSP_LCD_DisplayStringAt+0x18c>)
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4403      	add	r3, r0
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	889b      	ldrh	r3, [r3, #4]
 8002a22:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a26:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d01c      	beq.n	8002a68 <BSP_LCD_DisplayStringAt+0xa0>
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	dc33      	bgt.n	8002a9a <BSP_LCD_DisplayStringAt+0xd2>
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d002      	beq.n	8002a3c <BSP_LCD_DisplayStringAt+0x74>
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d019      	beq.n	8002a6e <BSP_LCD_DisplayStringAt+0xa6>
 8002a3a:	e02e      	b.n	8002a9a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	1ad1      	subs	r1, r2, r3
 8002a42:	4b43      	ldr	r3, [pc, #268]	; (8002b50 <BSP_LCD_DisplayStringAt+0x188>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	4843      	ldr	r0, [pc, #268]	; (8002b54 <BSP_LCD_DisplayStringAt+0x18c>)
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4403      	add	r3, r0
 8002a52:	3308      	adds	r3, #8
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	889b      	ldrh	r3, [r3, #4]
 8002a58:	fb03 f301 	mul.w	r3, r3, r1
 8002a5c:	085b      	lsrs	r3, r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	89fb      	ldrh	r3, [r7, #14]
 8002a62:	4413      	add	r3, r2
 8002a64:	83fb      	strh	r3, [r7, #30]
      break;
 8002a66:	e01b      	b.n	8002aa0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002a68:	89fb      	ldrh	r3, [r7, #14]
 8002a6a:	83fb      	strh	r3, [r7, #30]
      break;
 8002a6c:	e018      	b.n	8002aa0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	b299      	uxth	r1, r3
 8002a76:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <BSP_LCD_DisplayStringAt+0x188>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4836      	ldr	r0, [pc, #216]	; (8002b54 <BSP_LCD_DisplayStringAt+0x18c>)
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4403      	add	r3, r0
 8002a86:	3308      	adds	r3, #8
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	889b      	ldrh	r3, [r3, #4]
 8002a8c:	fb11 f303 	smulbb	r3, r1, r3
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	89fb      	ldrh	r3, [r7, #14]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	83fb      	strh	r3, [r7, #30]
      break;
 8002a98:	e002      	b.n	8002aa0 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002a9a:	89fb      	ldrh	r3, [r7, #14]
 8002a9c:	83fb      	strh	r3, [r7, #30]
      break;
 8002a9e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002aa0:	8bfb      	ldrh	r3, [r7, #30]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <BSP_LCD_DisplayStringAt+0xe6>
 8002aa6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	da1d      	bge.n	8002aea <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002ab2:	e01a      	b.n	8002aea <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	781a      	ldrb	r2, [r3, #0]
 8002ab8:	89b9      	ldrh	r1, [r7, #12]
 8002aba:	8bfb      	ldrh	r3, [r7, #30]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff3f 	bl	8002940 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002ac2:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <BSP_LCD_DisplayStringAt+0x188>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4923      	ldr	r1, [pc, #140]	; (8002b54 <BSP_LCD_DisplayStringAt+0x18c>)
 8002ac8:	4613      	mov	r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3308      	adds	r3, #8
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	889a      	ldrh	r2, [r3, #4]
 8002ad8:	8bfb      	ldrh	r3, [r7, #30]
 8002ada:	4413      	add	r3, r2
 8002adc:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	60bb      	str	r3, [r7, #8]
    i++;
 8002ae4:	8bbb      	ldrh	r3, [r7, #28]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	bf14      	ite	ne
 8002af2:	2301      	movne	r3, #1
 8002af4:	2300      	moveq	r3, #0
 8002af6:	b2dc      	uxtb	r4, r3
 8002af8:	f7ff fe30 	bl	800275c <BSP_LCD_GetXSize>
 8002afc:	8bb9      	ldrh	r1, [r7, #28]
 8002afe:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <BSP_LCD_DisplayStringAt+0x188>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4d14      	ldr	r5, [pc, #80]	; (8002b54 <BSP_LCD_DisplayStringAt+0x18c>)
 8002b04:	4613      	mov	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	442b      	add	r3, r5
 8002b0e:	3308      	adds	r3, #8
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	889b      	ldrh	r3, [r3, #4]
 8002b14:	fb03 f301 	mul.w	r3, r3, r1
 8002b18:	1ac3      	subs	r3, r0, r3
 8002b1a:	b299      	uxth	r1, r3
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <BSP_LCD_DisplayStringAt+0x188>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	480c      	ldr	r0, [pc, #48]	; (8002b54 <BSP_LCD_DisplayStringAt+0x18c>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4403      	add	r3, r0
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	889b      	ldrh	r3, [r3, #4]
 8002b32:	4299      	cmp	r1, r3
 8002b34:	bf2c      	ite	cs
 8002b36:	2301      	movcs	r3, #1
 8002b38:	2300      	movcc	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	4023      	ands	r3, r4
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1b7      	bne.n	8002ab4 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000428 	.word	0x20000428
 8002b54:	2000042c 	.word	0x2000042c

08002b58 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002b58:	b5b0      	push	{r4, r5, r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	4603      	mov	r3, r0
 8002b60:	80fb      	strh	r3, [r7, #6]
 8002b62:	460b      	mov	r3, r1
 8002b64:	80bb      	strh	r3, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002b6e:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <BSP_LCD_DrawHLine+0xb0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a26      	ldr	r2, [pc, #152]	; (8002c0c <BSP_LCD_DrawHLine+0xb4>)
 8002b74:	2134      	movs	r1, #52	; 0x34
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3348      	adds	r3, #72	; 0x48
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d114      	bne.n	8002bae <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002b84:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <BSP_LCD_DrawHLine+0xb0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a20      	ldr	r2, [pc, #128]	; (8002c0c <BSP_LCD_DrawHLine+0xb4>)
 8002b8a:	2134      	movs	r1, #52	; 0x34
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	4413      	add	r3, r2
 8002b92:	335c      	adds	r3, #92	; 0x5c
 8002b94:	681c      	ldr	r4, [r3, #0]
 8002b96:	f7ff fde1 	bl	800275c <BSP_LCD_GetXSize>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	88bb      	ldrh	r3, [r7, #4]
 8002b9e:	fb03 f202 	mul.w	r2, r3, r2
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4423      	add	r3, r4
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	e013      	b.n	8002bd6 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002bae:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <BSP_LCD_DrawHLine+0xb0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a16      	ldr	r2, [pc, #88]	; (8002c0c <BSP_LCD_DrawHLine+0xb4>)
 8002bb4:	2134      	movs	r1, #52	; 0x34
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	335c      	adds	r3, #92	; 0x5c
 8002bbe:	681c      	ldr	r4, [r3, #0]
 8002bc0:	f7ff fdcc 	bl	800275c <BSP_LCD_GetXSize>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	88bb      	ldrh	r3, [r7, #4]
 8002bc8:	fb03 f202 	mul.w	r2, r3, r2
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4423      	add	r3, r4
 8002bd4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <BSP_LCD_DrawHLine+0xb0>)
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	68f9      	ldr	r1, [r7, #12]
 8002bdc:	887c      	ldrh	r4, [r7, #2]
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <BSP_LCD_DrawHLine+0xb0>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4d0b      	ldr	r5, [pc, #44]	; (8002c10 <BSP_LCD_DrawHLine+0xb8>)
 8002be4:	4613      	mov	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	442b      	add	r3, r5
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	4622      	mov	r2, r4
 8002bfa:	f000 fc75 	bl	80034e8 <LL_FillBuffer>
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bdb0      	pop	{r4, r5, r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000428 	.word	0x20000428
 8002c0c:	200048dc 	.word	0x200048dc
 8002c10:	2000042c 	.word	0x2000042c

08002c14 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8002c14:	b590      	push	{r4, r7, lr}
 8002c16:	b08b      	sub	sp, #44	; 0x2c
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	4608      	mov	r0, r1
 8002c1e:	4611      	mov	r1, r2
 8002c20:	461a      	mov	r2, r3
 8002c22:	4623      	mov	r3, r4
 8002c24:	80fb      	strh	r3, [r7, #6]
 8002c26:	4603      	mov	r3, r0
 8002c28:	80bb      	strh	r3, [r7, #4]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	807b      	strh	r3, [r7, #2]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002c32:	2300      	movs	r3, #0
 8002c34:	823b      	strh	r3, [r7, #16]
 8002c36:	2300      	movs	r3, #0
 8002c38:	81fb      	strh	r3, [r7, #14]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c3e:	2300      	movs	r3, #0
 8002c40:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002c42:	2300      	movs	r3, #0
 8002c44:	847b      	strh	r3, [r7, #34]	; 0x22
 8002c46:	2300      	movs	r3, #0
 8002c48:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	83fb      	strh	r3, [r7, #30]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	83bb      	strh	r3, [r7, #28]
 8002c52:	2300      	movs	r3, #0
 8002c54:	837b      	strh	r3, [r7, #26]
 8002c56:	2300      	movs	r3, #0
 8002c58:	833b      	strh	r3, [r7, #24]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	82fb      	strh	r3, [r7, #22]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002c66:	887a      	ldrh	r2, [r7, #2]
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bfb8      	it	lt
 8002c70:	425b      	neglt	r3, r3
 8002c72:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002c74:	883a      	ldrh	r2, [r7, #0]
 8002c76:	88bb      	ldrh	r3, [r7, #4]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bfb8      	it	lt
 8002c7e:	425b      	neglt	r3, r3
 8002c80:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8002c86:	88bb      	ldrh	r3, [r7, #4]
 8002c88:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d304      	bcc.n	8002c9c <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8002c92:	2301      	movs	r3, #1
 8002c94:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002c96:	2301      	movs	r3, #1
 8002c98:	843b      	strh	r3, [r7, #32]
 8002c9a:	e005      	b.n	8002ca8 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002c9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ca0:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ca6:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8002ca8:	883a      	ldrh	r2, [r7, #0]
 8002caa:	88bb      	ldrh	r3, [r7, #4]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d304      	bcc.n	8002cba <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	83bb      	strh	r3, [r7, #28]
 8002cb8:	e005      	b.n	8002cc6 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002cba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cbe:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002cc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cc4:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002cc6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002cca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	db11      	blt.n	8002cf6 <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002cda:	8a3b      	ldrh	r3, [r7, #16]
 8002cdc:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002cde:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	da00      	bge.n	8002ce8 <BSP_LCD_DrawLine+0xd4>
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	105b      	asrs	r3, r3, #1
 8002cea:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8002cec:	89fb      	ldrh	r3, [r7, #14]
 8002cee:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8002cf0:	8a3b      	ldrh	r3, [r7, #16]
 8002cf2:	82bb      	strh	r3, [r7, #20]
 8002cf4:	e010      	b.n	8002d18 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002cfe:	89fb      	ldrh	r3, [r7, #14]
 8002d00:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002d02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	da00      	bge.n	8002d0c <BSP_LCD_DrawLine+0xf8>
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	105b      	asrs	r3, r3, #1
 8002d0e:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8002d10:	8a3b      	ldrh	r3, [r7, #16]
 8002d12:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8002d14:	89fb      	ldrh	r3, [r7, #14]
 8002d16:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002d18:	2300      	movs	r3, #0
 8002d1a:	827b      	strh	r3, [r7, #18]
 8002d1c:	e037      	b.n	8002d8e <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002d1e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002d20:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <BSP_LCD_DrawLine+0x190>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4c20      	ldr	r4, [pc, #128]	; (8002da8 <BSP_LCD_DrawLine+0x194>)
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4423      	add	r3, r4
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	f000 f923 	bl	8002f80 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8002d3a:	8b3a      	ldrh	r2, [r7, #24]
 8002d3c:	8afb      	ldrh	r3, [r7, #22]
 8002d3e:	4413      	add	r3, r2
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002d44:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002d48:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	db0e      	blt.n	8002d6e <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002d50:	8b3a      	ldrh	r2, [r7, #24]
 8002d52:	8b7b      	ldrh	r3, [r7, #26]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8002d5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d5e:	4413      	add	r3, r2
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002d64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d66:	8bfb      	ldrh	r3, [r7, #30]
 8002d68:	4413      	add	r3, r2
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8002d6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d70:	8c3b      	ldrh	r3, [r7, #32]
 8002d72:	4413      	add	r3, r2
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002d78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d7a:	8bbb      	ldrh	r3, [r7, #28]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002d82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3301      	adds	r3, #1
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	827b      	strh	r3, [r7, #18]
 8002d8e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002d92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	ddc1      	ble.n	8002d1e <BSP_LCD_DrawLine+0x10a>
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	bf00      	nop
 8002d9e:	372c      	adds	r7, #44	; 0x2c
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd90      	pop	{r4, r7, pc}
 8002da4:	20000428 	.word	0x20000428
 8002da8:	2000042c 	.word	0x2000042c

08002dac <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	80fb      	strh	r3, [r7, #6]
 8002db6:	460b      	mov	r3, r1
 8002db8:	80bb      	strh	r3, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002dbe:	887b      	ldrh	r3, [r7, #2]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	f1c3 0303 	rsb	r3, r3, #3
 8002dc6:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002dcc:	887b      	ldrh	r3, [r7, #2]
 8002dce:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002dd0:	e0c7      	b.n	8002f62 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	4413      	add	r3, r2
 8002dda:	b298      	uxth	r0, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	88ba      	ldrh	r2, [r7, #4]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	b299      	uxth	r1, r3
 8002de6:	4b64      	ldr	r3, [pc, #400]	; (8002f78 <BSP_LCD_DrawCircle+0x1cc>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4c64      	ldr	r4, [pc, #400]	; (8002f7c <BSP_LCD_DrawCircle+0x1d0>)
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4423      	add	r3, r4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f000 f8c1 	bl	8002f80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	88fa      	ldrh	r2, [r7, #6]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	b298      	uxth	r0, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	88ba      	ldrh	r2, [r7, #4]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	b299      	uxth	r1, r3
 8002e12:	4b59      	ldr	r3, [pc, #356]	; (8002f78 <BSP_LCD_DrawCircle+0x1cc>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4c59      	ldr	r4, [pc, #356]	; (8002f7c <BSP_LCD_DrawCircle+0x1d0>)
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4423      	add	r3, r4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	f000 f8ab 	bl	8002f80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	4413      	add	r3, r2
 8002e32:	b298      	uxth	r0, r3
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	88ba      	ldrh	r2, [r7, #4]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	b299      	uxth	r1, r3
 8002e3e:	4b4e      	ldr	r3, [pc, #312]	; (8002f78 <BSP_LCD_DrawCircle+0x1cc>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4c4e      	ldr	r4, [pc, #312]	; (8002f7c <BSP_LCD_DrawCircle+0x1d0>)
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4423      	add	r3, r4
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	f000 f895 	bl	8002f80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	88fa      	ldrh	r2, [r7, #6]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	b298      	uxth	r0, r3
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	88ba      	ldrh	r2, [r7, #4]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	b299      	uxth	r1, r3
 8002e6a:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <BSP_LCD_DrawCircle+0x1cc>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4c43      	ldr	r4, [pc, #268]	; (8002f7c <BSP_LCD_DrawCircle+0x1d0>)
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4423      	add	r3, r4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f000 f87f 	bl	8002f80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	4413      	add	r3, r2
 8002e8a:	b298      	uxth	r0, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	88bb      	ldrh	r3, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	b299      	uxth	r1, r3
 8002e96:	4b38      	ldr	r3, [pc, #224]	; (8002f78 <BSP_LCD_DrawCircle+0x1cc>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4c38      	ldr	r4, [pc, #224]	; (8002f7c <BSP_LCD_DrawCircle+0x1d0>)
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4423      	add	r3, r4
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f000 f869 	bl	8002f80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	88fa      	ldrh	r2, [r7, #6]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	b298      	uxth	r0, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	88bb      	ldrh	r3, [r7, #4]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	b299      	uxth	r1, r3
 8002ec2:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <BSP_LCD_DrawCircle+0x1cc>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4c2d      	ldr	r4, [pc, #180]	; (8002f7c <BSP_LCD_DrawCircle+0x1d0>)
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4423      	add	r3, r4
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	f000 f853 	bl	8002f80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	b298      	uxth	r0, r3
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	88bb      	ldrh	r3, [r7, #4]
 8002eea:	4413      	add	r3, r2
 8002eec:	b299      	uxth	r1, r3
 8002eee:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <BSP_LCD_DrawCircle+0x1cc>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	4c22      	ldr	r4, [pc, #136]	; (8002f7c <BSP_LCD_DrawCircle+0x1d0>)
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4423      	add	r3, r4
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	f000 f83d 	bl	8002f80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	88fa      	ldrh	r2, [r7, #6]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	b298      	uxth	r0, r3
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	88bb      	ldrh	r3, [r7, #4]
 8002f16:	4413      	add	r3, r2
 8002f18:	b299      	uxth	r1, r3
 8002f1a:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <BSP_LCD_DrawCircle+0x1cc>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4c17      	ldr	r4, [pc, #92]	; (8002f7c <BSP_LCD_DrawCircle+0x1d0>)
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4423      	add	r3, r4
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f000 f827 	bl	8002f80 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	da06      	bge.n	8002f46 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	009a      	lsls	r2, r3, #2
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	4413      	add	r3, r2
 8002f40:	3306      	adds	r3, #6
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	e00a      	b.n	8002f5c <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	009a      	lsls	r2, r3, #2
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	4413      	add	r3, r2
 8002f52:	330a      	adds	r3, #10
 8002f54:	617b      	str	r3, [r7, #20]
      current_y--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	f67f af33 	bls.w	8002dd2 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd90      	pop	{r4, r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000428 	.word	0x20000428
 8002f7c:	2000042c 	.word	0x2000042c

08002f80 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002f80:	b5b0      	push	{r4, r5, r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	603a      	str	r2, [r7, #0]
 8002f8a:	80fb      	strh	r3, [r7, #6]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002f90:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <BSP_LCD_DrawPixel+0x88>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1d      	ldr	r2, [pc, #116]	; (800300c <BSP_LCD_DrawPixel+0x8c>)
 8002f96:	2134      	movs	r1, #52	; 0x34
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3348      	adds	r3, #72	; 0x48
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d116      	bne.n	8002fd4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002fa6:	4b18      	ldr	r3, [pc, #96]	; (8003008 <BSP_LCD_DrawPixel+0x88>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a18      	ldr	r2, [pc, #96]	; (800300c <BSP_LCD_DrawPixel+0x8c>)
 8002fac:	2134      	movs	r1, #52	; 0x34
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	335c      	adds	r3, #92	; 0x5c
 8002fb6:	681c      	ldr	r4, [r3, #0]
 8002fb8:	88bd      	ldrh	r5, [r7, #4]
 8002fba:	f7ff fbcf 	bl	800275c <BSP_LCD_GetXSize>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	fb03 f205 	mul.w	r2, r3, r5
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4423      	add	r3, r4
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	b292      	uxth	r2, r2
 8002fd0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002fd2:	e015      	b.n	8003000 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002fd4:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <BSP_LCD_DrawPixel+0x88>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a0c      	ldr	r2, [pc, #48]	; (800300c <BSP_LCD_DrawPixel+0x8c>)
 8002fda:	2134      	movs	r1, #52	; 0x34
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	335c      	adds	r3, #92	; 0x5c
 8002fe4:	681c      	ldr	r4, [r3, #0]
 8002fe6:	88bd      	ldrh	r5, [r7, #4]
 8002fe8:	f7ff fbb8 	bl	800275c <BSP_LCD_GetXSize>
 8002fec:	4603      	mov	r3, r0
 8002fee:	fb03 f205 	mul.w	r2, r3, r5
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4423      	add	r3, r4
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	6013      	str	r3, [r2, #0]
}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bdb0      	pop	{r4, r5, r7, pc}
 8003008:	20000428 	.word	0x20000428
 800300c:	200048dc 	.word	0x200048dc

08003010 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	80fb      	strh	r3, [r7, #6]
 800301a:	460b      	mov	r3, r1
 800301c:	80bb      	strh	r3, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003022:	887b      	ldrh	r3, [r7, #2]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	f1c3 0303 	rsb	r3, r3, #3
 800302a:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003030:	887b      	ldrh	r3, [r7, #2]
 8003032:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003034:	4b44      	ldr	r3, [pc, #272]	; (8003148 <BSP_LCD_FillCircle+0x138>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4944      	ldr	r1, [pc, #272]	; (800314c <BSP_LCD_FillCircle+0x13c>)
 800303a:	4613      	mov	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fc20 	bl	800288c <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 800304c:	e061      	b.n	8003112 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d021      	beq.n	8003098 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	b29b      	uxth	r3, r3
 8003058:	88fa      	ldrh	r2, [r7, #6]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	b298      	uxth	r0, r3
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	b29a      	uxth	r2, r3
 8003062:	88bb      	ldrh	r3, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	b299      	uxth	r1, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	b29b      	uxth	r3, r3
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	b29b      	uxth	r3, r3
 8003070:	461a      	mov	r2, r3
 8003072:	f7ff fd71 	bl	8002b58 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	b29b      	uxth	r3, r3
 800307a:	88fa      	ldrh	r2, [r7, #6]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	b298      	uxth	r0, r3
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	b29b      	uxth	r3, r3
 8003084:	88ba      	ldrh	r2, [r7, #4]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	b299      	uxth	r1, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	b29b      	uxth	r3, r3
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	b29b      	uxth	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	f7ff fd60 	bl	8002b58 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d021      	beq.n	80030e2 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	88fa      	ldrh	r2, [r7, #6]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	b298      	uxth	r0, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	88ba      	ldrh	r2, [r7, #4]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	b299      	uxth	r1, r3
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	f7ff fd4c 	bl	8002b58 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	88fa      	ldrh	r2, [r7, #6]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	b298      	uxth	r0, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	88bb      	ldrh	r3, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	b299      	uxth	r1, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	b29b      	uxth	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	f7ff fd3b 	bl	8002b58 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	da06      	bge.n	80030f6 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	009a      	lsls	r2, r3, #2
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	4413      	add	r3, r2
 80030f0:	3306      	adds	r3, #6
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	e00a      	b.n	800310c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	009a      	lsls	r2, r3, #2
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	4413      	add	r3, r2
 8003102:	330a      	adds	r3, #10
 8003104:	617b      	str	r3, [r7, #20]
      current_y--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	3b01      	subs	r3, #1
 800310a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	3301      	adds	r3, #1
 8003110:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	429a      	cmp	r2, r3
 8003118:	d999      	bls.n	800304e <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800311a:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <BSP_LCD_FillCircle+0x138>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	490b      	ldr	r1, [pc, #44]	; (800314c <BSP_LCD_FillCircle+0x13c>)
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fbad 	bl	800288c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003132:	887a      	ldrh	r2, [r7, #2]
 8003134:	88b9      	ldrh	r1, [r7, #4]
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fe37 	bl	8002dac <BSP_LCD_DrawCircle>
}
 800313e:	bf00      	nop
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000428 	.word	0x20000428
 800314c:	2000042c 	.word	0x2000042c

08003150 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003154:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <BSP_LCD_DisplayOn+0x30>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <BSP_LCD_DisplayOn+0x30>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003164:	2201      	movs	r2, #1
 8003166:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800316a:	4806      	ldr	r0, [pc, #24]	; (8003184 <BSP_LCD_DisplayOn+0x34>)
 800316c:	f003 f916 	bl	800639c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003170:	2201      	movs	r2, #1
 8003172:	2108      	movs	r1, #8
 8003174:	4804      	ldr	r0, [pc, #16]	; (8003188 <BSP_LCD_DisplayOn+0x38>)
 8003176:	f003 f911 	bl	800639c <HAL_GPIO_WritePin>
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	200048dc 	.word	0x200048dc
 8003184:	40022000 	.word	0x40022000
 8003188:	40022800 	.word	0x40022800

0800318c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b090      	sub	sp, #64	; 0x40
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003196:	4b64      	ldr	r3, [pc, #400]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	4a63      	ldr	r2, [pc, #396]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 800319c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031a0:	6453      	str	r3, [r2, #68]	; 0x44
 80031a2:	4b61      	ldr	r3, [pc, #388]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80031ae:	4b5e      	ldr	r3, [pc, #376]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	4a5d      	ldr	r2, [pc, #372]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 80031b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031b8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ba:	4b5b      	ldr	r3, [pc, #364]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031c6:	4b58      	ldr	r3, [pc, #352]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4a57      	ldr	r2, [pc, #348]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 80031cc:	f043 0310 	orr.w	r3, r3, #16
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
 80031d2:	4b55      	ldr	r3, [pc, #340]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	623b      	str	r3, [r7, #32]
 80031dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031de:	4b52      	ldr	r3, [pc, #328]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	4a51      	ldr	r2, [pc, #324]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 80031e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031e8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ea:	4b4f      	ldr	r3, [pc, #316]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f2:	61fb      	str	r3, [r7, #28]
 80031f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80031f6:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	4a4b      	ldr	r2, [pc, #300]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 80031fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003200:	6313      	str	r3, [r2, #48]	; 0x30
 8003202:	4b49      	ldr	r3, [pc, #292]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800320e:	4b46      	ldr	r3, [pc, #280]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	4a45      	ldr	r2, [pc, #276]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 8003214:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003218:	6313      	str	r3, [r2, #48]	; 0x30
 800321a:	4b43      	ldr	r3, [pc, #268]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003226:	4b40      	ldr	r3, [pc, #256]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	4a3f      	ldr	r2, [pc, #252]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 800322c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003230:	6313      	str	r3, [r2, #48]	; 0x30
 8003232:	4b3d      	ldr	r3, [pc, #244]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800323e:	4b3a      	ldr	r3, [pc, #232]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a39      	ldr	r2, [pc, #228]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 8003244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b37      	ldr	r3, [pc, #220]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003256:	4b34      	ldr	r3, [pc, #208]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	4a33      	ldr	r2, [pc, #204]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 800325c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003260:	6313      	str	r3, [r2, #48]	; 0x30
 8003262:	4b31      	ldr	r3, [pc, #196]	; (8003328 <BSP_LCD_MspInit+0x19c>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800326e:	2310      	movs	r3, #16
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003272:	2302      	movs	r3, #2
 8003274:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800327a:	2302      	movs	r3, #2
 800327c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800327e:	230e      	movs	r3, #14
 8003280:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003282:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003286:	4619      	mov	r1, r3
 8003288:	4828      	ldr	r0, [pc, #160]	; (800332c <BSP_LCD_MspInit+0x1a0>)
 800328a:	f002 fdcf 	bl	8005e2c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800328e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003298:	2309      	movs	r3, #9
 800329a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800329c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032a0:	4619      	mov	r1, r3
 80032a2:	4823      	ldr	r0, [pc, #140]	; (8003330 <BSP_LCD_MspInit+0x1a4>)
 80032a4:	f002 fdc2 	bl	8005e2c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80032a8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80032ae:	2302      	movs	r3, #2
 80032b0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80032b2:	230e      	movs	r3, #14
 80032b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80032b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032ba:	4619      	mov	r1, r3
 80032bc:	481d      	ldr	r0, [pc, #116]	; (8003334 <BSP_LCD_MspInit+0x1a8>)
 80032be:	f002 fdb5 	bl	8005e2c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80032c2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80032c8:	2302      	movs	r3, #2
 80032ca:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80032cc:	230e      	movs	r3, #14
 80032ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80032d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032d4:	4619      	mov	r1, r3
 80032d6:	4818      	ldr	r0, [pc, #96]	; (8003338 <BSP_LCD_MspInit+0x1ac>)
 80032d8:	f002 fda8 	bl	8005e2c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80032dc:	23f7      	movs	r3, #247	; 0xf7
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80032e0:	2302      	movs	r3, #2
 80032e2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80032e4:	230e      	movs	r3, #14
 80032e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80032e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032ec:	4619      	mov	r1, r3
 80032ee:	4813      	ldr	r0, [pc, #76]	; (800333c <BSP_LCD_MspInit+0x1b0>)
 80032f0:	f002 fd9c 	bl	8005e2c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80032f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80032fa:	2301      	movs	r3, #1
 80032fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80032fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003302:	4619      	mov	r1, r3
 8003304:	480b      	ldr	r0, [pc, #44]	; (8003334 <BSP_LCD_MspInit+0x1a8>)
 8003306:	f002 fd91 	bl	8005e2c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800330a:	2308      	movs	r3, #8
 800330c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800330e:	2301      	movs	r3, #1
 8003310:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003316:	4619      	mov	r1, r3
 8003318:	4808      	ldr	r0, [pc, #32]	; (800333c <BSP_LCD_MspInit+0x1b0>)
 800331a:	f002 fd87 	bl	8005e2c <HAL_GPIO_Init>
}
 800331e:	bf00      	nop
 8003320:	3740      	adds	r7, #64	; 0x40
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800
 800332c:	40021000 	.word	0x40021000
 8003330:	40021800 	.word	0x40021800
 8003334:	40022000 	.word	0x40022000
 8003338:	40022400 	.word	0x40022400
 800333c:	40022800 	.word	0x40022800

08003340 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <BSP_LCD_ClockConfig+0x34>)
 800334c:	2208      	movs	r2, #8
 800334e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003350:	4b08      	ldr	r3, [pc, #32]	; (8003374 <BSP_LCD_ClockConfig+0x34>)
 8003352:	22c0      	movs	r2, #192	; 0xc0
 8003354:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003356:	4b07      	ldr	r3, [pc, #28]	; (8003374 <BSP_LCD_ClockConfig+0x34>)
 8003358:	2205      	movs	r2, #5
 800335a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <BSP_LCD_ClockConfig+0x34>)
 800335e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003362:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003364:	4803      	ldr	r0, [pc, #12]	; (8003374 <BSP_LCD_ClockConfig+0x34>)
 8003366:	f004 ff23 	bl	80081b0 <HAL_RCCEx_PeriphCLKConfig>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000444 	.word	0x20000444

08003378 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	603a      	str	r2, [r7, #0]
 8003382:	80fb      	strh	r3, [r7, #6]
 8003384:	460b      	mov	r3, r1
 8003386:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	2300      	movs	r3, #0
 800338e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003390:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <DrawChar+0x168>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4953      	ldr	r1, [pc, #332]	; (80034e4 <DrawChar+0x16c>)
 8003396:	4613      	mov	r3, r2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	3308      	adds	r3, #8
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	88db      	ldrh	r3, [r3, #6]
 80033a6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80033a8:	4b4d      	ldr	r3, [pc, #308]	; (80034e0 <DrawChar+0x168>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	494d      	ldr	r1, [pc, #308]	; (80034e4 <DrawChar+0x16c>)
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	3308      	adds	r3, #8
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	889b      	ldrh	r3, [r3, #4]
 80033be:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80033c0:	8a3b      	ldrh	r3, [r7, #16]
 80033c2:	3307      	adds	r3, #7
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	da00      	bge.n	80033ca <DrawChar+0x52>
 80033c8:	3307      	adds	r3, #7
 80033ca:	10db      	asrs	r3, r3, #3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	8a3b      	ldrh	r3, [r7, #16]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	e076      	b.n	80034ce <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80033e0:	8a3b      	ldrh	r3, [r7, #16]
 80033e2:	3307      	adds	r3, #7
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	da00      	bge.n	80033ea <DrawChar+0x72>
 80033e8:	3307      	adds	r3, #7
 80033ea:	10db      	asrs	r3, r3, #3
 80033ec:	461a      	mov	r2, r3
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	fb03 f302 	mul.w	r3, r3, r2
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	4413      	add	r3, r2
 80033f8:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80033fa:	8a3b      	ldrh	r3, [r7, #16]
 80033fc:	3307      	adds	r3, #7
 80033fe:	2b00      	cmp	r3, #0
 8003400:	da00      	bge.n	8003404 <DrawChar+0x8c>
 8003402:	3307      	adds	r3, #7
 8003404:	10db      	asrs	r3, r3, #3
 8003406:	2b01      	cmp	r3, #1
 8003408:	d002      	beq.n	8003410 <DrawChar+0x98>
 800340a:	2b02      	cmp	r3, #2
 800340c:	d004      	beq.n	8003418 <DrawChar+0xa0>
 800340e:	e00c      	b.n	800342a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	617b      	str	r3, [r7, #20]
      break;
 8003416:	e016      	b.n	8003446 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	3201      	adds	r2, #1
 8003422:	7812      	ldrb	r2, [r2, #0]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
      break;
 8003428:	e00d      	b.n	8003446 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	041a      	lsls	r2, r3, #16
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	3301      	adds	r3, #1
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	4313      	orrs	r3, r2
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	3202      	adds	r2, #2
 800343e:	7812      	ldrb	r2, [r2, #0]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
      break;
 8003444:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003446:	2300      	movs	r3, #0
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	e036      	b.n	80034ba <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800344c:	8a3a      	ldrh	r2, [r7, #16]
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	1ad2      	subs	r2, r2, r3
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	4413      	add	r3, r2
 8003456:	3b01      	subs	r3, #1
 8003458:	2201      	movs	r2, #1
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	461a      	mov	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d012      	beq.n	800348e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	b29a      	uxth	r2, r3
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	4413      	add	r3, r2
 8003470:	b298      	uxth	r0, r3
 8003472:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <DrawChar+0x168>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	491b      	ldr	r1, [pc, #108]	; (80034e4 <DrawChar+0x16c>)
 8003478:	4613      	mov	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	88bb      	ldrh	r3, [r7, #4]
 8003486:	4619      	mov	r1, r3
 8003488:	f7ff fd7a 	bl	8002f80 <BSP_LCD_DrawPixel>
 800348c:	e012      	b.n	80034b4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	b29a      	uxth	r2, r3
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	4413      	add	r3, r2
 8003496:	b298      	uxth	r0, r3
 8003498:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <DrawChar+0x168>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4911      	ldr	r1, [pc, #68]	; (80034e4 <DrawChar+0x16c>)
 800349e:	4613      	mov	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	3304      	adds	r3, #4
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	88bb      	ldrh	r3, [r7, #4]
 80034ae:	4619      	mov	r1, r3
 80034b0:	f7ff fd66 	bl	8002f80 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	3301      	adds	r3, #1
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	8a3b      	ldrh	r3, [r7, #16]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d3c4      	bcc.n	800344c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80034c2:	88bb      	ldrh	r3, [r7, #4]
 80034c4:	3301      	adds	r3, #1
 80034c6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	3301      	adds	r3, #1
 80034cc:	61fb      	str	r3, [r7, #28]
 80034ce:	8a7b      	ldrh	r3, [r7, #18]
 80034d0:	69fa      	ldr	r2, [r7, #28]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d384      	bcc.n	80033e0 <DrawChar+0x68>
  }
}
 80034d6:	bf00      	nop
 80034d8:	bf00      	nop
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000428 	.word	0x20000428
 80034e4:	2000042c 	.word	0x2000042c

080034e8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80034f6:	4b1e      	ldr	r3, [pc, #120]	; (8003570 <LL_FillBuffer+0x88>)
 80034f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80034fc:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80034fe:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <LL_FillBuffer+0x8c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a1d      	ldr	r2, [pc, #116]	; (8003578 <LL_FillBuffer+0x90>)
 8003504:	2134      	movs	r1, #52	; 0x34
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	4413      	add	r3, r2
 800350c:	3348      	adds	r3, #72	; 0x48
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d103      	bne.n	800351c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003514:	4b16      	ldr	r3, [pc, #88]	; (8003570 <LL_FillBuffer+0x88>)
 8003516:	2202      	movs	r2, #2
 8003518:	609a      	str	r2, [r3, #8]
 800351a:	e002      	b.n	8003522 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800351c:	4b14      	ldr	r3, [pc, #80]	; (8003570 <LL_FillBuffer+0x88>)
 800351e:	2200      	movs	r2, #0
 8003520:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003522:	4a13      	ldr	r2, [pc, #76]	; (8003570 <LL_FillBuffer+0x88>)
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003528:	4b11      	ldr	r3, [pc, #68]	; (8003570 <LL_FillBuffer+0x88>)
 800352a:	4a14      	ldr	r2, [pc, #80]	; (800357c <LL_FillBuffer+0x94>)
 800352c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800352e:	4810      	ldr	r0, [pc, #64]	; (8003570 <LL_FillBuffer+0x88>)
 8003530:	f002 f8e0 	bl	80056f4 <HAL_DMA2D_Init>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d115      	bne.n	8003566 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800353a:	68f9      	ldr	r1, [r7, #12]
 800353c:	480c      	ldr	r0, [pc, #48]	; (8003570 <LL_FillBuffer+0x88>)
 800353e:	f002 fb47 	bl	8005bd0 <HAL_DMA2D_ConfigLayer>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10e      	bne.n	8003566 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69f9      	ldr	r1, [r7, #28]
 8003552:	4807      	ldr	r0, [pc, #28]	; (8003570 <LL_FillBuffer+0x88>)
 8003554:	f002 f918 	bl	8005788 <HAL_DMA2D_Start>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800355e:	210a      	movs	r1, #10
 8003560:	4803      	ldr	r0, [pc, #12]	; (8003570 <LL_FillBuffer+0x88>)
 8003562:	f002 f93c 	bl	80057de <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	200003e8 	.word	0x200003e8
 8003574:	20000428 	.word	0x20000428
 8003578:	200048dc 	.word	0x200048dc
 800357c:	4002b000 	.word	0x4002b000

08003580 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003584:	4b29      	ldr	r3, [pc, #164]	; (800362c <BSP_SDRAM_Init+0xac>)
 8003586:	4a2a      	ldr	r2, [pc, #168]	; (8003630 <BSP_SDRAM_Init+0xb0>)
 8003588:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800358a:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <BSP_SDRAM_Init+0xb4>)
 800358c:	2202      	movs	r2, #2
 800358e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003590:	4b28      	ldr	r3, [pc, #160]	; (8003634 <BSP_SDRAM_Init+0xb4>)
 8003592:	2207      	movs	r2, #7
 8003594:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003596:	4b27      	ldr	r3, [pc, #156]	; (8003634 <BSP_SDRAM_Init+0xb4>)
 8003598:	2204      	movs	r2, #4
 800359a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800359c:	4b25      	ldr	r3, [pc, #148]	; (8003634 <BSP_SDRAM_Init+0xb4>)
 800359e:	2207      	movs	r2, #7
 80035a0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80035a2:	4b24      	ldr	r3, [pc, #144]	; (8003634 <BSP_SDRAM_Init+0xb4>)
 80035a4:	2202      	movs	r2, #2
 80035a6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80035a8:	4b22      	ldr	r3, [pc, #136]	; (8003634 <BSP_SDRAM_Init+0xb4>)
 80035aa:	2202      	movs	r2, #2
 80035ac:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80035ae:	4b21      	ldr	r3, [pc, #132]	; (8003634 <BSP_SDRAM_Init+0xb4>)
 80035b0:	2202      	movs	r2, #2
 80035b2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80035b4:	4b1d      	ldr	r3, [pc, #116]	; (800362c <BSP_SDRAM_Init+0xac>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80035ba:	4b1c      	ldr	r3, [pc, #112]	; (800362c <BSP_SDRAM_Init+0xac>)
 80035bc:	2200      	movs	r2, #0
 80035be:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80035c0:	4b1a      	ldr	r3, [pc, #104]	; (800362c <BSP_SDRAM_Init+0xac>)
 80035c2:	2204      	movs	r2, #4
 80035c4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80035c6:	4b19      	ldr	r3, [pc, #100]	; (800362c <BSP_SDRAM_Init+0xac>)
 80035c8:	2210      	movs	r2, #16
 80035ca:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80035cc:	4b17      	ldr	r3, [pc, #92]	; (800362c <BSP_SDRAM_Init+0xac>)
 80035ce:	2240      	movs	r2, #64	; 0x40
 80035d0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80035d2:	4b16      	ldr	r3, [pc, #88]	; (800362c <BSP_SDRAM_Init+0xac>)
 80035d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035d8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80035da:	4b14      	ldr	r3, [pc, #80]	; (800362c <BSP_SDRAM_Init+0xac>)
 80035dc:	2200      	movs	r2, #0
 80035de:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80035e0:	4b12      	ldr	r3, [pc, #72]	; (800362c <BSP_SDRAM_Init+0xac>)
 80035e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035e6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80035e8:	4b10      	ldr	r3, [pc, #64]	; (800362c <BSP_SDRAM_Init+0xac>)
 80035ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80035f0:	4b0e      	ldr	r3, [pc, #56]	; (800362c <BSP_SDRAM_Init+0xac>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80035f6:	2100      	movs	r1, #0
 80035f8:	480c      	ldr	r0, [pc, #48]	; (800362c <BSP_SDRAM_Init+0xac>)
 80035fa:	f000 f87f 	bl	80036fc <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80035fe:	490d      	ldr	r1, [pc, #52]	; (8003634 <BSP_SDRAM_Init+0xb4>)
 8003600:	480a      	ldr	r0, [pc, #40]	; (800362c <BSP_SDRAM_Init+0xac>)
 8003602:	f005 fd9d 	bl	8009140 <HAL_SDRAM_Init>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800360c:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <BSP_SDRAM_Init+0xb8>)
 800360e:	2201      	movs	r2, #1
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	e002      	b.n	800361a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003614:	4b08      	ldr	r3, [pc, #32]	; (8003638 <BSP_SDRAM_Init+0xb8>)
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800361a:	f240 6003 	movw	r0, #1539	; 0x603
 800361e:	f000 f80d 	bl	800363c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <BSP_SDRAM_Init+0xb8>)
 8003624:	781b      	ldrb	r3, [r3, #0]
}
 8003626:	4618      	mov	r0, r3
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20004984 	.word	0x20004984
 8003630:	a0000140 	.word	0xa0000140
 8003634:	200004c8 	.word	0x200004c8
 8003638:	2000004c 	.word	0x2000004c

0800363c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003648:	4b2a      	ldr	r3, [pc, #168]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800364e:	4b29      	ldr	r3, [pc, #164]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003650:	2210      	movs	r2, #16
 8003652:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003654:	4b27      	ldr	r3, [pc, #156]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003656:	2201      	movs	r2, #1
 8003658:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800365a:	4b26      	ldr	r3, [pc, #152]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800365c:	2200      	movs	r2, #0
 800365e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003664:	4923      	ldr	r1, [pc, #140]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003666:	4824      	ldr	r0, [pc, #144]	; (80036f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003668:	f005 fd9e 	bl	80091a8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800366c:	2001      	movs	r0, #1
 800366e:	f001 f881 	bl	8004774 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003672:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003674:	2202      	movs	r2, #2
 8003676:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003678:	4b1e      	ldr	r3, [pc, #120]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800367a:	2210      	movs	r2, #16
 800367c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800367e:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003680:	2201      	movs	r2, #1
 8003682:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003684:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003686:	2200      	movs	r2, #0
 8003688:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800368a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800368e:	4919      	ldr	r1, [pc, #100]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003690:	4819      	ldr	r0, [pc, #100]	; (80036f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003692:	f005 fd89 	bl	80091a8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003696:	4b17      	ldr	r3, [pc, #92]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003698:	2203      	movs	r2, #3
 800369a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800369c:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800369e:	2210      	movs	r2, #16
 80036a0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80036a2:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036a4:	2208      	movs	r2, #8
 80036a6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80036a8:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80036ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036b2:	4910      	ldr	r1, [pc, #64]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036b4:	4810      	ldr	r0, [pc, #64]	; (80036f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036b6:	f005 fd77 	bl	80091a8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80036ba:	f44f 7308 	mov.w	r3, #544	; 0x220
 80036be:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036c2:	2204      	movs	r2, #4
 80036c4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036c8:	2210      	movs	r2, #16
 80036ca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80036cc:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4a07      	ldr	r2, [pc, #28]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036d6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80036d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036dc:	4905      	ldr	r1, [pc, #20]	; (80036f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036de:	4806      	ldr	r0, [pc, #24]	; (80036f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036e0:	f005 fd62 	bl	80091a8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4804      	ldr	r0, [pc, #16]	; (80036f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036e8:	f005 fd93 	bl	8009212 <HAL_SDRAM_ProgramRefreshRate>
}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	200004e4 	.word	0x200004e4
 80036f8:	20004984 	.word	0x20004984

080036fc <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b090      	sub	sp, #64	; 0x40
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003706:	4b70      	ldr	r3, [pc, #448]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	4a6f      	ldr	r2, [pc, #444]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6393      	str	r3, [r2, #56]	; 0x38
 8003712:	4b6d      	ldr	r3, [pc, #436]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800371e:	4b6a      	ldr	r3, [pc, #424]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	4a69      	ldr	r2, [pc, #420]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003724:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003728:	6313      	str	r3, [r2, #48]	; 0x30
 800372a:	4b67      	ldr	r3, [pc, #412]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003736:	4b64      	ldr	r3, [pc, #400]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	4a63      	ldr	r2, [pc, #396]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 800373c:	f043 0304 	orr.w	r3, r3, #4
 8003740:	6313      	str	r3, [r2, #48]	; 0x30
 8003742:	4b61      	ldr	r3, [pc, #388]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	623b      	str	r3, [r7, #32]
 800374c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800374e:	4b5e      	ldr	r3, [pc, #376]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	4a5d      	ldr	r2, [pc, #372]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003754:	f043 0308 	orr.w	r3, r3, #8
 8003758:	6313      	str	r3, [r2, #48]	; 0x30
 800375a:	4b5b      	ldr	r3, [pc, #364]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	61fb      	str	r3, [r7, #28]
 8003764:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003766:	4b58      	ldr	r3, [pc, #352]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	4a57      	ldr	r2, [pc, #348]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 800376c:	f043 0310 	orr.w	r3, r3, #16
 8003770:	6313      	str	r3, [r2, #48]	; 0x30
 8003772:	4b55      	ldr	r3, [pc, #340]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	61bb      	str	r3, [r7, #24]
 800377c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800377e:	4b52      	ldr	r3, [pc, #328]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	4a51      	ldr	r2, [pc, #324]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003784:	f043 0320 	orr.w	r3, r3, #32
 8003788:	6313      	str	r3, [r2, #48]	; 0x30
 800378a:	4b4f      	ldr	r3, [pc, #316]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003796:	4b4c      	ldr	r3, [pc, #304]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	4a4b      	ldr	r2, [pc, #300]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 800379c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037a0:	6313      	str	r3, [r2, #48]	; 0x30
 80037a2:	4b49      	ldr	r3, [pc, #292]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	613b      	str	r3, [r7, #16]
 80037ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80037ae:	4b46      	ldr	r3, [pc, #280]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	4a45      	ldr	r2, [pc, #276]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 80037b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ba:	4b43      	ldr	r3, [pc, #268]	; (80038c8 <BSP_SDRAM_MspInit+0x1cc>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80037c6:	2302      	movs	r3, #2
 80037c8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80037ca:	2301      	movs	r3, #1
 80037cc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80037ce:	2302      	movs	r3, #2
 80037d0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80037d2:	230c      	movs	r3, #12
 80037d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80037d6:	2308      	movs	r3, #8
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80037da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037de:	4619      	mov	r1, r3
 80037e0:	483a      	ldr	r0, [pc, #232]	; (80038cc <BSP_SDRAM_MspInit+0x1d0>)
 80037e2:	f002 fb23 	bl	8005e2c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80037e6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80037ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037f0:	4619      	mov	r1, r3
 80037f2:	4837      	ldr	r0, [pc, #220]	; (80038d0 <BSP_SDRAM_MspInit+0x1d4>)
 80037f4:	f002 fb1a 	bl	8005e2c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80037f8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80037fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003802:	4619      	mov	r1, r3
 8003804:	4833      	ldr	r0, [pc, #204]	; (80038d4 <BSP_SDRAM_MspInit+0x1d8>)
 8003806:	f002 fb11 	bl	8005e2c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800380a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800380e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003814:	4619      	mov	r1, r3
 8003816:	4830      	ldr	r0, [pc, #192]	; (80038d8 <BSP_SDRAM_MspInit+0x1dc>)
 8003818:	f002 fb08 	bl	8005e2c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800381c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003826:	4619      	mov	r1, r3
 8003828:	482c      	ldr	r0, [pc, #176]	; (80038dc <BSP_SDRAM_MspInit+0x1e0>)
 800382a:	f002 faff 	bl	8005e2c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800382e:	2328      	movs	r3, #40	; 0x28
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003836:	4619      	mov	r1, r3
 8003838:	4829      	ldr	r0, [pc, #164]	; (80038e0 <BSP_SDRAM_MspInit+0x1e4>)
 800383a:	f002 faf7 	bl	8005e2c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800383e:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <BSP_SDRAM_MspInit+0x1e8>)
 8003840:	2200      	movs	r2, #0
 8003842:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003844:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <BSP_SDRAM_MspInit+0x1e8>)
 8003846:	2280      	movs	r2, #128	; 0x80
 8003848:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800384a:	4b26      	ldr	r3, [pc, #152]	; (80038e4 <BSP_SDRAM_MspInit+0x1e8>)
 800384c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003850:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003852:	4b24      	ldr	r3, [pc, #144]	; (80038e4 <BSP_SDRAM_MspInit+0x1e8>)
 8003854:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003858:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800385a:	4b22      	ldr	r3, [pc, #136]	; (80038e4 <BSP_SDRAM_MspInit+0x1e8>)
 800385c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003860:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003862:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <BSP_SDRAM_MspInit+0x1e8>)
 8003864:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003868:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800386a:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <BSP_SDRAM_MspInit+0x1e8>)
 800386c:	2200      	movs	r2, #0
 800386e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003870:	4b1c      	ldr	r3, [pc, #112]	; (80038e4 <BSP_SDRAM_MspInit+0x1e8>)
 8003872:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003876:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003878:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <BSP_SDRAM_MspInit+0x1e8>)
 800387a:	2200      	movs	r2, #0
 800387c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800387e:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <BSP_SDRAM_MspInit+0x1e8>)
 8003880:	2203      	movs	r2, #3
 8003882:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003884:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <BSP_SDRAM_MspInit+0x1e8>)
 8003886:	2200      	movs	r2, #0
 8003888:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800388a:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <BSP_SDRAM_MspInit+0x1e8>)
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003890:	4b14      	ldr	r3, [pc, #80]	; (80038e4 <BSP_SDRAM_MspInit+0x1e8>)
 8003892:	4a15      	ldr	r2, [pc, #84]	; (80038e8 <BSP_SDRAM_MspInit+0x1ec>)
 8003894:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a12      	ldr	r2, [pc, #72]	; (80038e4 <BSP_SDRAM_MspInit+0x1e8>)
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
 800389c:	4a11      	ldr	r2, [pc, #68]	; (80038e4 <BSP_SDRAM_MspInit+0x1e8>)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80038a2:	4810      	ldr	r0, [pc, #64]	; (80038e4 <BSP_SDRAM_MspInit+0x1e8>)
 80038a4:	f001 fdf4 	bl	8005490 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80038a8:	480e      	ldr	r0, [pc, #56]	; (80038e4 <BSP_SDRAM_MspInit+0x1e8>)
 80038aa:	f001 fd43 	bl	8005334 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80038ae:	2200      	movs	r2, #0
 80038b0:	210f      	movs	r1, #15
 80038b2:	2038      	movs	r0, #56	; 0x38
 80038b4:	f001 fc34 	bl	8005120 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80038b8:	2038      	movs	r0, #56	; 0x38
 80038ba:	f001 fc4d 	bl	8005158 <HAL_NVIC_EnableIRQ>
}
 80038be:	bf00      	nop
 80038c0:	3740      	adds	r7, #64	; 0x40
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40023800 	.word	0x40023800
 80038cc:	40020800 	.word	0x40020800
 80038d0:	40020c00 	.word	0x40020c00
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40021400 	.word	0x40021400
 80038dc:	40021800 	.word	0x40021800
 80038e0:	40021c00 	.word	0x40021c00
 80038e4:	200004f4 	.word	0x200004f4
 80038e8:	40026410 	.word	0x40026410

080038ec <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	460a      	mov	r2, r1
 80038f6:	80fb      	strh	r3, [r7, #6]
 80038f8:	4613      	mov	r3, r2
 80038fa:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003900:	4a14      	ldr	r2, [pc, #80]	; (8003954 <BSP_TS_Init+0x68>)
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003906:	4a14      	ldr	r2, [pc, #80]	; (8003958 <BSP_TS_Init+0x6c>)
 8003908:	88bb      	ldrh	r3, [r7, #4]
 800390a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800390c:	4b13      	ldr	r3, [pc, #76]	; (800395c <BSP_TS_Init+0x70>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2070      	movs	r0, #112	; 0x70
 8003912:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003914:	4b11      	ldr	r3, [pc, #68]	; (800395c <BSP_TS_Init+0x70>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2070      	movs	r0, #112	; 0x70
 800391a:	4798      	blx	r3
 800391c:	4603      	mov	r3, r0
 800391e:	2b51      	cmp	r3, #81	; 0x51
 8003920:	d111      	bne.n	8003946 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003922:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <BSP_TS_Init+0x74>)
 8003924:	4a0d      	ldr	r2, [pc, #52]	; (800395c <BSP_TS_Init+0x70>)
 8003926:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003928:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <BSP_TS_Init+0x78>)
 800392a:	2270      	movs	r2, #112	; 0x70
 800392c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800392e:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <BSP_TS_Init+0x7c>)
 8003930:	2208      	movs	r2, #8
 8003932:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003934:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <BSP_TS_Init+0x74>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	4a0a      	ldr	r2, [pc, #40]	; (8003964 <BSP_TS_Init+0x78>)
 800393c:	7812      	ldrb	r2, [r2, #0]
 800393e:	b292      	uxth	r2, r2
 8003940:	4610      	mov	r0, r2
 8003942:	4798      	blx	r3
 8003944:	e001      	b.n	800394a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003946:	2303      	movs	r3, #3
 8003948:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800394a:	7bfb      	ldrb	r3, [r7, #15]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000558 	.word	0x20000558
 8003958:	2000055a 	.word	0x2000055a
 800395c:	20000000 	.word	0x20000000
 8003960:	20000554 	.word	0x20000554
 8003964:	2000055d 	.word	0x2000055d
 8003968:	2000055c 	.word	0x2000055c

0800396c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003972:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <HAL_MspInit+0x4c>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	4a10      	ldr	r2, [pc, #64]	; (80039b8 <HAL_MspInit+0x4c>)
 8003978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397c:	6413      	str	r3, [r2, #64]	; 0x40
 800397e:	4b0e      	ldr	r3, [pc, #56]	; (80039b8 <HAL_MspInit+0x4c>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398a:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_MspInit+0x4c>)
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <HAL_MspInit+0x4c>)
 8003990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003994:	6453      	str	r3, [r2, #68]	; 0x44
 8003996:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <HAL_MspInit+0x4c>)
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800399e:	603b      	str	r3, [r7, #0]
 80039a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80039a2:	2200      	movs	r2, #0
 80039a4:	210f      	movs	r1, #15
 80039a6:	f06f 0001 	mvn.w	r0, #1
 80039aa:	f001 fbb9 	bl	8005120 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40023800 	.word	0x40023800

080039bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08c      	sub	sp, #48	; 0x30
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c4:	f107 031c 	add.w	r3, r7, #28
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	60da      	str	r2, [r3, #12]
 80039d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a2a      	ldr	r2, [pc, #168]	; (8003a84 <HAL_ADC_MspInit+0xc8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d124      	bne.n	8003a28 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80039de:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <HAL_ADC_MspInit+0xcc>)
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	4a29      	ldr	r2, [pc, #164]	; (8003a88 <HAL_ADC_MspInit+0xcc>)
 80039e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e8:	6453      	str	r3, [r2, #68]	; 0x44
 80039ea:	4b27      	ldr	r3, [pc, #156]	; (8003a88 <HAL_ADC_MspInit+0xcc>)
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	61bb      	str	r3, [r7, #24]
 80039f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f6:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <HAL_ADC_MspInit+0xcc>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	4a23      	ldr	r2, [pc, #140]	; (8003a88 <HAL_ADC_MspInit+0xcc>)
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	6313      	str	r3, [r2, #48]	; 0x30
 8003a02:	4b21      	ldr	r3, [pc, #132]	; (8003a88 <HAL_ADC_MspInit+0xcc>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a12:	2303      	movs	r3, #3
 8003a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a1a:	f107 031c 	add.w	r3, r7, #28
 8003a1e:	4619      	mov	r1, r3
 8003a20:	481a      	ldr	r0, [pc, #104]	; (8003a8c <HAL_ADC_MspInit+0xd0>)
 8003a22:	f002 fa03 	bl	8005e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003a26:	e029      	b.n	8003a7c <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <HAL_ADC_MspInit+0xd4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d124      	bne.n	8003a7c <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003a32:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <HAL_ADC_MspInit+0xcc>)
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <HAL_ADC_MspInit+0xcc>)
 8003a38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a3e:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <HAL_ADC_MspInit+0xcc>)
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a4a:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <HAL_ADC_MspInit+0xcc>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	4a0e      	ldr	r2, [pc, #56]	; (8003a88 <HAL_ADC_MspInit+0xcc>)
 8003a50:	f043 0320 	orr.w	r3, r3, #32
 8003a54:	6313      	str	r3, [r2, #48]	; 0x30
 8003a56:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <HAL_ADC_MspInit+0xcc>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8003a62:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a70:	f107 031c 	add.w	r3, r7, #28
 8003a74:	4619      	mov	r1, r3
 8003a76:	4807      	ldr	r0, [pc, #28]	; (8003a94 <HAL_ADC_MspInit+0xd8>)
 8003a78:	f002 f9d8 	bl	8005e2c <HAL_GPIO_Init>
}
 8003a7c:	bf00      	nop
 8003a7e:	3730      	adds	r7, #48	; 0x30
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40012000 	.word	0x40012000
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40020000 	.word	0x40020000
 8003a90:	40012200 	.word	0x40012200
 8003a94:	40021400 	.word	0x40021400

08003a98 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08a      	sub	sp, #40	; 0x28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa0:	f107 0314 	add.w	r3, r7, #20
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	60da      	str	r2, [r3, #12]
 8003aae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a19      	ldr	r2, [pc, #100]	; (8003b1c <HAL_DAC_MspInit+0x84>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d12b      	bne.n	8003b12 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003aba:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <HAL_DAC_MspInit+0x88>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	4a18      	ldr	r2, [pc, #96]	; (8003b20 <HAL_DAC_MspInit+0x88>)
 8003ac0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac6:	4b16      	ldr	r3, [pc, #88]	; (8003b20 <HAL_DAC_MspInit+0x88>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad2:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <HAL_DAC_MspInit+0x88>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <HAL_DAC_MspInit+0x88>)
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ade:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <HAL_DAC_MspInit+0x88>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003aea:	2310      	movs	r3, #16
 8003aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003aee:	2303      	movs	r3, #3
 8003af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af6:	f107 0314 	add.w	r3, r7, #20
 8003afa:	4619      	mov	r1, r3
 8003afc:	4809      	ldr	r0, [pc, #36]	; (8003b24 <HAL_DAC_MspInit+0x8c>)
 8003afe:	f002 f995 	bl	8005e2c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8003b02:	2200      	movs	r2, #0
 8003b04:	210f      	movs	r1, #15
 8003b06:	2036      	movs	r0, #54	; 0x36
 8003b08:	f001 fb0a 	bl	8005120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b0c:	2036      	movs	r0, #54	; 0x36
 8003b0e:	f001 fb23 	bl	8005158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003b12:	bf00      	nop
 8003b14:	3728      	adds	r7, #40	; 0x28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40007400 	.word	0x40007400
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40020000 	.word	0x40020000

08003b28 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0d      	ldr	r2, [pc, #52]	; (8003b6c <HAL_DMA2D_MspInit+0x44>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d113      	bne.n	8003b62 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <HAL_DMA2D_MspInit+0x48>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	4a0c      	ldr	r2, [pc, #48]	; (8003b70 <HAL_DMA2D_MspInit+0x48>)
 8003b40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b44:	6313      	str	r3, [r2, #48]	; 0x30
 8003b46:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <HAL_DMA2D_MspInit+0x48>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003b52:	2200      	movs	r2, #0
 8003b54:	2105      	movs	r1, #5
 8003b56:	205a      	movs	r0, #90	; 0x5a
 8003b58:	f001 fae2 	bl	8005120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003b5c:	205a      	movs	r0, #90	; 0x5a
 8003b5e:	f001 fafb 	bl	8005158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	4002b000 	.word	0x4002b000
 8003b70:	40023800 	.word	0x40023800

08003b74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b0ac      	sub	sp, #176	; 0xb0
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	60da      	str	r2, [r3, #12]
 8003b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b8c:	f107 0318 	add.w	r3, r7, #24
 8003b90:	2284      	movs	r2, #132	; 0x84
 8003b92:	2100      	movs	r1, #0
 8003b94:	4618      	mov	r0, r3
 8003b96:	f009 ff1b 	bl	800d9d0 <memset>
  if(hi2c->Instance==I2C1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a44      	ldr	r2, [pc, #272]	; (8003cb0 <HAL_I2C_MspInit+0x13c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d13d      	bne.n	8003c20 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003ba4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ba8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003baa:	2300      	movs	r3, #0
 8003bac:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bae:	f107 0318 	add.w	r3, r7, #24
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f004 fafc 	bl	80081b0 <HAL_RCCEx_PeriphCLKConfig>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003bbe:	f7fe fbb3 	bl	8002328 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc2:	4b3c      	ldr	r3, [pc, #240]	; (8003cb4 <HAL_I2C_MspInit+0x140>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	4a3b      	ldr	r2, [pc, #236]	; (8003cb4 <HAL_I2C_MspInit+0x140>)
 8003bc8:	f043 0302 	orr.w	r3, r3, #2
 8003bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bce:	4b39      	ldr	r3, [pc, #228]	; (8003cb4 <HAL_I2C_MspInit+0x140>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003bda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003bde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003be2:	2312      	movs	r3, #18
 8003be4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003bfe:	4619      	mov	r1, r3
 8003c00:	482d      	ldr	r0, [pc, #180]	; (8003cb8 <HAL_I2C_MspInit+0x144>)
 8003c02:	f002 f913 	bl	8005e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c06:	4b2b      	ldr	r3, [pc, #172]	; (8003cb4 <HAL_I2C_MspInit+0x140>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <HAL_I2C_MspInit+0x140>)
 8003c0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c10:	6413      	str	r3, [r2, #64]	; 0x40
 8003c12:	4b28      	ldr	r3, [pc, #160]	; (8003cb4 <HAL_I2C_MspInit+0x140>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003c1e:	e042      	b.n	8003ca6 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a25      	ldr	r2, [pc, #148]	; (8003cbc <HAL_I2C_MspInit+0x148>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d13d      	bne.n	8003ca6 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c36:	f107 0318 	add.w	r3, r7, #24
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f004 fab8 	bl	80081b0 <HAL_RCCEx_PeriphCLKConfig>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003c46:	f7fe fb6f 	bl	8002328 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c4a:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <HAL_I2C_MspInit+0x140>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	4a19      	ldr	r2, [pc, #100]	; (8003cb4 <HAL_I2C_MspInit+0x140>)
 8003c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c54:	6313      	str	r3, [r2, #48]	; 0x30
 8003c56:	4b17      	ldr	r3, [pc, #92]	; (8003cb4 <HAL_I2C_MspInit+0x140>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003c62:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003c66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c6a:	2312      	movs	r3, #18
 8003c6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c70:	2301      	movs	r3, #1
 8003c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c76:	2303      	movs	r3, #3
 8003c78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c7c:	2304      	movs	r3, #4
 8003c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003c82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c86:	4619      	mov	r1, r3
 8003c88:	480d      	ldr	r0, [pc, #52]	; (8003cc0 <HAL_I2C_MspInit+0x14c>)
 8003c8a:	f002 f8cf 	bl	8005e2c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003c8e:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <HAL_I2C_MspInit+0x140>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	4a08      	ldr	r2, [pc, #32]	; (8003cb4 <HAL_I2C_MspInit+0x140>)
 8003c94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c98:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9a:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <HAL_I2C_MspInit+0x140>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
}
 8003ca6:	bf00      	nop
 8003ca8:	37b0      	adds	r7, #176	; 0xb0
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40005400 	.word	0x40005400
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	40020400 	.word	0x40020400
 8003cbc:	40005c00 	.word	0x40005c00
 8003cc0:	40021c00 	.word	0x40021c00

08003cc4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a15      	ldr	r2, [pc, #84]	; (8003d28 <HAL_I2C_MspDeInit+0x64>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d110      	bne.n	8003cf8 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <HAL_I2C_MspDeInit+0x68>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <HAL_I2C_MspDeInit+0x68>)
 8003cdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ce0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8003ce2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ce6:	4812      	ldr	r0, [pc, #72]	; (8003d30 <HAL_I2C_MspDeInit+0x6c>)
 8003ce8:	f002 fa4c 	bl	8006184 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003cec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cf0:	480f      	ldr	r0, [pc, #60]	; (8003d30 <HAL_I2C_MspDeInit+0x6c>)
 8003cf2:	f002 fa47 	bl	8006184 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8003cf6:	e013      	b.n	8003d20 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a0d      	ldr	r2, [pc, #52]	; (8003d34 <HAL_I2C_MspDeInit+0x70>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d10e      	bne.n	8003d20 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <HAL_I2C_MspDeInit+0x68>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	4a09      	ldr	r2, [pc, #36]	; (8003d2c <HAL_I2C_MspDeInit+0x68>)
 8003d08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d0c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8003d0e:	2180      	movs	r1, #128	; 0x80
 8003d10:	4809      	ldr	r0, [pc, #36]	; (8003d38 <HAL_I2C_MspDeInit+0x74>)
 8003d12:	f002 fa37 	bl	8006184 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8003d16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d1a:	4807      	ldr	r0, [pc, #28]	; (8003d38 <HAL_I2C_MspDeInit+0x74>)
 8003d1c:	f002 fa32 	bl	8006184 <HAL_GPIO_DeInit>
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40005400 	.word	0x40005400
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40020400 	.word	0x40020400
 8003d34:	40005c00 	.word	0x40005c00
 8003d38:	40021c00 	.word	0x40021c00

08003d3c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b0ae      	sub	sp, #184	; 0xb8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	60da      	str	r2, [r3, #12]
 8003d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d54:	f107 0320 	add.w	r3, r7, #32
 8003d58:	2284      	movs	r2, #132	; 0x84
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f009 fe37 	bl	800d9d0 <memset>
  if(hltdc->Instance==LTDC)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a6f      	ldr	r2, [pc, #444]	; (8003f24 <HAL_LTDC_MspInit+0x1e8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	f040 80d6 	bne.w	8003f1a <HAL_LTDC_MspInit+0x1de>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003d6e:	2308      	movs	r3, #8
 8003d70:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8003d72:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003d76:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8003d78:	2305      	movs	r3, #5
 8003d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003d80:	2303      	movs	r3, #3
 8003d82:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003d84:	2301      	movs	r3, #1
 8003d86:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003d88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d8e:	f107 0320 	add.w	r3, r7, #32
 8003d92:	4618      	mov	r0, r3
 8003d94:	f004 fa0c 	bl	80081b0 <HAL_RCCEx_PeriphCLKConfig>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8003d9e:	f7fe fac3 	bl	8002328 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003da2:	4b61      	ldr	r3, [pc, #388]	; (8003f28 <HAL_LTDC_MspInit+0x1ec>)
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	4a60      	ldr	r2, [pc, #384]	; (8003f28 <HAL_LTDC_MspInit+0x1ec>)
 8003da8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dac:	6453      	str	r3, [r2, #68]	; 0x44
 8003dae:	4b5e      	ldr	r3, [pc, #376]	; (8003f28 <HAL_LTDC_MspInit+0x1ec>)
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003db6:	61fb      	str	r3, [r7, #28]
 8003db8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003dba:	4b5b      	ldr	r3, [pc, #364]	; (8003f28 <HAL_LTDC_MspInit+0x1ec>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	4a5a      	ldr	r2, [pc, #360]	; (8003f28 <HAL_LTDC_MspInit+0x1ec>)
 8003dc0:	f043 0310 	orr.w	r3, r3, #16
 8003dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc6:	4b58      	ldr	r3, [pc, #352]	; (8003f28 <HAL_LTDC_MspInit+0x1ec>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003dd2:	4b55      	ldr	r3, [pc, #340]	; (8003f28 <HAL_LTDC_MspInit+0x1ec>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	4a54      	ldr	r2, [pc, #336]	; (8003f28 <HAL_LTDC_MspInit+0x1ec>)
 8003dd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dde:	4b52      	ldr	r3, [pc, #328]	; (8003f28 <HAL_LTDC_MspInit+0x1ec>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003dea:	4b4f      	ldr	r3, [pc, #316]	; (8003f28 <HAL_LTDC_MspInit+0x1ec>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	4a4e      	ldr	r2, [pc, #312]	; (8003f28 <HAL_LTDC_MspInit+0x1ec>)
 8003df0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003df4:	6313      	str	r3, [r2, #48]	; 0x30
 8003df6:	4b4c      	ldr	r3, [pc, #304]	; (8003f28 <HAL_LTDC_MspInit+0x1ec>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e02:	4b49      	ldr	r3, [pc, #292]	; (8003f28 <HAL_LTDC_MspInit+0x1ec>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	4a48      	ldr	r2, [pc, #288]	; (8003f28 <HAL_LTDC_MspInit+0x1ec>)
 8003e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e0e:	4b46      	ldr	r3, [pc, #280]	; (8003f28 <HAL_LTDC_MspInit+0x1ec>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003e1a:	4b43      	ldr	r3, [pc, #268]	; (8003f28 <HAL_LTDC_MspInit+0x1ec>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	4a42      	ldr	r2, [pc, #264]	; (8003f28 <HAL_LTDC_MspInit+0x1ec>)
 8003e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e24:	6313      	str	r3, [r2, #48]	; 0x30
 8003e26:	4b40      	ldr	r3, [pc, #256]	; (8003f28 <HAL_LTDC_MspInit+0x1ec>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003e32:	2310      	movs	r3, #16
 8003e34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e44:	2300      	movs	r3, #0
 8003e46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e4a:	230e      	movs	r3, #14
 8003e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003e50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003e54:	4619      	mov	r1, r3
 8003e56:	4835      	ldr	r0, [pc, #212]	; (8003f2c <HAL_LTDC_MspInit+0x1f0>)
 8003e58:	f001 ffe8 	bl	8005e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003e5c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003e60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e64:	2302      	movs	r3, #2
 8003e66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e70:	2300      	movs	r3, #0
 8003e72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e76:	230e      	movs	r3, #14
 8003e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003e7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003e80:	4619      	mov	r1, r3
 8003e82:	482b      	ldr	r0, [pc, #172]	; (8003f30 <HAL_LTDC_MspInit+0x1f4>)
 8003e84:	f001 ffd2 	bl	8005e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003e88:	23f7      	movs	r3, #247	; 0xf7
 8003e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e94:	2300      	movs	r3, #0
 8003e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ea0:	230e      	movs	r3, #14
 8003ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003ea6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4821      	ldr	r0, [pc, #132]	; (8003f34 <HAL_LTDC_MspInit+0x1f8>)
 8003eae:	f001 ffbd 	bl	8005e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003ecc:	2309      	movs	r3, #9
 8003ece:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003ed2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4817      	ldr	r0, [pc, #92]	; (8003f38 <HAL_LTDC_MspInit+0x1fc>)
 8003eda:	f001 ffa7 	bl	8005e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003ede:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ef8:	230e      	movs	r3, #14
 8003efa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003efe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003f02:	4619      	mov	r1, r3
 8003f04:	480d      	ldr	r0, [pc, #52]	; (8003f3c <HAL_LTDC_MspInit+0x200>)
 8003f06:	f001 ff91 	bl	8005e2c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2105      	movs	r1, #5
 8003f0e:	2058      	movs	r0, #88	; 0x58
 8003f10:	f001 f906 	bl	8005120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003f14:	2058      	movs	r0, #88	; 0x58
 8003f16:	f001 f91f 	bl	8005158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003f1a:	bf00      	nop
 8003f1c:	37b8      	adds	r7, #184	; 0xb8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40016800 	.word	0x40016800
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	40022400 	.word	0x40022400
 8003f34:	40022800 	.word	0x40022800
 8003f38:	40021800 	.word	0x40021800
 8003f3c:	40022000 	.word	0x40022000

08003f40 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b0a4      	sub	sp, #144	; 0x90
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f48:	f107 030c 	add.w	r3, r7, #12
 8003f4c:	2284      	movs	r2, #132	; 0x84
 8003f4e:	2100      	movs	r1, #0
 8003f50:	4618      	mov	r0, r3
 8003f52:	f009 fd3d 	bl	800d9d0 <memset>
  if(hrtc->Instance==RTC)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a0e      	ldr	r2, [pc, #56]	; (8003f94 <HAL_RTC_MspInit+0x54>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d114      	bne.n	8003f8a <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003f60:	2320      	movs	r3, #32
 8003f62:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f68:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f6a:	f107 030c 	add.w	r3, r7, #12
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f004 f91e 	bl	80081b0 <HAL_RCCEx_PeriphCLKConfig>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003f7a:	f7fe f9d5 	bl	8002328 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f7e:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <HAL_RTC_MspInit+0x58>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	4a05      	ldr	r2, [pc, #20]	; (8003f98 <HAL_RTC_MspInit+0x58>)
 8003f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f88:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003f8a:	bf00      	nop
 8003f8c:	3790      	adds	r7, #144	; 0x90
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40002800 	.word	0x40002800
 8003f98:	40023800 	.word	0x40023800

08003f9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	; 0x28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa4:	f107 0314 	add.w	r3, r7, #20
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a29      	ldr	r2, [pc, #164]	; (8004060 <HAL_SPI_MspInit+0xc4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d14c      	bne.n	8004058 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003fbe:	4b29      	ldr	r3, [pc, #164]	; (8004064 <HAL_SPI_MspInit+0xc8>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	4a28      	ldr	r2, [pc, #160]	; (8004064 <HAL_SPI_MspInit+0xc8>)
 8003fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fca:	4b26      	ldr	r3, [pc, #152]	; (8004064 <HAL_SPI_MspInit+0xc8>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003fd6:	4b23      	ldr	r3, [pc, #140]	; (8004064 <HAL_SPI_MspInit+0xc8>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	4a22      	ldr	r2, [pc, #136]	; (8004064 <HAL_SPI_MspInit+0xc8>)
 8003fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe2:	4b20      	ldr	r3, [pc, #128]	; (8004064 <HAL_SPI_MspInit+0xc8>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fee:	4b1d      	ldr	r3, [pc, #116]	; (8004064 <HAL_SPI_MspInit+0xc8>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	4a1c      	ldr	r2, [pc, #112]	; (8004064 <HAL_SPI_MspInit+0xc8>)
 8003ff4:	f043 0302 	orr.w	r3, r3, #2
 8003ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ffa:	4b1a      	ldr	r3, [pc, #104]	; (8004064 <HAL_SPI_MspInit+0xc8>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8004006:	2303      	movs	r3, #3
 8004008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400a:	2302      	movs	r3, #2
 800400c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004012:	2303      	movs	r3, #3
 8004014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004016:	2305      	movs	r3, #5
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800401a:	f107 0314 	add.w	r3, r7, #20
 800401e:	4619      	mov	r1, r3
 8004020:	4811      	ldr	r0, [pc, #68]	; (8004068 <HAL_SPI_MspInit+0xcc>)
 8004022:	f001 ff03 	bl	8005e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8004026:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800402a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402c:	2302      	movs	r3, #2
 800402e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004030:	2300      	movs	r3, #0
 8004032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004034:	2300      	movs	r3, #0
 8004036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004038:	2305      	movs	r3, #5
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800403c:	f107 0314 	add.w	r3, r7, #20
 8004040:	4619      	mov	r1, r3
 8004042:	480a      	ldr	r0, [pc, #40]	; (800406c <HAL_SPI_MspInit+0xd0>)
 8004044:	f001 fef2 	bl	8005e2c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8004048:	2200      	movs	r2, #0
 800404a:	2105      	movs	r1, #5
 800404c:	2024      	movs	r0, #36	; 0x24
 800404e:	f001 f867 	bl	8005120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004052:	2024      	movs	r0, #36	; 0x24
 8004054:	f001 f880 	bl	8005158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004058:	bf00      	nop
 800405a:	3728      	adds	r7, #40	; 0x28
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40003800 	.word	0x40003800
 8004064:	40023800 	.word	0x40023800
 8004068:	40022000 	.word	0x40022000
 800406c:	40020400 	.word	0x40020400

08004070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08e      	sub	sp, #56	; 0x38
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	60da      	str	r2, [r3, #12]
 8004086:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a3b      	ldr	r2, [pc, #236]	; (800417c <HAL_TIM_Base_MspInit+0x10c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d10c      	bne.n	80040ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004092:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <HAL_TIM_Base_MspInit+0x110>)
 8004094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004096:	4a3a      	ldr	r2, [pc, #232]	; (8004180 <HAL_TIM_Base_MspInit+0x110>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6453      	str	r3, [r2, #68]	; 0x44
 800409e:	4b38      	ldr	r3, [pc, #224]	; (8004180 <HAL_TIM_Base_MspInit+0x110>)
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	623b      	str	r3, [r7, #32]
 80040a8:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80040aa:	e062      	b.n	8004172 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b4:	d10c      	bne.n	80040d0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040b6:	4b32      	ldr	r3, [pc, #200]	; (8004180 <HAL_TIM_Base_MspInit+0x110>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	4a31      	ldr	r2, [pc, #196]	; (8004180 <HAL_TIM_Base_MspInit+0x110>)
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	6413      	str	r3, [r2, #64]	; 0x40
 80040c2:	4b2f      	ldr	r3, [pc, #188]	; (8004180 <HAL_TIM_Base_MspInit+0x110>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	69fb      	ldr	r3, [r7, #28]
}
 80040ce:	e050      	b.n	8004172 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a2b      	ldr	r2, [pc, #172]	; (8004184 <HAL_TIM_Base_MspInit+0x114>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d10c      	bne.n	80040f4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040da:	4b29      	ldr	r3, [pc, #164]	; (8004180 <HAL_TIM_Base_MspInit+0x110>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	4a28      	ldr	r2, [pc, #160]	; (8004180 <HAL_TIM_Base_MspInit+0x110>)
 80040e0:	f043 0302 	orr.w	r3, r3, #2
 80040e4:	6413      	str	r3, [r2, #64]	; 0x40
 80040e6:	4b26      	ldr	r3, [pc, #152]	; (8004180 <HAL_TIM_Base_MspInit+0x110>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	61bb      	str	r3, [r7, #24]
 80040f0:	69bb      	ldr	r3, [r7, #24]
}
 80040f2:	e03e      	b.n	8004172 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a23      	ldr	r2, [pc, #140]	; (8004188 <HAL_TIM_Base_MspInit+0x118>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d10c      	bne.n	8004118 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80040fe:	4b20      	ldr	r3, [pc, #128]	; (8004180 <HAL_TIM_Base_MspInit+0x110>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	4a1f      	ldr	r2, [pc, #124]	; (8004180 <HAL_TIM_Base_MspInit+0x110>)
 8004104:	f043 0308 	orr.w	r3, r3, #8
 8004108:	6413      	str	r3, [r2, #64]	; 0x40
 800410a:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <HAL_TIM_Base_MspInit+0x110>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	697b      	ldr	r3, [r7, #20]
}
 8004116:	e02c      	b.n	8004172 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1b      	ldr	r2, [pc, #108]	; (800418c <HAL_TIM_Base_MspInit+0x11c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d127      	bne.n	8004172 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004122:	4b17      	ldr	r3, [pc, #92]	; (8004180 <HAL_TIM_Base_MspInit+0x110>)
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	4a16      	ldr	r2, [pc, #88]	; (8004180 <HAL_TIM_Base_MspInit+0x110>)
 8004128:	f043 0302 	orr.w	r3, r3, #2
 800412c:	6453      	str	r3, [r2, #68]	; 0x44
 800412e:	4b14      	ldr	r3, [pc, #80]	; (8004180 <HAL_TIM_Base_MspInit+0x110>)
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800413a:	4b11      	ldr	r3, [pc, #68]	; (8004180 <HAL_TIM_Base_MspInit+0x110>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	4a10      	ldr	r2, [pc, #64]	; (8004180 <HAL_TIM_Base_MspInit+0x110>)
 8004140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004144:	6313      	str	r3, [r2, #48]	; 0x30
 8004146:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <HAL_TIM_Base_MspInit+0x110>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004152:	2304      	movs	r3, #4
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004156:	2302      	movs	r3, #2
 8004158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415a:	2300      	movs	r3, #0
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800415e:	2300      	movs	r3, #0
 8004160:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004162:	2303      	movs	r3, #3
 8004164:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800416a:	4619      	mov	r1, r3
 800416c:	4808      	ldr	r0, [pc, #32]	; (8004190 <HAL_TIM_Base_MspInit+0x120>)
 800416e:	f001 fe5d 	bl	8005e2c <HAL_GPIO_Init>
}
 8004172:	bf00      	nop
 8004174:	3738      	adds	r7, #56	; 0x38
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40010000 	.word	0x40010000
 8004180:	40023800 	.word	0x40023800
 8004184:	40000400 	.word	0x40000400
 8004188:	40000c00 	.word	0x40000c00
 800418c:	40010400 	.word	0x40010400
 8004190:	40022000 	.word	0x40022000

08004194 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b0b0      	sub	sp, #192	; 0xc0
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800419c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	609a      	str	r2, [r3, #8]
 80041a8:	60da      	str	r2, [r3, #12]
 80041aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041b0:	2284      	movs	r2, #132	; 0x84
 80041b2:	2100      	movs	r1, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f009 fc0b 	bl	800d9d0 <memset>
  if(huart->Instance==UART7)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a75      	ldr	r2, [pc, #468]	; (8004394 <HAL_UART_MspInit+0x200>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d13d      	bne.n	8004240 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80041c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041c8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80041ca:	2300      	movs	r3, #0
 80041cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041d4:	4618      	mov	r0, r3
 80041d6:	f003 ffeb 	bl	80081b0 <HAL_RCCEx_PeriphCLKConfig>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80041e0:	f7fe f8a2 	bl	8002328 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80041e4:	4b6c      	ldr	r3, [pc, #432]	; (8004398 <HAL_UART_MspInit+0x204>)
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	4a6b      	ldr	r2, [pc, #428]	; (8004398 <HAL_UART_MspInit+0x204>)
 80041ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041ee:	6413      	str	r3, [r2, #64]	; 0x40
 80041f0:	4b69      	ldr	r3, [pc, #420]	; (8004398 <HAL_UART_MspInit+0x204>)
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80041fc:	4b66      	ldr	r3, [pc, #408]	; (8004398 <HAL_UART_MspInit+0x204>)
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	4a65      	ldr	r2, [pc, #404]	; (8004398 <HAL_UART_MspInit+0x204>)
 8004202:	f043 0320 	orr.w	r3, r3, #32
 8004206:	6313      	str	r3, [r2, #48]	; 0x30
 8004208:	4b63      	ldr	r3, [pc, #396]	; (8004398 <HAL_UART_MspInit+0x204>)
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	623b      	str	r3, [r7, #32]
 8004212:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004214:	23c0      	movs	r3, #192	; 0xc0
 8004216:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421a:	2302      	movs	r3, #2
 800421c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004220:	2300      	movs	r3, #0
 8004222:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004226:	2303      	movs	r3, #3
 8004228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800422c:	2308      	movs	r3, #8
 800422e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004232:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004236:	4619      	mov	r1, r3
 8004238:	4858      	ldr	r0, [pc, #352]	; (800439c <HAL_UART_MspInit+0x208>)
 800423a:	f001 fdf7 	bl	8005e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800423e:	e0a4      	b.n	800438a <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a56      	ldr	r2, [pc, #344]	; (80043a0 <HAL_UART_MspInit+0x20c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d15d      	bne.n	8004306 <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800424a:	2340      	movs	r3, #64	; 0x40
 800424c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800424e:	2300      	movs	r3, #0
 8004250:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004256:	4618      	mov	r0, r3
 8004258:	f003 ffaa 	bl	80081b0 <HAL_RCCEx_PeriphCLKConfig>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8004262:	f7fe f861 	bl	8002328 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004266:	4b4c      	ldr	r3, [pc, #304]	; (8004398 <HAL_UART_MspInit+0x204>)
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	4a4b      	ldr	r2, [pc, #300]	; (8004398 <HAL_UART_MspInit+0x204>)
 800426c:	f043 0310 	orr.w	r3, r3, #16
 8004270:	6453      	str	r3, [r2, #68]	; 0x44
 8004272:	4b49      	ldr	r3, [pc, #292]	; (8004398 <HAL_UART_MspInit+0x204>)
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800427e:	4b46      	ldr	r3, [pc, #280]	; (8004398 <HAL_UART_MspInit+0x204>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	4a45      	ldr	r2, [pc, #276]	; (8004398 <HAL_UART_MspInit+0x204>)
 8004284:	f043 0302 	orr.w	r3, r3, #2
 8004288:	6313      	str	r3, [r2, #48]	; 0x30
 800428a:	4b43      	ldr	r3, [pc, #268]	; (8004398 <HAL_UART_MspInit+0x204>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	61bb      	str	r3, [r7, #24]
 8004294:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004296:	4b40      	ldr	r3, [pc, #256]	; (8004398 <HAL_UART_MspInit+0x204>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	4a3f      	ldr	r2, [pc, #252]	; (8004398 <HAL_UART_MspInit+0x204>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	6313      	str	r3, [r2, #48]	; 0x30
 80042a2:	4b3d      	ldr	r3, [pc, #244]	; (8004398 <HAL_UART_MspInit+0x204>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b4:	2302      	movs	r3, #2
 80042b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c0:	2300      	movs	r3, #0
 80042c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042c6:	2307      	movs	r3, #7
 80042c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80042cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80042d0:	4619      	mov	r1, r3
 80042d2:	4834      	ldr	r0, [pc, #208]	; (80043a4 <HAL_UART_MspInit+0x210>)
 80042d4:	f001 fdaa 	bl	8005e2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80042d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e0:	2302      	movs	r3, #2
 80042e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ec:	2300      	movs	r3, #0
 80042ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042f2:	2307      	movs	r3, #7
 80042f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80042f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80042fc:	4619      	mov	r1, r3
 80042fe:	482a      	ldr	r0, [pc, #168]	; (80043a8 <HAL_UART_MspInit+0x214>)
 8004300:	f001 fd94 	bl	8005e2c <HAL_GPIO_Init>
}
 8004304:	e041      	b.n	800438a <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART6)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a28      	ldr	r2, [pc, #160]	; (80043ac <HAL_UART_MspInit+0x218>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d13c      	bne.n	800438a <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004316:	2300      	movs	r3, #0
 8004318:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800431c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004320:	4618      	mov	r0, r3
 8004322:	f003 ff45 	bl	80081b0 <HAL_RCCEx_PeriphCLKConfig>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 800432c:	f7fd fffc 	bl	8002328 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004330:	4b19      	ldr	r3, [pc, #100]	; (8004398 <HAL_UART_MspInit+0x204>)
 8004332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004334:	4a18      	ldr	r2, [pc, #96]	; (8004398 <HAL_UART_MspInit+0x204>)
 8004336:	f043 0320 	orr.w	r3, r3, #32
 800433a:	6453      	str	r3, [r2, #68]	; 0x44
 800433c:	4b16      	ldr	r3, [pc, #88]	; (8004398 <HAL_UART_MspInit+0x204>)
 800433e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004348:	4b13      	ldr	r3, [pc, #76]	; (8004398 <HAL_UART_MspInit+0x204>)
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	4a12      	ldr	r2, [pc, #72]	; (8004398 <HAL_UART_MspInit+0x204>)
 800434e:	f043 0304 	orr.w	r3, r3, #4
 8004352:	6313      	str	r3, [r2, #48]	; 0x30
 8004354:	4b10      	ldr	r3, [pc, #64]	; (8004398 <HAL_UART_MspInit+0x204>)
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004360:	23c0      	movs	r3, #192	; 0xc0
 8004362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004366:	2302      	movs	r3, #2
 8004368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436c:	2300      	movs	r3, #0
 800436e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004372:	2303      	movs	r3, #3
 8004374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004378:	2308      	movs	r3, #8
 800437a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800437e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004382:	4619      	mov	r1, r3
 8004384:	480a      	ldr	r0, [pc, #40]	; (80043b0 <HAL_UART_MspInit+0x21c>)
 8004386:	f001 fd51 	bl	8005e2c <HAL_GPIO_Init>
}
 800438a:	bf00      	nop
 800438c:	37c0      	adds	r7, #192	; 0xc0
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40007800 	.word	0x40007800
 8004398:	40023800 	.word	0x40023800
 800439c:	40021400 	.word	0x40021400
 80043a0:	40011000 	.word	0x40011000
 80043a4:	40020400 	.word	0x40020400
 80043a8:	40020000 	.word	0x40020000
 80043ac:	40011400 	.word	0x40011400
 80043b0:	40020800 	.word	0x40020800

080043b4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	605a      	str	r2, [r3, #4]
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	60da      	str	r2, [r3, #12]
 80043c6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80043c8:	4b3a      	ldr	r3, [pc, #232]	; (80044b4 <HAL_FMC_MspInit+0x100>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d16d      	bne.n	80044ac <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80043d0:	4b38      	ldr	r3, [pc, #224]	; (80044b4 <HAL_FMC_MspInit+0x100>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80043d6:	4b38      	ldr	r3, [pc, #224]	; (80044b8 <HAL_FMC_MspInit+0x104>)
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	4a37      	ldr	r2, [pc, #220]	; (80044b8 <HAL_FMC_MspInit+0x104>)
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	6393      	str	r3, [r2, #56]	; 0x38
 80043e2:	4b35      	ldr	r3, [pc, #212]	; (80044b8 <HAL_FMC_MspInit+0x104>)
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80043ee:	f64f 7383 	movw	r3, #65411	; 0xff83
 80043f2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f4:	2302      	movs	r3, #2
 80043f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043fc:	2303      	movs	r3, #3
 80043fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004400:	230c      	movs	r3, #12
 8004402:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004404:	1d3b      	adds	r3, r7, #4
 8004406:	4619      	mov	r1, r3
 8004408:	482c      	ldr	r0, [pc, #176]	; (80044bc <HAL_FMC_MspInit+0x108>)
 800440a:	f001 fd0f 	bl	8005e2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800440e:	f248 1333 	movw	r3, #33075	; 0x8133
 8004412:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004414:	2302      	movs	r3, #2
 8004416:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800441c:	2303      	movs	r3, #3
 800441e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004420:	230c      	movs	r3, #12
 8004422:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004424:	1d3b      	adds	r3, r7, #4
 8004426:	4619      	mov	r1, r3
 8004428:	4825      	ldr	r0, [pc, #148]	; (80044c0 <HAL_FMC_MspInit+0x10c>)
 800442a:	f001 fcff 	bl	8005e2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800442e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004432:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004434:	2302      	movs	r3, #2
 8004436:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800443c:	2303      	movs	r3, #3
 800443e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004440:	230c      	movs	r3, #12
 8004442:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004444:	1d3b      	adds	r3, r7, #4
 8004446:	4619      	mov	r1, r3
 8004448:	481e      	ldr	r0, [pc, #120]	; (80044c4 <HAL_FMC_MspInit+0x110>)
 800444a:	f001 fcef 	bl	8005e2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800444e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004452:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004454:	2302      	movs	r3, #2
 8004456:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800445c:	2303      	movs	r3, #3
 800445e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004460:	230c      	movs	r3, #12
 8004462:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004464:	1d3b      	adds	r3, r7, #4
 8004466:	4619      	mov	r1, r3
 8004468:	4817      	ldr	r0, [pc, #92]	; (80044c8 <HAL_FMC_MspInit+0x114>)
 800446a:	f001 fcdf 	bl	8005e2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800446e:	2328      	movs	r3, #40	; 0x28
 8004470:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004472:	2302      	movs	r3, #2
 8004474:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004476:	2300      	movs	r3, #0
 8004478:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800447a:	2303      	movs	r3, #3
 800447c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800447e:	230c      	movs	r3, #12
 8004480:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004482:	1d3b      	adds	r3, r7, #4
 8004484:	4619      	mov	r1, r3
 8004486:	4811      	ldr	r0, [pc, #68]	; (80044cc <HAL_FMC_MspInit+0x118>)
 8004488:	f001 fcd0 	bl	8005e2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800448c:	2308      	movs	r3, #8
 800448e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004490:	2302      	movs	r3, #2
 8004492:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004498:	2303      	movs	r3, #3
 800449a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800449c:	230c      	movs	r3, #12
 800449e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80044a0:	1d3b      	adds	r3, r7, #4
 80044a2:	4619      	mov	r1, r3
 80044a4:	480a      	ldr	r0, [pc, #40]	; (80044d0 <HAL_FMC_MspInit+0x11c>)
 80044a6:	f001 fcc1 	bl	8005e2c <HAL_GPIO_Init>
 80044aa:	e000      	b.n	80044ae <HAL_FMC_MspInit+0xfa>
    return;
 80044ac:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20000560 	.word	0x20000560
 80044b8:	40023800 	.word	0x40023800
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40021800 	.word	0x40021800
 80044c4:	40020c00 	.word	0x40020c00
 80044c8:	40021400 	.word	0x40021400
 80044cc:	40021c00 	.word	0x40021c00
 80044d0:	40020800 	.word	0x40020800

080044d4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80044dc:	f7ff ff6a 	bl	80043b4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08c      	sub	sp, #48	; 0x30
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80044f8:	2200      	movs	r2, #0
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	2036      	movs	r0, #54	; 0x36
 80044fe:	f000 fe0f 	bl	8005120 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004502:	2036      	movs	r0, #54	; 0x36
 8004504:	f000 fe28 	bl	8005158 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004508:	4b1f      	ldr	r3, [pc, #124]	; (8004588 <HAL_InitTick+0xa0>)
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	4a1e      	ldr	r2, [pc, #120]	; (8004588 <HAL_InitTick+0xa0>)
 800450e:	f043 0310 	orr.w	r3, r3, #16
 8004512:	6413      	str	r3, [r2, #64]	; 0x40
 8004514:	4b1c      	ldr	r3, [pc, #112]	; (8004588 <HAL_InitTick+0xa0>)
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004520:	f107 0210 	add.w	r2, r7, #16
 8004524:	f107 0314 	add.w	r3, r7, #20
 8004528:	4611      	mov	r1, r2
 800452a:	4618      	mov	r0, r3
 800452c:	f003 fe0e 	bl	800814c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004530:	f003 fde4 	bl	80080fc <HAL_RCC_GetPCLK1Freq>
 8004534:	4603      	mov	r3, r0
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453c:	4a13      	ldr	r2, [pc, #76]	; (800458c <HAL_InitTick+0xa4>)
 800453e:	fba2 2303 	umull	r2, r3, r2, r3
 8004542:	0c9b      	lsrs	r3, r3, #18
 8004544:	3b01      	subs	r3, #1
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004548:	4b11      	ldr	r3, [pc, #68]	; (8004590 <HAL_InitTick+0xa8>)
 800454a:	4a12      	ldr	r2, [pc, #72]	; (8004594 <HAL_InitTick+0xac>)
 800454c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800454e:	4b10      	ldr	r3, [pc, #64]	; (8004590 <HAL_InitTick+0xa8>)
 8004550:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004554:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004556:	4a0e      	ldr	r2, [pc, #56]	; (8004590 <HAL_InitTick+0xa8>)
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <HAL_InitTick+0xa8>)
 800455e:	2200      	movs	r2, #0
 8004560:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004562:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_InitTick+0xa8>)
 8004564:	2200      	movs	r2, #0
 8004566:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004568:	4809      	ldr	r0, [pc, #36]	; (8004590 <HAL_InitTick+0xa8>)
 800456a:	f005 fbd3 	bl	8009d14 <HAL_TIM_Base_Init>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d104      	bne.n	800457e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004574:	4806      	ldr	r0, [pc, #24]	; (8004590 <HAL_InitTick+0xa8>)
 8004576:	f005 fc25 	bl	8009dc4 <HAL_TIM_Base_Start_IT>
 800457a:	4603      	mov	r3, r0
 800457c:	e000      	b.n	8004580 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
}
 8004580:	4618      	mov	r0, r3
 8004582:	3730      	adds	r7, #48	; 0x30
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40023800 	.word	0x40023800
 800458c:	431bde83 	.word	0x431bde83
 8004590:	200049b8 	.word	0x200049b8
 8004594:	40001000 	.word	0x40001000

08004598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800459c:	e7fe      	b.n	800459c <NMI_Handler+0x4>

0800459e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800459e:	b480      	push	{r7}
 80045a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045a2:	e7fe      	b.n	80045a2 <HardFault_Handler+0x4>

080045a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045a8:	e7fe      	b.n	80045a8 <MemManage_Handler+0x4>

080045aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045aa:	b480      	push	{r7}
 80045ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045ae:	e7fe      	b.n	80045ae <BusFault_Handler+0x4>

080045b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045b4:	e7fe      	b.n	80045b4 <UsageFault_Handler+0x4>

080045b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045b6:	b480      	push	{r7}
 80045b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045ba:	bf00      	nop
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NC1_Pin);
 80045c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80045cc:	f001 ff1a 	bl	8006404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80045d0:	bf00      	nop
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80045d8:	4802      	ldr	r0, [pc, #8]	; (80045e4 <SPI2_IRQHandler+0x10>)
 80045da:	f004 ff9d 	bl	8009518 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20004320 	.word	0x20004320

080045e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <TIM6_DAC_IRQHandler+0x20>)
 80045ee:	791b      	ldrb	r3, [r3, #4]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80045f6:	4804      	ldr	r0, [pc, #16]	; (8004608 <TIM6_DAC_IRQHandler+0x20>)
 80045f8:	f000 fdde 	bl	80051b8 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80045fc:	4803      	ldr	r0, [pc, #12]	; (800460c <TIM6_DAC_IRQHandler+0x24>)
 80045fe:	f005 fc59 	bl	8009eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004602:	bf00      	nop
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20004704 	.word	0x20004704
 800460c:	200049b8 	.word	0x200049b8

08004610 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004614:	4802      	ldr	r0, [pc, #8]	; (8004620 <LTDC_IRQHandler+0x10>)
 8004616:	f002 fe17 	bl	8007248 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800461a:	bf00      	nop
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	2000453c 	.word	0x2000453c

08004624 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004628:	4802      	ldr	r0, [pc, #8]	; (8004634 <DMA2D_IRQHandler+0x10>)
 800462a:	f001 f9c1 	bl	80059b0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800462e:	bf00      	nop
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	2000480c 	.word	0x2000480c

08004638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004640:	4a14      	ldr	r2, [pc, #80]	; (8004694 <_sbrk+0x5c>)
 8004642:	4b15      	ldr	r3, [pc, #84]	; (8004698 <_sbrk+0x60>)
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800464c:	4b13      	ldr	r3, [pc, #76]	; (800469c <_sbrk+0x64>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d102      	bne.n	800465a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004654:	4b11      	ldr	r3, [pc, #68]	; (800469c <_sbrk+0x64>)
 8004656:	4a12      	ldr	r2, [pc, #72]	; (80046a0 <_sbrk+0x68>)
 8004658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800465a:	4b10      	ldr	r3, [pc, #64]	; (800469c <_sbrk+0x64>)
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4413      	add	r3, r2
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	429a      	cmp	r2, r3
 8004666:	d207      	bcs.n	8004678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004668:	f009 f978 	bl	800d95c <__errno>
 800466c:	4603      	mov	r3, r0
 800466e:	220c      	movs	r2, #12
 8004670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004672:	f04f 33ff 	mov.w	r3, #4294967295
 8004676:	e009      	b.n	800468c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004678:	4b08      	ldr	r3, [pc, #32]	; (800469c <_sbrk+0x64>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800467e:	4b07      	ldr	r3, [pc, #28]	; (800469c <_sbrk+0x64>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4413      	add	r3, r2
 8004686:	4a05      	ldr	r2, [pc, #20]	; (800469c <_sbrk+0x64>)
 8004688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800468a:	68fb      	ldr	r3, [r7, #12]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	20050000 	.word	0x20050000
 8004698:	00000400 	.word	0x00000400
 800469c:	20000564 	.word	0x20000564
 80046a0:	20004a18 	.word	0x20004a18

080046a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046a8:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <SystemInit+0x20>)
 80046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ae:	4a05      	ldr	r2, [pc, #20]	; (80046c4 <SystemInit+0x20>)
 80046b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046b8:	bf00      	nop
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	e000ed00 	.word	0xe000ed00

080046c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80046c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004700 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046cc:	480d      	ldr	r0, [pc, #52]	; (8004704 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80046ce:	490e      	ldr	r1, [pc, #56]	; (8004708 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80046d0:	4a0e      	ldr	r2, [pc, #56]	; (800470c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80046d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046d4:	e002      	b.n	80046dc <LoopCopyDataInit>

080046d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046da:	3304      	adds	r3, #4

080046dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046e0:	d3f9      	bcc.n	80046d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046e2:	4a0b      	ldr	r2, [pc, #44]	; (8004710 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80046e4:	4c0b      	ldr	r4, [pc, #44]	; (8004714 <LoopFillZerobss+0x26>)
  movs r3, #0
 80046e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046e8:	e001      	b.n	80046ee <LoopFillZerobss>

080046ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046ec:	3204      	adds	r2, #4

080046ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046f0:	d3fb      	bcc.n	80046ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80046f2:	f7ff ffd7 	bl	80046a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046f6:	f009 f937 	bl	800d968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046fa:	f7fc f96f 	bl	80009dc <main>
  bx  lr    
 80046fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004700:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004708:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 800470c:	08010418 	.word	0x08010418
  ldr r2, =_sbss
 8004710:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8004714:	20004a18 	.word	0x20004a18

08004718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004718:	e7fe      	b.n	8004718 <ADC_IRQHandler>

0800471a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800471e:	2003      	movs	r0, #3
 8004720:	f000 fcf3 	bl	800510a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004724:	200f      	movs	r0, #15
 8004726:	f7ff fedf 	bl	80044e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800472a:	f7ff f91f 	bl	800396c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004738:	4b06      	ldr	r3, [pc, #24]	; (8004754 <HAL_IncTick+0x20>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_IncTick+0x24>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4413      	add	r3, r2
 8004744:	4a04      	ldr	r2, [pc, #16]	; (8004758 <HAL_IncTick+0x24>)
 8004746:	6013      	str	r3, [r2, #0]
}
 8004748:	bf00      	nop
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000058 	.word	0x20000058
 8004758:	20004a04 	.word	0x20004a04

0800475c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  return uwTick;
 8004760:	4b03      	ldr	r3, [pc, #12]	; (8004770 <HAL_GetTick+0x14>)
 8004762:	681b      	ldr	r3, [r3, #0]
}
 8004764:	4618      	mov	r0, r3
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	20004a04 	.word	0x20004a04

08004774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800477c:	f7ff ffee 	bl	800475c <HAL_GetTick>
 8004780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478c:	d005      	beq.n	800479a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800478e:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <HAL_Delay+0x44>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800479a:	bf00      	nop
 800479c:	f7ff ffde 	bl	800475c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d8f7      	bhi.n	800479c <HAL_Delay+0x28>
  {
  }
}
 80047ac:	bf00      	nop
 80047ae:	bf00      	nop
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20000058 	.word	0x20000058

080047bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e031      	b.n	8004836 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff f8ee 	bl	80039bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f003 0310 	and.w	r3, r3, #16
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d116      	bne.n	8004828 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047fe:	4b10      	ldr	r3, [pc, #64]	; (8004840 <HAL_ADC_Init+0x84>)
 8004800:	4013      	ands	r3, r2
 8004802:	f043 0202 	orr.w	r2, r3, #2
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fad6 	bl	8004dbc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f023 0303 	bic.w	r3, r3, #3
 800481e:	f043 0201 	orr.w	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	641a      	str	r2, [r3, #64]	; 0x40
 8004826:	e001      	b.n	800482c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004834:	7bfb      	ldrb	r3, [r7, #15]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	ffffeefd 	.word	0xffffeefd

08004844 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_ADC_Start+0x1a>
 800485a:	2302      	movs	r3, #2
 800485c:	e0ad      	b.n	80049ba <HAL_ADC_Start+0x176>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b01      	cmp	r3, #1
 8004872:	d018      	beq.n	80048a6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004884:	4b50      	ldr	r3, [pc, #320]	; (80049c8 <HAL_ADC_Start+0x184>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a50      	ldr	r2, [pc, #320]	; (80049cc <HAL_ADC_Start+0x188>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	0c9a      	lsrs	r2, r3, #18
 8004890:	4613      	mov	r3, r2
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	4413      	add	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004898:	e002      	b.n	80048a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	3b01      	subs	r3, #1
 800489e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f9      	bne.n	800489a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d175      	bne.n	80049a0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048b8:	4b45      	ldr	r3, [pc, #276]	; (80049d0 <HAL_ADC_Start+0x18c>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80048da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ee:	d106      	bne.n	80048fe <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f4:	f023 0206 	bic.w	r2, r3, #6
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	645a      	str	r2, [r3, #68]	; 0x44
 80048fc:	e002      	b.n	8004904 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004914:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004916:	4b2f      	ldr	r3, [pc, #188]	; (80049d4 <HAL_ADC_Start+0x190>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f003 031f 	and.w	r3, r3, #31
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10f      	bne.n	8004942 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d143      	bne.n	80049b8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800493e:	609a      	str	r2, [r3, #8]
 8004940:	e03a      	b.n	80049b8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a24      	ldr	r2, [pc, #144]	; (80049d8 <HAL_ADC_Start+0x194>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d10e      	bne.n	800496a <HAL_ADC_Start+0x126>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d107      	bne.n	800496a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004968:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800496a:	4b1a      	ldr	r3, [pc, #104]	; (80049d4 <HAL_ADC_Start+0x190>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f003 0310 	and.w	r3, r3, #16
 8004972:	2b00      	cmp	r3, #0
 8004974:	d120      	bne.n	80049b8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a18      	ldr	r2, [pc, #96]	; (80049dc <HAL_ADC_Start+0x198>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d11b      	bne.n	80049b8 <HAL_ADC_Start+0x174>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d114      	bne.n	80049b8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800499c:	609a      	str	r2, [r3, #8]
 800499e:	e00b      	b.n	80049b8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	f043 0210 	orr.w	r2, r3, #16
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b0:	f043 0201 	orr.w	r2, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	20000050 	.word	0x20000050
 80049cc:	431bde83 	.word	0x431bde83
 80049d0:	fffff8fe 	.word	0xfffff8fe
 80049d4:	40012300 	.word	0x40012300
 80049d8:	40012000 	.word	0x40012000
 80049dc:	40012200 	.word	0x40012200

080049e0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049fc:	d113      	bne.n	8004a26 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a0c:	d10b      	bne.n	8004a26 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f043 0220 	orr.w	r2, r3, #32
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e063      	b.n	8004aee <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004a26:	f7ff fe99 	bl	800475c <HAL_GetTick>
 8004a2a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004a2c:	e021      	b.n	8004a72 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a34:	d01d      	beq.n	8004a72 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d007      	beq.n	8004a4c <HAL_ADC_PollForConversion+0x6c>
 8004a3c:	f7ff fe8e 	bl	800475c <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d212      	bcs.n	8004a72 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d00b      	beq.n	8004a72 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	f043 0204 	orr.w	r2, r3, #4
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e03d      	b.n	8004aee <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d1d6      	bne.n	8004a2e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0212 	mvn.w	r2, #18
 8004a88:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d123      	bne.n	8004aec <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d11f      	bne.n	8004aec <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d006      	beq.n	8004ac8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d111      	bne.n	8004aec <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d105      	bne.n	8004aec <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	f043 0201 	orr.w	r2, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_ADC_ConfigChannel+0x1c>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e136      	b.n	8004d9a <HAL_ADC_ConfigChannel+0x28a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b09      	cmp	r3, #9
 8004b3a:	d93a      	bls.n	8004bb2 <HAL_ADC_ConfigChannel+0xa2>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b44:	d035      	beq.n	8004bb2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68d9      	ldr	r1, [r3, #12]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	461a      	mov	r2, r3
 8004b54:	4613      	mov	r3, r2
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	3b1e      	subs	r3, #30
 8004b5c:	2207      	movs	r2, #7
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	43da      	mvns	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	400a      	ands	r2, r1
 8004b6a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a8d      	ldr	r2, [pc, #564]	; (8004da8 <HAL_ADC_ConfigChannel+0x298>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d10a      	bne.n	8004b8c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68d9      	ldr	r1, [r3, #12]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	061a      	lsls	r2, r3, #24
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b8a:	e035      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68d9      	ldr	r1, [r3, #12]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	4403      	add	r3, r0
 8004ba4:	3b1e      	subs	r3, #30
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bb0:	e022      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6919      	ldr	r1, [r3, #16]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	4413      	add	r3, r2
 8004bc6:	2207      	movs	r2, #7
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	43da      	mvns	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	400a      	ands	r2, r1
 8004bd4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6919      	ldr	r1, [r3, #16]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	4618      	mov	r0, r3
 8004be8:	4603      	mov	r3, r0
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	4403      	add	r3, r0
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b06      	cmp	r3, #6
 8004bfe:	d824      	bhi.n	8004c4a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	3b05      	subs	r3, #5
 8004c12:	221f      	movs	r2, #31
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	43da      	mvns	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	400a      	ands	r2, r1
 8004c20:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	4618      	mov	r0, r3
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	3b05      	subs	r3, #5
 8004c3c:	fa00 f203 	lsl.w	r2, r0, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	635a      	str	r2, [r3, #52]	; 0x34
 8004c48:	e04c      	b.n	8004ce4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b0c      	cmp	r3, #12
 8004c50:	d824      	bhi.n	8004c9c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	3b23      	subs	r3, #35	; 0x23
 8004c64:	221f      	movs	r2, #31
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	43da      	mvns	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	400a      	ands	r2, r1
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	4618      	mov	r0, r3
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	3b23      	subs	r3, #35	; 0x23
 8004c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30
 8004c9a:	e023      	b.n	8004ce4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	3b41      	subs	r3, #65	; 0x41
 8004cae:	221f      	movs	r2, #31
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	43da      	mvns	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	400a      	ands	r2, r1
 8004cbc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	4618      	mov	r0, r3
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3b41      	subs	r3, #65	; 0x41
 8004cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a30      	ldr	r2, [pc, #192]	; (8004dac <HAL_ADC_ConfigChannel+0x29c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d10a      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x1f4>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cf6:	d105      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004cf8:	4b2d      	ldr	r3, [pc, #180]	; (8004db0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4a2c      	ldr	r2, [pc, #176]	; (8004db0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004cfe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004d02:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a28      	ldr	r2, [pc, #160]	; (8004dac <HAL_ADC_ConfigChannel+0x29c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d10f      	bne.n	8004d2e <HAL_ADC_ConfigChannel+0x21e>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b12      	cmp	r3, #18
 8004d14:	d10b      	bne.n	8004d2e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004d16:	4b26      	ldr	r3, [pc, #152]	; (8004db0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	4a25      	ldr	r2, [pc, #148]	; (8004db0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d1c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d20:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004d22:	4b23      	ldr	r3, [pc, #140]	; (8004db0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	4a22      	ldr	r2, [pc, #136]	; (8004db0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d2c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a1e      	ldr	r2, [pc, #120]	; (8004dac <HAL_ADC_ConfigChannel+0x29c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d12b      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x280>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1a      	ldr	r2, [pc, #104]	; (8004da8 <HAL_ADC_ConfigChannel+0x298>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d003      	beq.n	8004d4a <HAL_ADC_ConfigChannel+0x23a>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b11      	cmp	r3, #17
 8004d48:	d122      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004d4a:	4b19      	ldr	r3, [pc, #100]	; (8004db0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	4a18      	ldr	r2, [pc, #96]	; (8004db0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d50:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004d54:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004d56:	4b16      	ldr	r3, [pc, #88]	; (8004db0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	4a15      	ldr	r2, [pc, #84]	; (8004db0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d60:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a10      	ldr	r2, [pc, #64]	; (8004da8 <HAL_ADC_ConfigChannel+0x298>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d111      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004d6c:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <HAL_ADC_ConfigChannel+0x2a4>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a11      	ldr	r2, [pc, #68]	; (8004db8 <HAL_ADC_ConfigChannel+0x2a8>)
 8004d72:	fba2 2303 	umull	r2, r3, r2, r3
 8004d76:	0c9a      	lsrs	r2, r3, #18
 8004d78:	4613      	mov	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004d82:	e002      	b.n	8004d8a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1f9      	bne.n	8004d84 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	10000012 	.word	0x10000012
 8004dac:	40012000 	.word	0x40012000
 8004db0:	40012300 	.word	0x40012300
 8004db4:	20000050 	.word	0x20000050
 8004db8:	431bde83 	.word	0x431bde83

08004dbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004dc4:	4b78      	ldr	r3, [pc, #480]	; (8004fa8 <ADC_Init+0x1ec>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	4a77      	ldr	r2, [pc, #476]	; (8004fa8 <ADC_Init+0x1ec>)
 8004dca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004dce:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004dd0:	4b75      	ldr	r3, [pc, #468]	; (8004fa8 <ADC_Init+0x1ec>)
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	4973      	ldr	r1, [pc, #460]	; (8004fa8 <ADC_Init+0x1ec>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6859      	ldr	r1, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	021a      	lsls	r2, r3, #8
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004e10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6859      	ldr	r1, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6899      	ldr	r1, [r3, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	4a58      	ldr	r2, [pc, #352]	; (8004fac <ADC_Init+0x1f0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d022      	beq.n	8004e96 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6899      	ldr	r1, [r3, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6899      	ldr	r1, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	e00f      	b.n	8004eb6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ea4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004eb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0202 	bic.w	r2, r2, #2
 8004ec4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6899      	ldr	r1, [r3, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	005a      	lsls	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01b      	beq.n	8004f1c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004f02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6859      	ldr	r1, [r3, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	035a      	lsls	r2, r3, #13
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	e007      	b.n	8004f2c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	051a      	lsls	r2, r3, #20
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6899      	ldr	r1, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f6e:	025a      	lsls	r2, r3, #9
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6899      	ldr	r1, [r3, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	029a      	lsls	r2, r3, #10
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	609a      	str	r2, [r3, #8]
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	40012300 	.word	0x40012300
 8004fac:	0f000001 	.word	0x0f000001

08004fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <__NVIC_SetPriorityGrouping+0x40>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fcc:	4013      	ands	r3, r2
 8004fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004fd8:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fde:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <__NVIC_SetPriorityGrouping+0x40>)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	60d3      	str	r3, [r2, #12]
}
 8004fe4:	bf00      	nop
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	e000ed00 	.word	0xe000ed00
 8004ff4:	05fa0000 	.word	0x05fa0000

08004ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ffc:	4b04      	ldr	r3, [pc, #16]	; (8005010 <__NVIC_GetPriorityGrouping+0x18>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	0a1b      	lsrs	r3, r3, #8
 8005002:	f003 0307 	and.w	r3, r3, #7
}
 8005006:	4618      	mov	r0, r3
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	e000ed00 	.word	0xe000ed00

08005014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800501e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005022:	2b00      	cmp	r3, #0
 8005024:	db0b      	blt.n	800503e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005026:	79fb      	ldrb	r3, [r7, #7]
 8005028:	f003 021f 	and.w	r2, r3, #31
 800502c:	4907      	ldr	r1, [pc, #28]	; (800504c <__NVIC_EnableIRQ+0x38>)
 800502e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	2001      	movs	r0, #1
 8005036:	fa00 f202 	lsl.w	r2, r0, r2
 800503a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	e000e100 	.word	0xe000e100

08005050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	6039      	str	r1, [r7, #0]
 800505a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800505c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005060:	2b00      	cmp	r3, #0
 8005062:	db0a      	blt.n	800507a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	b2da      	uxtb	r2, r3
 8005068:	490c      	ldr	r1, [pc, #48]	; (800509c <__NVIC_SetPriority+0x4c>)
 800506a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506e:	0112      	lsls	r2, r2, #4
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	440b      	add	r3, r1
 8005074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005078:	e00a      	b.n	8005090 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	4908      	ldr	r1, [pc, #32]	; (80050a0 <__NVIC_SetPriority+0x50>)
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	3b04      	subs	r3, #4
 8005088:	0112      	lsls	r2, r2, #4
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	440b      	add	r3, r1
 800508e:	761a      	strb	r2, [r3, #24]
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	e000e100 	.word	0xe000e100
 80050a0:	e000ed00 	.word	0xe000ed00

080050a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b089      	sub	sp, #36	; 0x24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	f1c3 0307 	rsb	r3, r3, #7
 80050be:	2b04      	cmp	r3, #4
 80050c0:	bf28      	it	cs
 80050c2:	2304      	movcs	r3, #4
 80050c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	3304      	adds	r3, #4
 80050ca:	2b06      	cmp	r3, #6
 80050cc:	d902      	bls.n	80050d4 <NVIC_EncodePriority+0x30>
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	3b03      	subs	r3, #3
 80050d2:	e000      	b.n	80050d6 <NVIC_EncodePriority+0x32>
 80050d4:	2300      	movs	r3, #0
 80050d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050d8:	f04f 32ff 	mov.w	r2, #4294967295
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43da      	mvns	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	401a      	ands	r2, r3
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050ec:	f04f 31ff 	mov.w	r1, #4294967295
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	fa01 f303 	lsl.w	r3, r1, r3
 80050f6:	43d9      	mvns	r1, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050fc:	4313      	orrs	r3, r2
         );
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3724      	adds	r7, #36	; 0x24
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff ff4c 	bl	8004fb0 <__NVIC_SetPriorityGrouping>
}
 8005118:	bf00      	nop
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005132:	f7ff ff61 	bl	8004ff8 <__NVIC_GetPriorityGrouping>
 8005136:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	6978      	ldr	r0, [r7, #20]
 800513e:	f7ff ffb1 	bl	80050a4 <NVIC_EncodePriority>
 8005142:	4602      	mov	r2, r0
 8005144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005148:	4611      	mov	r1, r2
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff ff80 	bl	8005050 <__NVIC_SetPriority>
}
 8005150:	bf00      	nop
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff ff54 	bl	8005014 <__NVIC_EnableIRQ>
}
 800516c:	bf00      	nop
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e014      	b.n	80051b0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	791b      	ldrb	r3, [r3, #4]
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d105      	bne.n	800519c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fe fc7e 	bl	8003a98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ce:	d120      	bne.n	8005212 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051de:	d118      	bne.n	8005212 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2204      	movs	r2, #4
 80051e4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f043 0201 	orr.w	r2, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800520a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f82d 	bl	800526c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800521c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005220:	d120      	bne.n	8005264 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800522c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005230:	d118      	bne.n	8005264 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2204      	movs	r2, #4
 8005236:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f043 0202 	orr.w	r2, r3, #2
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800524c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800525c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f85d 	bl	800531e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	795b      	ldrb	r3, [r3, #5]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_DAC_ConfigChannel+0x18>
 8005294:	2302      	movs	r3, #2
 8005296:	e03c      	b.n	8005312 <HAL_DAC_ConfigChannel+0x92>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2201      	movs	r2, #1
 800529c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2202      	movs	r2, #2
 80052a2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f003 0310 	and.w	r3, r3, #16
 80052b2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80052b6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ba:	43db      	mvns	r3, r3
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4013      	ands	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f003 0310 	and.w	r3, r3, #16
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	fa02 f303 	lsl.w	r3, r2, r3
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6819      	ldr	r1, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	22c0      	movs	r2, #192	; 0xc0
 80052f6:	fa02 f303 	lsl.w	r3, r2, r3
 80052fa:	43da      	mvns	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	400a      	ands	r2, r1
 8005302:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2201      	movs	r2, #1
 8005308:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	371c      	adds	r7, #28
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
	...

08005334 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005340:	f7ff fa0c 	bl	800475c <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e099      	b.n	8005484 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0201 	bic.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005370:	e00f      	b.n	8005392 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005372:	f7ff f9f3 	bl	800475c <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b05      	cmp	r3, #5
 800537e:	d908      	bls.n	8005392 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2203      	movs	r2, #3
 800538a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e078      	b.n	8005484 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1e8      	bne.n	8005372 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4b38      	ldr	r3, [pc, #224]	; (800548c <HAL_DMA_Init+0x158>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d107      	bne.n	80053fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	4313      	orrs	r3, r2
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f023 0307 	bic.w	r3, r3, #7
 8005412:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	2b04      	cmp	r3, #4
 8005424:	d117      	bne.n	8005456 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00e      	beq.n	8005456 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f8df 	bl	80055fc <DMA_CheckFifoParam>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d008      	beq.n	8005456 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2240      	movs	r2, #64	; 0x40
 8005448:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005452:	2301      	movs	r3, #1
 8005454:	e016      	b.n	8005484 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f896 	bl	8005590 <DMA_CalcBaseAndBitshift>
 8005464:	4603      	mov	r3, r0
 8005466:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546c:	223f      	movs	r2, #63	; 0x3f
 800546e:	409a      	lsls	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	f010803f 	.word	0xf010803f

08005490 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e050      	b.n	8005544 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d101      	bne.n	80054b2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80054ae:	2302      	movs	r3, #2
 80054b0:	e048      	b.n	8005544 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0201 	bic.w	r2, r2, #1
 80054c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2200      	movs	r2, #0
 80054d0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2200      	movs	r2, #0
 80054d8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2200      	movs	r2, #0
 80054e0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2200      	movs	r2, #0
 80054e8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2221      	movs	r2, #33	; 0x21
 80054f0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f84c 	bl	8005590 <DMA_CalcBaseAndBitshift>
 80054f8:	4603      	mov	r3, r0
 80054fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005500:	223f      	movs	r2, #63	; 0x3f
 8005502:	409a      	lsls	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d004      	beq.n	800556a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2280      	movs	r2, #128	; 0x80
 8005564:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e00c      	b.n	8005584 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2205      	movs	r2, #5
 800556e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0201 	bic.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	b2db      	uxtb	r3, r3
 800559e:	3b10      	subs	r3, #16
 80055a0:	4a13      	ldr	r2, [pc, #76]	; (80055f0 <DMA_CalcBaseAndBitshift+0x60>)
 80055a2:	fba2 2303 	umull	r2, r3, r2, r3
 80055a6:	091b      	lsrs	r3, r3, #4
 80055a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80055aa:	4a12      	ldr	r2, [pc, #72]	; (80055f4 <DMA_CalcBaseAndBitshift+0x64>)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d908      	bls.n	80055d0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <DMA_CalcBaseAndBitshift+0x68>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	1d1a      	adds	r2, r3, #4
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	659a      	str	r2, [r3, #88]	; 0x58
 80055ce:	e006      	b.n	80055de <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	4b08      	ldr	r3, [pc, #32]	; (80055f8 <DMA_CalcBaseAndBitshift+0x68>)
 80055d8:	4013      	ands	r3, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	aaaaaaab 	.word	0xaaaaaaab
 80055f4:	0801036c 	.word	0x0801036c
 80055f8:	fffffc00 	.word	0xfffffc00

080055fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d11f      	bne.n	8005656 <DMA_CheckFifoParam+0x5a>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b03      	cmp	r3, #3
 800561a:	d856      	bhi.n	80056ca <DMA_CheckFifoParam+0xce>
 800561c:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <DMA_CheckFifoParam+0x28>)
 800561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005622:	bf00      	nop
 8005624:	08005635 	.word	0x08005635
 8005628:	08005647 	.word	0x08005647
 800562c:	08005635 	.word	0x08005635
 8005630:	080056cb 	.word	0x080056cb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d046      	beq.n	80056ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005644:	e043      	b.n	80056ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800564e:	d140      	bne.n	80056d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005654:	e03d      	b.n	80056d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800565e:	d121      	bne.n	80056a4 <DMA_CheckFifoParam+0xa8>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b03      	cmp	r3, #3
 8005664:	d837      	bhi.n	80056d6 <DMA_CheckFifoParam+0xda>
 8005666:	a201      	add	r2, pc, #4	; (adr r2, 800566c <DMA_CheckFifoParam+0x70>)
 8005668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566c:	0800567d 	.word	0x0800567d
 8005670:	08005683 	.word	0x08005683
 8005674:	0800567d 	.word	0x0800567d
 8005678:	08005695 	.word	0x08005695
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	73fb      	strb	r3, [r7, #15]
      break;
 8005680:	e030      	b.n	80056e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d025      	beq.n	80056da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005692:	e022      	b.n	80056da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800569c:	d11f      	bne.n	80056de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80056a2:	e01c      	b.n	80056de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d903      	bls.n	80056b2 <DMA_CheckFifoParam+0xb6>
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d003      	beq.n	80056b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80056b0:	e018      	b.n	80056e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	73fb      	strb	r3, [r7, #15]
      break;
 80056b6:	e015      	b.n	80056e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00e      	beq.n	80056e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	73fb      	strb	r3, [r7, #15]
      break;
 80056c8:	e00b      	b.n	80056e2 <DMA_CheckFifoParam+0xe6>
      break;
 80056ca:	bf00      	nop
 80056cc:	e00a      	b.n	80056e4 <DMA_CheckFifoParam+0xe8>
      break;
 80056ce:	bf00      	nop
 80056d0:	e008      	b.n	80056e4 <DMA_CheckFifoParam+0xe8>
      break;
 80056d2:	bf00      	nop
 80056d4:	e006      	b.n	80056e4 <DMA_CheckFifoParam+0xe8>
      break;
 80056d6:	bf00      	nop
 80056d8:	e004      	b.n	80056e4 <DMA_CheckFifoParam+0xe8>
      break;
 80056da:	bf00      	nop
 80056dc:	e002      	b.n	80056e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80056de:	bf00      	nop
 80056e0:	e000      	b.n	80056e4 <DMA_CheckFifoParam+0xe8>
      break;
 80056e2:	bf00      	nop
    }
  } 
  
  return status; 
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop

080056f4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e039      	b.n	800577a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fe fa04 	bl	8003b28 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005744:	f023 0107 	bic.w	r1, r3, #7
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800575a:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <HAL_DMA2D_Init+0x90>)
 800575c:	4013      	ands	r3, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	68d1      	ldr	r1, [r2, #12]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6812      	ldr	r2, [r2, #0]
 8005766:	430b      	orrs	r3, r1
 8005768:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	ffffc000 	.word	0xffffc000

08005788 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af02      	add	r7, sp, #8
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_DMA2D_Start+0x1c>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e018      	b.n	80057d6 <HAL_DMA2D_Start+0x4e>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 fa98 	bl	8005cf4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b086      	sub	sp, #24
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d056      	beq.n	80058a8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80057fa:	f7fe ffaf 	bl	800475c <HAL_GetTick>
 80057fe:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005800:	e04b      	b.n	800589a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005810:	2b00      	cmp	r3, #0
 8005812:	d023      	beq.n	800585c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d005      	beq.n	800582a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005822:	f043 0202 	orr.w	r2, r3, #2
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d005      	beq.n	8005840 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005838:	f043 0201 	orr.w	r2, r3, #1
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2221      	movs	r2, #33	; 0x21
 8005846:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2204      	movs	r2, #4
 800584c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0a5      	b.n	80059a8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005862:	d01a      	beq.n	800589a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005864:	f7fe ff7a 	bl	800475c <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d302      	bcc.n	800587a <HAL_DMA2D_PollForTransfer+0x9c>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10f      	bne.n	800589a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587e:	f043 0220 	orr.w	r2, r3, #32
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2203      	movs	r2, #3
 800588a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e086      	b.n	80059a8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0ac      	beq.n	8005802 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d061      	beq.n	800598e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80058ca:	f7fe ff47 	bl	800475c <HAL_GetTick>
 80058ce:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80058d0:	e056      	b.n	8005980 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d02e      	beq.n	8005942 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d005      	beq.n	80058fa <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f2:	f043 0204 	orr.w	r2, r3, #4
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f003 0320 	and.w	r3, r3, #32
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005908:	f043 0202 	orr.w	r2, r3, #2
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591e:	f043 0201 	orr.w	r2, r3, #1
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2229      	movs	r2, #41	; 0x29
 800592c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2204      	movs	r2, #4
 8005932:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e032      	b.n	80059a8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005948:	d01a      	beq.n	8005980 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800594a:	f7fe ff07 	bl	800475c <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d302      	bcc.n	8005960 <HAL_DMA2D_PollForTransfer+0x182>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10f      	bne.n	8005980 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005964:	f043 0220 	orr.w	r2, r3, #32
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2203      	movs	r2, #3
 8005970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e013      	b.n	80059a8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f003 0310 	and.w	r3, r3, #16
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0a1      	beq.n	80058d2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2212      	movs	r2, #18
 8005994:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d026      	beq.n	8005a20 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d021      	beq.n	8005a20 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059ea:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f0:	f043 0201 	orr.w	r2, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2201      	movs	r2, #1
 80059fe:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2204      	movs	r2, #4
 8005a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d026      	beq.n	8005a78 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d021      	beq.n	8005a78 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a42:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a50:	f043 0202 	orr.w	r2, r3, #2
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2204      	movs	r2, #4
 8005a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d026      	beq.n	8005ad0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d021      	beq.n	8005ad0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a9a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2208      	movs	r2, #8
 8005aa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa8:	f043 0204 	orr.w	r2, r3, #4
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f003 0304 	and.w	r3, r3, #4
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d013      	beq.n	8005b02 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00e      	beq.n	8005b02 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2204      	movs	r2, #4
 8005afa:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f853 	bl	8005ba8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d024      	beq.n	8005b56 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d01f      	beq.n	8005b56 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b24:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d01f      	beq.n	8005ba0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d01a      	beq.n	8005ba0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b78:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2210      	movs	r2, #16
 8005b80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f80e 	bl	8005bbc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005ba0:	bf00      	nop
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_DMA2D_ConfigLayer+0x20>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e079      	b.n	8005ce4 <HAL_DMA2D_ConfigLayer+0x114>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	3318      	adds	r3, #24
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	4413      	add	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	041b      	lsls	r3, r3, #16
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005c1a:	4b35      	ldr	r3, [pc, #212]	; (8005cf0 <HAL_DMA2D_ConfigLayer+0x120>)
 8005c1c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2b0a      	cmp	r3, #10
 8005c24:	d003      	beq.n	8005c2e <HAL_DMA2D_ConfigLayer+0x5e>
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	2b09      	cmp	r3, #9
 8005c2c:	d107      	bne.n	8005c3e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	e005      	b.n	8005c4a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	061b      	lsls	r3, r3, #24
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d120      	bne.n	8005c92 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	ea02 0103 	and.w	r1, r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	6812      	ldr	r2, [r2, #0]
 8005c70:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b0a      	cmp	r3, #10
 8005c78:	d003      	beq.n	8005c82 <HAL_DMA2D_ConfigLayer+0xb2>
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b09      	cmp	r3, #9
 8005c80:	d127      	bne.n	8005cd2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005c8e:	629a      	str	r2, [r3, #40]	; 0x28
 8005c90:	e01f      	b.n	8005cd2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	43db      	mvns	r3, r3
 8005c9c:	ea02 0103 	and.w	r1, r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	6812      	ldr	r2, [r2, #0]
 8005cb2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2b0a      	cmp	r3, #10
 8005cba:	d003      	beq.n	8005cc4 <HAL_DMA2D_ConfigLayer+0xf4>
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b09      	cmp	r3, #9
 8005cc2:	d106      	bne.n	8005cd2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005cd0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	371c      	adds	r7, #28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	ff03000f 	.word	0xff03000f

08005cf4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b08b      	sub	sp, #44	; 0x2c
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d08:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	041a      	lsls	r2, r3, #16
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	431a      	orrs	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d2c:	d174      	bne.n	8005e18 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005d34:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d3c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005d44:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d108      	bne.n	8005d66 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
 8005d64:	e053      	b.n	8005e0e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d106      	bne.n	8005d7c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
 8005d7a:	e048      	b.n	8005e0e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d111      	bne.n	8005da8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	0cdb      	lsrs	r3, r3, #19
 8005d88:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	0a9b      	lsrs	r3, r3, #10
 8005d8e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	08db      	lsrs	r3, r3, #3
 8005d94:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	02db      	lsls	r3, r3, #11
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
 8005da6:	e032      	b.n	8005e0e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d117      	bne.n	8005de0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	0fdb      	lsrs	r3, r3, #31
 8005db4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	0cdb      	lsrs	r3, r3, #19
 8005dba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	0adb      	lsrs	r3, r3, #11
 8005dc0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	08db      	lsrs	r3, r3, #3
 8005dc6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	029b      	lsls	r3, r3, #10
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	03db      	lsls	r3, r3, #15
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dde:	e016      	b.n	8005e0e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	0f1b      	lsrs	r3, r3, #28
 8005de4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	0d1b      	lsrs	r3, r3, #20
 8005dea:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	0b1b      	lsrs	r3, r3, #12
 8005df0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	091b      	lsrs	r3, r3, #4
 8005df6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	011a      	lsls	r2, r3, #4
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	021b      	lsls	r3, r3, #8
 8005e00:	431a      	orrs	r2, r3
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	031b      	lsls	r3, r3, #12
 8005e06:	4313      	orrs	r3, r2
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e14:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005e16:	e003      	b.n	8005e20 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	60da      	str	r2, [r3, #12]
}
 8005e20:	bf00      	nop
 8005e22:	372c      	adds	r7, #44	; 0x2c
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b089      	sub	sp, #36	; 0x24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005e36:	2300      	movs	r3, #0
 8005e38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005e42:	2300      	movs	r3, #0
 8005e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005e46:	2300      	movs	r3, #0
 8005e48:	61fb      	str	r3, [r7, #28]
 8005e4a:	e175      	b.n	8006138 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	f040 8164 	bne.w	8006132 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f003 0303 	and.w	r3, r3, #3
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d005      	beq.n	8005e82 <HAL_GPIO_Init+0x56>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d130      	bne.n	8005ee4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	2203      	movs	r2, #3
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	43db      	mvns	r3, r3
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	4013      	ands	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005eb8:	2201      	movs	r2, #1
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec0:	43db      	mvns	r3, r3
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	091b      	lsrs	r3, r3, #4
 8005ece:	f003 0201 	and.w	r2, r3, #1
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f003 0303 	and.w	r3, r3, #3
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d017      	beq.n	8005f20 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	2203      	movs	r2, #3
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	43db      	mvns	r3, r3
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	4013      	ands	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	fa02 f303 	lsl.w	r3, r2, r3
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f003 0303 	and.w	r3, r3, #3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d123      	bne.n	8005f74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	08da      	lsrs	r2, r3, #3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3208      	adds	r2, #8
 8005f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	220f      	movs	r2, #15
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	691a      	ldr	r2, [r3, #16]
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	08da      	lsrs	r2, r3, #3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3208      	adds	r2, #8
 8005f6e:	69b9      	ldr	r1, [r7, #24]
 8005f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	2203      	movs	r2, #3
 8005f80:	fa02 f303 	lsl.w	r3, r2, r3
 8005f84:	43db      	mvns	r3, r3
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f003 0203 	and.w	r2, r3, #3
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 80be 	beq.w	8006132 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fb6:	4b66      	ldr	r3, [pc, #408]	; (8006150 <HAL_GPIO_Init+0x324>)
 8005fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fba:	4a65      	ldr	r2, [pc, #404]	; (8006150 <HAL_GPIO_Init+0x324>)
 8005fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8005fc2:	4b63      	ldr	r3, [pc, #396]	; (8006150 <HAL_GPIO_Init+0x324>)
 8005fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005fce:	4a61      	ldr	r2, [pc, #388]	; (8006154 <HAL_GPIO_Init+0x328>)
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	089b      	lsrs	r3, r3, #2
 8005fd4:	3302      	adds	r3, #2
 8005fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	220f      	movs	r2, #15
 8005fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fea:	43db      	mvns	r3, r3
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a58      	ldr	r2, [pc, #352]	; (8006158 <HAL_GPIO_Init+0x32c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d037      	beq.n	800606a <HAL_GPIO_Init+0x23e>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a57      	ldr	r2, [pc, #348]	; (800615c <HAL_GPIO_Init+0x330>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d031      	beq.n	8006066 <HAL_GPIO_Init+0x23a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a56      	ldr	r2, [pc, #344]	; (8006160 <HAL_GPIO_Init+0x334>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d02b      	beq.n	8006062 <HAL_GPIO_Init+0x236>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a55      	ldr	r2, [pc, #340]	; (8006164 <HAL_GPIO_Init+0x338>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d025      	beq.n	800605e <HAL_GPIO_Init+0x232>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a54      	ldr	r2, [pc, #336]	; (8006168 <HAL_GPIO_Init+0x33c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01f      	beq.n	800605a <HAL_GPIO_Init+0x22e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a53      	ldr	r2, [pc, #332]	; (800616c <HAL_GPIO_Init+0x340>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d019      	beq.n	8006056 <HAL_GPIO_Init+0x22a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a52      	ldr	r2, [pc, #328]	; (8006170 <HAL_GPIO_Init+0x344>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d013      	beq.n	8006052 <HAL_GPIO_Init+0x226>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a51      	ldr	r2, [pc, #324]	; (8006174 <HAL_GPIO_Init+0x348>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00d      	beq.n	800604e <HAL_GPIO_Init+0x222>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a50      	ldr	r2, [pc, #320]	; (8006178 <HAL_GPIO_Init+0x34c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d007      	beq.n	800604a <HAL_GPIO_Init+0x21e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a4f      	ldr	r2, [pc, #316]	; (800617c <HAL_GPIO_Init+0x350>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d101      	bne.n	8006046 <HAL_GPIO_Init+0x21a>
 8006042:	2309      	movs	r3, #9
 8006044:	e012      	b.n	800606c <HAL_GPIO_Init+0x240>
 8006046:	230a      	movs	r3, #10
 8006048:	e010      	b.n	800606c <HAL_GPIO_Init+0x240>
 800604a:	2308      	movs	r3, #8
 800604c:	e00e      	b.n	800606c <HAL_GPIO_Init+0x240>
 800604e:	2307      	movs	r3, #7
 8006050:	e00c      	b.n	800606c <HAL_GPIO_Init+0x240>
 8006052:	2306      	movs	r3, #6
 8006054:	e00a      	b.n	800606c <HAL_GPIO_Init+0x240>
 8006056:	2305      	movs	r3, #5
 8006058:	e008      	b.n	800606c <HAL_GPIO_Init+0x240>
 800605a:	2304      	movs	r3, #4
 800605c:	e006      	b.n	800606c <HAL_GPIO_Init+0x240>
 800605e:	2303      	movs	r3, #3
 8006060:	e004      	b.n	800606c <HAL_GPIO_Init+0x240>
 8006062:	2302      	movs	r3, #2
 8006064:	e002      	b.n	800606c <HAL_GPIO_Init+0x240>
 8006066:	2301      	movs	r3, #1
 8006068:	e000      	b.n	800606c <HAL_GPIO_Init+0x240>
 800606a:	2300      	movs	r3, #0
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	f002 0203 	and.w	r2, r2, #3
 8006072:	0092      	lsls	r2, r2, #2
 8006074:	4093      	lsls	r3, r2
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	4313      	orrs	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800607c:	4935      	ldr	r1, [pc, #212]	; (8006154 <HAL_GPIO_Init+0x328>)
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	089b      	lsrs	r3, r3, #2
 8006082:	3302      	adds	r3, #2
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800608a:	4b3d      	ldr	r3, [pc, #244]	; (8006180 <HAL_GPIO_Init+0x354>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	43db      	mvns	r3, r3
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	4013      	ands	r3, r2
 8006098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060ae:	4a34      	ldr	r2, [pc, #208]	; (8006180 <HAL_GPIO_Init+0x354>)
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060b4:	4b32      	ldr	r3, [pc, #200]	; (8006180 <HAL_GPIO_Init+0x354>)
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	43db      	mvns	r3, r3
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	4013      	ands	r3, r2
 80060c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80060d8:	4a29      	ldr	r2, [pc, #164]	; (8006180 <HAL_GPIO_Init+0x354>)
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80060de:	4b28      	ldr	r3, [pc, #160]	; (8006180 <HAL_GPIO_Init+0x354>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	43db      	mvns	r3, r3
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	4013      	ands	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006102:	4a1f      	ldr	r2, [pc, #124]	; (8006180 <HAL_GPIO_Init+0x354>)
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006108:	4b1d      	ldr	r3, [pc, #116]	; (8006180 <HAL_GPIO_Init+0x354>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	43db      	mvns	r3, r3
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	4013      	ands	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800612c:	4a14      	ldr	r2, [pc, #80]	; (8006180 <HAL_GPIO_Init+0x354>)
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	3301      	adds	r3, #1
 8006136:	61fb      	str	r3, [r7, #28]
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	2b0f      	cmp	r3, #15
 800613c:	f67f ae86 	bls.w	8005e4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006140:	bf00      	nop
 8006142:	bf00      	nop
 8006144:	3724      	adds	r7, #36	; 0x24
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40023800 	.word	0x40023800
 8006154:	40013800 	.word	0x40013800
 8006158:	40020000 	.word	0x40020000
 800615c:	40020400 	.word	0x40020400
 8006160:	40020800 	.word	0x40020800
 8006164:	40020c00 	.word	0x40020c00
 8006168:	40021000 	.word	0x40021000
 800616c:	40021400 	.word	0x40021400
 8006170:	40021800 	.word	0x40021800
 8006174:	40021c00 	.word	0x40021c00
 8006178:	40022000 	.word	0x40022000
 800617c:	40022400 	.word	0x40022400
 8006180:	40013c00 	.word	0x40013c00

08006184 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800618e:	2300      	movs	r3, #0
 8006190:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006196:	2300      	movs	r3, #0
 8006198:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800619a:	2300      	movs	r3, #0
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	e0d9      	b.n	8006354 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80061a0:	2201      	movs	r2, #1
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	4013      	ands	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	f040 80c9 	bne.w	800634e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80061bc:	4a6b      	ldr	r2, [pc, #428]	; (800636c <HAL_GPIO_DeInit+0x1e8>)
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	089b      	lsrs	r3, r3, #2
 80061c2:	3302      	adds	r3, #2
 80061c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	220f      	movs	r2, #15
 80061d4:	fa02 f303 	lsl.w	r3, r2, r3
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	4013      	ands	r3, r2
 80061dc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a63      	ldr	r2, [pc, #396]	; (8006370 <HAL_GPIO_DeInit+0x1ec>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d037      	beq.n	8006256 <HAL_GPIO_DeInit+0xd2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a62      	ldr	r2, [pc, #392]	; (8006374 <HAL_GPIO_DeInit+0x1f0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d031      	beq.n	8006252 <HAL_GPIO_DeInit+0xce>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a61      	ldr	r2, [pc, #388]	; (8006378 <HAL_GPIO_DeInit+0x1f4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d02b      	beq.n	800624e <HAL_GPIO_DeInit+0xca>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a60      	ldr	r2, [pc, #384]	; (800637c <HAL_GPIO_DeInit+0x1f8>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d025      	beq.n	800624a <HAL_GPIO_DeInit+0xc6>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a5f      	ldr	r2, [pc, #380]	; (8006380 <HAL_GPIO_DeInit+0x1fc>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d01f      	beq.n	8006246 <HAL_GPIO_DeInit+0xc2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a5e      	ldr	r2, [pc, #376]	; (8006384 <HAL_GPIO_DeInit+0x200>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d019      	beq.n	8006242 <HAL_GPIO_DeInit+0xbe>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a5d      	ldr	r2, [pc, #372]	; (8006388 <HAL_GPIO_DeInit+0x204>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d013      	beq.n	800623e <HAL_GPIO_DeInit+0xba>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a5c      	ldr	r2, [pc, #368]	; (800638c <HAL_GPIO_DeInit+0x208>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00d      	beq.n	800623a <HAL_GPIO_DeInit+0xb6>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a5b      	ldr	r2, [pc, #364]	; (8006390 <HAL_GPIO_DeInit+0x20c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d007      	beq.n	8006236 <HAL_GPIO_DeInit+0xb2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a5a      	ldr	r2, [pc, #360]	; (8006394 <HAL_GPIO_DeInit+0x210>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d101      	bne.n	8006232 <HAL_GPIO_DeInit+0xae>
 800622e:	2309      	movs	r3, #9
 8006230:	e012      	b.n	8006258 <HAL_GPIO_DeInit+0xd4>
 8006232:	230a      	movs	r3, #10
 8006234:	e010      	b.n	8006258 <HAL_GPIO_DeInit+0xd4>
 8006236:	2308      	movs	r3, #8
 8006238:	e00e      	b.n	8006258 <HAL_GPIO_DeInit+0xd4>
 800623a:	2307      	movs	r3, #7
 800623c:	e00c      	b.n	8006258 <HAL_GPIO_DeInit+0xd4>
 800623e:	2306      	movs	r3, #6
 8006240:	e00a      	b.n	8006258 <HAL_GPIO_DeInit+0xd4>
 8006242:	2305      	movs	r3, #5
 8006244:	e008      	b.n	8006258 <HAL_GPIO_DeInit+0xd4>
 8006246:	2304      	movs	r3, #4
 8006248:	e006      	b.n	8006258 <HAL_GPIO_DeInit+0xd4>
 800624a:	2303      	movs	r3, #3
 800624c:	e004      	b.n	8006258 <HAL_GPIO_DeInit+0xd4>
 800624e:	2302      	movs	r3, #2
 8006250:	e002      	b.n	8006258 <HAL_GPIO_DeInit+0xd4>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <HAL_GPIO_DeInit+0xd4>
 8006256:	2300      	movs	r3, #0
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	f002 0203 	and.w	r2, r2, #3
 800625e:	0092      	lsls	r2, r2, #2
 8006260:	4093      	lsls	r3, r2
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	429a      	cmp	r2, r3
 8006266:	d132      	bne.n	80062ce <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006268:	4b4b      	ldr	r3, [pc, #300]	; (8006398 <HAL_GPIO_DeInit+0x214>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	43db      	mvns	r3, r3
 8006270:	4949      	ldr	r1, [pc, #292]	; (8006398 <HAL_GPIO_DeInit+0x214>)
 8006272:	4013      	ands	r3, r2
 8006274:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006276:	4b48      	ldr	r3, [pc, #288]	; (8006398 <HAL_GPIO_DeInit+0x214>)
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	43db      	mvns	r3, r3
 800627e:	4946      	ldr	r1, [pc, #280]	; (8006398 <HAL_GPIO_DeInit+0x214>)
 8006280:	4013      	ands	r3, r2
 8006282:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006284:	4b44      	ldr	r3, [pc, #272]	; (8006398 <HAL_GPIO_DeInit+0x214>)
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	43db      	mvns	r3, r3
 800628c:	4942      	ldr	r1, [pc, #264]	; (8006398 <HAL_GPIO_DeInit+0x214>)
 800628e:	4013      	ands	r3, r2
 8006290:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006292:	4b41      	ldr	r3, [pc, #260]	; (8006398 <HAL_GPIO_DeInit+0x214>)
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	43db      	mvns	r3, r3
 800629a:	493f      	ldr	r1, [pc, #252]	; (8006398 <HAL_GPIO_DeInit+0x214>)
 800629c:	4013      	ands	r3, r2
 800629e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	220f      	movs	r2, #15
 80062aa:	fa02 f303 	lsl.w	r3, r2, r3
 80062ae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80062b0:	4a2e      	ldr	r2, [pc, #184]	; (800636c <HAL_GPIO_DeInit+0x1e8>)
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	089b      	lsrs	r3, r3, #2
 80062b6:	3302      	adds	r3, #2
 80062b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	43da      	mvns	r2, r3
 80062c0:	482a      	ldr	r0, [pc, #168]	; (800636c <HAL_GPIO_DeInit+0x1e8>)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	089b      	lsrs	r3, r3, #2
 80062c6:	400a      	ands	r2, r1
 80062c8:	3302      	adds	r3, #2
 80062ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	2103      	movs	r1, #3
 80062d8:	fa01 f303 	lsl.w	r3, r1, r3
 80062dc:	43db      	mvns	r3, r3
 80062de:	401a      	ands	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	08da      	lsrs	r2, r3, #3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3208      	adds	r2, #8
 80062ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	220f      	movs	r2, #15
 80062fa:	fa02 f303 	lsl.w	r3, r2, r3
 80062fe:	43db      	mvns	r3, r3
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	08d2      	lsrs	r2, r2, #3
 8006304:	4019      	ands	r1, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3208      	adds	r2, #8
 800630a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	2103      	movs	r1, #3
 8006318:	fa01 f303 	lsl.w	r3, r1, r3
 800631c:	43db      	mvns	r3, r3
 800631e:	401a      	ands	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	2101      	movs	r1, #1
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	fa01 f303 	lsl.w	r3, r1, r3
 8006330:	43db      	mvns	r3, r3
 8006332:	401a      	ands	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689a      	ldr	r2, [r3, #8]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	2103      	movs	r1, #3
 8006342:	fa01 f303 	lsl.w	r3, r1, r3
 8006346:	43db      	mvns	r3, r3
 8006348:	401a      	ands	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	3301      	adds	r3, #1
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	2b0f      	cmp	r3, #15
 8006358:	f67f af22 	bls.w	80061a0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800635c:	bf00      	nop
 800635e:	bf00      	nop
 8006360:	371c      	adds	r7, #28
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	40013800 	.word	0x40013800
 8006370:	40020000 	.word	0x40020000
 8006374:	40020400 	.word	0x40020400
 8006378:	40020800 	.word	0x40020800
 800637c:	40020c00 	.word	0x40020c00
 8006380:	40021000 	.word	0x40021000
 8006384:	40021400 	.word	0x40021400
 8006388:	40021800 	.word	0x40021800
 800638c:	40021c00 	.word	0x40021c00
 8006390:	40022000 	.word	0x40022000
 8006394:	40022400 	.word	0x40022400
 8006398:	40013c00 	.word	0x40013c00

0800639c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	807b      	strh	r3, [r7, #2]
 80063a8:	4613      	mov	r3, r2
 80063aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063ac:	787b      	ldrb	r3, [r7, #1]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063b2:	887a      	ldrh	r2, [r7, #2]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80063b8:	e003      	b.n	80063c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80063ba:	887b      	ldrh	r3, [r7, #2]
 80063bc:	041a      	lsls	r2, r3, #16
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	619a      	str	r2, [r3, #24]
}
 80063c2:	bf00      	nop
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b085      	sub	sp, #20
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	460b      	mov	r3, r1
 80063d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80063e0:	887a      	ldrh	r2, [r7, #2]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4013      	ands	r3, r2
 80063e6:	041a      	lsls	r2, r3, #16
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	43d9      	mvns	r1, r3
 80063ec:	887b      	ldrh	r3, [r7, #2]
 80063ee:	400b      	ands	r3, r1
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	619a      	str	r2, [r3, #24]
}
 80063f6:	bf00      	nop
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
	...

08006404 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	4603      	mov	r3, r0
 800640c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800640e:	4b08      	ldr	r3, [pc, #32]	; (8006430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006410:	695a      	ldr	r2, [r3, #20]
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	4013      	ands	r3, r2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d006      	beq.n	8006428 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800641a:	4a05      	ldr	r2, [pc, #20]	; (8006430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800641c:	88fb      	ldrh	r3, [r7, #6]
 800641e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006420:	88fb      	ldrh	r3, [r7, #6]
 8006422:	4618      	mov	r0, r3
 8006424:	f7fb fcbe 	bl	8001da4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006428:	bf00      	nop
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40013c00 	.word	0x40013c00

08006434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e07f      	b.n	8006546 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d106      	bne.n	8006460 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fd fb8a 	bl	8003b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2224      	movs	r2, #36	; 0x24
 8006464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0201 	bic.w	r2, r2, #1
 8006476:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006484:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006494:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d107      	bne.n	80064ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064aa:	609a      	str	r2, [r3, #8]
 80064ac:	e006      	b.n	80064bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80064ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d104      	bne.n	80064ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6859      	ldr	r1, [r3, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	4b1d      	ldr	r3, [pc, #116]	; (8006550 <HAL_I2C_Init+0x11c>)
 80064da:	430b      	orrs	r3, r1
 80064dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691a      	ldr	r2, [r3, #16]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	69d9      	ldr	r1, [r3, #28]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a1a      	ldr	r2, [r3, #32]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0201 	orr.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2220      	movs	r2, #32
 8006532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	02008000 	.word	0x02008000

08006554 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e021      	b.n	80065aa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2224      	movs	r2, #36	; 0x24
 800656a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0201 	bic.w	r2, r2, #1
 800657c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7fd fba0 	bl	8003cc4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
	...

080065b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af02      	add	r7, sp, #8
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	4608      	mov	r0, r1
 80065be:	4611      	mov	r1, r2
 80065c0:	461a      	mov	r2, r3
 80065c2:	4603      	mov	r3, r0
 80065c4:	817b      	strh	r3, [r7, #10]
 80065c6:	460b      	mov	r3, r1
 80065c8:	813b      	strh	r3, [r7, #8]
 80065ca:	4613      	mov	r3, r2
 80065cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b20      	cmp	r3, #32
 80065d8:	f040 80f9 	bne.w	80067ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <HAL_I2C_Mem_Write+0x34>
 80065e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d105      	bne.n	80065f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e0ed      	b.n	80067d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d101      	bne.n	8006602 <HAL_I2C_Mem_Write+0x4e>
 80065fe:	2302      	movs	r3, #2
 8006600:	e0e6      	b.n	80067d0 <HAL_I2C_Mem_Write+0x21c>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800660a:	f7fe f8a7 	bl	800475c <HAL_GetTick>
 800660e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	2319      	movs	r3, #25
 8006616:	2201      	movs	r2, #1
 8006618:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 fad1 	bl	8006bc4 <I2C_WaitOnFlagUntilTimeout>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e0d1      	b.n	80067d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2221      	movs	r2, #33	; 0x21
 8006630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2240      	movs	r2, #64	; 0x40
 8006638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a3a      	ldr	r2, [r7, #32]
 8006646:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800664c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006654:	88f8      	ldrh	r0, [r7, #6]
 8006656:	893a      	ldrh	r2, [r7, #8]
 8006658:	8979      	ldrh	r1, [r7, #10]
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	9301      	str	r3, [sp, #4]
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	4603      	mov	r3, r0
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 f9e1 	bl	8006a2c <I2C_RequestMemoryWrite>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d005      	beq.n	800667c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e0a9      	b.n	80067d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006680:	b29b      	uxth	r3, r3
 8006682:	2bff      	cmp	r3, #255	; 0xff
 8006684:	d90e      	bls.n	80066a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	22ff      	movs	r2, #255	; 0xff
 800668a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006690:	b2da      	uxtb	r2, r3
 8006692:	8979      	ldrh	r1, [r7, #10]
 8006694:	2300      	movs	r3, #0
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 fc39 	bl	8006f14 <I2C_TransferConfig>
 80066a2:	e00f      	b.n	80066c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	8979      	ldrh	r1, [r7, #10]
 80066b6:	2300      	movs	r3, #0
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 fc28 	bl	8006f14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 fabb 	bl	8006c44 <I2C_WaitOnTXISFlagUntilTimeout>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e07b      	b.n	80067d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	781a      	ldrb	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d034      	beq.n	800677c <HAL_I2C_Mem_Write+0x1c8>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006716:	2b00      	cmp	r3, #0
 8006718:	d130      	bne.n	800677c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	2200      	movs	r2, #0
 8006722:	2180      	movs	r1, #128	; 0x80
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 fa4d 	bl	8006bc4 <I2C_WaitOnFlagUntilTimeout>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e04d      	b.n	80067d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006738:	b29b      	uxth	r3, r3
 800673a:	2bff      	cmp	r3, #255	; 0xff
 800673c:	d90e      	bls.n	800675c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	22ff      	movs	r2, #255	; 0xff
 8006742:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006748:	b2da      	uxtb	r2, r3
 800674a:	8979      	ldrh	r1, [r7, #10]
 800674c:	2300      	movs	r3, #0
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 fbdd 	bl	8006f14 <I2C_TransferConfig>
 800675a:	e00f      	b.n	800677c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006760:	b29a      	uxth	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800676a:	b2da      	uxtb	r2, r3
 800676c:	8979      	ldrh	r1, [r7, #10]
 800676e:	2300      	movs	r3, #0
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 fbcc 	bl	8006f14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d19e      	bne.n	80066c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 fa9a 	bl	8006cc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e01a      	b.n	80067d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2220      	movs	r2, #32
 80067a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6859      	ldr	r1, [r3, #4]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	4b0a      	ldr	r3, [pc, #40]	; (80067d8 <HAL_I2C_Mem_Write+0x224>)
 80067ae:	400b      	ands	r3, r1
 80067b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2220      	movs	r2, #32
 80067b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	e000      	b.n	80067d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80067ce:	2302      	movs	r3, #2
  }
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	fe00e800 	.word	0xfe00e800

080067dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af02      	add	r7, sp, #8
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	4608      	mov	r0, r1
 80067e6:	4611      	mov	r1, r2
 80067e8:	461a      	mov	r2, r3
 80067ea:	4603      	mov	r3, r0
 80067ec:	817b      	strh	r3, [r7, #10]
 80067ee:	460b      	mov	r3, r1
 80067f0:	813b      	strh	r3, [r7, #8]
 80067f2:	4613      	mov	r3, r2
 80067f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b20      	cmp	r3, #32
 8006800:	f040 80fd 	bne.w	80069fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <HAL_I2C_Mem_Read+0x34>
 800680a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	d105      	bne.n	800681c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006816:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e0f1      	b.n	8006a00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006822:	2b01      	cmp	r3, #1
 8006824:	d101      	bne.n	800682a <HAL_I2C_Mem_Read+0x4e>
 8006826:	2302      	movs	r3, #2
 8006828:	e0ea      	b.n	8006a00 <HAL_I2C_Mem_Read+0x224>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006832:	f7fd ff93 	bl	800475c <HAL_GetTick>
 8006836:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	2319      	movs	r3, #25
 800683e:	2201      	movs	r2, #1
 8006840:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f9bd 	bl	8006bc4 <I2C_WaitOnFlagUntilTimeout>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e0d5      	b.n	8006a00 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2222      	movs	r2, #34	; 0x22
 8006858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2240      	movs	r2, #64	; 0x40
 8006860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a3a      	ldr	r2, [r7, #32]
 800686e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006874:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800687c:	88f8      	ldrh	r0, [r7, #6]
 800687e:	893a      	ldrh	r2, [r7, #8]
 8006880:	8979      	ldrh	r1, [r7, #10]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	9301      	str	r3, [sp, #4]
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	4603      	mov	r3, r0
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 f921 	bl	8006ad4 <I2C_RequestMemoryRead>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d005      	beq.n	80068a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e0ad      	b.n	8006a00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2bff      	cmp	r3, #255	; 0xff
 80068ac:	d90e      	bls.n	80068cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	22ff      	movs	r2, #255	; 0xff
 80068b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	8979      	ldrh	r1, [r7, #10]
 80068bc:	4b52      	ldr	r3, [pc, #328]	; (8006a08 <HAL_I2C_Mem_Read+0x22c>)
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 fb25 	bl	8006f14 <I2C_TransferConfig>
 80068ca:	e00f      	b.n	80068ec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	8979      	ldrh	r1, [r7, #10]
 80068de:	4b4a      	ldr	r3, [pc, #296]	; (8006a08 <HAL_I2C_Mem_Read+0x22c>)
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 fb14 	bl	8006f14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f2:	2200      	movs	r2, #0
 80068f4:	2104      	movs	r1, #4
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 f964 	bl	8006bc4 <I2C_WaitOnFlagUntilTimeout>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e07c      	b.n	8006a00 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	b2d2      	uxtb	r2, r2
 8006912:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006922:	3b01      	subs	r3, #1
 8006924:	b29a      	uxth	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692e:	b29b      	uxth	r3, r3
 8006930:	3b01      	subs	r3, #1
 8006932:	b29a      	uxth	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d034      	beq.n	80069ac <HAL_I2C_Mem_Read+0x1d0>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006946:	2b00      	cmp	r3, #0
 8006948:	d130      	bne.n	80069ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006950:	2200      	movs	r2, #0
 8006952:	2180      	movs	r1, #128	; 0x80
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 f935 	bl	8006bc4 <I2C_WaitOnFlagUntilTimeout>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e04d      	b.n	8006a00 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006968:	b29b      	uxth	r3, r3
 800696a:	2bff      	cmp	r3, #255	; 0xff
 800696c:	d90e      	bls.n	800698c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	22ff      	movs	r2, #255	; 0xff
 8006972:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006978:	b2da      	uxtb	r2, r3
 800697a:	8979      	ldrh	r1, [r7, #10]
 800697c:	2300      	movs	r3, #0
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 fac5 	bl	8006f14 <I2C_TransferConfig>
 800698a:	e00f      	b.n	80069ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006990:	b29a      	uxth	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699a:	b2da      	uxtb	r2, r3
 800699c:	8979      	ldrh	r1, [r7, #10]
 800699e:	2300      	movs	r3, #0
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 fab4 	bl	8006f14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d19a      	bne.n	80068ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 f982 	bl	8006cc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e01a      	b.n	8006a00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2220      	movs	r2, #32
 80069d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6859      	ldr	r1, [r3, #4]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	4b0b      	ldr	r3, [pc, #44]	; (8006a0c <HAL_I2C_Mem_Read+0x230>)
 80069de:	400b      	ands	r3, r1
 80069e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	e000      	b.n	8006a00 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80069fe:	2302      	movs	r3, #2
  }
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	80002400 	.word	0x80002400
 8006a0c:	fe00e800 	.word	0xfe00e800

08006a10 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a1e:	b2db      	uxtb	r3, r3
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af02      	add	r7, sp, #8
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	4608      	mov	r0, r1
 8006a36:	4611      	mov	r1, r2
 8006a38:	461a      	mov	r2, r3
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	817b      	strh	r3, [r7, #10]
 8006a3e:	460b      	mov	r3, r1
 8006a40:	813b      	strh	r3, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006a46:	88fb      	ldrh	r3, [r7, #6]
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	8979      	ldrh	r1, [r7, #10]
 8006a4c:	4b20      	ldr	r3, [pc, #128]	; (8006ad0 <I2C_RequestMemoryWrite+0xa4>)
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 fa5d 	bl	8006f14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a5a:	69fa      	ldr	r2, [r7, #28]
 8006a5c:	69b9      	ldr	r1, [r7, #24]
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f000 f8f0 	bl	8006c44 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e02c      	b.n	8006ac8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a6e:	88fb      	ldrh	r3, [r7, #6]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d105      	bne.n	8006a80 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a74:	893b      	ldrh	r3, [r7, #8]
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	629a      	str	r2, [r3, #40]	; 0x28
 8006a7e:	e015      	b.n	8006aac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a80:	893b      	ldrh	r3, [r7, #8]
 8006a82:	0a1b      	lsrs	r3, r3, #8
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a8e:	69fa      	ldr	r2, [r7, #28]
 8006a90:	69b9      	ldr	r1, [r7, #24]
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 f8d6 	bl	8006c44 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e012      	b.n	8006ac8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006aa2:	893b      	ldrh	r3, [r7, #8]
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	2180      	movs	r1, #128	; 0x80
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 f884 	bl	8006bc4 <I2C_WaitOnFlagUntilTimeout>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e000      	b.n	8006ac8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	80002000 	.word	0x80002000

08006ad4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af02      	add	r7, sp, #8
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	4608      	mov	r0, r1
 8006ade:	4611      	mov	r1, r2
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	817b      	strh	r3, [r7, #10]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	813b      	strh	r3, [r7, #8]
 8006aea:	4613      	mov	r3, r2
 8006aec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006aee:	88fb      	ldrh	r3, [r7, #6]
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	8979      	ldrh	r1, [r7, #10]
 8006af4:	4b20      	ldr	r3, [pc, #128]	; (8006b78 <I2C_RequestMemoryRead+0xa4>)
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	2300      	movs	r3, #0
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 fa0a 	bl	8006f14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b00:	69fa      	ldr	r2, [r7, #28]
 8006b02:	69b9      	ldr	r1, [r7, #24]
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 f89d 	bl	8006c44 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e02c      	b.n	8006b6e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b14:	88fb      	ldrh	r3, [r7, #6]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d105      	bne.n	8006b26 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b1a:	893b      	ldrh	r3, [r7, #8]
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	629a      	str	r2, [r3, #40]	; 0x28
 8006b24:	e015      	b.n	8006b52 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b26:	893b      	ldrh	r3, [r7, #8]
 8006b28:	0a1b      	lsrs	r3, r3, #8
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b34:	69fa      	ldr	r2, [r7, #28]
 8006b36:	69b9      	ldr	r1, [r7, #24]
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f883 	bl	8006c44 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e012      	b.n	8006b6e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b48:	893b      	ldrh	r3, [r7, #8]
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	2140      	movs	r1, #64	; 0x40
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 f831 	bl	8006bc4 <I2C_WaitOnFlagUntilTimeout>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e000      	b.n	8006b6e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	80002000 	.word	0x80002000

08006b7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d103      	bne.n	8006b9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2200      	movs	r2, #0
 8006b98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d007      	beq.n	8006bb8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f042 0201 	orr.w	r2, r2, #1
 8006bb6:	619a      	str	r2, [r3, #24]
  }
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bd4:	e022      	b.n	8006c1c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bdc:	d01e      	beq.n	8006c1c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bde:	f7fd fdbd 	bl	800475c <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d302      	bcc.n	8006bf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d113      	bne.n	8006c1c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf8:	f043 0220 	orr.w	r2, r3, #32
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e00f      	b.n	8006c3c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699a      	ldr	r2, [r3, #24]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	4013      	ands	r3, r2
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	bf0c      	ite	eq
 8006c2c:	2301      	moveq	r3, #1
 8006c2e:	2300      	movne	r3, #0
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	461a      	mov	r2, r3
 8006c34:	79fb      	ldrb	r3, [r7, #7]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d0cd      	beq.n	8006bd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c50:	e02c      	b.n	8006cac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 f870 	bl	8006d3c <I2C_IsErrorOccurred>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e02a      	b.n	8006cbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6c:	d01e      	beq.n	8006cac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c6e:	f7fd fd75 	bl	800475c <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d302      	bcc.n	8006c84 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d113      	bne.n	8006cac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c88:	f043 0220 	orr.w	r2, r3, #32
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e007      	b.n	8006cbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d1cb      	bne.n	8006c52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cd0:	e028      	b.n	8006d24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 f830 	bl	8006d3c <I2C_IsErrorOccurred>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e026      	b.n	8006d34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ce6:	f7fd fd39 	bl	800475c <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d302      	bcc.n	8006cfc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d113      	bne.n	8006d24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d00:	f043 0220 	orr.w	r2, r3, #32
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e007      	b.n	8006d34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	f003 0320 	and.w	r3, r3, #32
 8006d2e:	2b20      	cmp	r3, #32
 8006d30:	d1cf      	bne.n	8006cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08a      	sub	sp, #40	; 0x28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006d56:	2300      	movs	r3, #0
 8006d58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	f003 0310 	and.w	r3, r3, #16
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d075      	beq.n	8006e54 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2210      	movs	r2, #16
 8006d6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d70:	e056      	b.n	8006e20 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d78:	d052      	beq.n	8006e20 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d7a:	f7fd fcef 	bl	800475c <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d302      	bcc.n	8006d90 <I2C_IsErrorOccurred+0x54>
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d147      	bne.n	8006e20 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006da2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006db2:	d12e      	bne.n	8006e12 <I2C_IsErrorOccurred+0xd6>
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dba:	d02a      	beq.n	8006e12 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006dbc:	7cfb      	ldrb	r3, [r7, #19]
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d027      	beq.n	8006e12 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dd0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006dd2:	f7fd fcc3 	bl	800475c <HAL_GetTick>
 8006dd6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dd8:	e01b      	b.n	8006e12 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006dda:	f7fd fcbf 	bl	800475c <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b19      	cmp	r3, #25
 8006de6:	d914      	bls.n	8006e12 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dec:	f043 0220 	orr.w	r2, r3, #32
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	f003 0320 	and.w	r3, r3, #32
 8006e1c:	2b20      	cmp	r3, #32
 8006e1e:	d1dc      	bne.n	8006dda <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b20      	cmp	r3, #32
 8006e2c:	d003      	beq.n	8006e36 <I2C_IsErrorOccurred+0xfa>
 8006e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d09d      	beq.n	8006d72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006e36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2220      	movs	r2, #32
 8006e44:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	f043 0304 	orr.w	r3, r3, #4
 8006e4c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00b      	beq.n	8006e7e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	f043 0301 	orr.w	r3, r3, #1
 8006e6c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	f043 0308 	orr.w	r3, r3, #8
 8006e8e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00b      	beq.n	8006ec2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	f043 0302 	orr.w	r3, r3, #2
 8006eb0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d01c      	beq.n	8006f04 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f7ff fe56 	bl	8006b7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6859      	ldr	r1, [r3, #4]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	4b0d      	ldr	r3, [pc, #52]	; (8006f10 <I2C_IsErrorOccurred+0x1d4>)
 8006edc:	400b      	ands	r3, r1
 8006ede:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3728      	adds	r7, #40	; 0x28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	fe00e800 	.word	0xfe00e800

08006f14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	607b      	str	r3, [r7, #4]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	817b      	strh	r3, [r7, #10]
 8006f22:	4613      	mov	r3, r2
 8006f24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f26:	897b      	ldrh	r3, [r7, #10]
 8006f28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f2c:	7a7b      	ldrb	r3, [r7, #9]
 8006f2e:	041b      	lsls	r3, r3, #16
 8006f30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f34:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f42:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	0d5b      	lsrs	r3, r3, #21
 8006f4e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006f52:	4b08      	ldr	r3, [pc, #32]	; (8006f74 <I2C_TransferConfig+0x60>)
 8006f54:	430b      	orrs	r3, r1
 8006f56:	43db      	mvns	r3, r3
 8006f58:	ea02 0103 	and.w	r1, r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006f66:	bf00      	nop
 8006f68:	371c      	adds	r7, #28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	03ff63ff 	.word	0x03ff63ff

08006f78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b20      	cmp	r3, #32
 8006f8c:	d138      	bne.n	8007000 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d101      	bne.n	8006f9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e032      	b.n	8007002 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2224      	movs	r2, #36	; 0x24
 8006fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0201 	bic.w	r2, r2, #1
 8006fba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006fca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6819      	ldr	r1, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 0201 	orr.w	r2, r2, #1
 8006fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	e000      	b.n	8007002 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007000:	2302      	movs	r3, #2
  }
}
 8007002:	4618      	mov	r0, r3
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800700e:	b480      	push	{r7}
 8007010:	b085      	sub	sp, #20
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b20      	cmp	r3, #32
 8007022:	d139      	bne.n	8007098 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800702a:	2b01      	cmp	r3, #1
 800702c:	d101      	bne.n	8007032 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800702e:	2302      	movs	r3, #2
 8007030:	e033      	b.n	800709a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2224      	movs	r2, #36	; 0x24
 800703e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0201 	bic.w	r2, r2, #1
 8007050:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007060:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	021b      	lsls	r3, r3, #8
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	4313      	orrs	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0201 	orr.w	r2, r2, #1
 8007082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	e000      	b.n	800709a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007098:	2302      	movs	r3, #2
  }
}
 800709a:	4618      	mov	r0, r3
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
	...

080070a8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e0bf      	b.n	800723a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d106      	bne.n	80070d4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7fc fe34 	bl	8003d3c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	699a      	ldr	r2, [r3, #24]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80070ea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6999      	ldr	r1, [r3, #24]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007100:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	430a      	orrs	r2, r1
 800710e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6899      	ldr	r1, [r3, #8]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4b4a      	ldr	r3, [pc, #296]	; (8007244 <HAL_LTDC_Init+0x19c>)
 800711c:	400b      	ands	r3, r1
 800711e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	041b      	lsls	r3, r3, #16
 8007126:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6899      	ldr	r1, [r3, #8]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	699a      	ldr	r2, [r3, #24]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	431a      	orrs	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68d9      	ldr	r1, [r3, #12]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	4b3e      	ldr	r3, [pc, #248]	; (8007244 <HAL_LTDC_Init+0x19c>)
 800714a:	400b      	ands	r3, r1
 800714c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	041b      	lsls	r3, r3, #16
 8007154:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68d9      	ldr	r1, [r3, #12]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a1a      	ldr	r2, [r3, #32]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	430a      	orrs	r2, r1
 800716a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6919      	ldr	r1, [r3, #16]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	4b33      	ldr	r3, [pc, #204]	; (8007244 <HAL_LTDC_Init+0x19c>)
 8007178:	400b      	ands	r3, r1
 800717a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	041b      	lsls	r3, r3, #16
 8007182:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6919      	ldr	r1, [r3, #16]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	431a      	orrs	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6959      	ldr	r1, [r3, #20]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	4b27      	ldr	r3, [pc, #156]	; (8007244 <HAL_LTDC_Init+0x19c>)
 80071a6:	400b      	ands	r3, r1
 80071a8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ae:	041b      	lsls	r3, r3, #16
 80071b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6959      	ldr	r1, [r3, #20]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	431a      	orrs	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	430a      	orrs	r2, r1
 80071c6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071ce:	021b      	lsls	r3, r3, #8
 80071d0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80071d8:	041b      	lsls	r3, r3, #16
 80071da:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80071ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0206 	orr.w	r2, r2, #6
 8007216:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699a      	ldr	r2, [r3, #24]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f042 0201 	orr.w	r2, r2, #1
 8007226:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	f000f800 	.word	0xf000f800

08007248 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007256:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f003 0304 	and.w	r3, r3, #4
 8007266:	2b00      	cmp	r3, #0
 8007268:	d023      	beq.n	80072b2 <HAL_LTDC_IRQHandler+0x6a>
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b00      	cmp	r3, #0
 8007272:	d01e      	beq.n	80072b2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 0204 	bic.w	r2, r2, #4
 8007282:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2204      	movs	r2, #4
 800728a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007292:	f043 0201 	orr.w	r2, r3, #1
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2204      	movs	r2, #4
 80072a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f86f 	bl	8007390 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d023      	beq.n	8007304 <HAL_LTDC_IRQHandler+0xbc>
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d01e      	beq.n	8007304 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0202 	bic.w	r2, r2, #2
 80072d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2202      	movs	r2, #2
 80072dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80072e4:	f043 0202 	orr.w	r2, r3, #2
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2204      	movs	r2, #4
 80072f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f846 	bl	8007390 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d01b      	beq.n	8007346 <HAL_LTDC_IRQHandler+0xfe>
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	d016      	beq.n	8007346 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0201 	bic.w	r2, r2, #1
 8007326:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2201      	movs	r2, #1
 800732e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f82f 	bl	80073a4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f003 0308 	and.w	r3, r3, #8
 800734c:	2b00      	cmp	r3, #0
 800734e:	d01b      	beq.n	8007388 <HAL_LTDC_IRQHandler+0x140>
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f003 0308 	and.w	r3, r3, #8
 8007356:	2b00      	cmp	r3, #0
 8007358:	d016      	beq.n	8007388 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 0208 	bic.w	r2, r2, #8
 8007368:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2208      	movs	r2, #8
 8007370:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f818 	bl	80073b8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007388:	bf00      	nop
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80073cc:	b5b0      	push	{r4, r5, r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d101      	bne.n	80073e6 <HAL_LTDC_ConfigLayer+0x1a>
 80073e2:	2302      	movs	r3, #2
 80073e4:	e02c      	b.n	8007440 <HAL_LTDC_ConfigLayer+0x74>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2202      	movs	r2, #2
 80073f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2134      	movs	r1, #52	; 0x34
 80073fc:	fb01 f303 	mul.w	r3, r1, r3
 8007400:	4413      	add	r3, r2
 8007402:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	4614      	mov	r4, r2
 800740a:	461d      	mov	r5, r3
 800740c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800740e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007418:	682b      	ldr	r3, [r5, #0]
 800741a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	68b9      	ldr	r1, [r7, #8]
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f81f 	bl	8007464 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2201      	movs	r2, #1
 800742c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bdb0      	pop	{r4, r5, r7, pc}

08007448 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007456:	b2db      	uxtb	r3, r3
}
 8007458:	4618      	mov	r0, r3
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007464:	b480      	push	{r7}
 8007466:	b089      	sub	sp, #36	; 0x24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	0c1b      	lsrs	r3, r3, #16
 800747c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007480:	4413      	add	r3, r2
 8007482:	041b      	lsls	r3, r3, #16
 8007484:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	461a      	mov	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	01db      	lsls	r3, r3, #7
 8007490:	4413      	add	r3, r2
 8007492:	3384      	adds	r3, #132	; 0x84
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	6812      	ldr	r2, [r2, #0]
 800749a:	4611      	mov	r1, r2
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	01d2      	lsls	r2, r2, #7
 80074a0:	440a      	add	r2, r1
 80074a2:	3284      	adds	r2, #132	; 0x84
 80074a4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80074a8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	0c1b      	lsrs	r3, r3, #16
 80074b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074ba:	4413      	add	r3, r2
 80074bc:	1c5a      	adds	r2, r3, #1
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4619      	mov	r1, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	01db      	lsls	r3, r3, #7
 80074c8:	440b      	add	r3, r1
 80074ca:	3384      	adds	r3, #132	; 0x84
 80074cc:	4619      	mov	r1, r3
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	68da      	ldr	r2, [r3, #12]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074e2:	4413      	add	r3, r2
 80074e4:	041b      	lsls	r3, r3, #16
 80074e6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	01db      	lsls	r3, r3, #7
 80074f2:	4413      	add	r3, r2
 80074f4:	3384      	adds	r3, #132	; 0x84
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	6812      	ldr	r2, [r2, #0]
 80074fc:	4611      	mov	r1, r2
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	01d2      	lsls	r2, r2, #7
 8007502:	440a      	add	r2, r1
 8007504:	3284      	adds	r2, #132	; 0x84
 8007506:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800750a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800751a:	4413      	add	r3, r2
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4619      	mov	r1, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	01db      	lsls	r3, r3, #7
 8007528:	440b      	add	r3, r1
 800752a:	3384      	adds	r3, #132	; 0x84
 800752c:	4619      	mov	r1, r3
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	4313      	orrs	r3, r2
 8007532:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	461a      	mov	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	01db      	lsls	r3, r3, #7
 800753e:	4413      	add	r3, r2
 8007540:	3384      	adds	r3, #132	; 0x84
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	6812      	ldr	r2, [r2, #0]
 8007548:	4611      	mov	r1, r2
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	01d2      	lsls	r2, r2, #7
 800754e:	440a      	add	r2, r1
 8007550:	3284      	adds	r2, #132	; 0x84
 8007552:	f023 0307 	bic.w	r3, r3, #7
 8007556:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	461a      	mov	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	01db      	lsls	r3, r3, #7
 8007562:	4413      	add	r3, r2
 8007564:	3384      	adds	r3, #132	; 0x84
 8007566:	461a      	mov	r2, r3
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007574:	021b      	lsls	r3, r3, #8
 8007576:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800757e:	041b      	lsls	r3, r3, #16
 8007580:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	061b      	lsls	r3, r3, #24
 8007588:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	01db      	lsls	r3, r3, #7
 8007594:	4413      	add	r3, r2
 8007596:	3384      	adds	r3, #132	; 0x84
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	01db      	lsls	r3, r3, #7
 80075a4:	4413      	add	r3, r2
 80075a6:	3384      	adds	r3, #132	; 0x84
 80075a8:	461a      	mov	r2, r3
 80075aa:	2300      	movs	r3, #0
 80075ac:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075b4:	461a      	mov	r2, r3
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	431a      	orrs	r2, r3
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	431a      	orrs	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4619      	mov	r1, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	01db      	lsls	r3, r3, #7
 80075c8:	440b      	add	r3, r1
 80075ca:	3384      	adds	r3, #132	; 0x84
 80075cc:	4619      	mov	r1, r3
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	461a      	mov	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	01db      	lsls	r3, r3, #7
 80075de:	4413      	add	r3, r2
 80075e0:	3384      	adds	r3, #132	; 0x84
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	6812      	ldr	r2, [r2, #0]
 80075e8:	4611      	mov	r1, r2
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	01d2      	lsls	r2, r2, #7
 80075ee:	440a      	add	r2, r1
 80075f0:	3284      	adds	r2, #132	; 0x84
 80075f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075f6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	461a      	mov	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	01db      	lsls	r3, r3, #7
 8007602:	4413      	add	r3, r2
 8007604:	3384      	adds	r3, #132	; 0x84
 8007606:	461a      	mov	r2, r3
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	01db      	lsls	r3, r3, #7
 8007618:	4413      	add	r3, r2
 800761a:	3384      	adds	r3, #132	; 0x84
 800761c:	69da      	ldr	r2, [r3, #28]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4619      	mov	r1, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	01db      	lsls	r3, r3, #7
 8007628:	440b      	add	r3, r1
 800762a:	3384      	adds	r3, #132	; 0x84
 800762c:	4619      	mov	r1, r3
 800762e:	4b58      	ldr	r3, [pc, #352]	; (8007790 <LTDC_SetConfig+0x32c>)
 8007630:	4013      	ands	r3, r2
 8007632:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	69da      	ldr	r2, [r3, #28]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	6a1b      	ldr	r3, [r3, #32]
 800763c:	68f9      	ldr	r1, [r7, #12]
 800763e:	6809      	ldr	r1, [r1, #0]
 8007640:	4608      	mov	r0, r1
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	01c9      	lsls	r1, r1, #7
 8007646:	4401      	add	r1, r0
 8007648:	3184      	adds	r1, #132	; 0x84
 800764a:	4313      	orrs	r3, r2
 800764c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	461a      	mov	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	01db      	lsls	r3, r3, #7
 8007658:	4413      	add	r3, r2
 800765a:	3384      	adds	r3, #132	; 0x84
 800765c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	01db      	lsls	r3, r3, #7
 8007668:	4413      	add	r3, r2
 800766a:	3384      	adds	r3, #132	; 0x84
 800766c:	461a      	mov	r2, r3
 800766e:	2300      	movs	r3, #0
 8007670:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	01db      	lsls	r3, r3, #7
 800767c:	4413      	add	r3, r2
 800767e:	3384      	adds	r3, #132	; 0x84
 8007680:	461a      	mov	r2, r3
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007686:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d102      	bne.n	8007696 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007690:	2304      	movs	r3, #4
 8007692:	61fb      	str	r3, [r7, #28]
 8007694:	e01b      	b.n	80076ce <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d102      	bne.n	80076a4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800769e:	2303      	movs	r3, #3
 80076a0:	61fb      	str	r3, [r7, #28]
 80076a2:	e014      	b.n	80076ce <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	2b04      	cmp	r3, #4
 80076aa:	d00b      	beq.n	80076c4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d007      	beq.n	80076c4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d003      	beq.n	80076c4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80076c0:	2b07      	cmp	r3, #7
 80076c2:	d102      	bne.n	80076ca <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80076c4:	2302      	movs	r3, #2
 80076c6:	61fb      	str	r3, [r7, #28]
 80076c8:	e001      	b.n	80076ce <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80076ca:	2301      	movs	r3, #1
 80076cc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	461a      	mov	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	01db      	lsls	r3, r3, #7
 80076d8:	4413      	add	r3, r2
 80076da:	3384      	adds	r3, #132	; 0x84
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	6812      	ldr	r2, [r2, #0]
 80076e2:	4611      	mov	r1, r2
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	01d2      	lsls	r2, r2, #7
 80076e8:	440a      	add	r2, r1
 80076ea:	3284      	adds	r2, #132	; 0x84
 80076ec:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80076f0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f6:	69fa      	ldr	r2, [r7, #28]
 80076f8:	fb02 f303 	mul.w	r3, r2, r3
 80076fc:	041a      	lsls	r2, r3, #16
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	6859      	ldr	r1, [r3, #4]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	1acb      	subs	r3, r1, r3
 8007708:	69f9      	ldr	r1, [r7, #28]
 800770a:	fb01 f303 	mul.w	r3, r1, r3
 800770e:	3303      	adds	r3, #3
 8007710:	68f9      	ldr	r1, [r7, #12]
 8007712:	6809      	ldr	r1, [r1, #0]
 8007714:	4608      	mov	r0, r1
 8007716:	6879      	ldr	r1, [r7, #4]
 8007718:	01c9      	lsls	r1, r1, #7
 800771a:	4401      	add	r1, r0
 800771c:	3184      	adds	r1, #132	; 0x84
 800771e:	4313      	orrs	r3, r2
 8007720:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	01db      	lsls	r3, r3, #7
 800772c:	4413      	add	r3, r2
 800772e:	3384      	adds	r3, #132	; 0x84
 8007730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4619      	mov	r1, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	01db      	lsls	r3, r3, #7
 800773c:	440b      	add	r3, r1
 800773e:	3384      	adds	r3, #132	; 0x84
 8007740:	4619      	mov	r1, r3
 8007742:	4b14      	ldr	r3, [pc, #80]	; (8007794 <LTDC_SetConfig+0x330>)
 8007744:	4013      	ands	r3, r2
 8007746:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	461a      	mov	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	01db      	lsls	r3, r3, #7
 8007752:	4413      	add	r3, r2
 8007754:	3384      	adds	r3, #132	; 0x84
 8007756:	461a      	mov	r2, r3
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	461a      	mov	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	01db      	lsls	r3, r3, #7
 8007768:	4413      	add	r3, r2
 800776a:	3384      	adds	r3, #132	; 0x84
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	6812      	ldr	r2, [r2, #0]
 8007772:	4611      	mov	r1, r2
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	01d2      	lsls	r2, r2, #7
 8007778:	440a      	add	r2, r1
 800777a:	3284      	adds	r2, #132	; 0x84
 800777c:	f043 0301 	orr.w	r3, r3, #1
 8007780:	6013      	str	r3, [r2, #0]
}
 8007782:	bf00      	nop
 8007784:	3724      	adds	r7, #36	; 0x24
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	fffff8f8 	.word	0xfffff8f8
 8007794:	fffff800 	.word	0xfffff800

08007798 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800779c:	4b05      	ldr	r3, [pc, #20]	; (80077b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a04      	ldr	r2, [pc, #16]	; (80077b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80077a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077a6:	6013      	str	r3, [r2, #0]
}
 80077a8:	bf00      	nop
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	40007000 	.word	0x40007000

080077b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80077c2:	4b23      	ldr	r3, [pc, #140]	; (8007850 <HAL_PWREx_EnableOverDrive+0x98>)
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	4a22      	ldr	r2, [pc, #136]	; (8007850 <HAL_PWREx_EnableOverDrive+0x98>)
 80077c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077cc:	6413      	str	r3, [r2, #64]	; 0x40
 80077ce:	4b20      	ldr	r3, [pc, #128]	; (8007850 <HAL_PWREx_EnableOverDrive+0x98>)
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077d6:	603b      	str	r3, [r7, #0]
 80077d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80077da:	4b1e      	ldr	r3, [pc, #120]	; (8007854 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a1d      	ldr	r2, [pc, #116]	; (8007854 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077e6:	f7fc ffb9 	bl	800475c <HAL_GetTick>
 80077ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80077ec:	e009      	b.n	8007802 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80077ee:	f7fc ffb5 	bl	800475c <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077fc:	d901      	bls.n	8007802 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e022      	b.n	8007848 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007802:	4b14      	ldr	r3, [pc, #80]	; (8007854 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800780a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800780e:	d1ee      	bne.n	80077ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007810:	4b10      	ldr	r3, [pc, #64]	; (8007854 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a0f      	ldr	r2, [pc, #60]	; (8007854 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800781a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800781c:	f7fc ff9e 	bl	800475c <HAL_GetTick>
 8007820:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007822:	e009      	b.n	8007838 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007824:	f7fc ff9a 	bl	800475c <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007832:	d901      	bls.n	8007838 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e007      	b.n	8007848 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007838:	4b06      	ldr	r3, [pc, #24]	; (8007854 <HAL_PWREx_EnableOverDrive+0x9c>)
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007844:	d1ee      	bne.n	8007824 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	40023800 	.word	0x40023800
 8007854:	40007000 	.word	0x40007000

08007858 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007860:	2300      	movs	r3, #0
 8007862:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e291      	b.n	8007d92 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 8087 	beq.w	800798a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800787c:	4b96      	ldr	r3, [pc, #600]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f003 030c 	and.w	r3, r3, #12
 8007884:	2b04      	cmp	r3, #4
 8007886:	d00c      	beq.n	80078a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007888:	4b93      	ldr	r3, [pc, #588]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f003 030c 	and.w	r3, r3, #12
 8007890:	2b08      	cmp	r3, #8
 8007892:	d112      	bne.n	80078ba <HAL_RCC_OscConfig+0x62>
 8007894:	4b90      	ldr	r3, [pc, #576]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800789c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078a0:	d10b      	bne.n	80078ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078a2:	4b8d      	ldr	r3, [pc, #564]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d06c      	beq.n	8007988 <HAL_RCC_OscConfig+0x130>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d168      	bne.n	8007988 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e26b      	b.n	8007d92 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078c2:	d106      	bne.n	80078d2 <HAL_RCC_OscConfig+0x7a>
 80078c4:	4b84      	ldr	r3, [pc, #528]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a83      	ldr	r2, [pc, #524]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 80078ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	e02e      	b.n	8007930 <HAL_RCC_OscConfig+0xd8>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10c      	bne.n	80078f4 <HAL_RCC_OscConfig+0x9c>
 80078da:	4b7f      	ldr	r3, [pc, #508]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a7e      	ldr	r2, [pc, #504]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 80078e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078e4:	6013      	str	r3, [r2, #0]
 80078e6:	4b7c      	ldr	r3, [pc, #496]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a7b      	ldr	r2, [pc, #492]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 80078ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078f0:	6013      	str	r3, [r2, #0]
 80078f2:	e01d      	b.n	8007930 <HAL_RCC_OscConfig+0xd8>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078fc:	d10c      	bne.n	8007918 <HAL_RCC_OscConfig+0xc0>
 80078fe:	4b76      	ldr	r3, [pc, #472]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a75      	ldr	r2, [pc, #468]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 8007904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	4b73      	ldr	r3, [pc, #460]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a72      	ldr	r2, [pc, #456]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 8007910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007914:	6013      	str	r3, [r2, #0]
 8007916:	e00b      	b.n	8007930 <HAL_RCC_OscConfig+0xd8>
 8007918:	4b6f      	ldr	r3, [pc, #444]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a6e      	ldr	r2, [pc, #440]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 800791e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007922:	6013      	str	r3, [r2, #0]
 8007924:	4b6c      	ldr	r3, [pc, #432]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a6b      	ldr	r2, [pc, #428]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 800792a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800792e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d013      	beq.n	8007960 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007938:	f7fc ff10 	bl	800475c <HAL_GetTick>
 800793c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800793e:	e008      	b.n	8007952 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007940:	f7fc ff0c 	bl	800475c <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	2b64      	cmp	r3, #100	; 0x64
 800794c:	d901      	bls.n	8007952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e21f      	b.n	8007d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007952:	4b61      	ldr	r3, [pc, #388]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0f0      	beq.n	8007940 <HAL_RCC_OscConfig+0xe8>
 800795e:	e014      	b.n	800798a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007960:	f7fc fefc 	bl	800475c <HAL_GetTick>
 8007964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007966:	e008      	b.n	800797a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007968:	f7fc fef8 	bl	800475c <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b64      	cmp	r3, #100	; 0x64
 8007974:	d901      	bls.n	800797a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e20b      	b.n	8007d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800797a:	4b57      	ldr	r3, [pc, #348]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1f0      	bne.n	8007968 <HAL_RCC_OscConfig+0x110>
 8007986:	e000      	b.n	800798a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	2b00      	cmp	r3, #0
 8007994:	d069      	beq.n	8007a6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007996:	4b50      	ldr	r3, [pc, #320]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f003 030c 	and.w	r3, r3, #12
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00b      	beq.n	80079ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079a2:	4b4d      	ldr	r3, [pc, #308]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f003 030c 	and.w	r3, r3, #12
 80079aa:	2b08      	cmp	r3, #8
 80079ac:	d11c      	bne.n	80079e8 <HAL_RCC_OscConfig+0x190>
 80079ae:	4b4a      	ldr	r3, [pc, #296]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d116      	bne.n	80079e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079ba:	4b47      	ldr	r3, [pc, #284]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d005      	beq.n	80079d2 <HAL_RCC_OscConfig+0x17a>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d001      	beq.n	80079d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e1df      	b.n	8007d92 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079d2:	4b41      	ldr	r3, [pc, #260]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	493d      	ldr	r1, [pc, #244]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079e6:	e040      	b.n	8007a6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d023      	beq.n	8007a38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079f0:	4b39      	ldr	r3, [pc, #228]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a38      	ldr	r2, [pc, #224]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 80079f6:	f043 0301 	orr.w	r3, r3, #1
 80079fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079fc:	f7fc feae 	bl	800475c <HAL_GetTick>
 8007a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a02:	e008      	b.n	8007a16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a04:	f7fc feaa 	bl	800475c <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d901      	bls.n	8007a16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e1bd      	b.n	8007d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a16:	4b30      	ldr	r3, [pc, #192]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0f0      	beq.n	8007a04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a22:	4b2d      	ldr	r3, [pc, #180]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	4929      	ldr	r1, [pc, #164]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	600b      	str	r3, [r1, #0]
 8007a36:	e018      	b.n	8007a6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a38:	4b27      	ldr	r3, [pc, #156]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a26      	ldr	r2, [pc, #152]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 8007a3e:	f023 0301 	bic.w	r3, r3, #1
 8007a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a44:	f7fc fe8a 	bl	800475c <HAL_GetTick>
 8007a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a4a:	e008      	b.n	8007a5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a4c:	f7fc fe86 	bl	800475c <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d901      	bls.n	8007a5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e199      	b.n	8007d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a5e:	4b1e      	ldr	r3, [pc, #120]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1f0      	bne.n	8007a4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0308 	and.w	r3, r3, #8
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d038      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d019      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a7e:	4b16      	ldr	r3, [pc, #88]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 8007a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a82:	4a15      	ldr	r2, [pc, #84]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 8007a84:	f043 0301 	orr.w	r3, r3, #1
 8007a88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a8a:	f7fc fe67 	bl	800475c <HAL_GetTick>
 8007a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a90:	e008      	b.n	8007aa4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a92:	f7fc fe63 	bl	800475c <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d901      	bls.n	8007aa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e176      	b.n	8007d92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007aa4:	4b0c      	ldr	r3, [pc, #48]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 8007aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aa8:	f003 0302 	and.w	r3, r3, #2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0f0      	beq.n	8007a92 <HAL_RCC_OscConfig+0x23a>
 8007ab0:	e01a      	b.n	8007ae8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ab2:	4b09      	ldr	r3, [pc, #36]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 8007ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ab6:	4a08      	ldr	r2, [pc, #32]	; (8007ad8 <HAL_RCC_OscConfig+0x280>)
 8007ab8:	f023 0301 	bic.w	r3, r3, #1
 8007abc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007abe:	f7fc fe4d 	bl	800475c <HAL_GetTick>
 8007ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ac4:	e00a      	b.n	8007adc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ac6:	f7fc fe49 	bl	800475c <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d903      	bls.n	8007adc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e15c      	b.n	8007d92 <HAL_RCC_OscConfig+0x53a>
 8007ad8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007adc:	4b91      	ldr	r3, [pc, #580]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ae0:	f003 0302 	and.w	r3, r3, #2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1ee      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0304 	and.w	r3, r3, #4
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 80a4 	beq.w	8007c3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007af6:	4b8b      	ldr	r3, [pc, #556]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10d      	bne.n	8007b1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b02:	4b88      	ldr	r3, [pc, #544]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	4a87      	ldr	r2, [pc, #540]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8007b0e:	4b85      	ldr	r3, [pc, #532]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b16:	60bb      	str	r3, [r7, #8]
 8007b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b1e:	4b82      	ldr	r3, [pc, #520]	; (8007d28 <HAL_RCC_OscConfig+0x4d0>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d118      	bne.n	8007b5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007b2a:	4b7f      	ldr	r3, [pc, #508]	; (8007d28 <HAL_RCC_OscConfig+0x4d0>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a7e      	ldr	r2, [pc, #504]	; (8007d28 <HAL_RCC_OscConfig+0x4d0>)
 8007b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b36:	f7fc fe11 	bl	800475c <HAL_GetTick>
 8007b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b3c:	e008      	b.n	8007b50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b3e:	f7fc fe0d 	bl	800475c <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b64      	cmp	r3, #100	; 0x64
 8007b4a:	d901      	bls.n	8007b50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e120      	b.n	8007d92 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b50:	4b75      	ldr	r3, [pc, #468]	; (8007d28 <HAL_RCC_OscConfig+0x4d0>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0f0      	beq.n	8007b3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d106      	bne.n	8007b72 <HAL_RCC_OscConfig+0x31a>
 8007b64:	4b6f      	ldr	r3, [pc, #444]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b68:	4a6e      	ldr	r2, [pc, #440]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007b6a:	f043 0301 	orr.w	r3, r3, #1
 8007b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8007b70:	e02d      	b.n	8007bce <HAL_RCC_OscConfig+0x376>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10c      	bne.n	8007b94 <HAL_RCC_OscConfig+0x33c>
 8007b7a:	4b6a      	ldr	r3, [pc, #424]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7e:	4a69      	ldr	r2, [pc, #420]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007b80:	f023 0301 	bic.w	r3, r3, #1
 8007b84:	6713      	str	r3, [r2, #112]	; 0x70
 8007b86:	4b67      	ldr	r3, [pc, #412]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b8a:	4a66      	ldr	r2, [pc, #408]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007b8c:	f023 0304 	bic.w	r3, r3, #4
 8007b90:	6713      	str	r3, [r2, #112]	; 0x70
 8007b92:	e01c      	b.n	8007bce <HAL_RCC_OscConfig+0x376>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	2b05      	cmp	r3, #5
 8007b9a:	d10c      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x35e>
 8007b9c:	4b61      	ldr	r3, [pc, #388]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba0:	4a60      	ldr	r2, [pc, #384]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007ba2:	f043 0304 	orr.w	r3, r3, #4
 8007ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ba8:	4b5e      	ldr	r3, [pc, #376]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bac:	4a5d      	ldr	r2, [pc, #372]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007bae:	f043 0301 	orr.w	r3, r3, #1
 8007bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8007bb4:	e00b      	b.n	8007bce <HAL_RCC_OscConfig+0x376>
 8007bb6:	4b5b      	ldr	r3, [pc, #364]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bba:	4a5a      	ldr	r2, [pc, #360]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007bbc:	f023 0301 	bic.w	r3, r3, #1
 8007bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8007bc2:	4b58      	ldr	r3, [pc, #352]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc6:	4a57      	ldr	r2, [pc, #348]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007bc8:	f023 0304 	bic.w	r3, r3, #4
 8007bcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d015      	beq.n	8007c02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bd6:	f7fc fdc1 	bl	800475c <HAL_GetTick>
 8007bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bdc:	e00a      	b.n	8007bf4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bde:	f7fc fdbd 	bl	800475c <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d901      	bls.n	8007bf4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e0ce      	b.n	8007d92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bf4:	4b4b      	ldr	r3, [pc, #300]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d0ee      	beq.n	8007bde <HAL_RCC_OscConfig+0x386>
 8007c00:	e014      	b.n	8007c2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c02:	f7fc fdab 	bl	800475c <HAL_GetTick>
 8007c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c08:	e00a      	b.n	8007c20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c0a:	f7fc fda7 	bl	800475c <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d901      	bls.n	8007c20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e0b8      	b.n	8007d92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c20:	4b40      	ldr	r3, [pc, #256]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c24:	f003 0302 	and.w	r3, r3, #2
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1ee      	bne.n	8007c0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d105      	bne.n	8007c3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c32:	4b3c      	ldr	r3, [pc, #240]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c36:	4a3b      	ldr	r2, [pc, #236]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 80a4 	beq.w	8007d90 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c48:	4b36      	ldr	r3, [pc, #216]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f003 030c 	and.w	r3, r3, #12
 8007c50:	2b08      	cmp	r3, #8
 8007c52:	d06b      	beq.n	8007d2c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d149      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c5c:	4b31      	ldr	r3, [pc, #196]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a30      	ldr	r2, [pc, #192]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c68:	f7fc fd78 	bl	800475c <HAL_GetTick>
 8007c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c6e:	e008      	b.n	8007c82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c70:	f7fc fd74 	bl	800475c <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d901      	bls.n	8007c82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e087      	b.n	8007d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c82:	4b28      	ldr	r3, [pc, #160]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1f0      	bne.n	8007c70 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	69da      	ldr	r2, [r3, #28]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	431a      	orrs	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	019b      	lsls	r3, r3, #6
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca4:	085b      	lsrs	r3, r3, #1
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	041b      	lsls	r3, r3, #16
 8007caa:	431a      	orrs	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb0:	061b      	lsls	r3, r3, #24
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	4a1b      	ldr	r2, [pc, #108]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007cb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007cba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007cbc:	4b19      	ldr	r3, [pc, #100]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a18      	ldr	r2, [pc, #96]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc8:	f7fc fd48 	bl	800475c <HAL_GetTick>
 8007ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cce:	e008      	b.n	8007ce2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cd0:	f7fc fd44 	bl	800475c <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d901      	bls.n	8007ce2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e057      	b.n	8007d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ce2:	4b10      	ldr	r3, [pc, #64]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d0f0      	beq.n	8007cd0 <HAL_RCC_OscConfig+0x478>
 8007cee:	e04f      	b.n	8007d90 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cf0:	4b0c      	ldr	r3, [pc, #48]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a0b      	ldr	r2, [pc, #44]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cfc:	f7fc fd2e 	bl	800475c <HAL_GetTick>
 8007d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d02:	e008      	b.n	8007d16 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d04:	f7fc fd2a 	bl	800475c <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d901      	bls.n	8007d16 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e03d      	b.n	8007d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d16:	4b03      	ldr	r3, [pc, #12]	; (8007d24 <HAL_RCC_OscConfig+0x4cc>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1f0      	bne.n	8007d04 <HAL_RCC_OscConfig+0x4ac>
 8007d22:	e035      	b.n	8007d90 <HAL_RCC_OscConfig+0x538>
 8007d24:	40023800 	.word	0x40023800
 8007d28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007d2c:	4b1b      	ldr	r3, [pc, #108]	; (8007d9c <HAL_RCC_OscConfig+0x544>)
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d028      	beq.n	8007d8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d121      	bne.n	8007d8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d11a      	bne.n	8007d8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d111      	bne.n	8007d8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d72:	085b      	lsrs	r3, r3, #1
 8007d74:	3b01      	subs	r3, #1
 8007d76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d107      	bne.n	8007d8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d001      	beq.n	8007d90 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e000      	b.n	8007d92 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	40023800 	.word	0x40023800

08007da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007daa:	2300      	movs	r3, #0
 8007dac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e0d0      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007db8:	4b6a      	ldr	r3, [pc, #424]	; (8007f64 <HAL_RCC_ClockConfig+0x1c4>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 030f 	and.w	r3, r3, #15
 8007dc0:	683a      	ldr	r2, [r7, #0]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d910      	bls.n	8007de8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dc6:	4b67      	ldr	r3, [pc, #412]	; (8007f64 <HAL_RCC_ClockConfig+0x1c4>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f023 020f 	bic.w	r2, r3, #15
 8007dce:	4965      	ldr	r1, [pc, #404]	; (8007f64 <HAL_RCC_ClockConfig+0x1c4>)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dd6:	4b63      	ldr	r3, [pc, #396]	; (8007f64 <HAL_RCC_ClockConfig+0x1c4>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 030f 	and.w	r3, r3, #15
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d001      	beq.n	8007de8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e0b8      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d020      	beq.n	8007e36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0304 	and.w	r3, r3, #4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e00:	4b59      	ldr	r3, [pc, #356]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	4a58      	ldr	r2, [pc, #352]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007e06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0308 	and.w	r3, r3, #8
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d005      	beq.n	8007e24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e18:	4b53      	ldr	r3, [pc, #332]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	4a52      	ldr	r2, [pc, #328]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e24:	4b50      	ldr	r3, [pc, #320]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	494d      	ldr	r1, [pc, #308]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d040      	beq.n	8007ec4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d107      	bne.n	8007e5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e4a:	4b47      	ldr	r3, [pc, #284]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d115      	bne.n	8007e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e07f      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d107      	bne.n	8007e72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e62:	4b41      	ldr	r3, [pc, #260]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d109      	bne.n	8007e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e073      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e72:	4b3d      	ldr	r3, [pc, #244]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0302 	and.w	r3, r3, #2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e06b      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e82:	4b39      	ldr	r3, [pc, #228]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f023 0203 	bic.w	r2, r3, #3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	4936      	ldr	r1, [pc, #216]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e94:	f7fc fc62 	bl	800475c <HAL_GetTick>
 8007e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e9a:	e00a      	b.n	8007eb2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e9c:	f7fc fc5e 	bl	800475c <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d901      	bls.n	8007eb2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e053      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eb2:	4b2d      	ldr	r3, [pc, #180]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f003 020c 	and.w	r2, r3, #12
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d1eb      	bne.n	8007e9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ec4:	4b27      	ldr	r3, [pc, #156]	; (8007f64 <HAL_RCC_ClockConfig+0x1c4>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 030f 	and.w	r3, r3, #15
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d210      	bcs.n	8007ef4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ed2:	4b24      	ldr	r3, [pc, #144]	; (8007f64 <HAL_RCC_ClockConfig+0x1c4>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f023 020f 	bic.w	r2, r3, #15
 8007eda:	4922      	ldr	r1, [pc, #136]	; (8007f64 <HAL_RCC_ClockConfig+0x1c4>)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ee2:	4b20      	ldr	r3, [pc, #128]	; (8007f64 <HAL_RCC_ClockConfig+0x1c4>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d001      	beq.n	8007ef4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e032      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d008      	beq.n	8007f12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f00:	4b19      	ldr	r3, [pc, #100]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	4916      	ldr	r1, [pc, #88]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0308 	and.w	r3, r3, #8
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d009      	beq.n	8007f32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007f1e:	4b12      	ldr	r3, [pc, #72]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	00db      	lsls	r3, r3, #3
 8007f2c:	490e      	ldr	r1, [pc, #56]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007f32:	f000 f821 	bl	8007f78 <HAL_RCC_GetSysClockFreq>
 8007f36:	4602      	mov	r2, r0
 8007f38:	4b0b      	ldr	r3, [pc, #44]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	091b      	lsrs	r3, r3, #4
 8007f3e:	f003 030f 	and.w	r3, r3, #15
 8007f42:	490a      	ldr	r1, [pc, #40]	; (8007f6c <HAL_RCC_ClockConfig+0x1cc>)
 8007f44:	5ccb      	ldrb	r3, [r1, r3]
 8007f46:	fa22 f303 	lsr.w	r3, r2, r3
 8007f4a:	4a09      	ldr	r2, [pc, #36]	; (8007f70 <HAL_RCC_ClockConfig+0x1d0>)
 8007f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007f4e:	4b09      	ldr	r3, [pc, #36]	; (8007f74 <HAL_RCC_ClockConfig+0x1d4>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fc fac8 	bl	80044e8 <HAL_InitTick>

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	40023c00 	.word	0x40023c00
 8007f68:	40023800 	.word	0x40023800
 8007f6c:	08010354 	.word	0x08010354
 8007f70:	20000050 	.word	0x20000050
 8007f74:	20000054 	.word	0x20000054

08007f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f78:	b5b0      	push	{r4, r5, r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007f7e:	2100      	movs	r1, #0
 8007f80:	6079      	str	r1, [r7, #4]
 8007f82:	2100      	movs	r1, #0
 8007f84:	60f9      	str	r1, [r7, #12]
 8007f86:	2100      	movs	r1, #0
 8007f88:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f8e:	4952      	ldr	r1, [pc, #328]	; (80080d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007f90:	6889      	ldr	r1, [r1, #8]
 8007f92:	f001 010c 	and.w	r1, r1, #12
 8007f96:	2908      	cmp	r1, #8
 8007f98:	d00d      	beq.n	8007fb6 <HAL_RCC_GetSysClockFreq+0x3e>
 8007f9a:	2908      	cmp	r1, #8
 8007f9c:	f200 8094 	bhi.w	80080c8 <HAL_RCC_GetSysClockFreq+0x150>
 8007fa0:	2900      	cmp	r1, #0
 8007fa2:	d002      	beq.n	8007faa <HAL_RCC_GetSysClockFreq+0x32>
 8007fa4:	2904      	cmp	r1, #4
 8007fa6:	d003      	beq.n	8007fb0 <HAL_RCC_GetSysClockFreq+0x38>
 8007fa8:	e08e      	b.n	80080c8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007faa:	4b4c      	ldr	r3, [pc, #304]	; (80080dc <HAL_RCC_GetSysClockFreq+0x164>)
 8007fac:	60bb      	str	r3, [r7, #8]
      break;
 8007fae:	e08e      	b.n	80080ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007fb0:	4b4b      	ldr	r3, [pc, #300]	; (80080e0 <HAL_RCC_GetSysClockFreq+0x168>)
 8007fb2:	60bb      	str	r3, [r7, #8]
      break;
 8007fb4:	e08b      	b.n	80080ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007fb6:	4948      	ldr	r1, [pc, #288]	; (80080d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007fb8:	6849      	ldr	r1, [r1, #4]
 8007fba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007fbe:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007fc0:	4945      	ldr	r1, [pc, #276]	; (80080d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007fc2:	6849      	ldr	r1, [r1, #4]
 8007fc4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007fc8:	2900      	cmp	r1, #0
 8007fca:	d024      	beq.n	8008016 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fcc:	4942      	ldr	r1, [pc, #264]	; (80080d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007fce:	6849      	ldr	r1, [r1, #4]
 8007fd0:	0989      	lsrs	r1, r1, #6
 8007fd2:	4608      	mov	r0, r1
 8007fd4:	f04f 0100 	mov.w	r1, #0
 8007fd8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007fdc:	f04f 0500 	mov.w	r5, #0
 8007fe0:	ea00 0204 	and.w	r2, r0, r4
 8007fe4:	ea01 0305 	and.w	r3, r1, r5
 8007fe8:	493d      	ldr	r1, [pc, #244]	; (80080e0 <HAL_RCC_GetSysClockFreq+0x168>)
 8007fea:	fb01 f003 	mul.w	r0, r1, r3
 8007fee:	2100      	movs	r1, #0
 8007ff0:	fb01 f102 	mul.w	r1, r1, r2
 8007ff4:	1844      	adds	r4, r0, r1
 8007ff6:	493a      	ldr	r1, [pc, #232]	; (80080e0 <HAL_RCC_GetSysClockFreq+0x168>)
 8007ff8:	fba2 0101 	umull	r0, r1, r2, r1
 8007ffc:	1863      	adds	r3, r4, r1
 8007ffe:	4619      	mov	r1, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	461a      	mov	r2, r3
 8008004:	f04f 0300 	mov.w	r3, #0
 8008008:	f7f8 f952 	bl	80002b0 <__aeabi_uldivmod>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4613      	mov	r3, r2
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	e04a      	b.n	80080ac <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008016:	4b30      	ldr	r3, [pc, #192]	; (80080d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	099b      	lsrs	r3, r3, #6
 800801c:	461a      	mov	r2, r3
 800801e:	f04f 0300 	mov.w	r3, #0
 8008022:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008026:	f04f 0100 	mov.w	r1, #0
 800802a:	ea02 0400 	and.w	r4, r2, r0
 800802e:	ea03 0501 	and.w	r5, r3, r1
 8008032:	4620      	mov	r0, r4
 8008034:	4629      	mov	r1, r5
 8008036:	f04f 0200 	mov.w	r2, #0
 800803a:	f04f 0300 	mov.w	r3, #0
 800803e:	014b      	lsls	r3, r1, #5
 8008040:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008044:	0142      	lsls	r2, r0, #5
 8008046:	4610      	mov	r0, r2
 8008048:	4619      	mov	r1, r3
 800804a:	1b00      	subs	r0, r0, r4
 800804c:	eb61 0105 	sbc.w	r1, r1, r5
 8008050:	f04f 0200 	mov.w	r2, #0
 8008054:	f04f 0300 	mov.w	r3, #0
 8008058:	018b      	lsls	r3, r1, #6
 800805a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800805e:	0182      	lsls	r2, r0, #6
 8008060:	1a12      	subs	r2, r2, r0
 8008062:	eb63 0301 	sbc.w	r3, r3, r1
 8008066:	f04f 0000 	mov.w	r0, #0
 800806a:	f04f 0100 	mov.w	r1, #0
 800806e:	00d9      	lsls	r1, r3, #3
 8008070:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008074:	00d0      	lsls	r0, r2, #3
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	1912      	adds	r2, r2, r4
 800807c:	eb45 0303 	adc.w	r3, r5, r3
 8008080:	f04f 0000 	mov.w	r0, #0
 8008084:	f04f 0100 	mov.w	r1, #0
 8008088:	0299      	lsls	r1, r3, #10
 800808a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800808e:	0290      	lsls	r0, r2, #10
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	4610      	mov	r0, r2
 8008096:	4619      	mov	r1, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	461a      	mov	r2, r3
 800809c:	f04f 0300 	mov.w	r3, #0
 80080a0:	f7f8 f906 	bl	80002b0 <__aeabi_uldivmod>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4613      	mov	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80080ac:	4b0a      	ldr	r3, [pc, #40]	; (80080d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	0c1b      	lsrs	r3, r3, #16
 80080b2:	f003 0303 	and.w	r3, r3, #3
 80080b6:	3301      	adds	r3, #1
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c4:	60bb      	str	r3, [r7, #8]
      break;
 80080c6:	e002      	b.n	80080ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080c8:	4b04      	ldr	r3, [pc, #16]	; (80080dc <HAL_RCC_GetSysClockFreq+0x164>)
 80080ca:	60bb      	str	r3, [r7, #8]
      break;
 80080cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080ce:	68bb      	ldr	r3, [r7, #8]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bdb0      	pop	{r4, r5, r7, pc}
 80080d8:	40023800 	.word	0x40023800
 80080dc:	00f42400 	.word	0x00f42400
 80080e0:	017d7840 	.word	0x017d7840

080080e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080e4:	b480      	push	{r7}
 80080e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080e8:	4b03      	ldr	r3, [pc, #12]	; (80080f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80080ea:	681b      	ldr	r3, [r3, #0]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	20000050 	.word	0x20000050

080080fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008100:	f7ff fff0 	bl	80080e4 <HAL_RCC_GetHCLKFreq>
 8008104:	4602      	mov	r2, r0
 8008106:	4b05      	ldr	r3, [pc, #20]	; (800811c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	0a9b      	lsrs	r3, r3, #10
 800810c:	f003 0307 	and.w	r3, r3, #7
 8008110:	4903      	ldr	r1, [pc, #12]	; (8008120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008112:	5ccb      	ldrb	r3, [r1, r3]
 8008114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008118:	4618      	mov	r0, r3
 800811a:	bd80      	pop	{r7, pc}
 800811c:	40023800 	.word	0x40023800
 8008120:	08010364 	.word	0x08010364

08008124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008128:	f7ff ffdc 	bl	80080e4 <HAL_RCC_GetHCLKFreq>
 800812c:	4602      	mov	r2, r0
 800812e:	4b05      	ldr	r3, [pc, #20]	; (8008144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	0b5b      	lsrs	r3, r3, #13
 8008134:	f003 0307 	and.w	r3, r3, #7
 8008138:	4903      	ldr	r1, [pc, #12]	; (8008148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800813a:	5ccb      	ldrb	r3, [r1, r3]
 800813c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008140:	4618      	mov	r0, r3
 8008142:	bd80      	pop	{r7, pc}
 8008144:	40023800 	.word	0x40023800
 8008148:	08010364 	.word	0x08010364

0800814c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	220f      	movs	r2, #15
 800815a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800815c:	4b12      	ldr	r3, [pc, #72]	; (80081a8 <HAL_RCC_GetClockConfig+0x5c>)
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f003 0203 	and.w	r2, r3, #3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008168:	4b0f      	ldr	r3, [pc, #60]	; (80081a8 <HAL_RCC_GetClockConfig+0x5c>)
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008174:	4b0c      	ldr	r3, [pc, #48]	; (80081a8 <HAL_RCC_GetClockConfig+0x5c>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008180:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <HAL_RCC_GetClockConfig+0x5c>)
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	08db      	lsrs	r3, r3, #3
 8008186:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800818e:	4b07      	ldr	r3, [pc, #28]	; (80081ac <HAL_RCC_GetClockConfig+0x60>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 020f 	and.w	r2, r3, #15
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	601a      	str	r2, [r3, #0]
}
 800819a:	bf00      	nop
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	40023800 	.word	0x40023800
 80081ac:	40023c00 	.word	0x40023c00

080081b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b088      	sub	sp, #32
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80081c0:	2300      	movs	r3, #0
 80081c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80081c4:	2300      	movs	r3, #0
 80081c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80081c8:	2300      	movs	r3, #0
 80081ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d012      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80081d8:	4b69      	ldr	r3, [pc, #420]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	4a68      	ldr	r2, [pc, #416]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80081e2:	6093      	str	r3, [r2, #8]
 80081e4:	4b66      	ldr	r3, [pc, #408]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ec:	4964      	ldr	r1, [pc, #400]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80081fa:	2301      	movs	r3, #1
 80081fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d017      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800820a:	4b5d      	ldr	r3, [pc, #372]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800820c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008210:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008218:	4959      	ldr	r1, [pc, #356]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800821a:	4313      	orrs	r3, r2
 800821c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008228:	d101      	bne.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800822a:	2301      	movs	r3, #1
 800822c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008236:	2301      	movs	r3, #1
 8008238:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d017      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008246:	4b4e      	ldr	r3, [pc, #312]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800824c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008254:	494a      	ldr	r1, [pc, #296]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008256:	4313      	orrs	r3, r2
 8008258:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008264:	d101      	bne.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008266:	2301      	movs	r3, #1
 8008268:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008272:	2301      	movs	r3, #1
 8008274:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008282:	2301      	movs	r3, #1
 8008284:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0320 	and.w	r3, r3, #32
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 808b 	beq.w	80083aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008294:	4b3a      	ldr	r3, [pc, #232]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008298:	4a39      	ldr	r2, [pc, #228]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800829a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800829e:	6413      	str	r3, [r2, #64]	; 0x40
 80082a0:	4b37      	ldr	r3, [pc, #220]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082a8:	60bb      	str	r3, [r7, #8]
 80082aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80082ac:	4b35      	ldr	r3, [pc, #212]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a34      	ldr	r2, [pc, #208]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80082b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082b8:	f7fc fa50 	bl	800475c <HAL_GetTick>
 80082bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80082be:	e008      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082c0:	f7fc fa4c 	bl	800475c <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	2b64      	cmp	r3, #100	; 0x64
 80082cc:	d901      	bls.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e357      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80082d2:	4b2c      	ldr	r3, [pc, #176]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d0f0      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80082de:	4b28      	ldr	r3, [pc, #160]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d035      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d02e      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082fc:	4b20      	ldr	r3, [pc, #128]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008304:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008306:	4b1e      	ldr	r3, [pc, #120]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830a:	4a1d      	ldr	r2, [pc, #116]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800830c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008310:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008312:	4b1b      	ldr	r3, [pc, #108]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008316:	4a1a      	ldr	r2, [pc, #104]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800831c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800831e:	4a18      	ldr	r2, [pc, #96]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008324:	4b16      	ldr	r3, [pc, #88]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008328:	f003 0301 	and.w	r3, r3, #1
 800832c:	2b01      	cmp	r3, #1
 800832e:	d114      	bne.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008330:	f7fc fa14 	bl	800475c <HAL_GetTick>
 8008334:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008336:	e00a      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008338:	f7fc fa10 	bl	800475c <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	f241 3288 	movw	r2, #5000	; 0x1388
 8008346:	4293      	cmp	r3, r2
 8008348:	d901      	bls.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e319      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800834e:	4b0c      	ldr	r3, [pc, #48]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	2b00      	cmp	r3, #0
 8008358:	d0ee      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008362:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008366:	d111      	bne.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008368:	4b05      	ldr	r3, [pc, #20]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008374:	4b04      	ldr	r3, [pc, #16]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008376:	400b      	ands	r3, r1
 8008378:	4901      	ldr	r1, [pc, #4]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800837a:	4313      	orrs	r3, r2
 800837c:	608b      	str	r3, [r1, #8]
 800837e:	e00b      	b.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008380:	40023800 	.word	0x40023800
 8008384:	40007000 	.word	0x40007000
 8008388:	0ffffcff 	.word	0x0ffffcff
 800838c:	4bb1      	ldr	r3, [pc, #708]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	4ab0      	ldr	r2, [pc, #704]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008392:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008396:	6093      	str	r3, [r2, #8]
 8008398:	4bae      	ldr	r3, [pc, #696]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800839a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083a4:	49ab      	ldr	r1, [pc, #684]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 0310 	and.w	r3, r3, #16
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d010      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80083b6:	4ba7      	ldr	r3, [pc, #668]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80083b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083bc:	4aa5      	ldr	r2, [pc, #660]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80083be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80083c6:	4ba3      	ldr	r3, [pc, #652]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80083c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d0:	49a0      	ldr	r1, [pc, #640]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00a      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80083e4:	4b9b      	ldr	r3, [pc, #620]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80083e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083f2:	4998      	ldr	r1, [pc, #608]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80083f4:	4313      	orrs	r3, r2
 80083f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00a      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008406:	4b93      	ldr	r3, [pc, #588]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800840c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008414:	498f      	ldr	r1, [pc, #572]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008416:	4313      	orrs	r3, r2
 8008418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00a      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008428:	4b8a      	ldr	r3, [pc, #552]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800842a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800842e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008436:	4987      	ldr	r1, [pc, #540]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008438:	4313      	orrs	r3, r2
 800843a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00a      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800844a:	4b82      	ldr	r3, [pc, #520]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800844c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008450:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008458:	497e      	ldr	r1, [pc, #504]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800845a:	4313      	orrs	r3, r2
 800845c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00a      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800846c:	4b79      	ldr	r3, [pc, #484]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800846e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008472:	f023 0203 	bic.w	r2, r3, #3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800847a:	4976      	ldr	r1, [pc, #472]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800847c:	4313      	orrs	r3, r2
 800847e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00a      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800848e:	4b71      	ldr	r3, [pc, #452]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008494:	f023 020c 	bic.w	r2, r3, #12
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800849c:	496d      	ldr	r1, [pc, #436]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00a      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80084b0:	4b68      	ldr	r3, [pc, #416]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80084b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084be:	4965      	ldr	r1, [pc, #404]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00a      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80084d2:	4b60      	ldr	r3, [pc, #384]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80084d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084e0:	495c      	ldr	r1, [pc, #368]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00a      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80084f4:	4b57      	ldr	r3, [pc, #348]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80084f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008502:	4954      	ldr	r1, [pc, #336]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008504:	4313      	orrs	r3, r2
 8008506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00a      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008516:	4b4f      	ldr	r3, [pc, #316]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800851c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008524:	494b      	ldr	r1, [pc, #300]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008526:	4313      	orrs	r3, r2
 8008528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00a      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008538:	4b46      	ldr	r3, [pc, #280]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800853a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800853e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008546:	4943      	ldr	r1, [pc, #268]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008548:	4313      	orrs	r3, r2
 800854a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800855a:	4b3e      	ldr	r3, [pc, #248]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800855c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008560:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008568:	493a      	ldr	r1, [pc, #232]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800856a:	4313      	orrs	r3, r2
 800856c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00a      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800857c:	4b35      	ldr	r3, [pc, #212]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800857e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008582:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800858a:	4932      	ldr	r1, [pc, #200]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800858c:	4313      	orrs	r3, r2
 800858e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d011      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800859e:	4b2d      	ldr	r3, [pc, #180]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80085a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ac:	4929      	ldr	r1, [pc, #164]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085bc:	d101      	bne.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80085be:	2301      	movs	r3, #1
 80085c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0308 	and.w	r3, r3, #8
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80085ce:	2301      	movs	r3, #1
 80085d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085de:	4b1d      	ldr	r3, [pc, #116]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80085e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085ec:	4919      	ldr	r1, [pc, #100]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00b      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008600:	4b14      	ldr	r3, [pc, #80]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008606:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008610:	4910      	ldr	r1, [pc, #64]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008612:	4313      	orrs	r3, r2
 8008614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d006      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 80d9 	beq.w	80087de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800862c:	4b09      	ldr	r3, [pc, #36]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a08      	ldr	r2, [pc, #32]	; (8008654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008632:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008638:	f7fc f890 	bl	800475c <HAL_GetTick>
 800863c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800863e:	e00b      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008640:	f7fc f88c 	bl	800475c <HAL_GetTick>
 8008644:	4602      	mov	r2, r0
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	2b64      	cmp	r3, #100	; 0x64
 800864c:	d904      	bls.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e197      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008652:	bf00      	nop
 8008654:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008658:	4b6c      	ldr	r3, [pc, #432]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1ed      	bne.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	2b00      	cmp	r3, #0
 800866e:	d021      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008674:	2b00      	cmp	r3, #0
 8008676:	d11d      	bne.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008678:	4b64      	ldr	r3, [pc, #400]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800867a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800867e:	0c1b      	lsrs	r3, r3, #16
 8008680:	f003 0303 	and.w	r3, r3, #3
 8008684:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008686:	4b61      	ldr	r3, [pc, #388]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800868c:	0e1b      	lsrs	r3, r3, #24
 800868e:	f003 030f 	and.w	r3, r3, #15
 8008692:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	019a      	lsls	r2, r3, #6
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	041b      	lsls	r3, r3, #16
 800869e:	431a      	orrs	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	061b      	lsls	r3, r3, #24
 80086a4:	431a      	orrs	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	071b      	lsls	r3, r3, #28
 80086ac:	4957      	ldr	r1, [pc, #348]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d004      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086c8:	d00a      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d02e      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086de:	d129      	bne.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80086e0:	4b4a      	ldr	r3, [pc, #296]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086e6:	0c1b      	lsrs	r3, r3, #16
 80086e8:	f003 0303 	and.w	r3, r3, #3
 80086ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80086ee:	4b47      	ldr	r3, [pc, #284]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086f4:	0f1b      	lsrs	r3, r3, #28
 80086f6:	f003 0307 	and.w	r3, r3, #7
 80086fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	019a      	lsls	r2, r3, #6
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	041b      	lsls	r3, r3, #16
 8008706:	431a      	orrs	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	061b      	lsls	r3, r3, #24
 800870e:	431a      	orrs	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	071b      	lsls	r3, r3, #28
 8008714:	493d      	ldr	r1, [pc, #244]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008716:	4313      	orrs	r3, r2
 8008718:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800871c:	4b3b      	ldr	r3, [pc, #236]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800871e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008722:	f023 021f 	bic.w	r2, r3, #31
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872a:	3b01      	subs	r3, #1
 800872c:	4937      	ldr	r1, [pc, #220]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800872e:	4313      	orrs	r3, r2
 8008730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d01d      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008740:	4b32      	ldr	r3, [pc, #200]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008746:	0e1b      	lsrs	r3, r3, #24
 8008748:	f003 030f 	and.w	r3, r3, #15
 800874c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800874e:	4b2f      	ldr	r3, [pc, #188]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008754:	0f1b      	lsrs	r3, r3, #28
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	019a      	lsls	r2, r3, #6
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	041b      	lsls	r3, r3, #16
 8008768:	431a      	orrs	r2, r3
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	061b      	lsls	r3, r3, #24
 800876e:	431a      	orrs	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	071b      	lsls	r3, r3, #28
 8008774:	4925      	ldr	r1, [pc, #148]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008776:	4313      	orrs	r3, r2
 8008778:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d011      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	019a      	lsls	r2, r3, #6
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	041b      	lsls	r3, r3, #16
 8008794:	431a      	orrs	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	061b      	lsls	r3, r3, #24
 800879c:	431a      	orrs	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	071b      	lsls	r3, r3, #28
 80087a4:	4919      	ldr	r1, [pc, #100]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80087ac:	4b17      	ldr	r3, [pc, #92]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a16      	ldr	r2, [pc, #88]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80087b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087b8:	f7fb ffd0 	bl	800475c <HAL_GetTick>
 80087bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80087be:	e008      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80087c0:	f7fb ffcc 	bl	800475c <HAL_GetTick>
 80087c4:	4602      	mov	r2, r0
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	2b64      	cmp	r3, #100	; 0x64
 80087cc:	d901      	bls.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e0d7      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80087d2:	4b0e      	ldr	r3, [pc, #56]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0f0      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	f040 80cd 	bne.w	8008980 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80087e6:	4b09      	ldr	r3, [pc, #36]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a08      	ldr	r2, [pc, #32]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087f2:	f7fb ffb3 	bl	800475c <HAL_GetTick>
 80087f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80087f8:	e00a      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80087fa:	f7fb ffaf 	bl	800475c <HAL_GetTick>
 80087fe:	4602      	mov	r2, r0
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	2b64      	cmp	r3, #100	; 0x64
 8008806:	d903      	bls.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e0ba      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800880c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008810:	4b5e      	ldr	r3, [pc, #376]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800881c:	d0ed      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800882e:	2b00      	cmp	r3, #0
 8008830:	d009      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800883a:	2b00      	cmp	r3, #0
 800883c:	d02e      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	2b00      	cmp	r3, #0
 8008844:	d12a      	bne.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008846:	4b51      	ldr	r3, [pc, #324]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800884c:	0c1b      	lsrs	r3, r3, #16
 800884e:	f003 0303 	and.w	r3, r3, #3
 8008852:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008854:	4b4d      	ldr	r3, [pc, #308]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800885a:	0f1b      	lsrs	r3, r3, #28
 800885c:	f003 0307 	and.w	r3, r3, #7
 8008860:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	019a      	lsls	r2, r3, #6
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	041b      	lsls	r3, r3, #16
 800886c:	431a      	orrs	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	061b      	lsls	r3, r3, #24
 8008874:	431a      	orrs	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	071b      	lsls	r3, r3, #28
 800887a:	4944      	ldr	r1, [pc, #272]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800887c:	4313      	orrs	r3, r2
 800887e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008882:	4b42      	ldr	r3, [pc, #264]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008888:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008890:	3b01      	subs	r3, #1
 8008892:	021b      	lsls	r3, r3, #8
 8008894:	493d      	ldr	r1, [pc, #244]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008896:	4313      	orrs	r3, r2
 8008898:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d022      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088b0:	d11d      	bne.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80088b2:	4b36      	ldr	r3, [pc, #216]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088b8:	0e1b      	lsrs	r3, r3, #24
 80088ba:	f003 030f 	and.w	r3, r3, #15
 80088be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80088c0:	4b32      	ldr	r3, [pc, #200]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088c6:	0f1b      	lsrs	r3, r3, #28
 80088c8:	f003 0307 	and.w	r3, r3, #7
 80088cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	019a      	lsls	r2, r3, #6
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a1b      	ldr	r3, [r3, #32]
 80088d8:	041b      	lsls	r3, r3, #16
 80088da:	431a      	orrs	r2, r3
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	061b      	lsls	r3, r3, #24
 80088e0:	431a      	orrs	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	071b      	lsls	r3, r3, #28
 80088e6:	4929      	ldr	r1, [pc, #164]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0308 	and.w	r3, r3, #8
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d028      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80088fa:	4b24      	ldr	r3, [pc, #144]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008900:	0e1b      	lsrs	r3, r3, #24
 8008902:	f003 030f 	and.w	r3, r3, #15
 8008906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008908:	4b20      	ldr	r3, [pc, #128]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800890a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800890e:	0c1b      	lsrs	r3, r3, #16
 8008910:	f003 0303 	and.w	r3, r3, #3
 8008914:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	019a      	lsls	r2, r3, #6
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	041b      	lsls	r3, r3, #16
 8008920:	431a      	orrs	r2, r3
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	061b      	lsls	r3, r3, #24
 8008926:	431a      	orrs	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	071b      	lsls	r3, r3, #28
 800892e:	4917      	ldr	r1, [pc, #92]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008930:	4313      	orrs	r3, r2
 8008932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008936:	4b15      	ldr	r3, [pc, #84]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800893c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008944:	4911      	ldr	r1, [pc, #68]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008946:	4313      	orrs	r3, r2
 8008948:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800894c:	4b0f      	ldr	r3, [pc, #60]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a0e      	ldr	r2, [pc, #56]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008958:	f7fb ff00 	bl	800475c <HAL_GetTick>
 800895c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800895e:	e008      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008960:	f7fb fefc 	bl	800475c <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	2b64      	cmp	r3, #100	; 0x64
 800896c:	d901      	bls.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e007      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008972:	4b06      	ldr	r3, [pc, #24]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800897a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800897e:	d1ef      	bne.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3720      	adds	r7, #32
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	40023800 	.word	0x40023800

08008990 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d101      	bne.n	80089a2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e081      	b.n	8008aa6 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	7f5b      	ldrb	r3, [r3, #29]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d105      	bne.n	80089b8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f7fb fac4 	bl	8003f40 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2202      	movs	r2, #2
 80089bc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	22ca      	movs	r2, #202	; 0xca
 80089c4:	625a      	str	r2, [r3, #36]	; 0x24
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2253      	movs	r2, #83	; 0x53
 80089cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fb16 	bl	8009000 <RTC_EnterInitMode>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d008      	beq.n	80089ec <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	22ff      	movs	r2, #255	; 0xff
 80089e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2204      	movs	r2, #4
 80089e6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e05c      	b.n	8008aa6 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6899      	ldr	r1, [r3, #8]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	4b2e      	ldr	r3, [pc, #184]	; (8008ab0 <HAL_RTC_Init+0x120>)
 80089f8:	400b      	ands	r3, r1
 80089fa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6899      	ldr	r1, [r3, #8]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685a      	ldr	r2, [r3, #4]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	431a      	orrs	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	430a      	orrs	r2, r1
 8008a18:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	68d2      	ldr	r2, [r2, #12]
 8008a22:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6919      	ldr	r1, [r3, #16]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	041a      	lsls	r2, r3, #16
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	430a      	orrs	r2, r1
 8008a36:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68da      	ldr	r2, [r3, #12]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a46:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f003 0320 	and.w	r3, r3, #32
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10e      	bne.n	8008a74 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 faaa 	bl	8008fb0 <HAL_RTC_WaitForSynchro>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d008      	beq.n	8008a74 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	22ff      	movs	r2, #255	; 0xff
 8008a68:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2204      	movs	r2, #4
 8008a6e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e018      	b.n	8008aa6 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f022 0208 	bic.w	r2, r2, #8
 8008a82:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	699a      	ldr	r2, [r3, #24]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	430a      	orrs	r2, r1
 8008a94:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	22ff      	movs	r2, #255	; 0xff
 8008a9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
  }
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	ff8fffbf 	.word	0xff8fffbf

08008ab4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008ab4:	b590      	push	{r4, r7, lr}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	7f1b      	ldrb	r3, [r3, #28]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d101      	bne.n	8008ad0 <HAL_RTC_SetTime+0x1c>
 8008acc:	2302      	movs	r3, #2
 8008ace:	e0a8      	b.n	8008c22 <HAL_RTC_SetTime+0x16e>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2202      	movs	r2, #2
 8008ada:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d126      	bne.n	8008b30 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d102      	bne.n	8008af6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	2200      	movs	r2, #0
 8008af4:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 faac 	bl	8009058 <RTC_ByteToBcd2>
 8008b00:	4603      	mov	r3, r0
 8008b02:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	785b      	ldrb	r3, [r3, #1]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f000 faa5 	bl	8009058 <RTC_ByteToBcd2>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008b12:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	789b      	ldrb	r3, [r3, #2]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 fa9d 	bl	8009058 <RTC_ByteToBcd2>
 8008b1e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008b20:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	7b1b      	ldrb	r3, [r3, #12]
 8008b28:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	617b      	str	r3, [r7, #20]
 8008b2e:	e018      	b.n	8008b62 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d102      	bne.n	8008b44 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2200      	movs	r2, #0
 8008b42:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	785b      	ldrb	r3, [r3, #1]
 8008b4e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008b50:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008b56:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	7b1b      	ldrb	r3, [r3, #12]
 8008b5c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	22ca      	movs	r2, #202	; 0xca
 8008b68:	625a      	str	r2, [r3, #36]	; 0x24
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2253      	movs	r2, #83	; 0x53
 8008b70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f000 fa44 	bl	8009000 <RTC_EnterInitMode>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00b      	beq.n	8008b96 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	22ff      	movs	r2, #255	; 0xff
 8008b84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2204      	movs	r2, #4
 8008b8a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e045      	b.n	8008c22 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	6979      	ldr	r1, [r7, #20]
 8008b9c:	4b23      	ldr	r3, [pc, #140]	; (8008c2c <HAL_RTC_SetTime+0x178>)
 8008b9e:	400b      	ands	r3, r1
 8008ba0:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	689a      	ldr	r2, [r3, #8]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008bb0:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6899      	ldr	r1, [r3, #8]
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	691a      	ldr	r2, [r3, #16]
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	695b      	ldr	r3, [r3, #20]
 8008bc0:	431a      	orrs	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68da      	ldr	r2, [r3, #12]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bd8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	f003 0320 	and.w	r3, r3, #32
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d111      	bne.n	8008c0c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 f9e1 	bl	8008fb0 <HAL_RTC_WaitForSynchro>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00b      	beq.n	8008c0c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	22ff      	movs	r2, #255	; 0xff
 8008bfa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2204      	movs	r2, #4
 8008c00:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e00a      	b.n	8008c22 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	22ff      	movs	r2, #255	; 0xff
 8008c12:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2201      	movs	r2, #1
 8008c18:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008c20:	2300      	movs	r3, #0
  }
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	371c      	adds	r7, #28
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd90      	pop	{r4, r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	007f7f7f 	.word	0x007f7f7f

08008c30 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008c30:	b590      	push	{r4, r7, lr}
 8008c32:	b087      	sub	sp, #28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	7f1b      	ldrb	r3, [r3, #28]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d101      	bne.n	8008c4c <HAL_RTC_SetDate+0x1c>
 8008c48:	2302      	movs	r3, #2
 8008c4a:	e092      	b.n	8008d72 <HAL_RTC_SetDate+0x142>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2202      	movs	r2, #2
 8008c56:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10e      	bne.n	8008c7c <HAL_RTC_SetDate+0x4c>
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	785b      	ldrb	r3, [r3, #1]
 8008c62:	f003 0310 	and.w	r3, r3, #16
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d008      	beq.n	8008c7c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	785b      	ldrb	r3, [r3, #1]
 8008c6e:	f023 0310 	bic.w	r3, r3, #16
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	330a      	adds	r3, #10
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d11c      	bne.n	8008cbc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	78db      	ldrb	r3, [r3, #3]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 f9e6 	bl	8009058 <RTC_ByteToBcd2>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	785b      	ldrb	r3, [r3, #1]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 f9df 	bl	8009058 <RTC_ByteToBcd2>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008c9e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	789b      	ldrb	r3, [r3, #2]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f000 f9d7 	bl	8009058 <RTC_ByteToBcd2>
 8008caa:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008cac:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	617b      	str	r3, [r7, #20]
 8008cba:	e00e      	b.n	8008cda <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	78db      	ldrb	r3, [r3, #3]
 8008cc0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	785b      	ldrb	r3, [r3, #1]
 8008cc6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008cc8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008cce:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	22ca      	movs	r2, #202	; 0xca
 8008ce0:	625a      	str	r2, [r3, #36]	; 0x24
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2253      	movs	r2, #83	; 0x53
 8008ce8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f000 f988 	bl	8009000 <RTC_EnterInitMode>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00b      	beq.n	8008d0e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	22ff      	movs	r2, #255	; 0xff
 8008cfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2204      	movs	r2, #4
 8008d02:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e031      	b.n	8008d72 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	6979      	ldr	r1, [r7, #20]
 8008d14:	4b19      	ldr	r3, [pc, #100]	; (8008d7c <HAL_RTC_SetDate+0x14c>)
 8008d16:	400b      	ands	r3, r1
 8008d18:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68da      	ldr	r2, [r3, #12]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d28:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	f003 0320 	and.w	r3, r3, #32
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d111      	bne.n	8008d5c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f000 f939 	bl	8008fb0 <HAL_RTC_WaitForSynchro>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00b      	beq.n	8008d5c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	22ff      	movs	r2, #255	; 0xff
 8008d4a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2204      	movs	r2, #4
 8008d50:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e00a      	b.n	8008d72 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	22ff      	movs	r2, #255	; 0xff
 8008d62:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2201      	movs	r2, #1
 8008d68:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008d70:	2300      	movs	r3, #0
  }
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	371c      	adds	r7, #28
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd90      	pop	{r4, r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	00ffff3f 	.word	0x00ffff3f

08008d80 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008d80:	b590      	push	{r4, r7, lr}
 8008d82:	b089      	sub	sp, #36	; 0x24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008d90:	2300      	movs	r3, #0
 8008d92:	61fb      	str	r3, [r7, #28]
 8008d94:	2300      	movs	r3, #0
 8008d96:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	7f1b      	ldrb	r3, [r3, #28]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d101      	bne.n	8008da4 <HAL_RTC_SetAlarm+0x24>
 8008da0:	2302      	movs	r3, #2
 8008da2:	e101      	b.n	8008fa8 <HAL_RTC_SetAlarm+0x228>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2201      	movs	r2, #1
 8008da8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2202      	movs	r2, #2
 8008dae:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d137      	bne.n	8008e26 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d102      	bne.n	8008dca <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 f942 	bl	8009058 <RTC_ByteToBcd2>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	785b      	ldrb	r3, [r3, #1]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 f93b 	bl	8009058 <RTC_ByteToBcd2>
 8008de2:	4603      	mov	r3, r0
 8008de4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008de6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	789b      	ldrb	r3, [r3, #2]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f000 f933 	bl	8009058 <RTC_ByteToBcd2>
 8008df2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008df4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	7b1b      	ldrb	r3, [r3, #12]
 8008dfc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008dfe:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 f925 	bl	8009058 <RTC_ByteToBcd2>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008e12:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008e1a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008e20:	4313      	orrs	r3, r2
 8008e22:	61fb      	str	r3, [r7, #28]
 8008e24:	e023      	b.n	8008e6e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d102      	bne.n	8008e3a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2200      	movs	r2, #0
 8008e38:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	785b      	ldrb	r3, [r3, #1]
 8008e44:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008e46:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008e4c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	7b1b      	ldrb	r3, [r3, #12]
 8008e52:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008e54:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008e5c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008e5e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008e64:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	22ca      	movs	r2, #202	; 0xca
 8008e80:	625a      	str	r2, [r3, #36]	; 0x24
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2253      	movs	r2, #83	; 0x53
 8008e88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e92:	d13f      	bne.n	8008f14 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	689a      	ldr	r2, [r3, #8]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ea2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	689a      	ldr	r2, [r3, #8]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008eb2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008eb4:	f7fb fc52 	bl	800475c <HAL_GetTick>
 8008eb8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008eba:	e013      	b.n	8008ee4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008ebc:	f7fb fc4e 	bl	800475c <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008eca:	d90b      	bls.n	8008ee4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	22ff      	movs	r2, #255	; 0xff
 8008ed2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2203      	movs	r2, #3
 8008ed8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e061      	b.n	8008fa8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d0e4      	beq.n	8008ebc <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	69fa      	ldr	r2, [r7, #28]
 8008ef8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689a      	ldr	r2, [r3, #8]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f10:	609a      	str	r2, [r3, #8]
 8008f12:	e03e      	b.n	8008f92 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	689a      	ldr	r2, [r3, #8]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008f22:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689a      	ldr	r2, [r3, #8]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f32:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f34:	f7fb fc12 	bl	800475c <HAL_GetTick>
 8008f38:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008f3a:	e013      	b.n	8008f64 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008f3c:	f7fb fc0e 	bl	800475c <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f4a:	d90b      	bls.n	8008f64 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	22ff      	movs	r2, #255	; 0xff
 8008f52:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2203      	movs	r2, #3
 8008f58:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008f60:	2303      	movs	r3, #3
 8008f62:	e021      	b.n	8008fa8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	f003 0302 	and.w	r3, r3, #2
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d0e4      	beq.n	8008f3c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	69fa      	ldr	r2, [r7, #28]
 8008f78:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f90:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	22ff      	movs	r2, #255	; 0xff
 8008f98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3724      	adds	r7, #36	; 0x24
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd90      	pop	{r4, r7, pc}

08008fb0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008fca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008fcc:	f7fb fbc6 	bl	800475c <HAL_GetTick>
 8008fd0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008fd2:	e009      	b.n	8008fe8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008fd4:	f7fb fbc2 	bl	800475c <HAL_GetTick>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fe2:	d901      	bls.n	8008fe8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e007      	b.n	8008ff8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f003 0320 	and.w	r3, r3, #32
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0ee      	beq.n	8008fd4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009008:	2300      	movs	r3, #0
 800900a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009016:	2b00      	cmp	r3, #0
 8009018:	d119      	bne.n	800904e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f04f 32ff 	mov.w	r2, #4294967295
 8009022:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009024:	f7fb fb9a 	bl	800475c <HAL_GetTick>
 8009028:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800902a:	e009      	b.n	8009040 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800902c:	f7fb fb96 	bl	800475c <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800903a:	d901      	bls.n	8009040 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	e007      	b.n	8009050 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800904a:	2b00      	cmp	r3, #0
 800904c:	d0ee      	beq.n	800902c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	4603      	mov	r3, r0
 8009060:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8009062:	2300      	movs	r3, #0
 8009064:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8009066:	e005      	b.n	8009074 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	3301      	adds	r3, #1
 800906c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800906e:	79fb      	ldrb	r3, [r7, #7]
 8009070:	3b0a      	subs	r3, #10
 8009072:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	2b09      	cmp	r3, #9
 8009078:	d8f6      	bhi.n	8009068 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	b2db      	uxtb	r3, r3
 800907e:	011b      	lsls	r3, r3, #4
 8009080:	b2da      	uxtb	r2, r3
 8009082:	79fb      	ldrb	r3, [r7, #7]
 8009084:	4313      	orrs	r3, r2
 8009086:	b2db      	uxtb	r3, r3
}
 8009088:	4618      	mov	r0, r3
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009094:	b480      	push	{r7}
 8009096:	b087      	sub	sp, #28
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	7f1b      	ldrb	r3, [r3, #28]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d101      	bne.n	80090b0 <HAL_RTCEx_SetTimeStamp+0x1c>
 80090ac:	2302      	movs	r3, #2
 80090ae:	e03e      	b.n	800912e <HAL_RTCEx_SetTimeStamp+0x9a>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2201      	movs	r2, #1
 80090b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2202      	movs	r2, #2
 80090ba:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	689a      	ldr	r2, [r3, #8]
 80090c2:	4b1e      	ldr	r3, [pc, #120]	; (800913c <HAL_RTCEx_SetTimeStamp+0xa8>)
 80090c4:	4013      	ands	r3, r2
 80090c6:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	22ca      	movs	r2, #202	; 0xca
 80090d6:	625a      	str	r2, [r3, #36]	; 0x24
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2253      	movs	r2, #83	; 0x53
 80090de:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f022 0206 	bic.w	r2, r2, #6
 80090ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	430a      	orrs	r2, r1
 80090fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	689a      	ldr	r2, [r3, #8]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009116:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	22ff      	movs	r2, #255	; 0xff
 800911e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2201      	movs	r2, #1
 8009124:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	371c      	adds	r7, #28
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	fffff7f7 	.word	0xfffff7f7

08009140 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d101      	bne.n	8009154 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e025      	b.n	80091a0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800915a:	b2db      	uxtb	r3, r3
 800915c:	2b00      	cmp	r3, #0
 800915e:	d106      	bne.n	800916e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f7fb f9b3 	bl	80044d4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2202      	movs	r2, #2
 8009172:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3304      	adds	r3, #4
 800917e:	4619      	mov	r1, r3
 8009180:	4610      	mov	r0, r2
 8009182:	f001 fed9 	bl	800af38 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6818      	ldr	r0, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	461a      	mov	r2, r3
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	f001 ff2d 	bl	800aff0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2201      	movs	r2, #1
 800919a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80091ba:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80091bc:	7dfb      	ldrb	r3, [r7, #23]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d101      	bne.n	80091c6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80091c2:	2302      	movs	r3, #2
 80091c4:	e021      	b.n	800920a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80091c6:	7dfb      	ldrb	r3, [r7, #23]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d002      	beq.n	80091d2 <HAL_SDRAM_SendCommand+0x2a>
 80091cc:	7dfb      	ldrb	r3, [r7, #23]
 80091ce:	2b05      	cmp	r3, #5
 80091d0:	d118      	bne.n	8009204 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2202      	movs	r2, #2
 80091d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	68b9      	ldr	r1, [r7, #8]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f001 ff6e 	bl	800b0c4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d104      	bne.n	80091fa <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2205      	movs	r2, #5
 80091f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80091f8:	e006      	b.n	8009208 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009202:	e001      	b.n	8009208 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	e000      	b.n	800920a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3718      	adds	r7, #24
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b02      	cmp	r3, #2
 8009226:	d101      	bne.n	800922c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009228:	2302      	movs	r3, #2
 800922a:	e016      	b.n	800925a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b01      	cmp	r3, #1
 8009236:	d10f      	bne.n	8009258 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2202      	movs	r2, #2
 800923c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	4618      	mov	r0, r3
 8009248:	f001 ff60 	bl	800b10c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	e000      	b.n	800925a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009258:	2301      	movs	r3, #1
}
 800925a:	4618      	mov	r0, r3
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b084      	sub	sp, #16
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	e09d      	b.n	80093b0 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009278:	2b00      	cmp	r3, #0
 800927a:	d108      	bne.n	800928e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009284:	d009      	beq.n	800929a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	61da      	str	r2, [r3, #28]
 800928c:	e005      	b.n	800929a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d106      	bne.n	80092ba <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f7fa fe71 	bl	8003f9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2202      	movs	r2, #2
 80092be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092d0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092da:	d902      	bls.n	80092e2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80092dc:	2300      	movs	r3, #0
 80092de:	60fb      	str	r3, [r7, #12]
 80092e0:	e002      	b.n	80092e8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80092e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092e6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80092f0:	d007      	beq.n	8009302 <HAL_SPI_Init+0xa0>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092fa:	d002      	beq.n	8009302 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009312:	431a      	orrs	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	431a      	orrs	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	431a      	orrs	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009330:	431a      	orrs	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	69db      	ldr	r3, [r3, #28]
 8009336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800933a:	431a      	orrs	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a1b      	ldr	r3, [r3, #32]
 8009340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009344:	ea42 0103 	orr.w	r1, r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	430a      	orrs	r2, r1
 8009356:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	0c1b      	lsrs	r3, r3, #16
 800935e:	f003 0204 	and.w	r2, r3, #4
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009366:	f003 0310 	and.w	r3, r3, #16
 800936a:	431a      	orrs	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009370:	f003 0308 	and.w	r3, r3, #8
 8009374:	431a      	orrs	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800937e:	ea42 0103 	orr.w	r1, r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	430a      	orrs	r2, r1
 800938e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	69da      	ldr	r2, [r3, #28]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800939e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2201      	movs	r2, #1
 80093aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b087      	sub	sp, #28
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
 80093c4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d101      	bne.n	80093d8 <HAL_SPI_TransmitReceive_IT+0x20>
 80093d4:	2302      	movs	r3, #2
 80093d6:	e091      	b.n	80094fc <HAL_SPI_TransmitReceive_IT+0x144>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80093e6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80093ee:	7dbb      	ldrb	r3, [r7, #22]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d00d      	beq.n	8009410 <HAL_SPI_TransmitReceive_IT+0x58>
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093fa:	d106      	bne.n	800940a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d102      	bne.n	800940a <HAL_SPI_TransmitReceive_IT+0x52>
 8009404:	7dbb      	ldrb	r3, [r7, #22]
 8009406:	2b04      	cmp	r3, #4
 8009408:	d002      	beq.n	8009410 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800940a:	2302      	movs	r3, #2
 800940c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800940e:	e070      	b.n	80094f2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d005      	beq.n	8009422 <HAL_SPI_TransmitReceive_IT+0x6a>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <HAL_SPI_TransmitReceive_IT+0x6a>
 800941c:	887b      	ldrh	r3, [r7, #2]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d102      	bne.n	8009428 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009426:	e064      	b.n	80094f2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b04      	cmp	r3, #4
 8009432:	d003      	beq.n	800943c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2205      	movs	r2, #5
 8009438:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	887a      	ldrh	r2, [r7, #2]
 800944c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	887a      	ldrh	r2, [r7, #2]
 8009452:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	887a      	ldrh	r2, [r7, #2]
 800945e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	887a      	ldrh	r2, [r7, #2]
 8009466:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009472:	d906      	bls.n	8009482 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4a24      	ldr	r2, [pc, #144]	; (8009508 <HAL_SPI_TransmitReceive_IT+0x150>)
 8009478:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	4a23      	ldr	r2, [pc, #140]	; (800950c <HAL_SPI_TransmitReceive_IT+0x154>)
 800947e:	651a      	str	r2, [r3, #80]	; 0x50
 8009480:	e005      	b.n	800948e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	4a22      	ldr	r2, [pc, #136]	; (8009510 <HAL_SPI_TransmitReceive_IT+0x158>)
 8009486:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	4a22      	ldr	r2, [pc, #136]	; (8009514 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800948c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009496:	d802      	bhi.n	800949e <HAL_SPI_TransmitReceive_IT+0xe6>
 8009498:	887b      	ldrh	r3, [r7, #2]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d908      	bls.n	80094b0 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80094ac:	605a      	str	r2, [r3, #4]
 80094ae:	e007      	b.n	80094c0 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80094be:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80094ce:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094da:	2b40      	cmp	r3, #64	; 0x40
 80094dc:	d008      	beq.n	80094f0 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094ec:	601a      	str	r2, [r3, #0]
 80094ee:	e000      	b.n	80094f2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80094f0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	371c      	adds	r7, #28
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	080098bb 	.word	0x080098bb
 800950c:	08009921 	.word	0x08009921
 8009510:	0800976b 	.word	0x0800976b
 8009514:	08009829 	.word	0x08009829

08009518 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b088      	sub	sp, #32
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	099b      	lsrs	r3, r3, #6
 8009534:	f003 0301 	and.w	r3, r3, #1
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10f      	bne.n	800955c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00a      	beq.n	800955c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	099b      	lsrs	r3, r3, #6
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	2b00      	cmp	r3, #0
 8009550:	d004      	beq.n	800955c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	4798      	blx	r3
    return;
 800955a:	e0d7      	b.n	800970c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	085b      	lsrs	r3, r3, #1
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00a      	beq.n	800957e <HAL_SPI_IRQHandler+0x66>
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	09db      	lsrs	r3, r3, #7
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	2b00      	cmp	r3, #0
 8009572:	d004      	beq.n	800957e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	4798      	blx	r3
    return;
 800957c:	e0c6      	b.n	800970c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	095b      	lsrs	r3, r3, #5
 8009582:	f003 0301 	and.w	r3, r3, #1
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10c      	bne.n	80095a4 <HAL_SPI_IRQHandler+0x8c>
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	099b      	lsrs	r3, r3, #6
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	2b00      	cmp	r3, #0
 8009594:	d106      	bne.n	80095a4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	0a1b      	lsrs	r3, r3, #8
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f000 80b4 	beq.w	800970c <HAL_SPI_IRQHandler+0x1f4>
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	095b      	lsrs	r3, r3, #5
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f000 80ad 	beq.w	800970c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	099b      	lsrs	r3, r3, #6
 80095b6:	f003 0301 	and.w	r3, r3, #1
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d023      	beq.n	8009606 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b03      	cmp	r3, #3
 80095c8:	d011      	beq.n	80095ee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095ce:	f043 0204 	orr.w	r2, r3, #4
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095d6:	2300      	movs	r3, #0
 80095d8:	617b      	str	r3, [r7, #20]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	617b      	str	r3, [r7, #20]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	617b      	str	r3, [r7, #20]
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	e00b      	b.n	8009606 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095ee:	2300      	movs	r3, #0
 80095f0:	613b      	str	r3, [r7, #16]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	613b      	str	r3, [r7, #16]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	613b      	str	r3, [r7, #16]
 8009602:	693b      	ldr	r3, [r7, #16]
        return;
 8009604:	e082      	b.n	800970c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	095b      	lsrs	r3, r3, #5
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	d014      	beq.n	800963c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009616:	f043 0201 	orr.w	r2, r3, #1
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800961e:	2300      	movs	r3, #0
 8009620:	60fb      	str	r3, [r7, #12]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	60fb      	str	r3, [r7, #12]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009638:	601a      	str	r2, [r3, #0]
 800963a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	0a1b      	lsrs	r3, r3, #8
 8009640:	f003 0301 	and.w	r3, r3, #1
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00c      	beq.n	8009662 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800964c:	f043 0208 	orr.w	r2, r3, #8
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009654:	2300      	movs	r3, #0
 8009656:	60bb      	str	r3, [r7, #8]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	60bb      	str	r3, [r7, #8]
 8009660:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009666:	2b00      	cmp	r3, #0
 8009668:	d04f      	beq.n	800970a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	685a      	ldr	r2, [r3, #4]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009678:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	f003 0302 	and.w	r3, r3, #2
 8009688:	2b00      	cmp	r3, #0
 800968a:	d104      	bne.n	8009696 <HAL_SPI_IRQHandler+0x17e>
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	f003 0301 	and.w	r3, r3, #1
 8009692:	2b00      	cmp	r3, #0
 8009694:	d034      	beq.n	8009700 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f022 0203 	bic.w	r2, r2, #3
 80096a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d011      	beq.n	80096d2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096b2:	4a18      	ldr	r2, [pc, #96]	; (8009714 <HAL_SPI_IRQHandler+0x1fc>)
 80096b4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fb ff46 	bl	800554c <HAL_DMA_Abort_IT>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d005      	beq.n	80096d2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d016      	beq.n	8009708 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096de:	4a0d      	ldr	r2, [pc, #52]	; (8009714 <HAL_SPI_IRQHandler+0x1fc>)
 80096e0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fb ff30 	bl	800554c <HAL_DMA_Abort_IT>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00a      	beq.n	8009708 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80096fe:	e003      	b.n	8009708 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f813 	bl	800972c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009706:	e000      	b.n	800970a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009708:	bf00      	nop
    return;
 800970a:	bf00      	nop
  }
}
 800970c:	3720      	adds	r7, #32
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	08009741 	.word	0x08009741

08009718 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009734:	bf00      	nop
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f7ff ffe5 	bl	800972c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009762:	bf00      	nop
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009778:	b29b      	uxth	r3, r3
 800977a:	2b01      	cmp	r3, #1
 800977c:	d923      	bls.n	80097c6 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68da      	ldr	r2, [r3, #12]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009788:	b292      	uxth	r2, r2
 800978a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009790:	1c9a      	adds	r2, r3, #2
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800979c:	b29b      	uxth	r3, r3
 800979e:	3b02      	subs	r3, #2
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d11f      	bne.n	80097f4 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80097c2:	605a      	str	r2, [r3, #4]
 80097c4:	e016      	b.n	80097f4 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f103 020c 	add.w	r2, r3, #12
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d2:	7812      	ldrb	r2, [r2, #0]
 80097d4:	b2d2      	uxtb	r2, r2
 80097d6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097dc:	1c5a      	adds	r2, r3, #1
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	3b01      	subs	r3, #1
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10f      	bne.n	8009820 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800980e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009814:	b29b      	uxth	r3, r3
 8009816:	2b00      	cmp	r3, #0
 8009818:	d102      	bne.n	8009820 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fa38 	bl	8009c90 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009820:	bf00      	nop
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009834:	b29b      	uxth	r3, r3
 8009836:	2b01      	cmp	r3, #1
 8009838:	d912      	bls.n	8009860 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983e:	881a      	ldrh	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984a:	1c9a      	adds	r2, r3, #2
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009854:	b29b      	uxth	r3, r3
 8009856:	3b02      	subs	r3, #2
 8009858:	b29a      	uxth	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800985e:	e012      	b.n	8009886 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	330c      	adds	r3, #12
 800986a:	7812      	ldrb	r2, [r2, #0]
 800986c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800987c:	b29b      	uxth	r3, r3
 800987e:	3b01      	subs	r3, #1
 8009880:	b29a      	uxth	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800988a:	b29b      	uxth	r3, r3
 800988c:	2b00      	cmp	r3, #0
 800988e:	d110      	bne.n	80098b2 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685a      	ldr	r2, [r3, #4]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800989e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d102      	bne.n	80098b2 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 f9ef 	bl	8009c90 <SPI_CloseRxTx_ISR>
    }
  }
}
 80098b2:	bf00      	nop
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b082      	sub	sp, #8
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68da      	ldr	r2, [r3, #12]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098cc:	b292      	uxth	r2, r2
 80098ce:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d4:	1c9a      	adds	r2, r3, #2
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	3b01      	subs	r3, #1
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10f      	bne.n	8009918 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	685a      	ldr	r2, [r3, #4]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009906:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800990c:	b29b      	uxth	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	d102      	bne.n	8009918 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f9bc 	bl	8009c90 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992c:	881a      	ldrh	r2, [r3, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009938:	1c9a      	adds	r2, r3, #2
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009942:	b29b      	uxth	r3, r3
 8009944:	3b01      	subs	r3, #1
 8009946:	b29a      	uxth	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009950:	b29b      	uxth	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d110      	bne.n	8009978 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009964:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800996c:	b29b      	uxth	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d102      	bne.n	8009978 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f98c 	bl	8009c90 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009978:	bf00      	nop
 800997a:	3708      	adds	r7, #8
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b088      	sub	sp, #32
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	603b      	str	r3, [r7, #0]
 800998c:	4613      	mov	r3, r2
 800998e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009990:	f7fa fee4 	bl	800475c <HAL_GetTick>
 8009994:	4602      	mov	r2, r0
 8009996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009998:	1a9b      	subs	r3, r3, r2
 800999a:	683a      	ldr	r2, [r7, #0]
 800999c:	4413      	add	r3, r2
 800999e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80099a0:	f7fa fedc 	bl	800475c <HAL_GetTick>
 80099a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80099a6:	4b39      	ldr	r3, [pc, #228]	; (8009a8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	015b      	lsls	r3, r3, #5
 80099ac:	0d1b      	lsrs	r3, r3, #20
 80099ae:	69fa      	ldr	r2, [r7, #28]
 80099b0:	fb02 f303 	mul.w	r3, r2, r3
 80099b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099b6:	e054      	b.n	8009a62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099be:	d050      	beq.n	8009a62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80099c0:	f7fa fecc 	bl	800475c <HAL_GetTick>
 80099c4:	4602      	mov	r2, r0
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	69fa      	ldr	r2, [r7, #28]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d902      	bls.n	80099d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d13d      	bne.n	8009a52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80099e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099ee:	d111      	bne.n	8009a14 <SPI_WaitFlagStateUntilTimeout+0x94>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099f8:	d004      	beq.n	8009a04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a02:	d107      	bne.n	8009a14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a1c:	d10f      	bne.n	8009a3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a2c:	601a      	str	r2, [r3, #0]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	e017      	b.n	8009a82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d101      	bne.n	8009a5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	689a      	ldr	r2, [r3, #8]
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	bf0c      	ite	eq
 8009a72:	2301      	moveq	r3, #1
 8009a74:	2300      	movne	r3, #0
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	461a      	mov	r2, r3
 8009a7a:	79fb      	ldrb	r3, [r7, #7]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d19b      	bne.n	80099b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3720      	adds	r7, #32
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	20000050 	.word	0x20000050

08009a90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08a      	sub	sp, #40	; 0x28
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009aa2:	f7fa fe5b 	bl	800475c <HAL_GetTick>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aaa:	1a9b      	subs	r3, r3, r2
 8009aac:	683a      	ldr	r2, [r7, #0]
 8009aae:	4413      	add	r3, r2
 8009ab0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009ab2:	f7fa fe53 	bl	800475c <HAL_GetTick>
 8009ab6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	330c      	adds	r3, #12
 8009abe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009ac0:	4b3d      	ldr	r3, [pc, #244]	; (8009bb8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4413      	add	r3, r2
 8009aca:	00da      	lsls	r2, r3, #3
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	0d1b      	lsrs	r3, r3, #20
 8009ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ad2:	fb02 f303 	mul.w	r3, r2, r3
 8009ad6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009ad8:	e060      	b.n	8009b9c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009ae0:	d107      	bne.n	8009af2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d104      	bne.n	8009af2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009af0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af8:	d050      	beq.n	8009b9c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009afa:	f7fa fe2f 	bl	800475c <HAL_GetTick>
 8009afe:	4602      	mov	r2, r0
 8009b00:	6a3b      	ldr	r3, [r7, #32]
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d902      	bls.n	8009b10 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d13d      	bne.n	8009b8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	685a      	ldr	r2, [r3, #4]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b28:	d111      	bne.n	8009b4e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b32:	d004      	beq.n	8009b3e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b3c:	d107      	bne.n	8009b4e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b56:	d10f      	bne.n	8009b78 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b66:	601a      	str	r2, [r3, #0]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009b88:	2303      	movs	r3, #3
 8009b8a:	e010      	b.n	8009bae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d101      	bne.n	8009b96 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009b92:	2300      	movs	r3, #0
 8009b94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	689a      	ldr	r2, [r3, #8]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d196      	bne.n	8009ada <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3728      	adds	r7, #40	; 0x28
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	20000050 	.word	0x20000050

08009bbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b088      	sub	sp, #32
 8009bc0:	af02      	add	r7, sp, #8
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f7ff ff5b 	bl	8009a90 <SPI_WaitFifoStateUntilTimeout>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d007      	beq.n	8009bf0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009be4:	f043 0220 	orr.w	r2, r3, #32
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009bec:	2303      	movs	r3, #3
 8009bee:	e046      	b.n	8009c7e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009bf0:	4b25      	ldr	r3, [pc, #148]	; (8009c88 <SPI_EndRxTxTransaction+0xcc>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a25      	ldr	r2, [pc, #148]	; (8009c8c <SPI_EndRxTxTransaction+0xd0>)
 8009bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bfa:	0d5b      	lsrs	r3, r3, #21
 8009bfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c00:	fb02 f303 	mul.w	r3, r2, r3
 8009c04:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c0e:	d112      	bne.n	8009c36 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	2200      	movs	r2, #0
 8009c18:	2180      	movs	r1, #128	; 0x80
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f7ff feb0 	bl	8009980 <SPI_WaitFlagStateUntilTimeout>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d016      	beq.n	8009c54 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c2a:	f043 0220 	orr.w	r2, r3, #32
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009c32:	2303      	movs	r3, #3
 8009c34:	e023      	b.n	8009c7e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00a      	beq.n	8009c52 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c4c:	2b80      	cmp	r3, #128	; 0x80
 8009c4e:	d0f2      	beq.n	8009c36 <SPI_EndRxTxTransaction+0x7a>
 8009c50:	e000      	b.n	8009c54 <SPI_EndRxTxTransaction+0x98>
        break;
 8009c52:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f7ff ff15 	bl	8009a90 <SPI_WaitFifoStateUntilTimeout>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d007      	beq.n	8009c7c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c70:	f043 0220 	orr.w	r2, r3, #32
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e000      	b.n	8009c7e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	20000050 	.word	0x20000050
 8009c8c:	165e9f81 	.word	0x165e9f81

08009c90 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c98:	f7fa fd60 	bl	800475c <HAL_GetTick>
 8009c9c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	685a      	ldr	r2, [r3, #4]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f022 0220 	bic.w	r2, r2, #32
 8009cac:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	2164      	movs	r1, #100	; 0x64
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f7ff ff82 	bl	8009bbc <SPI_EndRxTxTransaction>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d005      	beq.n	8009cca <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cc2:	f043 0220 	orr.w	r2, r3, #32
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d115      	bne.n	8009cfe <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b04      	cmp	r3, #4
 8009cdc:	d107      	bne.n	8009cee <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f7ff fd16 	bl	8009718 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009cec:	e00e      	b.n	8009d0c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7f8 f86a 	bl	8001dd0 <HAL_SPI_TxRxCpltCallback>
}
 8009cfc:	e006      	b.n	8009d0c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2201      	movs	r2, #1
 8009d02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7ff fd10 	bl	800972c <HAL_SPI_ErrorCallback>
}
 8009d0c:	bf00      	nop
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d101      	bne.n	8009d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e049      	b.n	8009dba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d106      	bne.n	8009d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7fa f998 	bl	8004070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2202      	movs	r2, #2
 8009d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	3304      	adds	r3, #4
 8009d50:	4619      	mov	r1, r3
 8009d52:	4610      	mov	r0, r2
 8009d54:	f000 fac0 	bl	800a2d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2201      	movs	r2, #1
 8009d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
	...

08009dc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d001      	beq.n	8009ddc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e054      	b.n	8009e86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2202      	movs	r2, #2
 8009de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68da      	ldr	r2, [r3, #12]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f042 0201 	orr.w	r2, r2, #1
 8009df2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a26      	ldr	r2, [pc, #152]	; (8009e94 <HAL_TIM_Base_Start_IT+0xd0>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d022      	beq.n	8009e44 <HAL_TIM_Base_Start_IT+0x80>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e06:	d01d      	beq.n	8009e44 <HAL_TIM_Base_Start_IT+0x80>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a22      	ldr	r2, [pc, #136]	; (8009e98 <HAL_TIM_Base_Start_IT+0xd4>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d018      	beq.n	8009e44 <HAL_TIM_Base_Start_IT+0x80>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a21      	ldr	r2, [pc, #132]	; (8009e9c <HAL_TIM_Base_Start_IT+0xd8>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d013      	beq.n	8009e44 <HAL_TIM_Base_Start_IT+0x80>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a1f      	ldr	r2, [pc, #124]	; (8009ea0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d00e      	beq.n	8009e44 <HAL_TIM_Base_Start_IT+0x80>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a1e      	ldr	r2, [pc, #120]	; (8009ea4 <HAL_TIM_Base_Start_IT+0xe0>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d009      	beq.n	8009e44 <HAL_TIM_Base_Start_IT+0x80>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a1c      	ldr	r2, [pc, #112]	; (8009ea8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d004      	beq.n	8009e44 <HAL_TIM_Base_Start_IT+0x80>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a1b      	ldr	r2, [pc, #108]	; (8009eac <HAL_TIM_Base_Start_IT+0xe8>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d115      	bne.n	8009e70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	689a      	ldr	r2, [r3, #8]
 8009e4a:	4b19      	ldr	r3, [pc, #100]	; (8009eb0 <HAL_TIM_Base_Start_IT+0xec>)
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2b06      	cmp	r3, #6
 8009e54:	d015      	beq.n	8009e82 <HAL_TIM_Base_Start_IT+0xbe>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e5c:	d011      	beq.n	8009e82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f042 0201 	orr.w	r2, r2, #1
 8009e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e6e:	e008      	b.n	8009e82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f042 0201 	orr.w	r2, r2, #1
 8009e7e:	601a      	str	r2, [r3, #0]
 8009e80:	e000      	b.n	8009e84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3714      	adds	r7, #20
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	40010000 	.word	0x40010000
 8009e98:	40000400 	.word	0x40000400
 8009e9c:	40000800 	.word	0x40000800
 8009ea0:	40000c00 	.word	0x40000c00
 8009ea4:	40010400 	.word	0x40010400
 8009ea8:	40014000 	.word	0x40014000
 8009eac:	40001800 	.word	0x40001800
 8009eb0:	00010007 	.word	0x00010007

08009eb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	f003 0302 	and.w	r3, r3, #2
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d122      	bne.n	8009f10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	f003 0302 	and.w	r3, r3, #2
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d11b      	bne.n	8009f10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f06f 0202 	mvn.w	r2, #2
 8009ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	f003 0303 	and.w	r3, r3, #3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d003      	beq.n	8009efe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f9d0 	bl	800a29c <HAL_TIM_IC_CaptureCallback>
 8009efc:	e005      	b.n	8009f0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f9c2 	bl	800a288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f9d3 	bl	800a2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	f003 0304 	and.w	r3, r3, #4
 8009f1a:	2b04      	cmp	r3, #4
 8009f1c:	d122      	bne.n	8009f64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	f003 0304 	and.w	r3, r3, #4
 8009f28:	2b04      	cmp	r3, #4
 8009f2a:	d11b      	bne.n	8009f64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f06f 0204 	mvn.w	r2, #4
 8009f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2202      	movs	r2, #2
 8009f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	699b      	ldr	r3, [r3, #24]
 8009f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d003      	beq.n	8009f52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f9a6 	bl	800a29c <HAL_TIM_IC_CaptureCallback>
 8009f50:	e005      	b.n	8009f5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f998 	bl	800a288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f9a9 	bl	800a2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	f003 0308 	and.w	r3, r3, #8
 8009f6e:	2b08      	cmp	r3, #8
 8009f70:	d122      	bne.n	8009fb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	f003 0308 	and.w	r3, r3, #8
 8009f7c:	2b08      	cmp	r3, #8
 8009f7e:	d11b      	bne.n	8009fb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f06f 0208 	mvn.w	r2, #8
 8009f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2204      	movs	r2, #4
 8009f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	f003 0303 	and.w	r3, r3, #3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d003      	beq.n	8009fa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f97c 	bl	800a29c <HAL_TIM_IC_CaptureCallback>
 8009fa4:	e005      	b.n	8009fb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f96e 	bl	800a288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f97f 	bl	800a2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	f003 0310 	and.w	r3, r3, #16
 8009fc2:	2b10      	cmp	r3, #16
 8009fc4:	d122      	bne.n	800a00c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	f003 0310 	and.w	r3, r3, #16
 8009fd0:	2b10      	cmp	r3, #16
 8009fd2:	d11b      	bne.n	800a00c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f06f 0210 	mvn.w	r2, #16
 8009fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2208      	movs	r2, #8
 8009fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	69db      	ldr	r3, [r3, #28]
 8009fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d003      	beq.n	8009ffa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f952 	bl	800a29c <HAL_TIM_IC_CaptureCallback>
 8009ff8:	e005      	b.n	800a006 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f944 	bl	800a288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f955 	bl	800a2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	2b01      	cmp	r3, #1
 800a018:	d10e      	bne.n	800a038 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	f003 0301 	and.w	r3, r3, #1
 800a024:	2b01      	cmp	r3, #1
 800a026:	d107      	bne.n	800a038 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f06f 0201 	mvn.w	r2, #1
 800a030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f7f8 f966 	bl	8002304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a042:	2b80      	cmp	r3, #128	; 0x80
 800a044:	d10e      	bne.n	800a064 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a050:	2b80      	cmp	r3, #128	; 0x80
 800a052:	d107      	bne.n	800a064 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a05c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 fb0c 	bl	800a67c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a06e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a072:	d10e      	bne.n	800a092 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a07e:	2b80      	cmp	r3, #128	; 0x80
 800a080:	d107      	bne.n	800a092 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a08a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 faff 	bl	800a690 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a09c:	2b40      	cmp	r3, #64	; 0x40
 800a09e:	d10e      	bne.n	800a0be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0aa:	2b40      	cmp	r3, #64	; 0x40
 800a0ac:	d107      	bne.n	800a0be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a0b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 f903 	bl	800a2c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	f003 0320 	and.w	r3, r3, #32
 800a0c8:	2b20      	cmp	r3, #32
 800a0ca:	d10e      	bne.n	800a0ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	f003 0320 	and.w	r3, r3, #32
 800a0d6:	2b20      	cmp	r3, #32
 800a0d8:	d107      	bne.n	800a0ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f06f 0220 	mvn.w	r2, #32
 800a0e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 fabf 	bl	800a668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0ea:	bf00      	nop
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
	...

0800a0f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d101      	bne.n	800a110 <HAL_TIM_ConfigClockSource+0x1c>
 800a10c:	2302      	movs	r3, #2
 800a10e:	e0b4      	b.n	800a27a <HAL_TIM_ConfigClockSource+0x186>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	4b56      	ldr	r3, [pc, #344]	; (800a284 <HAL_TIM_ConfigClockSource+0x190>)
 800a12c:	4013      	ands	r3, r2
 800a12e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a136:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a148:	d03e      	beq.n	800a1c8 <HAL_TIM_ConfigClockSource+0xd4>
 800a14a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a14e:	f200 8087 	bhi.w	800a260 <HAL_TIM_ConfigClockSource+0x16c>
 800a152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a156:	f000 8086 	beq.w	800a266 <HAL_TIM_ConfigClockSource+0x172>
 800a15a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a15e:	d87f      	bhi.n	800a260 <HAL_TIM_ConfigClockSource+0x16c>
 800a160:	2b70      	cmp	r3, #112	; 0x70
 800a162:	d01a      	beq.n	800a19a <HAL_TIM_ConfigClockSource+0xa6>
 800a164:	2b70      	cmp	r3, #112	; 0x70
 800a166:	d87b      	bhi.n	800a260 <HAL_TIM_ConfigClockSource+0x16c>
 800a168:	2b60      	cmp	r3, #96	; 0x60
 800a16a:	d050      	beq.n	800a20e <HAL_TIM_ConfigClockSource+0x11a>
 800a16c:	2b60      	cmp	r3, #96	; 0x60
 800a16e:	d877      	bhi.n	800a260 <HAL_TIM_ConfigClockSource+0x16c>
 800a170:	2b50      	cmp	r3, #80	; 0x50
 800a172:	d03c      	beq.n	800a1ee <HAL_TIM_ConfigClockSource+0xfa>
 800a174:	2b50      	cmp	r3, #80	; 0x50
 800a176:	d873      	bhi.n	800a260 <HAL_TIM_ConfigClockSource+0x16c>
 800a178:	2b40      	cmp	r3, #64	; 0x40
 800a17a:	d058      	beq.n	800a22e <HAL_TIM_ConfigClockSource+0x13a>
 800a17c:	2b40      	cmp	r3, #64	; 0x40
 800a17e:	d86f      	bhi.n	800a260 <HAL_TIM_ConfigClockSource+0x16c>
 800a180:	2b30      	cmp	r3, #48	; 0x30
 800a182:	d064      	beq.n	800a24e <HAL_TIM_ConfigClockSource+0x15a>
 800a184:	2b30      	cmp	r3, #48	; 0x30
 800a186:	d86b      	bhi.n	800a260 <HAL_TIM_ConfigClockSource+0x16c>
 800a188:	2b20      	cmp	r3, #32
 800a18a:	d060      	beq.n	800a24e <HAL_TIM_ConfigClockSource+0x15a>
 800a18c:	2b20      	cmp	r3, #32
 800a18e:	d867      	bhi.n	800a260 <HAL_TIM_ConfigClockSource+0x16c>
 800a190:	2b00      	cmp	r3, #0
 800a192:	d05c      	beq.n	800a24e <HAL_TIM_ConfigClockSource+0x15a>
 800a194:	2b10      	cmp	r3, #16
 800a196:	d05a      	beq.n	800a24e <HAL_TIM_ConfigClockSource+0x15a>
 800a198:	e062      	b.n	800a260 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6818      	ldr	r0, [r3, #0]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	6899      	ldr	r1, [r3, #8]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	f000 f9af 	bl	800a50c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a1bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	609a      	str	r2, [r3, #8]
      break;
 800a1c6:	e04f      	b.n	800a268 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6818      	ldr	r0, [r3, #0]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	6899      	ldr	r1, [r3, #8]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	685a      	ldr	r2, [r3, #4]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	f000 f998 	bl	800a50c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	689a      	ldr	r2, [r3, #8]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1ea:	609a      	str	r2, [r3, #8]
      break;
 800a1ec:	e03c      	b.n	800a268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6818      	ldr	r0, [r3, #0]
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	6859      	ldr	r1, [r3, #4]
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	f000 f90c 	bl	800a418 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2150      	movs	r1, #80	; 0x50
 800a206:	4618      	mov	r0, r3
 800a208:	f000 f965 	bl	800a4d6 <TIM_ITRx_SetConfig>
      break;
 800a20c:	e02c      	b.n	800a268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6818      	ldr	r0, [r3, #0]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	6859      	ldr	r1, [r3, #4]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	461a      	mov	r2, r3
 800a21c:	f000 f92b 	bl	800a476 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2160      	movs	r1, #96	; 0x60
 800a226:	4618      	mov	r0, r3
 800a228:	f000 f955 	bl	800a4d6 <TIM_ITRx_SetConfig>
      break;
 800a22c:	e01c      	b.n	800a268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6818      	ldr	r0, [r3, #0]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	6859      	ldr	r1, [r3, #4]
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	461a      	mov	r2, r3
 800a23c:	f000 f8ec 	bl	800a418 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2140      	movs	r1, #64	; 0x40
 800a246:	4618      	mov	r0, r3
 800a248:	f000 f945 	bl	800a4d6 <TIM_ITRx_SetConfig>
      break;
 800a24c:	e00c      	b.n	800a268 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4619      	mov	r1, r3
 800a258:	4610      	mov	r0, r2
 800a25a:	f000 f93c 	bl	800a4d6 <TIM_ITRx_SetConfig>
      break;
 800a25e:	e003      	b.n	800a268 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	73fb      	strb	r3, [r7, #15]
      break;
 800a264:	e000      	b.n	800a268 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a266:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a278:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	fffeff88 	.word	0xfffeff88

0800a288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a2a4:	bf00      	nop
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a2b8:	bf00      	nop
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a40      	ldr	r2, [pc, #256]	; (800a3ec <TIM_Base_SetConfig+0x114>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d013      	beq.n	800a318 <TIM_Base_SetConfig+0x40>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2f6:	d00f      	beq.n	800a318 <TIM_Base_SetConfig+0x40>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a3d      	ldr	r2, [pc, #244]	; (800a3f0 <TIM_Base_SetConfig+0x118>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d00b      	beq.n	800a318 <TIM_Base_SetConfig+0x40>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a3c      	ldr	r2, [pc, #240]	; (800a3f4 <TIM_Base_SetConfig+0x11c>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d007      	beq.n	800a318 <TIM_Base_SetConfig+0x40>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4a3b      	ldr	r2, [pc, #236]	; (800a3f8 <TIM_Base_SetConfig+0x120>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d003      	beq.n	800a318 <TIM_Base_SetConfig+0x40>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4a3a      	ldr	r2, [pc, #232]	; (800a3fc <TIM_Base_SetConfig+0x124>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d108      	bne.n	800a32a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a31e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	4313      	orrs	r3, r2
 800a328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a2f      	ldr	r2, [pc, #188]	; (800a3ec <TIM_Base_SetConfig+0x114>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d02b      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a338:	d027      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4a2c      	ldr	r2, [pc, #176]	; (800a3f0 <TIM_Base_SetConfig+0x118>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d023      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a2b      	ldr	r2, [pc, #172]	; (800a3f4 <TIM_Base_SetConfig+0x11c>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d01f      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a2a      	ldr	r2, [pc, #168]	; (800a3f8 <TIM_Base_SetConfig+0x120>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d01b      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a29      	ldr	r2, [pc, #164]	; (800a3fc <TIM_Base_SetConfig+0x124>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d017      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a28      	ldr	r2, [pc, #160]	; (800a400 <TIM_Base_SetConfig+0x128>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d013      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4a27      	ldr	r2, [pc, #156]	; (800a404 <TIM_Base_SetConfig+0x12c>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d00f      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4a26      	ldr	r2, [pc, #152]	; (800a408 <TIM_Base_SetConfig+0x130>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d00b      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4a25      	ldr	r2, [pc, #148]	; (800a40c <TIM_Base_SetConfig+0x134>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d007      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4a24      	ldr	r2, [pc, #144]	; (800a410 <TIM_Base_SetConfig+0x138>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d003      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a23      	ldr	r2, [pc, #140]	; (800a414 <TIM_Base_SetConfig+0x13c>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d108      	bne.n	800a39c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	4313      	orrs	r3, r2
 800a39a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	689a      	ldr	r2, [r3, #8]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a0a      	ldr	r2, [pc, #40]	; (800a3ec <TIM_Base_SetConfig+0x114>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d003      	beq.n	800a3d0 <TIM_Base_SetConfig+0xf8>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a0c      	ldr	r2, [pc, #48]	; (800a3fc <TIM_Base_SetConfig+0x124>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d103      	bne.n	800a3d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	691a      	ldr	r2, [r3, #16]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	615a      	str	r2, [r3, #20]
}
 800a3de:	bf00      	nop
 800a3e0:	3714      	adds	r7, #20
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	40010000 	.word	0x40010000
 800a3f0:	40000400 	.word	0x40000400
 800a3f4:	40000800 	.word	0x40000800
 800a3f8:	40000c00 	.word	0x40000c00
 800a3fc:	40010400 	.word	0x40010400
 800a400:	40014000 	.word	0x40014000
 800a404:	40014400 	.word	0x40014400
 800a408:	40014800 	.word	0x40014800
 800a40c:	40001800 	.word	0x40001800
 800a410:	40001c00 	.word	0x40001c00
 800a414:	40002000 	.word	0x40002000

0800a418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a418:	b480      	push	{r7}
 800a41a:	b087      	sub	sp, #28
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6a1b      	ldr	r3, [r3, #32]
 800a428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	f023 0201 	bic.w	r2, r3, #1
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	011b      	lsls	r3, r3, #4
 800a448:	693a      	ldr	r2, [r7, #16]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f023 030a 	bic.w	r3, r3, #10
 800a454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a456:	697a      	ldr	r2, [r7, #20]
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	621a      	str	r2, [r3, #32]
}
 800a46a:	bf00      	nop
 800a46c:	371c      	adds	r7, #28
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr

0800a476 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a476:	b480      	push	{r7}
 800a478:	b087      	sub	sp, #28
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	60f8      	str	r0, [r7, #12]
 800a47e:	60b9      	str	r1, [r7, #8]
 800a480:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	f023 0210 	bic.w	r2, r3, #16
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6a1b      	ldr	r3, [r3, #32]
 800a498:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	031b      	lsls	r3, r3, #12
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a4b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	011b      	lsls	r3, r3, #4
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	621a      	str	r2, [r3, #32]
}
 800a4ca:	bf00      	nop
 800a4cc:	371c      	adds	r7, #28
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b085      	sub	sp, #20
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	f043 0307 	orr.w	r3, r3, #7
 800a4f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	609a      	str	r2, [r3, #8]
}
 800a500:	bf00      	nop
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b087      	sub	sp, #28
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
 800a518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	021a      	lsls	r2, r3, #8
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	431a      	orrs	r2, r3
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	4313      	orrs	r3, r2
 800a534:	697a      	ldr	r2, [r7, #20]
 800a536:	4313      	orrs	r3, r2
 800a538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	697a      	ldr	r2, [r7, #20]
 800a53e:	609a      	str	r2, [r3, #8]
}
 800a540:	bf00      	nop
 800a542:	371c      	adds	r7, #28
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d101      	bne.n	800a564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a560:	2302      	movs	r3, #2
 800a562:	e06d      	b.n	800a640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2202      	movs	r2, #2
 800a570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a30      	ldr	r2, [pc, #192]	; (800a64c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d004      	beq.n	800a598 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a2f      	ldr	r2, [pc, #188]	; (800a650 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d108      	bne.n	800a5aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a59e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68fa      	ldr	r2, [r7, #12]
 800a5c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a20      	ldr	r2, [pc, #128]	; (800a64c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d022      	beq.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5d6:	d01d      	beq.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a1d      	ldr	r2, [pc, #116]	; (800a654 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d018      	beq.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a1c      	ldr	r2, [pc, #112]	; (800a658 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d013      	beq.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a1a      	ldr	r2, [pc, #104]	; (800a65c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d00e      	beq.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a15      	ldr	r2, [pc, #84]	; (800a650 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d009      	beq.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a16      	ldr	r2, [pc, #88]	; (800a660 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d004      	beq.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a15      	ldr	r2, [pc, #84]	; (800a664 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d10c      	bne.n	800a62e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a61a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	4313      	orrs	r3, r2
 800a624:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	68ba      	ldr	r2, [r7, #8]
 800a62c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	40010000 	.word	0x40010000
 800a650:	40010400 	.word	0x40010400
 800a654:	40000400 	.word	0x40000400
 800a658:	40000800 	.word	0x40000800
 800a65c:	40000c00 	.word	0x40000c00
 800a660:	40014000 	.word	0x40014000
 800a664:	40001800 	.word	0x40001800

0800a668 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a698:	bf00      	nop
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d101      	bne.n	800a6b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e040      	b.n	800a738 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d106      	bne.n	800a6cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7f9 fd64 	bl	8004194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2224      	movs	r2, #36	; 0x24
 800a6d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f022 0201 	bic.w	r2, r2, #1
 800a6e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f82c 	bl	800a740 <UART_SetConfig>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d101      	bne.n	800a6f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	e022      	b.n	800a738 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d002      	beq.n	800a700 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fa82 	bl	800ac04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	685a      	ldr	r2, [r3, #4]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a70e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	689a      	ldr	r2, [r3, #8]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a71e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f042 0201 	orr.w	r2, r2, #1
 800a72e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fb09 	bl	800ad48 <UART_CheckIdleState>
 800a736:	4603      	mov	r3, r0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	689a      	ldr	r2, [r3, #8]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	691b      	ldr	r3, [r3, #16]
 800a754:	431a      	orrs	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	695b      	ldr	r3, [r3, #20]
 800a75a:	431a      	orrs	r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	69db      	ldr	r3, [r3, #28]
 800a760:	4313      	orrs	r3, r2
 800a762:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	4ba7      	ldr	r3, [pc, #668]	; (800aa08 <UART_SetConfig+0x2c8>)
 800a76c:	4013      	ands	r3, r2
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	6812      	ldr	r2, [r2, #0]
 800a772:	6979      	ldr	r1, [r7, #20]
 800a774:	430b      	orrs	r3, r1
 800a776:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	68da      	ldr	r2, [r3, #12]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	430a      	orrs	r2, r1
 800a78c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a1b      	ldr	r3, [r3, #32]
 800a798:	697a      	ldr	r2, [r7, #20]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	697a      	ldr	r2, [r7, #20]
 800a7ae:	430a      	orrs	r2, r1
 800a7b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a95      	ldr	r2, [pc, #596]	; (800aa0c <UART_SetConfig+0x2cc>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d120      	bne.n	800a7fe <UART_SetConfig+0xbe>
 800a7bc:	4b94      	ldr	r3, [pc, #592]	; (800aa10 <UART_SetConfig+0x2d0>)
 800a7be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7c2:	f003 0303 	and.w	r3, r3, #3
 800a7c6:	2b03      	cmp	r3, #3
 800a7c8:	d816      	bhi.n	800a7f8 <UART_SetConfig+0xb8>
 800a7ca:	a201      	add	r2, pc, #4	; (adr r2, 800a7d0 <UART_SetConfig+0x90>)
 800a7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d0:	0800a7e1 	.word	0x0800a7e1
 800a7d4:	0800a7ed 	.word	0x0800a7ed
 800a7d8:	0800a7e7 	.word	0x0800a7e7
 800a7dc:	0800a7f3 	.word	0x0800a7f3
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	77fb      	strb	r3, [r7, #31]
 800a7e4:	e14f      	b.n	800aa86 <UART_SetConfig+0x346>
 800a7e6:	2302      	movs	r3, #2
 800a7e8:	77fb      	strb	r3, [r7, #31]
 800a7ea:	e14c      	b.n	800aa86 <UART_SetConfig+0x346>
 800a7ec:	2304      	movs	r3, #4
 800a7ee:	77fb      	strb	r3, [r7, #31]
 800a7f0:	e149      	b.n	800aa86 <UART_SetConfig+0x346>
 800a7f2:	2308      	movs	r3, #8
 800a7f4:	77fb      	strb	r3, [r7, #31]
 800a7f6:	e146      	b.n	800aa86 <UART_SetConfig+0x346>
 800a7f8:	2310      	movs	r3, #16
 800a7fa:	77fb      	strb	r3, [r7, #31]
 800a7fc:	e143      	b.n	800aa86 <UART_SetConfig+0x346>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a84      	ldr	r2, [pc, #528]	; (800aa14 <UART_SetConfig+0x2d4>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d132      	bne.n	800a86e <UART_SetConfig+0x12e>
 800a808:	4b81      	ldr	r3, [pc, #516]	; (800aa10 <UART_SetConfig+0x2d0>)
 800a80a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a80e:	f003 030c 	and.w	r3, r3, #12
 800a812:	2b0c      	cmp	r3, #12
 800a814:	d828      	bhi.n	800a868 <UART_SetConfig+0x128>
 800a816:	a201      	add	r2, pc, #4	; (adr r2, 800a81c <UART_SetConfig+0xdc>)
 800a818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81c:	0800a851 	.word	0x0800a851
 800a820:	0800a869 	.word	0x0800a869
 800a824:	0800a869 	.word	0x0800a869
 800a828:	0800a869 	.word	0x0800a869
 800a82c:	0800a85d 	.word	0x0800a85d
 800a830:	0800a869 	.word	0x0800a869
 800a834:	0800a869 	.word	0x0800a869
 800a838:	0800a869 	.word	0x0800a869
 800a83c:	0800a857 	.word	0x0800a857
 800a840:	0800a869 	.word	0x0800a869
 800a844:	0800a869 	.word	0x0800a869
 800a848:	0800a869 	.word	0x0800a869
 800a84c:	0800a863 	.word	0x0800a863
 800a850:	2300      	movs	r3, #0
 800a852:	77fb      	strb	r3, [r7, #31]
 800a854:	e117      	b.n	800aa86 <UART_SetConfig+0x346>
 800a856:	2302      	movs	r3, #2
 800a858:	77fb      	strb	r3, [r7, #31]
 800a85a:	e114      	b.n	800aa86 <UART_SetConfig+0x346>
 800a85c:	2304      	movs	r3, #4
 800a85e:	77fb      	strb	r3, [r7, #31]
 800a860:	e111      	b.n	800aa86 <UART_SetConfig+0x346>
 800a862:	2308      	movs	r3, #8
 800a864:	77fb      	strb	r3, [r7, #31]
 800a866:	e10e      	b.n	800aa86 <UART_SetConfig+0x346>
 800a868:	2310      	movs	r3, #16
 800a86a:	77fb      	strb	r3, [r7, #31]
 800a86c:	e10b      	b.n	800aa86 <UART_SetConfig+0x346>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a69      	ldr	r2, [pc, #420]	; (800aa18 <UART_SetConfig+0x2d8>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d120      	bne.n	800a8ba <UART_SetConfig+0x17a>
 800a878:	4b65      	ldr	r3, [pc, #404]	; (800aa10 <UART_SetConfig+0x2d0>)
 800a87a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a87e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a882:	2b30      	cmp	r3, #48	; 0x30
 800a884:	d013      	beq.n	800a8ae <UART_SetConfig+0x16e>
 800a886:	2b30      	cmp	r3, #48	; 0x30
 800a888:	d814      	bhi.n	800a8b4 <UART_SetConfig+0x174>
 800a88a:	2b20      	cmp	r3, #32
 800a88c:	d009      	beq.n	800a8a2 <UART_SetConfig+0x162>
 800a88e:	2b20      	cmp	r3, #32
 800a890:	d810      	bhi.n	800a8b4 <UART_SetConfig+0x174>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d002      	beq.n	800a89c <UART_SetConfig+0x15c>
 800a896:	2b10      	cmp	r3, #16
 800a898:	d006      	beq.n	800a8a8 <UART_SetConfig+0x168>
 800a89a:	e00b      	b.n	800a8b4 <UART_SetConfig+0x174>
 800a89c:	2300      	movs	r3, #0
 800a89e:	77fb      	strb	r3, [r7, #31]
 800a8a0:	e0f1      	b.n	800aa86 <UART_SetConfig+0x346>
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	77fb      	strb	r3, [r7, #31]
 800a8a6:	e0ee      	b.n	800aa86 <UART_SetConfig+0x346>
 800a8a8:	2304      	movs	r3, #4
 800a8aa:	77fb      	strb	r3, [r7, #31]
 800a8ac:	e0eb      	b.n	800aa86 <UART_SetConfig+0x346>
 800a8ae:	2308      	movs	r3, #8
 800a8b0:	77fb      	strb	r3, [r7, #31]
 800a8b2:	e0e8      	b.n	800aa86 <UART_SetConfig+0x346>
 800a8b4:	2310      	movs	r3, #16
 800a8b6:	77fb      	strb	r3, [r7, #31]
 800a8b8:	e0e5      	b.n	800aa86 <UART_SetConfig+0x346>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a57      	ldr	r2, [pc, #348]	; (800aa1c <UART_SetConfig+0x2dc>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d120      	bne.n	800a906 <UART_SetConfig+0x1c6>
 800a8c4:	4b52      	ldr	r3, [pc, #328]	; (800aa10 <UART_SetConfig+0x2d0>)
 800a8c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a8ce:	2bc0      	cmp	r3, #192	; 0xc0
 800a8d0:	d013      	beq.n	800a8fa <UART_SetConfig+0x1ba>
 800a8d2:	2bc0      	cmp	r3, #192	; 0xc0
 800a8d4:	d814      	bhi.n	800a900 <UART_SetConfig+0x1c0>
 800a8d6:	2b80      	cmp	r3, #128	; 0x80
 800a8d8:	d009      	beq.n	800a8ee <UART_SetConfig+0x1ae>
 800a8da:	2b80      	cmp	r3, #128	; 0x80
 800a8dc:	d810      	bhi.n	800a900 <UART_SetConfig+0x1c0>
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d002      	beq.n	800a8e8 <UART_SetConfig+0x1a8>
 800a8e2:	2b40      	cmp	r3, #64	; 0x40
 800a8e4:	d006      	beq.n	800a8f4 <UART_SetConfig+0x1b4>
 800a8e6:	e00b      	b.n	800a900 <UART_SetConfig+0x1c0>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	77fb      	strb	r3, [r7, #31]
 800a8ec:	e0cb      	b.n	800aa86 <UART_SetConfig+0x346>
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	77fb      	strb	r3, [r7, #31]
 800a8f2:	e0c8      	b.n	800aa86 <UART_SetConfig+0x346>
 800a8f4:	2304      	movs	r3, #4
 800a8f6:	77fb      	strb	r3, [r7, #31]
 800a8f8:	e0c5      	b.n	800aa86 <UART_SetConfig+0x346>
 800a8fa:	2308      	movs	r3, #8
 800a8fc:	77fb      	strb	r3, [r7, #31]
 800a8fe:	e0c2      	b.n	800aa86 <UART_SetConfig+0x346>
 800a900:	2310      	movs	r3, #16
 800a902:	77fb      	strb	r3, [r7, #31]
 800a904:	e0bf      	b.n	800aa86 <UART_SetConfig+0x346>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a45      	ldr	r2, [pc, #276]	; (800aa20 <UART_SetConfig+0x2e0>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d125      	bne.n	800a95c <UART_SetConfig+0x21c>
 800a910:	4b3f      	ldr	r3, [pc, #252]	; (800aa10 <UART_SetConfig+0x2d0>)
 800a912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a91a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a91e:	d017      	beq.n	800a950 <UART_SetConfig+0x210>
 800a920:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a924:	d817      	bhi.n	800a956 <UART_SetConfig+0x216>
 800a926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a92a:	d00b      	beq.n	800a944 <UART_SetConfig+0x204>
 800a92c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a930:	d811      	bhi.n	800a956 <UART_SetConfig+0x216>
 800a932:	2b00      	cmp	r3, #0
 800a934:	d003      	beq.n	800a93e <UART_SetConfig+0x1fe>
 800a936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a93a:	d006      	beq.n	800a94a <UART_SetConfig+0x20a>
 800a93c:	e00b      	b.n	800a956 <UART_SetConfig+0x216>
 800a93e:	2300      	movs	r3, #0
 800a940:	77fb      	strb	r3, [r7, #31]
 800a942:	e0a0      	b.n	800aa86 <UART_SetConfig+0x346>
 800a944:	2302      	movs	r3, #2
 800a946:	77fb      	strb	r3, [r7, #31]
 800a948:	e09d      	b.n	800aa86 <UART_SetConfig+0x346>
 800a94a:	2304      	movs	r3, #4
 800a94c:	77fb      	strb	r3, [r7, #31]
 800a94e:	e09a      	b.n	800aa86 <UART_SetConfig+0x346>
 800a950:	2308      	movs	r3, #8
 800a952:	77fb      	strb	r3, [r7, #31]
 800a954:	e097      	b.n	800aa86 <UART_SetConfig+0x346>
 800a956:	2310      	movs	r3, #16
 800a958:	77fb      	strb	r3, [r7, #31]
 800a95a:	e094      	b.n	800aa86 <UART_SetConfig+0x346>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a30      	ldr	r2, [pc, #192]	; (800aa24 <UART_SetConfig+0x2e4>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d125      	bne.n	800a9b2 <UART_SetConfig+0x272>
 800a966:	4b2a      	ldr	r3, [pc, #168]	; (800aa10 <UART_SetConfig+0x2d0>)
 800a968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a96c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a970:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a974:	d017      	beq.n	800a9a6 <UART_SetConfig+0x266>
 800a976:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a97a:	d817      	bhi.n	800a9ac <UART_SetConfig+0x26c>
 800a97c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a980:	d00b      	beq.n	800a99a <UART_SetConfig+0x25a>
 800a982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a986:	d811      	bhi.n	800a9ac <UART_SetConfig+0x26c>
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d003      	beq.n	800a994 <UART_SetConfig+0x254>
 800a98c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a990:	d006      	beq.n	800a9a0 <UART_SetConfig+0x260>
 800a992:	e00b      	b.n	800a9ac <UART_SetConfig+0x26c>
 800a994:	2301      	movs	r3, #1
 800a996:	77fb      	strb	r3, [r7, #31]
 800a998:	e075      	b.n	800aa86 <UART_SetConfig+0x346>
 800a99a:	2302      	movs	r3, #2
 800a99c:	77fb      	strb	r3, [r7, #31]
 800a99e:	e072      	b.n	800aa86 <UART_SetConfig+0x346>
 800a9a0:	2304      	movs	r3, #4
 800a9a2:	77fb      	strb	r3, [r7, #31]
 800a9a4:	e06f      	b.n	800aa86 <UART_SetConfig+0x346>
 800a9a6:	2308      	movs	r3, #8
 800a9a8:	77fb      	strb	r3, [r7, #31]
 800a9aa:	e06c      	b.n	800aa86 <UART_SetConfig+0x346>
 800a9ac:	2310      	movs	r3, #16
 800a9ae:	77fb      	strb	r3, [r7, #31]
 800a9b0:	e069      	b.n	800aa86 <UART_SetConfig+0x346>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a1c      	ldr	r2, [pc, #112]	; (800aa28 <UART_SetConfig+0x2e8>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d137      	bne.n	800aa2c <UART_SetConfig+0x2ec>
 800a9bc:	4b14      	ldr	r3, [pc, #80]	; (800aa10 <UART_SetConfig+0x2d0>)
 800a9be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a9c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a9ca:	d017      	beq.n	800a9fc <UART_SetConfig+0x2bc>
 800a9cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a9d0:	d817      	bhi.n	800aa02 <UART_SetConfig+0x2c2>
 800a9d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9d6:	d00b      	beq.n	800a9f0 <UART_SetConfig+0x2b0>
 800a9d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9dc:	d811      	bhi.n	800aa02 <UART_SetConfig+0x2c2>
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d003      	beq.n	800a9ea <UART_SetConfig+0x2aa>
 800a9e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9e6:	d006      	beq.n	800a9f6 <UART_SetConfig+0x2b6>
 800a9e8:	e00b      	b.n	800aa02 <UART_SetConfig+0x2c2>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	77fb      	strb	r3, [r7, #31]
 800a9ee:	e04a      	b.n	800aa86 <UART_SetConfig+0x346>
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	77fb      	strb	r3, [r7, #31]
 800a9f4:	e047      	b.n	800aa86 <UART_SetConfig+0x346>
 800a9f6:	2304      	movs	r3, #4
 800a9f8:	77fb      	strb	r3, [r7, #31]
 800a9fa:	e044      	b.n	800aa86 <UART_SetConfig+0x346>
 800a9fc:	2308      	movs	r3, #8
 800a9fe:	77fb      	strb	r3, [r7, #31]
 800aa00:	e041      	b.n	800aa86 <UART_SetConfig+0x346>
 800aa02:	2310      	movs	r3, #16
 800aa04:	77fb      	strb	r3, [r7, #31]
 800aa06:	e03e      	b.n	800aa86 <UART_SetConfig+0x346>
 800aa08:	efff69f3 	.word	0xefff69f3
 800aa0c:	40011000 	.word	0x40011000
 800aa10:	40023800 	.word	0x40023800
 800aa14:	40004400 	.word	0x40004400
 800aa18:	40004800 	.word	0x40004800
 800aa1c:	40004c00 	.word	0x40004c00
 800aa20:	40005000 	.word	0x40005000
 800aa24:	40011400 	.word	0x40011400
 800aa28:	40007800 	.word	0x40007800
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a71      	ldr	r2, [pc, #452]	; (800abf8 <UART_SetConfig+0x4b8>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d125      	bne.n	800aa82 <UART_SetConfig+0x342>
 800aa36:	4b71      	ldr	r3, [pc, #452]	; (800abfc <UART_SetConfig+0x4bc>)
 800aa38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aa40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aa44:	d017      	beq.n	800aa76 <UART_SetConfig+0x336>
 800aa46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aa4a:	d817      	bhi.n	800aa7c <UART_SetConfig+0x33c>
 800aa4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa50:	d00b      	beq.n	800aa6a <UART_SetConfig+0x32a>
 800aa52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa56:	d811      	bhi.n	800aa7c <UART_SetConfig+0x33c>
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d003      	beq.n	800aa64 <UART_SetConfig+0x324>
 800aa5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa60:	d006      	beq.n	800aa70 <UART_SetConfig+0x330>
 800aa62:	e00b      	b.n	800aa7c <UART_SetConfig+0x33c>
 800aa64:	2300      	movs	r3, #0
 800aa66:	77fb      	strb	r3, [r7, #31]
 800aa68:	e00d      	b.n	800aa86 <UART_SetConfig+0x346>
 800aa6a:	2302      	movs	r3, #2
 800aa6c:	77fb      	strb	r3, [r7, #31]
 800aa6e:	e00a      	b.n	800aa86 <UART_SetConfig+0x346>
 800aa70:	2304      	movs	r3, #4
 800aa72:	77fb      	strb	r3, [r7, #31]
 800aa74:	e007      	b.n	800aa86 <UART_SetConfig+0x346>
 800aa76:	2308      	movs	r3, #8
 800aa78:	77fb      	strb	r3, [r7, #31]
 800aa7a:	e004      	b.n	800aa86 <UART_SetConfig+0x346>
 800aa7c:	2310      	movs	r3, #16
 800aa7e:	77fb      	strb	r3, [r7, #31]
 800aa80:	e001      	b.n	800aa86 <UART_SetConfig+0x346>
 800aa82:	2310      	movs	r3, #16
 800aa84:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	69db      	ldr	r3, [r3, #28]
 800aa8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa8e:	d15a      	bne.n	800ab46 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800aa90:	7ffb      	ldrb	r3, [r7, #31]
 800aa92:	2b08      	cmp	r3, #8
 800aa94:	d827      	bhi.n	800aae6 <UART_SetConfig+0x3a6>
 800aa96:	a201      	add	r2, pc, #4	; (adr r2, 800aa9c <UART_SetConfig+0x35c>)
 800aa98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa9c:	0800aac1 	.word	0x0800aac1
 800aaa0:	0800aac9 	.word	0x0800aac9
 800aaa4:	0800aad1 	.word	0x0800aad1
 800aaa8:	0800aae7 	.word	0x0800aae7
 800aaac:	0800aad7 	.word	0x0800aad7
 800aab0:	0800aae7 	.word	0x0800aae7
 800aab4:	0800aae7 	.word	0x0800aae7
 800aab8:	0800aae7 	.word	0x0800aae7
 800aabc:	0800aadf 	.word	0x0800aadf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aac0:	f7fd fb1c 	bl	80080fc <HAL_RCC_GetPCLK1Freq>
 800aac4:	61b8      	str	r0, [r7, #24]
        break;
 800aac6:	e013      	b.n	800aaf0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aac8:	f7fd fb2c 	bl	8008124 <HAL_RCC_GetPCLK2Freq>
 800aacc:	61b8      	str	r0, [r7, #24]
        break;
 800aace:	e00f      	b.n	800aaf0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aad0:	4b4b      	ldr	r3, [pc, #300]	; (800ac00 <UART_SetConfig+0x4c0>)
 800aad2:	61bb      	str	r3, [r7, #24]
        break;
 800aad4:	e00c      	b.n	800aaf0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aad6:	f7fd fa4f 	bl	8007f78 <HAL_RCC_GetSysClockFreq>
 800aada:	61b8      	str	r0, [r7, #24]
        break;
 800aadc:	e008      	b.n	800aaf0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aae2:	61bb      	str	r3, [r7, #24]
        break;
 800aae4:	e004      	b.n	800aaf0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800aae6:	2300      	movs	r3, #0
 800aae8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
 800aaec:	77bb      	strb	r3, [r7, #30]
        break;
 800aaee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d074      	beq.n	800abe0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	005a      	lsls	r2, r3, #1
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	085b      	lsrs	r3, r3, #1
 800ab00:	441a      	add	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	2b0f      	cmp	r3, #15
 800ab10:	d916      	bls.n	800ab40 <UART_SetConfig+0x400>
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab18:	d212      	bcs.n	800ab40 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	f023 030f 	bic.w	r3, r3, #15
 800ab22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	085b      	lsrs	r3, r3, #1
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	f003 0307 	and.w	r3, r3, #7
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	89fb      	ldrh	r3, [r7, #14]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	89fa      	ldrh	r2, [r7, #14]
 800ab3c:	60da      	str	r2, [r3, #12]
 800ab3e:	e04f      	b.n	800abe0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800ab40:	2301      	movs	r3, #1
 800ab42:	77bb      	strb	r3, [r7, #30]
 800ab44:	e04c      	b.n	800abe0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab46:	7ffb      	ldrb	r3, [r7, #31]
 800ab48:	2b08      	cmp	r3, #8
 800ab4a:	d828      	bhi.n	800ab9e <UART_SetConfig+0x45e>
 800ab4c:	a201      	add	r2, pc, #4	; (adr r2, 800ab54 <UART_SetConfig+0x414>)
 800ab4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab52:	bf00      	nop
 800ab54:	0800ab79 	.word	0x0800ab79
 800ab58:	0800ab81 	.word	0x0800ab81
 800ab5c:	0800ab89 	.word	0x0800ab89
 800ab60:	0800ab9f 	.word	0x0800ab9f
 800ab64:	0800ab8f 	.word	0x0800ab8f
 800ab68:	0800ab9f 	.word	0x0800ab9f
 800ab6c:	0800ab9f 	.word	0x0800ab9f
 800ab70:	0800ab9f 	.word	0x0800ab9f
 800ab74:	0800ab97 	.word	0x0800ab97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab78:	f7fd fac0 	bl	80080fc <HAL_RCC_GetPCLK1Freq>
 800ab7c:	61b8      	str	r0, [r7, #24]
        break;
 800ab7e:	e013      	b.n	800aba8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab80:	f7fd fad0 	bl	8008124 <HAL_RCC_GetPCLK2Freq>
 800ab84:	61b8      	str	r0, [r7, #24]
        break;
 800ab86:	e00f      	b.n	800aba8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab88:	4b1d      	ldr	r3, [pc, #116]	; (800ac00 <UART_SetConfig+0x4c0>)
 800ab8a:	61bb      	str	r3, [r7, #24]
        break;
 800ab8c:	e00c      	b.n	800aba8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab8e:	f7fd f9f3 	bl	8007f78 <HAL_RCC_GetSysClockFreq>
 800ab92:	61b8      	str	r0, [r7, #24]
        break;
 800ab94:	e008      	b.n	800aba8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab9a:	61bb      	str	r3, [r7, #24]
        break;
 800ab9c:	e004      	b.n	800aba8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	77bb      	strb	r3, [r7, #30]
        break;
 800aba6:	bf00      	nop
    }

    if (pclk != 0U)
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d018      	beq.n	800abe0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	085a      	lsrs	r2, r3, #1
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	441a      	add	r2, r3
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800abc0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	2b0f      	cmp	r3, #15
 800abc6:	d909      	bls.n	800abdc <UART_SetConfig+0x49c>
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abce:	d205      	bcs.n	800abdc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	60da      	str	r2, [r3, #12]
 800abda:	e001      	b.n	800abe0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800abdc:	2301      	movs	r3, #1
 800abde:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800abec:	7fbb      	ldrb	r3, [r7, #30]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3720      	adds	r7, #32
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	40007c00 	.word	0x40007c00
 800abfc:	40023800 	.word	0x40023800
 800ac00:	00f42400 	.word	0x00f42400

0800ac04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac10:	f003 0301 	and.w	r3, r3, #1
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00a      	beq.n	800ac2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	430a      	orrs	r2, r1
 800ac2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac32:	f003 0302 	and.w	r3, r3, #2
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00a      	beq.n	800ac50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	430a      	orrs	r2, r1
 800ac4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac54:	f003 0304 	and.w	r3, r3, #4
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00a      	beq.n	800ac72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac76:	f003 0308 	and.w	r3, r3, #8
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00a      	beq.n	800ac94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	430a      	orrs	r2, r1
 800ac92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac98:	f003 0310 	and.w	r3, r3, #16
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00a      	beq.n	800acb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	430a      	orrs	r2, r1
 800acb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acba:	f003 0320 	and.w	r3, r3, #32
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d00a      	beq.n	800acd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	430a      	orrs	r2, r1
 800acd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d01a      	beq.n	800ad1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	430a      	orrs	r2, r1
 800acf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad02:	d10a      	bne.n	800ad1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	430a      	orrs	r2, r1
 800ad18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00a      	beq.n	800ad3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	430a      	orrs	r2, r1
 800ad3a:	605a      	str	r2, [r3, #4]
  }
}
 800ad3c:	bf00      	nop
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b086      	sub	sp, #24
 800ad4c:	af02      	add	r7, sp, #8
 800ad4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad58:	f7f9 fd00 	bl	800475c <HAL_GetTick>
 800ad5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f003 0308 	and.w	r3, r3, #8
 800ad68:	2b08      	cmp	r3, #8
 800ad6a:	d10e      	bne.n	800ad8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f817 	bl	800adae <UART_WaitOnFlagUntilTimeout>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d001      	beq.n	800ad8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad86:	2303      	movs	r3, #3
 800ad88:	e00d      	b.n	800ada6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2220      	movs	r2, #32
 800ad8e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2220      	movs	r2, #32
 800ad94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b09c      	sub	sp, #112	; 0x70
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	60f8      	str	r0, [r7, #12]
 800adb6:	60b9      	str	r1, [r7, #8]
 800adb8:	603b      	str	r3, [r7, #0]
 800adba:	4613      	mov	r3, r2
 800adbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adbe:	e0a5      	b.n	800af0c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc6:	f000 80a1 	beq.w	800af0c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adca:	f7f9 fcc7 	bl	800475c <HAL_GetTick>
 800adce:	4602      	mov	r2, r0
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	1ad3      	subs	r3, r2, r3
 800add4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800add6:	429a      	cmp	r2, r3
 800add8:	d302      	bcc.n	800ade0 <UART_WaitOnFlagUntilTimeout+0x32>
 800adda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800addc:	2b00      	cmp	r3, #0
 800adde:	d13e      	bne.n	800ae5e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ade8:	e853 3f00 	ldrex	r3, [r3]
 800adec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800adee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800adf4:	667b      	str	r3, [r7, #100]	; 0x64
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	461a      	mov	r2, r3
 800adfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae00:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae06:	e841 2300 	strex	r3, r2, [r1]
 800ae0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ae0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1e6      	bne.n	800ade0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	3308      	adds	r3, #8
 800ae18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae1c:	e853 3f00 	ldrex	r3, [r3]
 800ae20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae24:	f023 0301 	bic.w	r3, r3, #1
 800ae28:	663b      	str	r3, [r7, #96]	; 0x60
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	3308      	adds	r3, #8
 800ae30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae32:	64ba      	str	r2, [r7, #72]	; 0x48
 800ae34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae3a:	e841 2300 	strex	r3, r2, [r1]
 800ae3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ae40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1e5      	bne.n	800ae12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2220      	movs	r2, #32
 800ae4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2220      	movs	r2, #32
 800ae50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2200      	movs	r2, #0
 800ae56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ae5a:	2303      	movs	r3, #3
 800ae5c:	e067      	b.n	800af2e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 0304 	and.w	r3, r3, #4
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d04f      	beq.n	800af0c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	69db      	ldr	r3, [r3, #28]
 800ae72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae7a:	d147      	bne.n	800af0c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8e:	e853 3f00 	ldrex	r3, [r3]
 800ae92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	461a      	mov	r2, r3
 800aea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aea4:	637b      	str	r3, [r7, #52]	; 0x34
 800aea6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aeaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aeac:	e841 2300 	strex	r3, r2, [r1]
 800aeb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aeb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d1e6      	bne.n	800ae86 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3308      	adds	r3, #8
 800aebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	e853 3f00 	ldrex	r3, [r3]
 800aec6:	613b      	str	r3, [r7, #16]
   return(result);
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	f023 0301 	bic.w	r3, r3, #1
 800aece:	66bb      	str	r3, [r7, #104]	; 0x68
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	3308      	adds	r3, #8
 800aed6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aed8:	623a      	str	r2, [r7, #32]
 800aeda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aedc:	69f9      	ldr	r1, [r7, #28]
 800aede:	6a3a      	ldr	r2, [r7, #32]
 800aee0:	e841 2300 	strex	r3, r2, [r1]
 800aee4:	61bb      	str	r3, [r7, #24]
   return(result);
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1e5      	bne.n	800aeb8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2220      	movs	r2, #32
 800aef0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2220      	movs	r2, #32
 800aef6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2220      	movs	r2, #32
 800aefc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2200      	movs	r2, #0
 800af04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800af08:	2303      	movs	r3, #3
 800af0a:	e010      	b.n	800af2e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	69da      	ldr	r2, [r3, #28]
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	4013      	ands	r3, r2
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	429a      	cmp	r2, r3
 800af1a:	bf0c      	ite	eq
 800af1c:	2301      	moveq	r3, #1
 800af1e:	2300      	movne	r3, #0
 800af20:	b2db      	uxtb	r3, r3
 800af22:	461a      	mov	r2, r3
 800af24:	79fb      	ldrb	r3, [r7, #7]
 800af26:	429a      	cmp	r2, r3
 800af28:	f43f af4a 	beq.w	800adc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3770      	adds	r7, #112	; 0x70
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
	...

0800af38 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d121      	bne.n	800af8e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	4b27      	ldr	r3, [pc, #156]	; (800afec <FMC_SDRAM_Init+0xb4>)
 800af50:	4013      	ands	r3, r2
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	6851      	ldr	r1, [r2, #4]
 800af56:	683a      	ldr	r2, [r7, #0]
 800af58:	6892      	ldr	r2, [r2, #8]
 800af5a:	4311      	orrs	r1, r2
 800af5c:	683a      	ldr	r2, [r7, #0]
 800af5e:	68d2      	ldr	r2, [r2, #12]
 800af60:	4311      	orrs	r1, r2
 800af62:	683a      	ldr	r2, [r7, #0]
 800af64:	6912      	ldr	r2, [r2, #16]
 800af66:	4311      	orrs	r1, r2
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	6952      	ldr	r2, [r2, #20]
 800af6c:	4311      	orrs	r1, r2
 800af6e:	683a      	ldr	r2, [r7, #0]
 800af70:	6992      	ldr	r2, [r2, #24]
 800af72:	4311      	orrs	r1, r2
 800af74:	683a      	ldr	r2, [r7, #0]
 800af76:	69d2      	ldr	r2, [r2, #28]
 800af78:	4311      	orrs	r1, r2
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	6a12      	ldr	r2, [r2, #32]
 800af7e:	4311      	orrs	r1, r2
 800af80:	683a      	ldr	r2, [r7, #0]
 800af82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800af84:	430a      	orrs	r2, r1
 800af86:	431a      	orrs	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	601a      	str	r2, [r3, #0]
 800af8c:	e026      	b.n	800afdc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	69d9      	ldr	r1, [r3, #28]
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	4319      	orrs	r1, r3
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa4:	430b      	orrs	r3, r1
 800afa6:	431a      	orrs	r2, r3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	685a      	ldr	r2, [r3, #4]
 800afb0:	4b0e      	ldr	r3, [pc, #56]	; (800afec <FMC_SDRAM_Init+0xb4>)
 800afb2:	4013      	ands	r3, r2
 800afb4:	683a      	ldr	r2, [r7, #0]
 800afb6:	6851      	ldr	r1, [r2, #4]
 800afb8:	683a      	ldr	r2, [r7, #0]
 800afba:	6892      	ldr	r2, [r2, #8]
 800afbc:	4311      	orrs	r1, r2
 800afbe:	683a      	ldr	r2, [r7, #0]
 800afc0:	68d2      	ldr	r2, [r2, #12]
 800afc2:	4311      	orrs	r1, r2
 800afc4:	683a      	ldr	r2, [r7, #0]
 800afc6:	6912      	ldr	r2, [r2, #16]
 800afc8:	4311      	orrs	r1, r2
 800afca:	683a      	ldr	r2, [r7, #0]
 800afcc:	6952      	ldr	r2, [r2, #20]
 800afce:	4311      	orrs	r1, r2
 800afd0:	683a      	ldr	r2, [r7, #0]
 800afd2:	6992      	ldr	r2, [r2, #24]
 800afd4:	430a      	orrs	r2, r1
 800afd6:	431a      	orrs	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	370c      	adds	r7, #12
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop
 800afec:	ffff8000 	.word	0xffff8000

0800aff0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b085      	sub	sp, #20
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d128      	bne.n	800b054 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	1e59      	subs	r1, r3, #1
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	3b01      	subs	r3, #1
 800b016:	011b      	lsls	r3, r3, #4
 800b018:	4319      	orrs	r1, r3
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	3b01      	subs	r3, #1
 800b020:	021b      	lsls	r3, r3, #8
 800b022:	4319      	orrs	r1, r3
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	3b01      	subs	r3, #1
 800b02a:	031b      	lsls	r3, r3, #12
 800b02c:	4319      	orrs	r1, r3
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	3b01      	subs	r3, #1
 800b034:	041b      	lsls	r3, r3, #16
 800b036:	4319      	orrs	r1, r3
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	695b      	ldr	r3, [r3, #20]
 800b03c:	3b01      	subs	r3, #1
 800b03e:	051b      	lsls	r3, r3, #20
 800b040:	4319      	orrs	r1, r3
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	699b      	ldr	r3, [r3, #24]
 800b046:	3b01      	subs	r3, #1
 800b048:	061b      	lsls	r3, r3, #24
 800b04a:	430b      	orrs	r3, r1
 800b04c:	431a      	orrs	r2, r3
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	609a      	str	r2, [r3, #8]
 800b052:	e02d      	b.n	800b0b0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	689a      	ldr	r2, [r3, #8]
 800b058:	4b19      	ldr	r3, [pc, #100]	; (800b0c0 <FMC_SDRAM_Timing_Init+0xd0>)
 800b05a:	4013      	ands	r3, r2
 800b05c:	68ba      	ldr	r2, [r7, #8]
 800b05e:	68d2      	ldr	r2, [r2, #12]
 800b060:	3a01      	subs	r2, #1
 800b062:	0311      	lsls	r1, r2, #12
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	6952      	ldr	r2, [r2, #20]
 800b068:	3a01      	subs	r2, #1
 800b06a:	0512      	lsls	r2, r2, #20
 800b06c:	430a      	orrs	r2, r1
 800b06e:	431a      	orrs	r2, r3
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	1e59      	subs	r1, r3, #1
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	3b01      	subs	r3, #1
 800b088:	011b      	lsls	r3, r3, #4
 800b08a:	4319      	orrs	r1, r3
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	3b01      	subs	r3, #1
 800b092:	021b      	lsls	r3, r3, #8
 800b094:	4319      	orrs	r1, r3
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	691b      	ldr	r3, [r3, #16]
 800b09a:	3b01      	subs	r3, #1
 800b09c:	041b      	lsls	r3, r3, #16
 800b09e:	4319      	orrs	r1, r3
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	699b      	ldr	r3, [r3, #24]
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	061b      	lsls	r3, r3, #24
 800b0a8:	430b      	orrs	r3, r1
 800b0aa:	431a      	orrs	r2, r3
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3714      	adds	r7, #20
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	ff0f0fff 	.word	0xff0f0fff

0800b0c4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	691a      	ldr	r2, [r3, #16]
 800b0d4:	4b0c      	ldr	r3, [pc, #48]	; (800b108 <FMC_SDRAM_SendCommand+0x44>)
 800b0d6:	4013      	ands	r3, r2
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	6811      	ldr	r1, [r2, #0]
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	6852      	ldr	r2, [r2, #4]
 800b0e0:	4311      	orrs	r1, r2
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	6892      	ldr	r2, [r2, #8]
 800b0e6:	3a01      	subs	r2, #1
 800b0e8:	0152      	lsls	r2, r2, #5
 800b0ea:	4311      	orrs	r1, r2
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	68d2      	ldr	r2, [r2, #12]
 800b0f0:	0252      	lsls	r2, r2, #9
 800b0f2:	430a      	orrs	r2, r1
 800b0f4:	431a      	orrs	r2, r3
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3714      	adds	r7, #20
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr
 800b108:	ffc00000 	.word	0xffc00000

0800b10c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	695a      	ldr	r2, [r3, #20]
 800b11a:	4b07      	ldr	r3, [pc, #28]	; (800b138 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b11c:	4013      	ands	r3, r2
 800b11e:	683a      	ldr	r2, [r7, #0]
 800b120:	0052      	lsls	r2, r2, #1
 800b122:	431a      	orrs	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b128:	2300      	movs	r3, #0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	370c      	adds	r7, #12
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	ffffc001 	.word	0xffffc001

0800b13c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	4603      	mov	r3, r0
 800b144:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b146:	2300      	movs	r3, #0
 800b148:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b14a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b14e:	2b84      	cmp	r3, #132	; 0x84
 800b150:	d005      	beq.n	800b15e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b152:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	4413      	add	r3, r2
 800b15a:	3303      	adds	r3, #3
 800b15c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b15e:	68fb      	ldr	r3, [r7, #12]
}
 800b160:	4618      	mov	r0, r3
 800b162:	3714      	adds	r7, #20
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b170:	f001 f970 	bl	800c454 <vTaskStartScheduler>
  
  return osOK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	bd80      	pop	{r7, pc}

0800b17a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b17a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b17c:	b089      	sub	sp, #36	; 0x24
 800b17e:	af04      	add	r7, sp, #16
 800b180:	6078      	str	r0, [r7, #4]
 800b182:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	695b      	ldr	r3, [r3, #20]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d020      	beq.n	800b1ce <osThreadCreate+0x54>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	699b      	ldr	r3, [r3, #24]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d01c      	beq.n	800b1ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685c      	ldr	r4, [r3, #4]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681d      	ldr	r5, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	691e      	ldr	r6, [r3, #16]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7ff ffc8 	bl	800b13c <makeFreeRtosPriority>
 800b1ac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	695b      	ldr	r3, [r3, #20]
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b1b6:	9202      	str	r2, [sp, #8]
 800b1b8:	9301      	str	r3, [sp, #4]
 800b1ba:	9100      	str	r1, [sp, #0]
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	4632      	mov	r2, r6
 800b1c0:	4629      	mov	r1, r5
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	f000 ff5e 	bl	800c084 <xTaskCreateStatic>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	e01c      	b.n	800b208 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	685c      	ldr	r4, [r3, #4]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b1da:	b29e      	uxth	r6, r3
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7ff ffaa 	bl	800b13c <makeFreeRtosPriority>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	f107 030c 	add.w	r3, r7, #12
 800b1ee:	9301      	str	r3, [sp, #4]
 800b1f0:	9200      	str	r2, [sp, #0]
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	4632      	mov	r2, r6
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f000 ffa6 	bl	800c14a <xTaskCreate>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b01      	cmp	r3, #1
 800b202:	d001      	beq.n	800b208 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b204:	2300      	movs	r3, #0
 800b206:	e000      	b.n	800b20a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b208:	68fb      	ldr	r3, [r7, #12]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3714      	adds	r7, #20
 800b20e:	46bd      	mov	sp, r7
 800b210:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b212 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b084      	sub	sp, #16
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d001      	beq.n	800b228 <osDelay+0x16>
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	e000      	b.n	800b22a <osDelay+0x18>
 800b228:	2301      	movs	r3, #1
 800b22a:	4618      	mov	r0, r3
 800b22c:	f001 f8dc 	bl	800c3e8 <vTaskDelay>
  
  return osOK;
 800b230:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b086      	sub	sp, #24
 800b23e:	af02      	add	r7, sp, #8
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d00f      	beq.n	800b26c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d10a      	bne.n	800b268 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	2203      	movs	r2, #3
 800b258:	9200      	str	r2, [sp, #0]
 800b25a:	2200      	movs	r2, #0
 800b25c:	2100      	movs	r1, #0
 800b25e:	2001      	movs	r0, #1
 800b260:	f000 f964 	bl	800b52c <xQueueGenericCreateStatic>
 800b264:	4603      	mov	r3, r0
 800b266:	e016      	b.n	800b296 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b268:	2300      	movs	r3, #0
 800b26a:	e014      	b.n	800b296 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d110      	bne.n	800b294 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b272:	2203      	movs	r2, #3
 800b274:	2100      	movs	r1, #0
 800b276:	2001      	movs	r0, #1
 800b278:	f000 f9da 	bl	800b630 <xQueueGenericCreate>
 800b27c:	60f8      	str	r0, [r7, #12]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d005      	beq.n	800b290 <osSemaphoreCreate+0x56>
 800b284:	2300      	movs	r3, #0
 800b286:	2200      	movs	r2, #0
 800b288:	2100      	movs	r1, #0
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f000 fa32 	bl	800b6f4 <xQueueGenericSend>
      return sema;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	e000      	b.n	800b296 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b294:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b296:	4618      	mov	r0, r3
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b29e:	b590      	push	{r4, r7, lr}
 800b2a0:	b085      	sub	sp, #20
 800b2a2:	af02      	add	r7, sp, #8
 800b2a4:	6078      	str	r0, [r7, #4]
 800b2a6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d011      	beq.n	800b2d4 <osMessageCreate+0x36>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00d      	beq.n	800b2d4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6818      	ldr	r0, [r3, #0]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6859      	ldr	r1, [r3, #4]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	689a      	ldr	r2, [r3, #8]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	2400      	movs	r4, #0
 800b2ca:	9400      	str	r4, [sp, #0]
 800b2cc:	f000 f92e 	bl	800b52c <xQueueGenericCreateStatic>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	e008      	b.n	800b2e6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6818      	ldr	r0, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	4619      	mov	r1, r3
 800b2e0:	f000 f9a6 	bl	800b630 <xQueueGenericCreate>
 800b2e4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd90      	pop	{r4, r7, pc}

0800b2ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b2ee:	b480      	push	{r7}
 800b2f0:	b083      	sub	sp, #12
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f103 0208 	add.w	r2, r3, #8
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f04f 32ff 	mov.w	r2, #4294967295
 800b306:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f103 0208 	add.w	r2, r3, #8
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f103 0208 	add.w	r2, r3, #8
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b322:	bf00      	nop
 800b324:	370c      	adds	r7, #12
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b32e:	b480      	push	{r7}
 800b330:	b083      	sub	sp, #12
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b33c:	bf00      	nop
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	689a      	ldr	r2, [r3, #8]
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	683a      	ldr	r2, [r7, #0]
 800b36c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	683a      	ldr	r2, [r7, #0]
 800b372:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	1c5a      	adds	r2, r3, #1
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	601a      	str	r2, [r3, #0]
}
 800b384:	bf00      	nop
 800b386:	3714      	adds	r7, #20
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b390:	b480      	push	{r7}
 800b392:	b085      	sub	sp, #20
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a6:	d103      	bne.n	800b3b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	60fb      	str	r3, [r7, #12]
 800b3ae:	e00c      	b.n	800b3ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	3308      	adds	r3, #8
 800b3b4:	60fb      	str	r3, [r7, #12]
 800b3b6:	e002      	b.n	800b3be <vListInsert+0x2e>
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	60fb      	str	r3, [r7, #12]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68ba      	ldr	r2, [r7, #8]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d2f6      	bcs.n	800b3b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	685a      	ldr	r2, [r3, #4]
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	1c5a      	adds	r2, r3, #1
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	601a      	str	r2, [r3, #0]
}
 800b3f6:	bf00      	nop
 800b3f8:	3714      	adds	r7, #20
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr

0800b402 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b402:	b480      	push	{r7}
 800b404:	b085      	sub	sp, #20
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	691b      	ldr	r3, [r3, #16]
 800b40e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	6892      	ldr	r2, [r2, #8]
 800b418:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	6852      	ldr	r2, [r2, #4]
 800b422:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d103      	bne.n	800b436 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	689a      	ldr	r2, [r3, #8]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	1e5a      	subs	r2, r3, #1
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3714      	adds	r7, #20
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
	...

0800b458 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10c      	bne.n	800b486 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b470:	b672      	cpsid	i
 800b472:	f383 8811 	msr	BASEPRI, r3
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	b662      	cpsie	i
 800b480:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b482:	bf00      	nop
 800b484:	e7fe      	b.n	800b484 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b486:	f001 ff59 	bl	800d33c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b492:	68f9      	ldr	r1, [r7, #12]
 800b494:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b496:	fb01 f303 	mul.w	r3, r1, r3
 800b49a:	441a      	add	r2, r3
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	68f9      	ldr	r1, [r7, #12]
 800b4ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b4bc:	fb01 f303 	mul.w	r3, r1, r3
 800b4c0:	441a      	add	r2, r3
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	22ff      	movs	r2, #255	; 0xff
 800b4ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	22ff      	movs	r2, #255	; 0xff
 800b4d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d114      	bne.n	800b506 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	691b      	ldr	r3, [r3, #16]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d01a      	beq.n	800b51a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	3310      	adds	r3, #16
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f001 fa11 	bl	800c910 <xTaskRemoveFromEventList>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d012      	beq.n	800b51a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b4f4:	4b0c      	ldr	r3, [pc, #48]	; (800b528 <xQueueGenericReset+0xd0>)
 800b4f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4fa:	601a      	str	r2, [r3, #0]
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	f3bf 8f6f 	isb	sy
 800b504:	e009      	b.n	800b51a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	3310      	adds	r3, #16
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7ff feef 	bl	800b2ee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	3324      	adds	r3, #36	; 0x24
 800b514:	4618      	mov	r0, r3
 800b516:	f7ff feea 	bl	800b2ee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b51a:	f001 ff43 	bl	800d3a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b51e:	2301      	movs	r3, #1
}
 800b520:	4618      	mov	r0, r3
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	e000ed04 	.word	0xe000ed04

0800b52c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b08e      	sub	sp, #56	; 0x38
 800b530:	af02      	add	r7, sp, #8
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
 800b538:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d10c      	bne.n	800b55a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b544:	b672      	cpsid	i
 800b546:	f383 8811 	msr	BASEPRI, r3
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	b662      	cpsie	i
 800b554:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b556:	bf00      	nop
 800b558:	e7fe      	b.n	800b558 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10c      	bne.n	800b57a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b564:	b672      	cpsid	i
 800b566:	f383 8811 	msr	BASEPRI, r3
 800b56a:	f3bf 8f6f 	isb	sy
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	b662      	cpsie	i
 800b574:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b576:	bf00      	nop
 800b578:	e7fe      	b.n	800b578 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d002      	beq.n	800b586 <xQueueGenericCreateStatic+0x5a>
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d001      	beq.n	800b58a <xQueueGenericCreateStatic+0x5e>
 800b586:	2301      	movs	r3, #1
 800b588:	e000      	b.n	800b58c <xQueueGenericCreateStatic+0x60>
 800b58a:	2300      	movs	r3, #0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d10c      	bne.n	800b5aa <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b594:	b672      	cpsid	i
 800b596:	f383 8811 	msr	BASEPRI, r3
 800b59a:	f3bf 8f6f 	isb	sy
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	b662      	cpsie	i
 800b5a4:	623b      	str	r3, [r7, #32]
}
 800b5a6:	bf00      	nop
 800b5a8:	e7fe      	b.n	800b5a8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d102      	bne.n	800b5b6 <xQueueGenericCreateStatic+0x8a>
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d101      	bne.n	800b5ba <xQueueGenericCreateStatic+0x8e>
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e000      	b.n	800b5bc <xQueueGenericCreateStatic+0x90>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10c      	bne.n	800b5da <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	b672      	cpsid	i
 800b5c6:	f383 8811 	msr	BASEPRI, r3
 800b5ca:	f3bf 8f6f 	isb	sy
 800b5ce:	f3bf 8f4f 	dsb	sy
 800b5d2:	b662      	cpsie	i
 800b5d4:	61fb      	str	r3, [r7, #28]
}
 800b5d6:	bf00      	nop
 800b5d8:	e7fe      	b.n	800b5d8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b5da:	2348      	movs	r3, #72	; 0x48
 800b5dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	2b48      	cmp	r3, #72	; 0x48
 800b5e2:	d00c      	beq.n	800b5fe <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e8:	b672      	cpsid	i
 800b5ea:	f383 8811 	msr	BASEPRI, r3
 800b5ee:	f3bf 8f6f 	isb	sy
 800b5f2:	f3bf 8f4f 	dsb	sy
 800b5f6:	b662      	cpsie	i
 800b5f8:	61bb      	str	r3, [r7, #24]
}
 800b5fa:	bf00      	nop
 800b5fc:	e7fe      	b.n	800b5fc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b5fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00d      	beq.n	800b626 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60c:	2201      	movs	r2, #1
 800b60e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b612:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	4613      	mov	r3, r2
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	68b9      	ldr	r1, [r7, #8]
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f000 f847 	bl	800b6b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b628:	4618      	mov	r0, r3
 800b62a:	3730      	adds	r7, #48	; 0x30
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b630:	b580      	push	{r7, lr}
 800b632:	b08a      	sub	sp, #40	; 0x28
 800b634:	af02      	add	r7, sp, #8
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	4613      	mov	r3, r2
 800b63c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d10c      	bne.n	800b65e <xQueueGenericCreate+0x2e>
	__asm volatile
 800b644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b648:	b672      	cpsid	i
 800b64a:	f383 8811 	msr	BASEPRI, r3
 800b64e:	f3bf 8f6f 	isb	sy
 800b652:	f3bf 8f4f 	dsb	sy
 800b656:	b662      	cpsie	i
 800b658:	613b      	str	r3, [r7, #16]
}
 800b65a:	bf00      	nop
 800b65c:	e7fe      	b.n	800b65c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d102      	bne.n	800b66a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b664:	2300      	movs	r3, #0
 800b666:	61fb      	str	r3, [r7, #28]
 800b668:	e004      	b.n	800b674 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	68ba      	ldr	r2, [r7, #8]
 800b66e:	fb02 f303 	mul.w	r3, r2, r3
 800b672:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	3348      	adds	r3, #72	; 0x48
 800b678:	4618      	mov	r0, r3
 800b67a:	f001 ff8b 	bl	800d594 <pvPortMalloc>
 800b67e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d011      	beq.n	800b6aa <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	3348      	adds	r3, #72	; 0x48
 800b68e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	2200      	movs	r2, #0
 800b694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b698:	79fa      	ldrb	r2, [r7, #7]
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	9300      	str	r3, [sp, #0]
 800b69e:	4613      	mov	r3, r2
 800b6a0:	697a      	ldr	r2, [r7, #20]
 800b6a2:	68b9      	ldr	r1, [r7, #8]
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f000 f805 	bl	800b6b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b6aa:	69bb      	ldr	r3, [r7, #24]
	}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3720      	adds	r7, #32
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
 800b6c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d103      	bne.n	800b6d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	69ba      	ldr	r2, [r7, #24]
 800b6cc:	601a      	str	r2, [r3, #0]
 800b6ce:	e002      	b.n	800b6d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	68ba      	ldr	r2, [r7, #8]
 800b6e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b6e2:	2101      	movs	r1, #1
 800b6e4:	69b8      	ldr	r0, [r7, #24]
 800b6e6:	f7ff feb7 	bl	800b458 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b6ea:	bf00      	nop
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
	...

0800b6f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b08e      	sub	sp, #56	; 0x38
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
 800b700:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b702:	2300      	movs	r3, #0
 800b704:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d10c      	bne.n	800b72a <xQueueGenericSend+0x36>
	__asm volatile
 800b710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b714:	b672      	cpsid	i
 800b716:	f383 8811 	msr	BASEPRI, r3
 800b71a:	f3bf 8f6f 	isb	sy
 800b71e:	f3bf 8f4f 	dsb	sy
 800b722:	b662      	cpsie	i
 800b724:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b726:	bf00      	nop
 800b728:	e7fe      	b.n	800b728 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d103      	bne.n	800b738 <xQueueGenericSend+0x44>
 800b730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b734:	2b00      	cmp	r3, #0
 800b736:	d101      	bne.n	800b73c <xQueueGenericSend+0x48>
 800b738:	2301      	movs	r3, #1
 800b73a:	e000      	b.n	800b73e <xQueueGenericSend+0x4a>
 800b73c:	2300      	movs	r3, #0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10c      	bne.n	800b75c <xQueueGenericSend+0x68>
	__asm volatile
 800b742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b746:	b672      	cpsid	i
 800b748:	f383 8811 	msr	BASEPRI, r3
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	b662      	cpsie	i
 800b756:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b758:	bf00      	nop
 800b75a:	e7fe      	b.n	800b75a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d103      	bne.n	800b76a <xQueueGenericSend+0x76>
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b766:	2b01      	cmp	r3, #1
 800b768:	d101      	bne.n	800b76e <xQueueGenericSend+0x7a>
 800b76a:	2301      	movs	r3, #1
 800b76c:	e000      	b.n	800b770 <xQueueGenericSend+0x7c>
 800b76e:	2300      	movs	r3, #0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d10c      	bne.n	800b78e <xQueueGenericSend+0x9a>
	__asm volatile
 800b774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b778:	b672      	cpsid	i
 800b77a:	f383 8811 	msr	BASEPRI, r3
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f3bf 8f4f 	dsb	sy
 800b786:	b662      	cpsie	i
 800b788:	623b      	str	r3, [r7, #32]
}
 800b78a:	bf00      	nop
 800b78c:	e7fe      	b.n	800b78c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b78e:	f001 fa87 	bl	800cca0 <xTaskGetSchedulerState>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d102      	bne.n	800b79e <xQueueGenericSend+0xaa>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d101      	bne.n	800b7a2 <xQueueGenericSend+0xae>
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e000      	b.n	800b7a4 <xQueueGenericSend+0xb0>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10c      	bne.n	800b7c2 <xQueueGenericSend+0xce>
	__asm volatile
 800b7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ac:	b672      	cpsid	i
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	b662      	cpsie	i
 800b7bc:	61fb      	str	r3, [r7, #28]
}
 800b7be:	bf00      	nop
 800b7c0:	e7fe      	b.n	800b7c0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7c2:	f001 fdbb 	bl	800d33c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d302      	bcc.n	800b7d8 <xQueueGenericSend+0xe4>
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	2b02      	cmp	r3, #2
 800b7d6:	d129      	bne.n	800b82c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b7d8:	683a      	ldr	r2, [r7, #0]
 800b7da:	68b9      	ldr	r1, [r7, #8]
 800b7dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7de:	f000 fb41 	bl	800be64 <prvCopyDataToQueue>
 800b7e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d010      	beq.n	800b80e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ee:	3324      	adds	r3, #36	; 0x24
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f001 f88d 	bl	800c910 <xTaskRemoveFromEventList>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d013      	beq.n	800b824 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b7fc:	4b3f      	ldr	r3, [pc, #252]	; (800b8fc <xQueueGenericSend+0x208>)
 800b7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b802:	601a      	str	r2, [r3, #0]
 800b804:	f3bf 8f4f 	dsb	sy
 800b808:	f3bf 8f6f 	isb	sy
 800b80c:	e00a      	b.n	800b824 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b810:	2b00      	cmp	r3, #0
 800b812:	d007      	beq.n	800b824 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b814:	4b39      	ldr	r3, [pc, #228]	; (800b8fc <xQueueGenericSend+0x208>)
 800b816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b81a:	601a      	str	r2, [r3, #0]
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b824:	f001 fdbe 	bl	800d3a4 <vPortExitCritical>
				return pdPASS;
 800b828:	2301      	movs	r3, #1
 800b82a:	e063      	b.n	800b8f4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d103      	bne.n	800b83a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b832:	f001 fdb7 	bl	800d3a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b836:	2300      	movs	r3, #0
 800b838:	e05c      	b.n	800b8f4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d106      	bne.n	800b84e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b840:	f107 0314 	add.w	r3, r7, #20
 800b844:	4618      	mov	r0, r3
 800b846:	f001 f8c7 	bl	800c9d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b84a:	2301      	movs	r3, #1
 800b84c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b84e:	f001 fda9 	bl	800d3a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b852:	f000 fe6d 	bl	800c530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b856:	f001 fd71 	bl	800d33c <vPortEnterCritical>
 800b85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b860:	b25b      	sxtb	r3, r3
 800b862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b866:	d103      	bne.n	800b870 <xQueueGenericSend+0x17c>
 800b868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86a:	2200      	movs	r2, #0
 800b86c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b876:	b25b      	sxtb	r3, r3
 800b878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87c:	d103      	bne.n	800b886 <xQueueGenericSend+0x192>
 800b87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b880:	2200      	movs	r2, #0
 800b882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b886:	f001 fd8d 	bl	800d3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b88a:	1d3a      	adds	r2, r7, #4
 800b88c:	f107 0314 	add.w	r3, r7, #20
 800b890:	4611      	mov	r1, r2
 800b892:	4618      	mov	r0, r3
 800b894:	f001 f8b6 	bl	800ca04 <xTaskCheckForTimeOut>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d124      	bne.n	800b8e8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b89e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8a0:	f000 fbd8 	bl	800c054 <prvIsQueueFull>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d018      	beq.n	800b8dc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ac:	3310      	adds	r3, #16
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	4611      	mov	r1, r2
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f001 f806 	bl	800c8c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b8b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8ba:	f000 fb63 	bl	800bf84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b8be:	f000 fe45 	bl	800c54c <xTaskResumeAll>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	f47f af7c 	bne.w	800b7c2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b8ca:	4b0c      	ldr	r3, [pc, #48]	; (800b8fc <xQueueGenericSend+0x208>)
 800b8cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8d0:	601a      	str	r2, [r3, #0]
 800b8d2:	f3bf 8f4f 	dsb	sy
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	e772      	b.n	800b7c2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b8dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8de:	f000 fb51 	bl	800bf84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b8e2:	f000 fe33 	bl	800c54c <xTaskResumeAll>
 800b8e6:	e76c      	b.n	800b7c2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b8e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8ea:	f000 fb4b 	bl	800bf84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b8ee:	f000 fe2d 	bl	800c54c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b8f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3738      	adds	r7, #56	; 0x38
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	e000ed04 	.word	0xe000ed04

0800b900 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b08e      	sub	sp, #56	; 0x38
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]
 800b90c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10c      	bne.n	800b932 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91c:	b672      	cpsid	i
 800b91e:	f383 8811 	msr	BASEPRI, r3
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	f3bf 8f4f 	dsb	sy
 800b92a:	b662      	cpsie	i
 800b92c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b92e:	bf00      	nop
 800b930:	e7fe      	b.n	800b930 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d103      	bne.n	800b940 <xQueueGenericSendFromISR+0x40>
 800b938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <xQueueGenericSendFromISR+0x44>
 800b940:	2301      	movs	r3, #1
 800b942:	e000      	b.n	800b946 <xQueueGenericSendFromISR+0x46>
 800b944:	2300      	movs	r3, #0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d10c      	bne.n	800b964 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94e:	b672      	cpsid	i
 800b950:	f383 8811 	msr	BASEPRI, r3
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	b662      	cpsie	i
 800b95e:	623b      	str	r3, [r7, #32]
}
 800b960:	bf00      	nop
 800b962:	e7fe      	b.n	800b962 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	2b02      	cmp	r3, #2
 800b968:	d103      	bne.n	800b972 <xQueueGenericSendFromISR+0x72>
 800b96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d101      	bne.n	800b976 <xQueueGenericSendFromISR+0x76>
 800b972:	2301      	movs	r3, #1
 800b974:	e000      	b.n	800b978 <xQueueGenericSendFromISR+0x78>
 800b976:	2300      	movs	r3, #0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10c      	bne.n	800b996 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800b97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b980:	b672      	cpsid	i
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	b662      	cpsie	i
 800b990:	61fb      	str	r3, [r7, #28]
}
 800b992:	bf00      	nop
 800b994:	e7fe      	b.n	800b994 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b996:	f001 fdb9 	bl	800d50c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b99a:	f3ef 8211 	mrs	r2, BASEPRI
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	b672      	cpsid	i
 800b9a4:	f383 8811 	msr	BASEPRI, r3
 800b9a8:	f3bf 8f6f 	isb	sy
 800b9ac:	f3bf 8f4f 	dsb	sy
 800b9b0:	b662      	cpsie	i
 800b9b2:	61ba      	str	r2, [r7, #24]
 800b9b4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b9b6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d302      	bcc.n	800b9cc <xQueueGenericSendFromISR+0xcc>
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	2b02      	cmp	r3, #2
 800b9ca:	d12c      	bne.n	800ba26 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b9d6:	683a      	ldr	r2, [r7, #0]
 800b9d8:	68b9      	ldr	r1, [r7, #8]
 800b9da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9dc:	f000 fa42 	bl	800be64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b9e0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e8:	d112      	bne.n	800ba10 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d016      	beq.n	800ba20 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f4:	3324      	adds	r3, #36	; 0x24
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 ff8a 	bl	800c910 <xTaskRemoveFromEventList>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00e      	beq.n	800ba20 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d00b      	beq.n	800ba20 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	601a      	str	r2, [r3, #0]
 800ba0e:	e007      	b.n	800ba20 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ba10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba14:	3301      	adds	r3, #1
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	b25a      	sxtb	r2, r3
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ba20:	2301      	movs	r3, #1
 800ba22:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ba24:	e001      	b.n	800ba2a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba26:	2300      	movs	r3, #0
 800ba28:	637b      	str	r3, [r7, #52]	; 0x34
 800ba2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba2c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ba34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3738      	adds	r7, #56	; 0x38
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b08c      	sub	sp, #48	; 0x30
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10c      	bne.n	800ba74 <xQueueReceive+0x34>
	__asm volatile
 800ba5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5e:	b672      	cpsid	i
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	b662      	cpsie	i
 800ba6e:	623b      	str	r3, [r7, #32]
}
 800ba70:	bf00      	nop
 800ba72:	e7fe      	b.n	800ba72 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d103      	bne.n	800ba82 <xQueueReceive+0x42>
 800ba7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d101      	bne.n	800ba86 <xQueueReceive+0x46>
 800ba82:	2301      	movs	r3, #1
 800ba84:	e000      	b.n	800ba88 <xQueueReceive+0x48>
 800ba86:	2300      	movs	r3, #0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10c      	bne.n	800baa6 <xQueueReceive+0x66>
	__asm volatile
 800ba8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba90:	b672      	cpsid	i
 800ba92:	f383 8811 	msr	BASEPRI, r3
 800ba96:	f3bf 8f6f 	isb	sy
 800ba9a:	f3bf 8f4f 	dsb	sy
 800ba9e:	b662      	cpsie	i
 800baa0:	61fb      	str	r3, [r7, #28]
}
 800baa2:	bf00      	nop
 800baa4:	e7fe      	b.n	800baa4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800baa6:	f001 f8fb 	bl	800cca0 <xTaskGetSchedulerState>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d102      	bne.n	800bab6 <xQueueReceive+0x76>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d101      	bne.n	800baba <xQueueReceive+0x7a>
 800bab6:	2301      	movs	r3, #1
 800bab8:	e000      	b.n	800babc <xQueueReceive+0x7c>
 800baba:	2300      	movs	r3, #0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d10c      	bne.n	800bada <xQueueReceive+0x9a>
	__asm volatile
 800bac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac4:	b672      	cpsid	i
 800bac6:	f383 8811 	msr	BASEPRI, r3
 800baca:	f3bf 8f6f 	isb	sy
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	b662      	cpsie	i
 800bad4:	61bb      	str	r3, [r7, #24]
}
 800bad6:	bf00      	nop
 800bad8:	e7fe      	b.n	800bad8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bada:	f001 fc2f 	bl	800d33c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d01f      	beq.n	800bb2a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800baea:	68b9      	ldr	r1, [r7, #8]
 800baec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baee:	f000 fa23 	bl	800bf38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf4:	1e5a      	subs	r2, r3, #1
 800baf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00f      	beq.n	800bb22 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb04:	3310      	adds	r3, #16
 800bb06:	4618      	mov	r0, r3
 800bb08:	f000 ff02 	bl	800c910 <xTaskRemoveFromEventList>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d007      	beq.n	800bb22 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb12:	4b3d      	ldr	r3, [pc, #244]	; (800bc08 <xQueueReceive+0x1c8>)
 800bb14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb18:	601a      	str	r2, [r3, #0]
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb22:	f001 fc3f 	bl	800d3a4 <vPortExitCritical>
				return pdPASS;
 800bb26:	2301      	movs	r3, #1
 800bb28:	e069      	b.n	800bbfe <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d103      	bne.n	800bb38 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb30:	f001 fc38 	bl	800d3a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb34:	2300      	movs	r3, #0
 800bb36:	e062      	b.n	800bbfe <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d106      	bne.n	800bb4c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb3e:	f107 0310 	add.w	r3, r7, #16
 800bb42:	4618      	mov	r0, r3
 800bb44:	f000 ff48 	bl	800c9d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb4c:	f001 fc2a 	bl	800d3a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb50:	f000 fcee 	bl	800c530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb54:	f001 fbf2 	bl	800d33c <vPortEnterCritical>
 800bb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb5e:	b25b      	sxtb	r3, r3
 800bb60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb64:	d103      	bne.n	800bb6e <xQueueReceive+0x12e>
 800bb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb74:	b25b      	sxtb	r3, r3
 800bb76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb7a:	d103      	bne.n	800bb84 <xQueueReceive+0x144>
 800bb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb84:	f001 fc0e 	bl	800d3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb88:	1d3a      	adds	r2, r7, #4
 800bb8a:	f107 0310 	add.w	r3, r7, #16
 800bb8e:	4611      	mov	r1, r2
 800bb90:	4618      	mov	r0, r3
 800bb92:	f000 ff37 	bl	800ca04 <xTaskCheckForTimeOut>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d123      	bne.n	800bbe4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb9e:	f000 fa43 	bl	800c028 <prvIsQueueEmpty>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d017      	beq.n	800bbd8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbaa:	3324      	adds	r3, #36	; 0x24
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	4611      	mov	r1, r2
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f000 fe87 	bl	800c8c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bbb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbb8:	f000 f9e4 	bl	800bf84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bbbc:	f000 fcc6 	bl	800c54c <xTaskResumeAll>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d189      	bne.n	800bada <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800bbc6:	4b10      	ldr	r3, [pc, #64]	; (800bc08 <xQueueReceive+0x1c8>)
 800bbc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbcc:	601a      	str	r2, [r3, #0]
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	f3bf 8f6f 	isb	sy
 800bbd6:	e780      	b.n	800bada <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bbd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbda:	f000 f9d3 	bl	800bf84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbde:	f000 fcb5 	bl	800c54c <xTaskResumeAll>
 800bbe2:	e77a      	b.n	800bada <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bbe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbe6:	f000 f9cd 	bl	800bf84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbea:	f000 fcaf 	bl	800c54c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbf0:	f000 fa1a 	bl	800c028 <prvIsQueueEmpty>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	f43f af6f 	beq.w	800bada <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bbfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3730      	adds	r7, #48	; 0x30
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	e000ed04 	.word	0xe000ed04

0800bc0c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b08e      	sub	sp, #56	; 0x38
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc16:	2300      	movs	r3, #0
 800bc18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10c      	bne.n	800bc42 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800bc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2c:	b672      	cpsid	i
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	b662      	cpsie	i
 800bc3c:	623b      	str	r3, [r7, #32]
}
 800bc3e:	bf00      	nop
 800bc40:	e7fe      	b.n	800bc40 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d00c      	beq.n	800bc64 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800bc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4e:	b672      	cpsid	i
 800bc50:	f383 8811 	msr	BASEPRI, r3
 800bc54:	f3bf 8f6f 	isb	sy
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	b662      	cpsie	i
 800bc5e:	61fb      	str	r3, [r7, #28]
}
 800bc60:	bf00      	nop
 800bc62:	e7fe      	b.n	800bc62 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc64:	f001 f81c 	bl	800cca0 <xTaskGetSchedulerState>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d102      	bne.n	800bc74 <xQueueSemaphoreTake+0x68>
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d101      	bne.n	800bc78 <xQueueSemaphoreTake+0x6c>
 800bc74:	2301      	movs	r3, #1
 800bc76:	e000      	b.n	800bc7a <xQueueSemaphoreTake+0x6e>
 800bc78:	2300      	movs	r3, #0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d10c      	bne.n	800bc98 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800bc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc82:	b672      	cpsid	i
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	b662      	cpsie	i
 800bc92:	61bb      	str	r3, [r7, #24]
}
 800bc94:	bf00      	nop
 800bc96:	e7fe      	b.n	800bc96 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc98:	f001 fb50 	bl	800d33c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bca0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d024      	beq.n	800bcf2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcaa:	1e5a      	subs	r2, r3, #1
 800bcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d104      	bne.n	800bcc2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bcb8:	f001 f9b8 	bl	800d02c <pvTaskIncrementMutexHeldCount>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc4:	691b      	ldr	r3, [r3, #16]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00f      	beq.n	800bcea <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bccc:	3310      	adds	r3, #16
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f000 fe1e 	bl	800c910 <xTaskRemoveFromEventList>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d007      	beq.n	800bcea <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bcda:	4b55      	ldr	r3, [pc, #340]	; (800be30 <xQueueSemaphoreTake+0x224>)
 800bcdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bce0:	601a      	str	r2, [r3, #0]
 800bce2:	f3bf 8f4f 	dsb	sy
 800bce6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bcea:	f001 fb5b 	bl	800d3a4 <vPortExitCritical>
				return pdPASS;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e099      	b.n	800be26 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d113      	bne.n	800bd20 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00c      	beq.n	800bd18 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800bcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd02:	b672      	cpsid	i
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	b662      	cpsie	i
 800bd12:	617b      	str	r3, [r7, #20]
}
 800bd14:	bf00      	nop
 800bd16:	e7fe      	b.n	800bd16 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bd18:	f001 fb44 	bl	800d3a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	e082      	b.n	800be26 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d106      	bne.n	800bd34 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd26:	f107 030c 	add.w	r3, r7, #12
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f000 fe54 	bl	800c9d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd30:	2301      	movs	r3, #1
 800bd32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd34:	f001 fb36 	bl	800d3a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd38:	f000 fbfa 	bl	800c530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd3c:	f001 fafe 	bl	800d33c <vPortEnterCritical>
 800bd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd46:	b25b      	sxtb	r3, r3
 800bd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd4c:	d103      	bne.n	800bd56 <xQueueSemaphoreTake+0x14a>
 800bd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd5c:	b25b      	sxtb	r3, r3
 800bd5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd62:	d103      	bne.n	800bd6c <xQueueSemaphoreTake+0x160>
 800bd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd66:	2200      	movs	r2, #0
 800bd68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd6c:	f001 fb1a 	bl	800d3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd70:	463a      	mov	r2, r7
 800bd72:	f107 030c 	add.w	r3, r7, #12
 800bd76:	4611      	mov	r1, r2
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f000 fe43 	bl	800ca04 <xTaskCheckForTimeOut>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d132      	bne.n	800bdea <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd86:	f000 f94f 	bl	800c028 <prvIsQueueEmpty>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d026      	beq.n	800bdde <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d109      	bne.n	800bdac <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800bd98:	f001 fad0 	bl	800d33c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	4618      	mov	r0, r3
 800bda2:	f000 ff9b 	bl	800ccdc <xTaskPriorityInherit>
 800bda6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bda8:	f001 fafc 	bl	800d3a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdae:	3324      	adds	r3, #36	; 0x24
 800bdb0:	683a      	ldr	r2, [r7, #0]
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f000 fd85 	bl	800c8c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bdba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bdbc:	f000 f8e2 	bl	800bf84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bdc0:	f000 fbc4 	bl	800c54c <xTaskResumeAll>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f47f af66 	bne.w	800bc98 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800bdcc:	4b18      	ldr	r3, [pc, #96]	; (800be30 <xQueueSemaphoreTake+0x224>)
 800bdce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd2:	601a      	str	r2, [r3, #0]
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	f3bf 8f6f 	isb	sy
 800bddc:	e75c      	b.n	800bc98 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bdde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bde0:	f000 f8d0 	bl	800bf84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bde4:	f000 fbb2 	bl	800c54c <xTaskResumeAll>
 800bde8:	e756      	b.n	800bc98 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bdea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bdec:	f000 f8ca 	bl	800bf84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdf0:	f000 fbac 	bl	800c54c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bdf6:	f000 f917 	bl	800c028 <prvIsQueueEmpty>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f43f af4b 	beq.w	800bc98 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00d      	beq.n	800be24 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800be08:	f001 fa98 	bl	800d33c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800be0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be0e:	f000 f811 	bl	800be34 <prvGetDisinheritPriorityAfterTimeout>
 800be12:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800be14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be16:	689b      	ldr	r3, [r3, #8]
 800be18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be1a:	4618      	mov	r0, r3
 800be1c:	f001 f868 	bl	800cef0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800be20:	f001 fac0 	bl	800d3a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800be24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800be26:	4618      	mov	r0, r3
 800be28:	3738      	adds	r7, #56	; 0x38
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	e000ed04 	.word	0xe000ed04

0800be34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be40:	2b00      	cmp	r3, #0
 800be42:	d006      	beq.n	800be52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f1c3 0307 	rsb	r3, r3, #7
 800be4e:	60fb      	str	r3, [r7, #12]
 800be50:	e001      	b.n	800be56 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800be52:	2300      	movs	r3, #0
 800be54:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800be56:	68fb      	ldr	r3, [r7, #12]
	}
 800be58:	4618      	mov	r0, r3
 800be5a:	3714      	adds	r7, #20
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b086      	sub	sp, #24
 800be68:	af00      	add	r7, sp, #0
 800be6a:	60f8      	str	r0, [r7, #12]
 800be6c:	60b9      	str	r1, [r7, #8]
 800be6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800be70:	2300      	movs	r3, #0
 800be72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10d      	bne.n	800be9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d14d      	bne.n	800bf26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	4618      	mov	r0, r3
 800be90:	f000 ffa4 	bl	800cddc <xTaskPriorityDisinherit>
 800be94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2200      	movs	r2, #0
 800be9a:	609a      	str	r2, [r3, #8]
 800be9c:	e043      	b.n	800bf26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d119      	bne.n	800bed8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6858      	ldr	r0, [r3, #4]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beac:	461a      	mov	r2, r3
 800beae:	68b9      	ldr	r1, [r7, #8]
 800beb0:	f001 fd80 	bl	800d9b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	685a      	ldr	r2, [r3, #4]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bebc:	441a      	add	r2, r3
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	685a      	ldr	r2, [r3, #4]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	429a      	cmp	r2, r3
 800becc:	d32b      	bcc.n	800bf26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	605a      	str	r2, [r3, #4]
 800bed6:	e026      	b.n	800bf26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	68d8      	ldr	r0, [r3, #12]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee0:	461a      	mov	r2, r3
 800bee2:	68b9      	ldr	r1, [r7, #8]
 800bee4:	f001 fd66 	bl	800d9b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	68da      	ldr	r2, [r3, #12]
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef0:	425b      	negs	r3, r3
 800bef2:	441a      	add	r2, r3
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	68da      	ldr	r2, [r3, #12]
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d207      	bcs.n	800bf14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	689a      	ldr	r2, [r3, #8]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0c:	425b      	negs	r3, r3
 800bf0e:	441a      	add	r2, r3
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b02      	cmp	r3, #2
 800bf18:	d105      	bne.n	800bf26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d002      	beq.n	800bf26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	3b01      	subs	r3, #1
 800bf24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	1c5a      	adds	r2, r3, #1
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bf2e:	697b      	ldr	r3, [r7, #20]
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3718      	adds	r7, #24
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d018      	beq.n	800bf7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	68da      	ldr	r2, [r3, #12]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf52:	441a      	add	r2, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	68da      	ldr	r2, [r3, #12]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d303      	bcc.n	800bf6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	68d9      	ldr	r1, [r3, #12]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf74:	461a      	mov	r2, r3
 800bf76:	6838      	ldr	r0, [r7, #0]
 800bf78:	f001 fd1c 	bl	800d9b4 <memcpy>
	}
}
 800bf7c:	bf00      	nop
 800bf7e:	3708      	adds	r7, #8
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bf8c:	f001 f9d6 	bl	800d33c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf98:	e011      	b.n	800bfbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d012      	beq.n	800bfc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	3324      	adds	r3, #36	; 0x24
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f000 fcb2 	bl	800c910 <xTaskRemoveFromEventList>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d001      	beq.n	800bfb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bfb2:	f000 fd8d 	bl	800cad0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bfb6:	7bfb      	ldrb	r3, [r7, #15]
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bfbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	dce9      	bgt.n	800bf9a <prvUnlockQueue+0x16>
 800bfc6:	e000      	b.n	800bfca <prvUnlockQueue+0x46>
					break;
 800bfc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	22ff      	movs	r2, #255	; 0xff
 800bfce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bfd2:	f001 f9e7 	bl	800d3a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bfd6:	f001 f9b1 	bl	800d33c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfe0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bfe2:	e011      	b.n	800c008 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d012      	beq.n	800c012 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	3310      	adds	r3, #16
 800bff0:	4618      	mov	r0, r3
 800bff2:	f000 fc8d 	bl	800c910 <xTaskRemoveFromEventList>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d001      	beq.n	800c000 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bffc:	f000 fd68 	bl	800cad0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c000:	7bbb      	ldrb	r3, [r7, #14]
 800c002:	3b01      	subs	r3, #1
 800c004:	b2db      	uxtb	r3, r3
 800c006:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c008:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	dce9      	bgt.n	800bfe4 <prvUnlockQueue+0x60>
 800c010:	e000      	b.n	800c014 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c012:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	22ff      	movs	r2, #255	; 0xff
 800c018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c01c:	f001 f9c2 	bl	800d3a4 <vPortExitCritical>
}
 800c020:	bf00      	nop
 800c022:	3710      	adds	r7, #16
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c030:	f001 f984 	bl	800d33c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d102      	bne.n	800c042 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c03c:	2301      	movs	r3, #1
 800c03e:	60fb      	str	r3, [r7, #12]
 800c040:	e001      	b.n	800c046 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c042:	2300      	movs	r3, #0
 800c044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c046:	f001 f9ad 	bl	800d3a4 <vPortExitCritical>

	return xReturn;
 800c04a:	68fb      	ldr	r3, [r7, #12]
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3710      	adds	r7, #16
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c05c:	f001 f96e 	bl	800d33c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c068:	429a      	cmp	r2, r3
 800c06a:	d102      	bne.n	800c072 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c06c:	2301      	movs	r3, #1
 800c06e:	60fb      	str	r3, [r7, #12]
 800c070:	e001      	b.n	800c076 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c072:	2300      	movs	r3, #0
 800c074:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c076:	f001 f995 	bl	800d3a4 <vPortExitCritical>

	return xReturn;
 800c07a:	68fb      	ldr	r3, [r7, #12]
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3710      	adds	r7, #16
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c084:	b580      	push	{r7, lr}
 800c086:	b08e      	sub	sp, #56	; 0x38
 800c088:	af04      	add	r7, sp, #16
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	607a      	str	r2, [r7, #4]
 800c090:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c094:	2b00      	cmp	r3, #0
 800c096:	d10c      	bne.n	800c0b2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800c098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09c:	b672      	cpsid	i
 800c09e:	f383 8811 	msr	BASEPRI, r3
 800c0a2:	f3bf 8f6f 	isb	sy
 800c0a6:	f3bf 8f4f 	dsb	sy
 800c0aa:	b662      	cpsie	i
 800c0ac:	623b      	str	r3, [r7, #32]
}
 800c0ae:	bf00      	nop
 800c0b0:	e7fe      	b.n	800c0b0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d10c      	bne.n	800c0d2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800c0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0bc:	b672      	cpsid	i
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	b662      	cpsie	i
 800c0cc:	61fb      	str	r3, [r7, #28]
}
 800c0ce:	bf00      	nop
 800c0d0:	e7fe      	b.n	800c0d0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c0d2:	23b4      	movs	r3, #180	; 0xb4
 800c0d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	2bb4      	cmp	r3, #180	; 0xb4
 800c0da:	d00c      	beq.n	800c0f6 <xTaskCreateStatic+0x72>
	__asm volatile
 800c0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e0:	b672      	cpsid	i
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	b662      	cpsie	i
 800c0f0:	61bb      	str	r3, [r7, #24]
}
 800c0f2:	bf00      	nop
 800c0f4:	e7fe      	b.n	800c0f4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c0f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d01e      	beq.n	800c13c <xTaskCreateStatic+0xb8>
 800c0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c100:	2b00      	cmp	r3, #0
 800c102:	d01b      	beq.n	800c13c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c106:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c10c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c110:	2202      	movs	r2, #2
 800c112:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c116:	2300      	movs	r3, #0
 800c118:	9303      	str	r3, [sp, #12]
 800c11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11c:	9302      	str	r3, [sp, #8]
 800c11e:	f107 0314 	add.w	r3, r7, #20
 800c122:	9301      	str	r3, [sp, #4]
 800c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c126:	9300      	str	r3, [sp, #0]
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	68b9      	ldr	r1, [r7, #8]
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f000 f850 	bl	800c1d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c134:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c136:	f000 f8ed 	bl	800c314 <prvAddNewTaskToReadyList>
 800c13a:	e001      	b.n	800c140 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c13c:	2300      	movs	r3, #0
 800c13e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c140:	697b      	ldr	r3, [r7, #20]
	}
 800c142:	4618      	mov	r0, r3
 800c144:	3728      	adds	r7, #40	; 0x28
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b08c      	sub	sp, #48	; 0x30
 800c14e:	af04      	add	r7, sp, #16
 800c150:	60f8      	str	r0, [r7, #12]
 800c152:	60b9      	str	r1, [r7, #8]
 800c154:	603b      	str	r3, [r7, #0]
 800c156:	4613      	mov	r3, r2
 800c158:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c15a:	88fb      	ldrh	r3, [r7, #6]
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	4618      	mov	r0, r3
 800c160:	f001 fa18 	bl	800d594 <pvPortMalloc>
 800c164:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d00e      	beq.n	800c18a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c16c:	20b4      	movs	r0, #180	; 0xb4
 800c16e:	f001 fa11 	bl	800d594 <pvPortMalloc>
 800c172:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d003      	beq.n	800c182 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	697a      	ldr	r2, [r7, #20]
 800c17e:	631a      	str	r2, [r3, #48]	; 0x30
 800c180:	e005      	b.n	800c18e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c182:	6978      	ldr	r0, [r7, #20]
 800c184:	f001 fad0 	bl	800d728 <vPortFree>
 800c188:	e001      	b.n	800c18e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c18a:	2300      	movs	r3, #0
 800c18c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c18e:	69fb      	ldr	r3, [r7, #28]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d017      	beq.n	800c1c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c194:	69fb      	ldr	r3, [r7, #28]
 800c196:	2200      	movs	r2, #0
 800c198:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c19c:	88fa      	ldrh	r2, [r7, #6]
 800c19e:	2300      	movs	r3, #0
 800c1a0:	9303      	str	r3, [sp, #12]
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	9302      	str	r3, [sp, #8]
 800c1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a8:	9301      	str	r3, [sp, #4]
 800c1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ac:	9300      	str	r3, [sp, #0]
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	68b9      	ldr	r1, [r7, #8]
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f000 f80e 	bl	800c1d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1b8:	69f8      	ldr	r0, [r7, #28]
 800c1ba:	f000 f8ab 	bl	800c314 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	61bb      	str	r3, [r7, #24]
 800c1c2:	e002      	b.n	800c1ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c1ca:	69bb      	ldr	r3, [r7, #24]
	}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3720      	adds	r7, #32
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b088      	sub	sp, #32
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
 800c1e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1e6:	6879      	ldr	r1, [r7, #4]
 800c1e8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c1ec:	440b      	add	r3, r1
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4413      	add	r3, r2
 800c1f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c1f4:	69bb      	ldr	r3, [r7, #24]
 800c1f6:	f023 0307 	bic.w	r3, r3, #7
 800c1fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	f003 0307 	and.w	r3, r3, #7
 800c202:	2b00      	cmp	r3, #0
 800c204:	d00c      	beq.n	800c220 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800c206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20a:	b672      	cpsid	i
 800c20c:	f383 8811 	msr	BASEPRI, r3
 800c210:	f3bf 8f6f 	isb	sy
 800c214:	f3bf 8f4f 	dsb	sy
 800c218:	b662      	cpsie	i
 800c21a:	617b      	str	r3, [r7, #20]
}
 800c21c:	bf00      	nop
 800c21e:	e7fe      	b.n	800c21e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d01f      	beq.n	800c266 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c226:	2300      	movs	r3, #0
 800c228:	61fb      	str	r3, [r7, #28]
 800c22a:	e012      	b.n	800c252 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c22c:	68ba      	ldr	r2, [r7, #8]
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	4413      	add	r3, r2
 800c232:	7819      	ldrb	r1, [r3, #0]
 800c234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	4413      	add	r3, r2
 800c23a:	3334      	adds	r3, #52	; 0x34
 800c23c:	460a      	mov	r2, r1
 800c23e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c240:	68ba      	ldr	r2, [r7, #8]
 800c242:	69fb      	ldr	r3, [r7, #28]
 800c244:	4413      	add	r3, r2
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d006      	beq.n	800c25a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	3301      	adds	r3, #1
 800c250:	61fb      	str	r3, [r7, #28]
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	2b0f      	cmp	r3, #15
 800c256:	d9e9      	bls.n	800c22c <prvInitialiseNewTask+0x58>
 800c258:	e000      	b.n	800c25c <prvInitialiseNewTask+0x88>
			{
				break;
 800c25a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25e:	2200      	movs	r2, #0
 800c260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c264:	e003      	b.n	800c26e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c268:	2200      	movs	r2, #0
 800c26a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c270:	2b06      	cmp	r3, #6
 800c272:	d901      	bls.n	800c278 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c274:	2306      	movs	r3, #6
 800c276:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c27c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c282:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c286:	2200      	movs	r2, #0
 800c288:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28c:	3304      	adds	r3, #4
 800c28e:	4618      	mov	r0, r3
 800c290:	f7ff f84d 	bl	800b32e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c296:	3318      	adds	r3, #24
 800c298:	4618      	mov	r0, r3
 800c29a:	f7ff f848 	bl	800b32e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a6:	f1c3 0207 	rsb	r2, r3, #7
 800c2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c6:	334c      	adds	r3, #76	; 0x4c
 800c2c8:	2260      	movs	r2, #96	; 0x60
 800c2ca:	2100      	movs	r1, #0
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f001 fb7f 	bl	800d9d0 <memset>
 800c2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d4:	4a0c      	ldr	r2, [pc, #48]	; (800c308 <prvInitialiseNewTask+0x134>)
 800c2d6:	651a      	str	r2, [r3, #80]	; 0x50
 800c2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2da:	4a0c      	ldr	r2, [pc, #48]	; (800c30c <prvInitialiseNewTask+0x138>)
 800c2dc:	655a      	str	r2, [r3, #84]	; 0x54
 800c2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e0:	4a0b      	ldr	r2, [pc, #44]	; (800c310 <prvInitialiseNewTask+0x13c>)
 800c2e2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c2e4:	683a      	ldr	r2, [r7, #0]
 800c2e6:	68f9      	ldr	r1, [r7, #12]
 800c2e8:	69b8      	ldr	r0, [r7, #24]
 800c2ea:	f000 ff19 	bl	800d120 <pxPortInitialiseStack>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d002      	beq.n	800c300 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c300:	bf00      	nop
 800c302:	3720      	adds	r7, #32
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	08010394 	.word	0x08010394
 800c30c:	080103b4 	.word	0x080103b4
 800c310:	08010374 	.word	0x08010374

0800c314 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c31c:	f001 f80e 	bl	800d33c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c320:	4b2a      	ldr	r3, [pc, #168]	; (800c3cc <prvAddNewTaskToReadyList+0xb8>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	3301      	adds	r3, #1
 800c326:	4a29      	ldr	r2, [pc, #164]	; (800c3cc <prvAddNewTaskToReadyList+0xb8>)
 800c328:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c32a:	4b29      	ldr	r3, [pc, #164]	; (800c3d0 <prvAddNewTaskToReadyList+0xbc>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d109      	bne.n	800c346 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c332:	4a27      	ldr	r2, [pc, #156]	; (800c3d0 <prvAddNewTaskToReadyList+0xbc>)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c338:	4b24      	ldr	r3, [pc, #144]	; (800c3cc <prvAddNewTaskToReadyList+0xb8>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d110      	bne.n	800c362 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c340:	f000 fbea 	bl	800cb18 <prvInitialiseTaskLists>
 800c344:	e00d      	b.n	800c362 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c346:	4b23      	ldr	r3, [pc, #140]	; (800c3d4 <prvAddNewTaskToReadyList+0xc0>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d109      	bne.n	800c362 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c34e:	4b20      	ldr	r3, [pc, #128]	; (800c3d0 <prvAddNewTaskToReadyList+0xbc>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c358:	429a      	cmp	r2, r3
 800c35a:	d802      	bhi.n	800c362 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c35c:	4a1c      	ldr	r2, [pc, #112]	; (800c3d0 <prvAddNewTaskToReadyList+0xbc>)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c362:	4b1d      	ldr	r3, [pc, #116]	; (800c3d8 <prvAddNewTaskToReadyList+0xc4>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	3301      	adds	r3, #1
 800c368:	4a1b      	ldr	r2, [pc, #108]	; (800c3d8 <prvAddNewTaskToReadyList+0xc4>)
 800c36a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c370:	2201      	movs	r2, #1
 800c372:	409a      	lsls	r2, r3
 800c374:	4b19      	ldr	r3, [pc, #100]	; (800c3dc <prvAddNewTaskToReadyList+0xc8>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4313      	orrs	r3, r2
 800c37a:	4a18      	ldr	r2, [pc, #96]	; (800c3dc <prvAddNewTaskToReadyList+0xc8>)
 800c37c:	6013      	str	r3, [r2, #0]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c382:	4613      	mov	r3, r2
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	4413      	add	r3, r2
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	4a15      	ldr	r2, [pc, #84]	; (800c3e0 <prvAddNewTaskToReadyList+0xcc>)
 800c38c:	441a      	add	r2, r3
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	3304      	adds	r3, #4
 800c392:	4619      	mov	r1, r3
 800c394:	4610      	mov	r0, r2
 800c396:	f7fe ffd7 	bl	800b348 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c39a:	f001 f803 	bl	800d3a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c39e:	4b0d      	ldr	r3, [pc, #52]	; (800c3d4 <prvAddNewTaskToReadyList+0xc0>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d00e      	beq.n	800c3c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c3a6:	4b0a      	ldr	r3, [pc, #40]	; (800c3d0 <prvAddNewTaskToReadyList+0xbc>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d207      	bcs.n	800c3c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c3b4:	4b0b      	ldr	r3, [pc, #44]	; (800c3e4 <prvAddNewTaskToReadyList+0xd0>)
 800c3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3ba:	601a      	str	r2, [r3, #0]
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3c4:	bf00      	nop
 800c3c6:	3708      	adds	r7, #8
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	20000668 	.word	0x20000668
 800c3d0:	20000568 	.word	0x20000568
 800c3d4:	20000674 	.word	0x20000674
 800c3d8:	20000684 	.word	0x20000684
 800c3dc:	20000670 	.word	0x20000670
 800c3e0:	2000056c 	.word	0x2000056c
 800c3e4:	e000ed04 	.word	0xe000ed04

0800c3e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d019      	beq.n	800c42e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c3fa:	4b14      	ldr	r3, [pc, #80]	; (800c44c <vTaskDelay+0x64>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d00c      	beq.n	800c41c <vTaskDelay+0x34>
	__asm volatile
 800c402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c406:	b672      	cpsid	i
 800c408:	f383 8811 	msr	BASEPRI, r3
 800c40c:	f3bf 8f6f 	isb	sy
 800c410:	f3bf 8f4f 	dsb	sy
 800c414:	b662      	cpsie	i
 800c416:	60bb      	str	r3, [r7, #8]
}
 800c418:	bf00      	nop
 800c41a:	e7fe      	b.n	800c41a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c41c:	f000 f888 	bl	800c530 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c420:	2100      	movs	r1, #0
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fe16 	bl	800d054 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c428:	f000 f890 	bl	800c54c <xTaskResumeAll>
 800c42c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d107      	bne.n	800c444 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c434:	4b06      	ldr	r3, [pc, #24]	; (800c450 <vTaskDelay+0x68>)
 800c436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c43a:	601a      	str	r2, [r3, #0]
 800c43c:	f3bf 8f4f 	dsb	sy
 800c440:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c444:	bf00      	nop
 800c446:	3710      	adds	r7, #16
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	20000690 	.word	0x20000690
 800c450:	e000ed04 	.word	0xe000ed04

0800c454 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b08a      	sub	sp, #40	; 0x28
 800c458:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c45a:	2300      	movs	r3, #0
 800c45c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c45e:	2300      	movs	r3, #0
 800c460:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c462:	463a      	mov	r2, r7
 800c464:	1d39      	adds	r1, r7, #4
 800c466:	f107 0308 	add.w	r3, r7, #8
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7f4 f89c 	bl	80005a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c470:	6839      	ldr	r1, [r7, #0]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	68ba      	ldr	r2, [r7, #8]
 800c476:	9202      	str	r2, [sp, #8]
 800c478:	9301      	str	r3, [sp, #4]
 800c47a:	2300      	movs	r3, #0
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	2300      	movs	r3, #0
 800c480:	460a      	mov	r2, r1
 800c482:	4923      	ldr	r1, [pc, #140]	; (800c510 <vTaskStartScheduler+0xbc>)
 800c484:	4823      	ldr	r0, [pc, #140]	; (800c514 <vTaskStartScheduler+0xc0>)
 800c486:	f7ff fdfd 	bl	800c084 <xTaskCreateStatic>
 800c48a:	4603      	mov	r3, r0
 800c48c:	4a22      	ldr	r2, [pc, #136]	; (800c518 <vTaskStartScheduler+0xc4>)
 800c48e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c490:	4b21      	ldr	r3, [pc, #132]	; (800c518 <vTaskStartScheduler+0xc4>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c498:	2301      	movs	r3, #1
 800c49a:	617b      	str	r3, [r7, #20]
 800c49c:	e001      	b.n	800c4a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d11d      	bne.n	800c4e4 <vTaskStartScheduler+0x90>
	__asm volatile
 800c4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ac:	b672      	cpsid	i
 800c4ae:	f383 8811 	msr	BASEPRI, r3
 800c4b2:	f3bf 8f6f 	isb	sy
 800c4b6:	f3bf 8f4f 	dsb	sy
 800c4ba:	b662      	cpsie	i
 800c4bc:	613b      	str	r3, [r7, #16]
}
 800c4be:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c4c0:	4b16      	ldr	r3, [pc, #88]	; (800c51c <vTaskStartScheduler+0xc8>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	334c      	adds	r3, #76	; 0x4c
 800c4c6:	4a16      	ldr	r2, [pc, #88]	; (800c520 <vTaskStartScheduler+0xcc>)
 800c4c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c4ca:	4b16      	ldr	r3, [pc, #88]	; (800c524 <vTaskStartScheduler+0xd0>)
 800c4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c4d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c4d2:	4b15      	ldr	r3, [pc, #84]	; (800c528 <vTaskStartScheduler+0xd4>)
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c4d8:	4b14      	ldr	r3, [pc, #80]	; (800c52c <vTaskStartScheduler+0xd8>)
 800c4da:	2200      	movs	r2, #0
 800c4dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c4de:	f000 feaf 	bl	800d240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c4e2:	e010      	b.n	800c506 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ea:	d10c      	bne.n	800c506 <vTaskStartScheduler+0xb2>
	__asm volatile
 800c4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f0:	b672      	cpsid	i
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	b662      	cpsie	i
 800c500:	60fb      	str	r3, [r7, #12]
}
 800c502:	bf00      	nop
 800c504:	e7fe      	b.n	800c504 <vTaskStartScheduler+0xb0>
}
 800c506:	bf00      	nop
 800c508:	3718      	adds	r7, #24
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	0800e420 	.word	0x0800e420
 800c514:	0800cae9 	.word	0x0800cae9
 800c518:	2000068c 	.word	0x2000068c
 800c51c:	20000568 	.word	0x20000568
 800c520:	20000060 	.word	0x20000060
 800c524:	20000688 	.word	0x20000688
 800c528:	20000674 	.word	0x20000674
 800c52c:	2000066c 	.word	0x2000066c

0800c530 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c530:	b480      	push	{r7}
 800c532:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c534:	4b04      	ldr	r3, [pc, #16]	; (800c548 <vTaskSuspendAll+0x18>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	3301      	adds	r3, #1
 800c53a:	4a03      	ldr	r2, [pc, #12]	; (800c548 <vTaskSuspendAll+0x18>)
 800c53c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c53e:	bf00      	nop
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr
 800c548:	20000690 	.word	0x20000690

0800c54c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c552:	2300      	movs	r3, #0
 800c554:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c556:	2300      	movs	r3, #0
 800c558:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c55a:	4b42      	ldr	r3, [pc, #264]	; (800c664 <xTaskResumeAll+0x118>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d10c      	bne.n	800c57c <xTaskResumeAll+0x30>
	__asm volatile
 800c562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c566:	b672      	cpsid	i
 800c568:	f383 8811 	msr	BASEPRI, r3
 800c56c:	f3bf 8f6f 	isb	sy
 800c570:	f3bf 8f4f 	dsb	sy
 800c574:	b662      	cpsie	i
 800c576:	603b      	str	r3, [r7, #0]
}
 800c578:	bf00      	nop
 800c57a:	e7fe      	b.n	800c57a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c57c:	f000 fede 	bl	800d33c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c580:	4b38      	ldr	r3, [pc, #224]	; (800c664 <xTaskResumeAll+0x118>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	3b01      	subs	r3, #1
 800c586:	4a37      	ldr	r2, [pc, #220]	; (800c664 <xTaskResumeAll+0x118>)
 800c588:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c58a:	4b36      	ldr	r3, [pc, #216]	; (800c664 <xTaskResumeAll+0x118>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d161      	bne.n	800c656 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c592:	4b35      	ldr	r3, [pc, #212]	; (800c668 <xTaskResumeAll+0x11c>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d05d      	beq.n	800c656 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c59a:	e02e      	b.n	800c5fa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c59c:	4b33      	ldr	r3, [pc, #204]	; (800c66c <xTaskResumeAll+0x120>)
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	3318      	adds	r3, #24
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7fe ff2a 	bl	800b402 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	3304      	adds	r3, #4
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7fe ff25 	bl	800b402 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5bc:	2201      	movs	r2, #1
 800c5be:	409a      	lsls	r2, r3
 800c5c0:	4b2b      	ldr	r3, [pc, #172]	; (800c670 <xTaskResumeAll+0x124>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	4a2a      	ldr	r2, [pc, #168]	; (800c670 <xTaskResumeAll+0x124>)
 800c5c8:	6013      	str	r3, [r2, #0]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	4413      	add	r3, r2
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	4a27      	ldr	r2, [pc, #156]	; (800c674 <xTaskResumeAll+0x128>)
 800c5d8:	441a      	add	r2, r3
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	3304      	adds	r3, #4
 800c5de:	4619      	mov	r1, r3
 800c5e0:	4610      	mov	r0, r2
 800c5e2:	f7fe feb1 	bl	800b348 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ea:	4b23      	ldr	r3, [pc, #140]	; (800c678 <xTaskResumeAll+0x12c>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d302      	bcc.n	800c5fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c5f4:	4b21      	ldr	r3, [pc, #132]	; (800c67c <xTaskResumeAll+0x130>)
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c5fa:	4b1c      	ldr	r3, [pc, #112]	; (800c66c <xTaskResumeAll+0x120>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1cc      	bne.n	800c59c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d001      	beq.n	800c60c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c608:	f000 fb2a 	bl	800cc60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c60c:	4b1c      	ldr	r3, [pc, #112]	; (800c680 <xTaskResumeAll+0x134>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d010      	beq.n	800c63a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c618:	f000 f836 	bl	800c688 <xTaskIncrementTick>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d002      	beq.n	800c628 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c622:	4b16      	ldr	r3, [pc, #88]	; (800c67c <xTaskResumeAll+0x130>)
 800c624:	2201      	movs	r2, #1
 800c626:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1f1      	bne.n	800c618 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800c634:	4b12      	ldr	r3, [pc, #72]	; (800c680 <xTaskResumeAll+0x134>)
 800c636:	2200      	movs	r2, #0
 800c638:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c63a:	4b10      	ldr	r3, [pc, #64]	; (800c67c <xTaskResumeAll+0x130>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d009      	beq.n	800c656 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c642:	2301      	movs	r3, #1
 800c644:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c646:	4b0f      	ldr	r3, [pc, #60]	; (800c684 <xTaskResumeAll+0x138>)
 800c648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c64c:	601a      	str	r2, [r3, #0]
 800c64e:	f3bf 8f4f 	dsb	sy
 800c652:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c656:	f000 fea5 	bl	800d3a4 <vPortExitCritical>

	return xAlreadyYielded;
 800c65a:	68bb      	ldr	r3, [r7, #8]
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	20000690 	.word	0x20000690
 800c668:	20000668 	.word	0x20000668
 800c66c:	20000628 	.word	0x20000628
 800c670:	20000670 	.word	0x20000670
 800c674:	2000056c 	.word	0x2000056c
 800c678:	20000568 	.word	0x20000568
 800c67c:	2000067c 	.word	0x2000067c
 800c680:	20000678 	.word	0x20000678
 800c684:	e000ed04 	.word	0xe000ed04

0800c688 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c68e:	2300      	movs	r3, #0
 800c690:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c692:	4b4f      	ldr	r3, [pc, #316]	; (800c7d0 <xTaskIncrementTick+0x148>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	f040 808a 	bne.w	800c7b0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c69c:	4b4d      	ldr	r3, [pc, #308]	; (800c7d4 <xTaskIncrementTick+0x14c>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c6a4:	4a4b      	ldr	r2, [pc, #300]	; (800c7d4 <xTaskIncrementTick+0x14c>)
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d122      	bne.n	800c6f6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c6b0:	4b49      	ldr	r3, [pc, #292]	; (800c7d8 <xTaskIncrementTick+0x150>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d00c      	beq.n	800c6d4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6be:	b672      	cpsid	i
 800c6c0:	f383 8811 	msr	BASEPRI, r3
 800c6c4:	f3bf 8f6f 	isb	sy
 800c6c8:	f3bf 8f4f 	dsb	sy
 800c6cc:	b662      	cpsie	i
 800c6ce:	603b      	str	r3, [r7, #0]
}
 800c6d0:	bf00      	nop
 800c6d2:	e7fe      	b.n	800c6d2 <xTaskIncrementTick+0x4a>
 800c6d4:	4b40      	ldr	r3, [pc, #256]	; (800c7d8 <xTaskIncrementTick+0x150>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	60fb      	str	r3, [r7, #12]
 800c6da:	4b40      	ldr	r3, [pc, #256]	; (800c7dc <xTaskIncrementTick+0x154>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a3e      	ldr	r2, [pc, #248]	; (800c7d8 <xTaskIncrementTick+0x150>)
 800c6e0:	6013      	str	r3, [r2, #0]
 800c6e2:	4a3e      	ldr	r2, [pc, #248]	; (800c7dc <xTaskIncrementTick+0x154>)
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6013      	str	r3, [r2, #0]
 800c6e8:	4b3d      	ldr	r3, [pc, #244]	; (800c7e0 <xTaskIncrementTick+0x158>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	4a3c      	ldr	r2, [pc, #240]	; (800c7e0 <xTaskIncrementTick+0x158>)
 800c6f0:	6013      	str	r3, [r2, #0]
 800c6f2:	f000 fab5 	bl	800cc60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c6f6:	4b3b      	ldr	r3, [pc, #236]	; (800c7e4 <xTaskIncrementTick+0x15c>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	693a      	ldr	r2, [r7, #16]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d348      	bcc.n	800c792 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c700:	4b35      	ldr	r3, [pc, #212]	; (800c7d8 <xTaskIncrementTick+0x150>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d104      	bne.n	800c714 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c70a:	4b36      	ldr	r3, [pc, #216]	; (800c7e4 <xTaskIncrementTick+0x15c>)
 800c70c:	f04f 32ff 	mov.w	r2, #4294967295
 800c710:	601a      	str	r2, [r3, #0]
					break;
 800c712:	e03e      	b.n	800c792 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c714:	4b30      	ldr	r3, [pc, #192]	; (800c7d8 <xTaskIncrementTick+0x150>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	68db      	ldr	r3, [r3, #12]
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c724:	693a      	ldr	r2, [r7, #16]
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d203      	bcs.n	800c734 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c72c:	4a2d      	ldr	r2, [pc, #180]	; (800c7e4 <xTaskIncrementTick+0x15c>)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c732:	e02e      	b.n	800c792 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	3304      	adds	r3, #4
 800c738:	4618      	mov	r0, r3
 800c73a:	f7fe fe62 	bl	800b402 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c742:	2b00      	cmp	r3, #0
 800c744:	d004      	beq.n	800c750 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	3318      	adds	r3, #24
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fe fe59 	bl	800b402 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c754:	2201      	movs	r2, #1
 800c756:	409a      	lsls	r2, r3
 800c758:	4b23      	ldr	r3, [pc, #140]	; (800c7e8 <xTaskIncrementTick+0x160>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	4a22      	ldr	r2, [pc, #136]	; (800c7e8 <xTaskIncrementTick+0x160>)
 800c760:	6013      	str	r3, [r2, #0]
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c766:	4613      	mov	r3, r2
 800c768:	009b      	lsls	r3, r3, #2
 800c76a:	4413      	add	r3, r2
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	4a1f      	ldr	r2, [pc, #124]	; (800c7ec <xTaskIncrementTick+0x164>)
 800c770:	441a      	add	r2, r3
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	3304      	adds	r3, #4
 800c776:	4619      	mov	r1, r3
 800c778:	4610      	mov	r0, r2
 800c77a:	f7fe fde5 	bl	800b348 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c782:	4b1b      	ldr	r3, [pc, #108]	; (800c7f0 <xTaskIncrementTick+0x168>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c788:	429a      	cmp	r2, r3
 800c78a:	d3b9      	bcc.n	800c700 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c78c:	2301      	movs	r3, #1
 800c78e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c790:	e7b6      	b.n	800c700 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c792:	4b17      	ldr	r3, [pc, #92]	; (800c7f0 <xTaskIncrementTick+0x168>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c798:	4914      	ldr	r1, [pc, #80]	; (800c7ec <xTaskIncrementTick+0x164>)
 800c79a:	4613      	mov	r3, r2
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	4413      	add	r3, r2
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	440b      	add	r3, r1
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d907      	bls.n	800c7ba <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	617b      	str	r3, [r7, #20]
 800c7ae:	e004      	b.n	800c7ba <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c7b0:	4b10      	ldr	r3, [pc, #64]	; (800c7f4 <xTaskIncrementTick+0x16c>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	4a0f      	ldr	r2, [pc, #60]	; (800c7f4 <xTaskIncrementTick+0x16c>)
 800c7b8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c7ba:	4b0f      	ldr	r3, [pc, #60]	; (800c7f8 <xTaskIncrementTick+0x170>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d001      	beq.n	800c7c6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c7c6:	697b      	ldr	r3, [r7, #20]
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3718      	adds	r7, #24
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	20000690 	.word	0x20000690
 800c7d4:	2000066c 	.word	0x2000066c
 800c7d8:	20000620 	.word	0x20000620
 800c7dc:	20000624 	.word	0x20000624
 800c7e0:	20000680 	.word	0x20000680
 800c7e4:	20000688 	.word	0x20000688
 800c7e8:	20000670 	.word	0x20000670
 800c7ec:	2000056c 	.word	0x2000056c
 800c7f0:	20000568 	.word	0x20000568
 800c7f4:	20000678 	.word	0x20000678
 800c7f8:	2000067c 	.word	0x2000067c

0800c7fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b087      	sub	sp, #28
 800c800:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c802:	4b2a      	ldr	r3, [pc, #168]	; (800c8ac <vTaskSwitchContext+0xb0>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d003      	beq.n	800c812 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c80a:	4b29      	ldr	r3, [pc, #164]	; (800c8b0 <vTaskSwitchContext+0xb4>)
 800c80c:	2201      	movs	r2, #1
 800c80e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c810:	e046      	b.n	800c8a0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c812:	4b27      	ldr	r3, [pc, #156]	; (800c8b0 <vTaskSwitchContext+0xb4>)
 800c814:	2200      	movs	r2, #0
 800c816:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c818:	4b26      	ldr	r3, [pc, #152]	; (800c8b4 <vTaskSwitchContext+0xb8>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	fab3 f383 	clz	r3, r3
 800c824:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c826:	7afb      	ldrb	r3, [r7, #11]
 800c828:	f1c3 031f 	rsb	r3, r3, #31
 800c82c:	617b      	str	r3, [r7, #20]
 800c82e:	4922      	ldr	r1, [pc, #136]	; (800c8b8 <vTaskSwitchContext+0xbc>)
 800c830:	697a      	ldr	r2, [r7, #20]
 800c832:	4613      	mov	r3, r2
 800c834:	009b      	lsls	r3, r3, #2
 800c836:	4413      	add	r3, r2
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	440b      	add	r3, r1
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d10c      	bne.n	800c85c <vTaskSwitchContext+0x60>
	__asm volatile
 800c842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c846:	b672      	cpsid	i
 800c848:	f383 8811 	msr	BASEPRI, r3
 800c84c:	f3bf 8f6f 	isb	sy
 800c850:	f3bf 8f4f 	dsb	sy
 800c854:	b662      	cpsie	i
 800c856:	607b      	str	r3, [r7, #4]
}
 800c858:	bf00      	nop
 800c85a:	e7fe      	b.n	800c85a <vTaskSwitchContext+0x5e>
 800c85c:	697a      	ldr	r2, [r7, #20]
 800c85e:	4613      	mov	r3, r2
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	4413      	add	r3, r2
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	4a14      	ldr	r2, [pc, #80]	; (800c8b8 <vTaskSwitchContext+0xbc>)
 800c868:	4413      	add	r3, r2
 800c86a:	613b      	str	r3, [r7, #16]
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	685a      	ldr	r2, [r3, #4]
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	605a      	str	r2, [r3, #4]
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	685a      	ldr	r2, [r3, #4]
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	3308      	adds	r3, #8
 800c87e:	429a      	cmp	r2, r3
 800c880:	d104      	bne.n	800c88c <vTaskSwitchContext+0x90>
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	685a      	ldr	r2, [r3, #4]
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	605a      	str	r2, [r3, #4]
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	4a0a      	ldr	r2, [pc, #40]	; (800c8bc <vTaskSwitchContext+0xc0>)
 800c894:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c896:	4b09      	ldr	r3, [pc, #36]	; (800c8bc <vTaskSwitchContext+0xc0>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	334c      	adds	r3, #76	; 0x4c
 800c89c:	4a08      	ldr	r2, [pc, #32]	; (800c8c0 <vTaskSwitchContext+0xc4>)
 800c89e:	6013      	str	r3, [r2, #0]
}
 800c8a0:	bf00      	nop
 800c8a2:	371c      	adds	r7, #28
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr
 800c8ac:	20000690 	.word	0x20000690
 800c8b0:	2000067c 	.word	0x2000067c
 800c8b4:	20000670 	.word	0x20000670
 800c8b8:	2000056c 	.word	0x2000056c
 800c8bc:	20000568 	.word	0x20000568
 800c8c0:	20000060 	.word	0x20000060

0800c8c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10c      	bne.n	800c8ee <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d8:	b672      	cpsid	i
 800c8da:	f383 8811 	msr	BASEPRI, r3
 800c8de:	f3bf 8f6f 	isb	sy
 800c8e2:	f3bf 8f4f 	dsb	sy
 800c8e6:	b662      	cpsie	i
 800c8e8:	60fb      	str	r3, [r7, #12]
}
 800c8ea:	bf00      	nop
 800c8ec:	e7fe      	b.n	800c8ec <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c8ee:	4b07      	ldr	r3, [pc, #28]	; (800c90c <vTaskPlaceOnEventList+0x48>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	3318      	adds	r3, #24
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f7fe fd4a 	bl	800b390 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c8fc:	2101      	movs	r1, #1
 800c8fe:	6838      	ldr	r0, [r7, #0]
 800c900:	f000 fba8 	bl	800d054 <prvAddCurrentTaskToDelayedList>
}
 800c904:	bf00      	nop
 800c906:	3710      	adds	r7, #16
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	20000568 	.word	0x20000568

0800c910 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b086      	sub	sp, #24
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	68db      	ldr	r3, [r3, #12]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d10c      	bne.n	800c940 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92a:	b672      	cpsid	i
 800c92c:	f383 8811 	msr	BASEPRI, r3
 800c930:	f3bf 8f6f 	isb	sy
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	b662      	cpsie	i
 800c93a:	60fb      	str	r3, [r7, #12]
}
 800c93c:	bf00      	nop
 800c93e:	e7fe      	b.n	800c93e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	3318      	adds	r3, #24
 800c944:	4618      	mov	r0, r3
 800c946:	f7fe fd5c 	bl	800b402 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c94a:	4b1d      	ldr	r3, [pc, #116]	; (800c9c0 <xTaskRemoveFromEventList+0xb0>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d11c      	bne.n	800c98c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	3304      	adds	r3, #4
 800c956:	4618      	mov	r0, r3
 800c958:	f7fe fd53 	bl	800b402 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c960:	2201      	movs	r2, #1
 800c962:	409a      	lsls	r2, r3
 800c964:	4b17      	ldr	r3, [pc, #92]	; (800c9c4 <xTaskRemoveFromEventList+0xb4>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4313      	orrs	r3, r2
 800c96a:	4a16      	ldr	r2, [pc, #88]	; (800c9c4 <xTaskRemoveFromEventList+0xb4>)
 800c96c:	6013      	str	r3, [r2, #0]
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c972:	4613      	mov	r3, r2
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	4413      	add	r3, r2
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	4a13      	ldr	r2, [pc, #76]	; (800c9c8 <xTaskRemoveFromEventList+0xb8>)
 800c97c:	441a      	add	r2, r3
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	3304      	adds	r3, #4
 800c982:	4619      	mov	r1, r3
 800c984:	4610      	mov	r0, r2
 800c986:	f7fe fcdf 	bl	800b348 <vListInsertEnd>
 800c98a:	e005      	b.n	800c998 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	3318      	adds	r3, #24
 800c990:	4619      	mov	r1, r3
 800c992:	480e      	ldr	r0, [pc, #56]	; (800c9cc <xTaskRemoveFromEventList+0xbc>)
 800c994:	f7fe fcd8 	bl	800b348 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c99c:	4b0c      	ldr	r3, [pc, #48]	; (800c9d0 <xTaskRemoveFromEventList+0xc0>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d905      	bls.n	800c9b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c9aa:	4b0a      	ldr	r3, [pc, #40]	; (800c9d4 <xTaskRemoveFromEventList+0xc4>)
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	601a      	str	r2, [r3, #0]
 800c9b0:	e001      	b.n	800c9b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c9b6:	697b      	ldr	r3, [r7, #20]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3718      	adds	r7, #24
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	20000690 	.word	0x20000690
 800c9c4:	20000670 	.word	0x20000670
 800c9c8:	2000056c 	.word	0x2000056c
 800c9cc:	20000628 	.word	0x20000628
 800c9d0:	20000568 	.word	0x20000568
 800c9d4:	2000067c 	.word	0x2000067c

0800c9d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c9e0:	4b06      	ldr	r3, [pc, #24]	; (800c9fc <vTaskInternalSetTimeOutState+0x24>)
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c9e8:	4b05      	ldr	r3, [pc, #20]	; (800ca00 <vTaskInternalSetTimeOutState+0x28>)
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	605a      	str	r2, [r3, #4]
}
 800c9f0:	bf00      	nop
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr
 800c9fc:	20000680 	.word	0x20000680
 800ca00:	2000066c 	.word	0x2000066c

0800ca04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b088      	sub	sp, #32
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d10c      	bne.n	800ca2e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800ca14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca18:	b672      	cpsid	i
 800ca1a:	f383 8811 	msr	BASEPRI, r3
 800ca1e:	f3bf 8f6f 	isb	sy
 800ca22:	f3bf 8f4f 	dsb	sy
 800ca26:	b662      	cpsie	i
 800ca28:	613b      	str	r3, [r7, #16]
}
 800ca2a:	bf00      	nop
 800ca2c:	e7fe      	b.n	800ca2c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d10c      	bne.n	800ca4e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800ca34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca38:	b672      	cpsid	i
 800ca3a:	f383 8811 	msr	BASEPRI, r3
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	f3bf 8f4f 	dsb	sy
 800ca46:	b662      	cpsie	i
 800ca48:	60fb      	str	r3, [r7, #12]
}
 800ca4a:	bf00      	nop
 800ca4c:	e7fe      	b.n	800ca4c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ca4e:	f000 fc75 	bl	800d33c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ca52:	4b1d      	ldr	r3, [pc, #116]	; (800cac8 <xTaskCheckForTimeOut+0xc4>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	69ba      	ldr	r2, [r7, #24]
 800ca5e:	1ad3      	subs	r3, r2, r3
 800ca60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca6a:	d102      	bne.n	800ca72 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	61fb      	str	r3, [r7, #28]
 800ca70:	e023      	b.n	800caba <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	4b15      	ldr	r3, [pc, #84]	; (800cacc <xTaskCheckForTimeOut+0xc8>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d007      	beq.n	800ca8e <xTaskCheckForTimeOut+0x8a>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	69ba      	ldr	r2, [r7, #24]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d302      	bcc.n	800ca8e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	61fb      	str	r3, [r7, #28]
 800ca8c:	e015      	b.n	800caba <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	697a      	ldr	r2, [r7, #20]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d20b      	bcs.n	800cab0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	1ad2      	subs	r2, r2, r3
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f7ff ff97 	bl	800c9d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800caaa:	2300      	movs	r3, #0
 800caac:	61fb      	str	r3, [r7, #28]
 800caae:	e004      	b.n	800caba <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	2200      	movs	r2, #0
 800cab4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cab6:	2301      	movs	r3, #1
 800cab8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800caba:	f000 fc73 	bl	800d3a4 <vPortExitCritical>

	return xReturn;
 800cabe:	69fb      	ldr	r3, [r7, #28]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3720      	adds	r7, #32
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	2000066c 	.word	0x2000066c
 800cacc:	20000680 	.word	0x20000680

0800cad0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cad0:	b480      	push	{r7}
 800cad2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cad4:	4b03      	ldr	r3, [pc, #12]	; (800cae4 <vTaskMissedYield+0x14>)
 800cad6:	2201      	movs	r2, #1
 800cad8:	601a      	str	r2, [r3, #0]
}
 800cada:	bf00      	nop
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr
 800cae4:	2000067c 	.word	0x2000067c

0800cae8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800caf0:	f000 f852 	bl	800cb98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800caf4:	4b06      	ldr	r3, [pc, #24]	; (800cb10 <prvIdleTask+0x28>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d9f9      	bls.n	800caf0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cafc:	4b05      	ldr	r3, [pc, #20]	; (800cb14 <prvIdleTask+0x2c>)
 800cafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb02:	601a      	str	r2, [r3, #0]
 800cb04:	f3bf 8f4f 	dsb	sy
 800cb08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cb0c:	e7f0      	b.n	800caf0 <prvIdleTask+0x8>
 800cb0e:	bf00      	nop
 800cb10:	2000056c 	.word	0x2000056c
 800cb14:	e000ed04 	.word	0xe000ed04

0800cb18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb1e:	2300      	movs	r3, #0
 800cb20:	607b      	str	r3, [r7, #4]
 800cb22:	e00c      	b.n	800cb3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	4613      	mov	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	4a12      	ldr	r2, [pc, #72]	; (800cb78 <prvInitialiseTaskLists+0x60>)
 800cb30:	4413      	add	r3, r2
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7fe fbdb 	bl	800b2ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	607b      	str	r3, [r7, #4]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2b06      	cmp	r3, #6
 800cb42:	d9ef      	bls.n	800cb24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb44:	480d      	ldr	r0, [pc, #52]	; (800cb7c <prvInitialiseTaskLists+0x64>)
 800cb46:	f7fe fbd2 	bl	800b2ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cb4a:	480d      	ldr	r0, [pc, #52]	; (800cb80 <prvInitialiseTaskLists+0x68>)
 800cb4c:	f7fe fbcf 	bl	800b2ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb50:	480c      	ldr	r0, [pc, #48]	; (800cb84 <prvInitialiseTaskLists+0x6c>)
 800cb52:	f7fe fbcc 	bl	800b2ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb56:	480c      	ldr	r0, [pc, #48]	; (800cb88 <prvInitialiseTaskLists+0x70>)
 800cb58:	f7fe fbc9 	bl	800b2ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cb5c:	480b      	ldr	r0, [pc, #44]	; (800cb8c <prvInitialiseTaskLists+0x74>)
 800cb5e:	f7fe fbc6 	bl	800b2ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cb62:	4b0b      	ldr	r3, [pc, #44]	; (800cb90 <prvInitialiseTaskLists+0x78>)
 800cb64:	4a05      	ldr	r2, [pc, #20]	; (800cb7c <prvInitialiseTaskLists+0x64>)
 800cb66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cb68:	4b0a      	ldr	r3, [pc, #40]	; (800cb94 <prvInitialiseTaskLists+0x7c>)
 800cb6a:	4a05      	ldr	r2, [pc, #20]	; (800cb80 <prvInitialiseTaskLists+0x68>)
 800cb6c:	601a      	str	r2, [r3, #0]
}
 800cb6e:	bf00      	nop
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	2000056c 	.word	0x2000056c
 800cb7c:	200005f8 	.word	0x200005f8
 800cb80:	2000060c 	.word	0x2000060c
 800cb84:	20000628 	.word	0x20000628
 800cb88:	2000063c 	.word	0x2000063c
 800cb8c:	20000654 	.word	0x20000654
 800cb90:	20000620 	.word	0x20000620
 800cb94:	20000624 	.word	0x20000624

0800cb98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb9e:	e019      	b.n	800cbd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cba0:	f000 fbcc 	bl	800d33c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cba4:	4b10      	ldr	r3, [pc, #64]	; (800cbe8 <prvCheckTasksWaitingTermination+0x50>)
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	3304      	adds	r3, #4
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7fe fc26 	bl	800b402 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cbb6:	4b0d      	ldr	r3, [pc, #52]	; (800cbec <prvCheckTasksWaitingTermination+0x54>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	3b01      	subs	r3, #1
 800cbbc:	4a0b      	ldr	r2, [pc, #44]	; (800cbec <prvCheckTasksWaitingTermination+0x54>)
 800cbbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cbc0:	4b0b      	ldr	r3, [pc, #44]	; (800cbf0 <prvCheckTasksWaitingTermination+0x58>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	4a0a      	ldr	r2, [pc, #40]	; (800cbf0 <prvCheckTasksWaitingTermination+0x58>)
 800cbc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cbca:	f000 fbeb 	bl	800d3a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 f810 	bl	800cbf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbd4:	4b06      	ldr	r3, [pc, #24]	; (800cbf0 <prvCheckTasksWaitingTermination+0x58>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d1e1      	bne.n	800cba0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cbdc:	bf00      	nop
 800cbde:	bf00      	nop
 800cbe0:	3708      	adds	r7, #8
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	2000063c 	.word	0x2000063c
 800cbec:	20000668 	.word	0x20000668
 800cbf0:	20000650 	.word	0x20000650

0800cbf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	334c      	adds	r3, #76	; 0x4c
 800cc00:	4618      	mov	r0, r3
 800cc02:	f000 ff55 	bl	800dab0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d108      	bne.n	800cc22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc14:	4618      	mov	r0, r3
 800cc16:	f000 fd87 	bl	800d728 <vPortFree>
				vPortFree( pxTCB );
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 fd84 	bl	800d728 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cc20:	e01a      	b.n	800cc58 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d103      	bne.n	800cc34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 fd7b 	bl	800d728 <vPortFree>
	}
 800cc32:	e011      	b.n	800cc58 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cc3a:	2b02      	cmp	r3, #2
 800cc3c:	d00c      	beq.n	800cc58 <prvDeleteTCB+0x64>
	__asm volatile
 800cc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc42:	b672      	cpsid	i
 800cc44:	f383 8811 	msr	BASEPRI, r3
 800cc48:	f3bf 8f6f 	isb	sy
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	b662      	cpsie	i
 800cc52:	60fb      	str	r3, [r7, #12]
}
 800cc54:	bf00      	nop
 800cc56:	e7fe      	b.n	800cc56 <prvDeleteTCB+0x62>
	}
 800cc58:	bf00      	nop
 800cc5a:	3710      	adds	r7, #16
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc66:	4b0c      	ldr	r3, [pc, #48]	; (800cc98 <prvResetNextTaskUnblockTime+0x38>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d104      	bne.n	800cc7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc70:	4b0a      	ldr	r3, [pc, #40]	; (800cc9c <prvResetNextTaskUnblockTime+0x3c>)
 800cc72:	f04f 32ff 	mov.w	r2, #4294967295
 800cc76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cc78:	e008      	b.n	800cc8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc7a:	4b07      	ldr	r3, [pc, #28]	; (800cc98 <prvResetNextTaskUnblockTime+0x38>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	68db      	ldr	r3, [r3, #12]
 800cc82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	4a04      	ldr	r2, [pc, #16]	; (800cc9c <prvResetNextTaskUnblockTime+0x3c>)
 800cc8a:	6013      	str	r3, [r2, #0]
}
 800cc8c:	bf00      	nop
 800cc8e:	370c      	adds	r7, #12
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr
 800cc98:	20000620 	.word	0x20000620
 800cc9c:	20000688 	.word	0x20000688

0800cca0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cca0:	b480      	push	{r7}
 800cca2:	b083      	sub	sp, #12
 800cca4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cca6:	4b0b      	ldr	r3, [pc, #44]	; (800ccd4 <xTaskGetSchedulerState+0x34>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d102      	bne.n	800ccb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	607b      	str	r3, [r7, #4]
 800ccb2:	e008      	b.n	800ccc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccb4:	4b08      	ldr	r3, [pc, #32]	; (800ccd8 <xTaskGetSchedulerState+0x38>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d102      	bne.n	800ccc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ccbc:	2302      	movs	r3, #2
 800ccbe:	607b      	str	r3, [r7, #4]
 800ccc0:	e001      	b.n	800ccc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ccc6:	687b      	ldr	r3, [r7, #4]
	}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr
 800ccd4:	20000674 	.word	0x20000674
 800ccd8:	20000690 	.word	0x20000690

0800ccdc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cce8:	2300      	movs	r3, #0
 800ccea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d069      	beq.n	800cdc6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccf6:	4b36      	ldr	r3, [pc, #216]	; (800cdd0 <xTaskPriorityInherit+0xf4>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d259      	bcs.n	800cdb4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	699b      	ldr	r3, [r3, #24]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	db06      	blt.n	800cd16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd08:	4b31      	ldr	r3, [pc, #196]	; (800cdd0 <xTaskPriorityInherit+0xf4>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd0e:	f1c3 0207 	rsb	r2, r3, #7
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	6959      	ldr	r1, [r3, #20]
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd1e:	4613      	mov	r3, r2
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	4413      	add	r3, r2
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	4a2b      	ldr	r2, [pc, #172]	; (800cdd4 <xTaskPriorityInherit+0xf8>)
 800cd28:	4413      	add	r3, r2
 800cd2a:	4299      	cmp	r1, r3
 800cd2c:	d13a      	bne.n	800cda4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	3304      	adds	r3, #4
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fe fb65 	bl	800b402 <uxListRemove>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d115      	bne.n	800cd6a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd42:	4924      	ldr	r1, [pc, #144]	; (800cdd4 <xTaskPriorityInherit+0xf8>)
 800cd44:	4613      	mov	r3, r2
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	4413      	add	r3, r2
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	440b      	add	r3, r1
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d10a      	bne.n	800cd6a <xTaskPriorityInherit+0x8e>
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd58:	2201      	movs	r2, #1
 800cd5a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd5e:	43da      	mvns	r2, r3
 800cd60:	4b1d      	ldr	r3, [pc, #116]	; (800cdd8 <xTaskPriorityInherit+0xfc>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4013      	ands	r3, r2
 800cd66:	4a1c      	ldr	r2, [pc, #112]	; (800cdd8 <xTaskPriorityInherit+0xfc>)
 800cd68:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cd6a:	4b19      	ldr	r3, [pc, #100]	; (800cdd0 <xTaskPriorityInherit+0xf4>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd78:	2201      	movs	r2, #1
 800cd7a:	409a      	lsls	r2, r3
 800cd7c:	4b16      	ldr	r3, [pc, #88]	; (800cdd8 <xTaskPriorityInherit+0xfc>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4313      	orrs	r3, r2
 800cd82:	4a15      	ldr	r2, [pc, #84]	; (800cdd8 <xTaskPriorityInherit+0xfc>)
 800cd84:	6013      	str	r3, [r2, #0]
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4413      	add	r3, r2
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	4a10      	ldr	r2, [pc, #64]	; (800cdd4 <xTaskPriorityInherit+0xf8>)
 800cd94:	441a      	add	r2, r3
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	3304      	adds	r3, #4
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	4610      	mov	r0, r2
 800cd9e:	f7fe fad3 	bl	800b348 <vListInsertEnd>
 800cda2:	e004      	b.n	800cdae <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cda4:	4b0a      	ldr	r3, [pc, #40]	; (800cdd0 <xTaskPriorityInherit+0xf4>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	60fb      	str	r3, [r7, #12]
 800cdb2:	e008      	b.n	800cdc6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdb8:	4b05      	ldr	r3, [pc, #20]	; (800cdd0 <xTaskPriorityInherit+0xf4>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d201      	bcs.n	800cdc6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
	}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3710      	adds	r7, #16
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	20000568 	.word	0x20000568
 800cdd4:	2000056c 	.word	0x2000056c
 800cdd8:	20000670 	.word	0x20000670

0800cddc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b086      	sub	sp, #24
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cde8:	2300      	movs	r3, #0
 800cdea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d072      	beq.n	800ced8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cdf2:	4b3c      	ldr	r3, [pc, #240]	; (800cee4 <xTaskPriorityDisinherit+0x108>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	693a      	ldr	r2, [r7, #16]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d00c      	beq.n	800ce16 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800cdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce00:	b672      	cpsid	i
 800ce02:	f383 8811 	msr	BASEPRI, r3
 800ce06:	f3bf 8f6f 	isb	sy
 800ce0a:	f3bf 8f4f 	dsb	sy
 800ce0e:	b662      	cpsie	i
 800ce10:	60fb      	str	r3, [r7, #12]
}
 800ce12:	bf00      	nop
 800ce14:	e7fe      	b.n	800ce14 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d10c      	bne.n	800ce38 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800ce1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce22:	b672      	cpsid	i
 800ce24:	f383 8811 	msr	BASEPRI, r3
 800ce28:	f3bf 8f6f 	isb	sy
 800ce2c:	f3bf 8f4f 	dsb	sy
 800ce30:	b662      	cpsie	i
 800ce32:	60bb      	str	r3, [r7, #8]
}
 800ce34:	bf00      	nop
 800ce36:	e7fe      	b.n	800ce36 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce3c:	1e5a      	subs	r2, r3, #1
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d044      	beq.n	800ced8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d140      	bne.n	800ced8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	3304      	adds	r3, #4
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7fe fad1 	bl	800b402 <uxListRemove>
 800ce60:	4603      	mov	r3, r0
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d115      	bne.n	800ce92 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce6a:	491f      	ldr	r1, [pc, #124]	; (800cee8 <xTaskPriorityDisinherit+0x10c>)
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	4413      	add	r3, r2
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	440b      	add	r3, r1
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d10a      	bne.n	800ce92 <xTaskPriorityDisinherit+0xb6>
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce80:	2201      	movs	r2, #1
 800ce82:	fa02 f303 	lsl.w	r3, r2, r3
 800ce86:	43da      	mvns	r2, r3
 800ce88:	4b18      	ldr	r3, [pc, #96]	; (800ceec <xTaskPriorityDisinherit+0x110>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4013      	ands	r3, r2
 800ce8e:	4a17      	ldr	r2, [pc, #92]	; (800ceec <xTaskPriorityDisinherit+0x110>)
 800ce90:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9e:	f1c3 0207 	rsb	r2, r3, #7
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceaa:	2201      	movs	r2, #1
 800ceac:	409a      	lsls	r2, r3
 800ceae:	4b0f      	ldr	r3, [pc, #60]	; (800ceec <xTaskPriorityDisinherit+0x110>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	4a0d      	ldr	r2, [pc, #52]	; (800ceec <xTaskPriorityDisinherit+0x110>)
 800ceb6:	6013      	str	r3, [r2, #0]
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cebc:	4613      	mov	r3, r2
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	4413      	add	r3, r2
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	4a08      	ldr	r2, [pc, #32]	; (800cee8 <xTaskPriorityDisinherit+0x10c>)
 800cec6:	441a      	add	r2, r3
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	3304      	adds	r3, #4
 800cecc:	4619      	mov	r1, r3
 800cece:	4610      	mov	r0, r2
 800ced0:	f7fe fa3a 	bl	800b348 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ced4:	2301      	movs	r3, #1
 800ced6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ced8:	697b      	ldr	r3, [r7, #20]
	}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3718      	adds	r7, #24
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	bf00      	nop
 800cee4:	20000568 	.word	0x20000568
 800cee8:	2000056c 	.word	0x2000056c
 800ceec:	20000670 	.word	0x20000670

0800cef0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b088      	sub	sp, #32
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cefe:	2301      	movs	r3, #1
 800cf00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f000 8087 	beq.w	800d018 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d10c      	bne.n	800cf2c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800cf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf16:	b672      	cpsid	i
 800cf18:	f383 8811 	msr	BASEPRI, r3
 800cf1c:	f3bf 8f6f 	isb	sy
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	b662      	cpsie	i
 800cf26:	60fb      	str	r3, [r7, #12]
}
 800cf28:	bf00      	nop
 800cf2a:	e7fe      	b.n	800cf2a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf30:	683a      	ldr	r2, [r7, #0]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d902      	bls.n	800cf3c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	61fb      	str	r3, [r7, #28]
 800cf3a:	e002      	b.n	800cf42 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cf3c:	69bb      	ldr	r3, [r7, #24]
 800cf3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf40:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf46:	69fa      	ldr	r2, [r7, #28]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d065      	beq.n	800d018 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf50:	697a      	ldr	r2, [r7, #20]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d160      	bne.n	800d018 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cf56:	4b32      	ldr	r3, [pc, #200]	; (800d020 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	69ba      	ldr	r2, [r7, #24]
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d10c      	bne.n	800cf7a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800cf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf64:	b672      	cpsid	i
 800cf66:	f383 8811 	msr	BASEPRI, r3
 800cf6a:	f3bf 8f6f 	isb	sy
 800cf6e:	f3bf 8f4f 	dsb	sy
 800cf72:	b662      	cpsie	i
 800cf74:	60bb      	str	r3, [r7, #8]
}
 800cf76:	bf00      	nop
 800cf78:	e7fe      	b.n	800cf78 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf7e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cf80:	69bb      	ldr	r3, [r7, #24]
 800cf82:	69fa      	ldr	r2, [r7, #28]
 800cf84:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	699b      	ldr	r3, [r3, #24]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	db04      	blt.n	800cf98 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf8e:	69fb      	ldr	r3, [r7, #28]
 800cf90:	f1c3 0207 	rsb	r2, r3, #7
 800cf94:	69bb      	ldr	r3, [r7, #24]
 800cf96:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	6959      	ldr	r1, [r3, #20]
 800cf9c:	693a      	ldr	r2, [r7, #16]
 800cf9e:	4613      	mov	r3, r2
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	4413      	add	r3, r2
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	4a1f      	ldr	r2, [pc, #124]	; (800d024 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800cfa8:	4413      	add	r3, r2
 800cfaa:	4299      	cmp	r1, r3
 800cfac:	d134      	bne.n	800d018 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	3304      	adds	r3, #4
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fe fa25 	bl	800b402 <uxListRemove>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d115      	bne.n	800cfea <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc2:	4918      	ldr	r1, [pc, #96]	; (800d024 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	4413      	add	r3, r2
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	440b      	add	r3, r1
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d10a      	bne.n	800cfea <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800cfd4:	69bb      	ldr	r3, [r7, #24]
 800cfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd8:	2201      	movs	r2, #1
 800cfda:	fa02 f303 	lsl.w	r3, r2, r3
 800cfde:	43da      	mvns	r2, r3
 800cfe0:	4b11      	ldr	r3, [pc, #68]	; (800d028 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4013      	ands	r3, r2
 800cfe6:	4a10      	ldr	r2, [pc, #64]	; (800d028 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800cfe8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cfea:	69bb      	ldr	r3, [r7, #24]
 800cfec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfee:	2201      	movs	r2, #1
 800cff0:	409a      	lsls	r2, r3
 800cff2:	4b0d      	ldr	r3, [pc, #52]	; (800d028 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4313      	orrs	r3, r2
 800cff8:	4a0b      	ldr	r2, [pc, #44]	; (800d028 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800cffa:	6013      	str	r3, [r2, #0]
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d000:	4613      	mov	r3, r2
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	4413      	add	r3, r2
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	4a06      	ldr	r2, [pc, #24]	; (800d024 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d00a:	441a      	add	r2, r3
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	3304      	adds	r3, #4
 800d010:	4619      	mov	r1, r3
 800d012:	4610      	mov	r0, r2
 800d014:	f7fe f998 	bl	800b348 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d018:	bf00      	nop
 800d01a:	3720      	adds	r7, #32
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	20000568 	.word	0x20000568
 800d024:	2000056c 	.word	0x2000056c
 800d028:	20000670 	.word	0x20000670

0800d02c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d02c:	b480      	push	{r7}
 800d02e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d030:	4b07      	ldr	r3, [pc, #28]	; (800d050 <pvTaskIncrementMutexHeldCount+0x24>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d004      	beq.n	800d042 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d038:	4b05      	ldr	r3, [pc, #20]	; (800d050 <pvTaskIncrementMutexHeldCount+0x24>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d03e:	3201      	adds	r2, #1
 800d040:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d042:	4b03      	ldr	r3, [pc, #12]	; (800d050 <pvTaskIncrementMutexHeldCount+0x24>)
 800d044:	681b      	ldr	r3, [r3, #0]
	}
 800d046:	4618      	mov	r0, r3
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr
 800d050:	20000568 	.word	0x20000568

0800d054 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d05e:	4b29      	ldr	r3, [pc, #164]	; (800d104 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d064:	4b28      	ldr	r3, [pc, #160]	; (800d108 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	3304      	adds	r3, #4
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fe f9c9 	bl	800b402 <uxListRemove>
 800d070:	4603      	mov	r3, r0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10b      	bne.n	800d08e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d076:	4b24      	ldr	r3, [pc, #144]	; (800d108 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07c:	2201      	movs	r2, #1
 800d07e:	fa02 f303 	lsl.w	r3, r2, r3
 800d082:	43da      	mvns	r2, r3
 800d084:	4b21      	ldr	r3, [pc, #132]	; (800d10c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4013      	ands	r3, r2
 800d08a:	4a20      	ldr	r2, [pc, #128]	; (800d10c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d08c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d094:	d10a      	bne.n	800d0ac <prvAddCurrentTaskToDelayedList+0x58>
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d007      	beq.n	800d0ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d09c:	4b1a      	ldr	r3, [pc, #104]	; (800d108 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	3304      	adds	r3, #4
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	481a      	ldr	r0, [pc, #104]	; (800d110 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d0a6:	f7fe f94f 	bl	800b348 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d0aa:	e026      	b.n	800d0fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d0ac:	68fa      	ldr	r2, [r7, #12]
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d0b4:	4b14      	ldr	r3, [pc, #80]	; (800d108 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	68ba      	ldr	r2, [r7, #8]
 800d0ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d0bc:	68ba      	ldr	r2, [r7, #8]
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d209      	bcs.n	800d0d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0c4:	4b13      	ldr	r3, [pc, #76]	; (800d114 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	4b0f      	ldr	r3, [pc, #60]	; (800d108 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	3304      	adds	r3, #4
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	4610      	mov	r0, r2
 800d0d2:	f7fe f95d 	bl	800b390 <vListInsert>
}
 800d0d6:	e010      	b.n	800d0fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0d8:	4b0f      	ldr	r3, [pc, #60]	; (800d118 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	4b0a      	ldr	r3, [pc, #40]	; (800d108 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	3304      	adds	r3, #4
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	4610      	mov	r0, r2
 800d0e6:	f7fe f953 	bl	800b390 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d0ea:	4b0c      	ldr	r3, [pc, #48]	; (800d11c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d202      	bcs.n	800d0fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d0f4:	4a09      	ldr	r2, [pc, #36]	; (800d11c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	6013      	str	r3, [r2, #0]
}
 800d0fa:	bf00      	nop
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	2000066c 	.word	0x2000066c
 800d108:	20000568 	.word	0x20000568
 800d10c:	20000670 	.word	0x20000670
 800d110:	20000654 	.word	0x20000654
 800d114:	20000624 	.word	0x20000624
 800d118:	20000620 	.word	0x20000620
 800d11c:	20000688 	.word	0x20000688

0800d120 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d120:	b480      	push	{r7}
 800d122:	b085      	sub	sp, #20
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	3b04      	subs	r3, #4
 800d130:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	3b04      	subs	r3, #4
 800d13e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	f023 0201 	bic.w	r2, r3, #1
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	3b04      	subs	r3, #4
 800d14e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d150:	4a0c      	ldr	r2, [pc, #48]	; (800d184 <pxPortInitialiseStack+0x64>)
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	3b14      	subs	r3, #20
 800d15a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	3b04      	subs	r3, #4
 800d166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f06f 0202 	mvn.w	r2, #2
 800d16e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	3b20      	subs	r3, #32
 800d174:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d176:	68fb      	ldr	r3, [r7, #12]
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3714      	adds	r7, #20
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr
 800d184:	0800d189 	.word	0x0800d189

0800d188 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d188:	b480      	push	{r7}
 800d18a:	b085      	sub	sp, #20
 800d18c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d18e:	2300      	movs	r3, #0
 800d190:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d192:	4b14      	ldr	r3, [pc, #80]	; (800d1e4 <prvTaskExitError+0x5c>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d19a:	d00c      	beq.n	800d1b6 <prvTaskExitError+0x2e>
	__asm volatile
 800d19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a0:	b672      	cpsid	i
 800d1a2:	f383 8811 	msr	BASEPRI, r3
 800d1a6:	f3bf 8f6f 	isb	sy
 800d1aa:	f3bf 8f4f 	dsb	sy
 800d1ae:	b662      	cpsie	i
 800d1b0:	60fb      	str	r3, [r7, #12]
}
 800d1b2:	bf00      	nop
 800d1b4:	e7fe      	b.n	800d1b4 <prvTaskExitError+0x2c>
	__asm volatile
 800d1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ba:	b672      	cpsid	i
 800d1bc:	f383 8811 	msr	BASEPRI, r3
 800d1c0:	f3bf 8f6f 	isb	sy
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	b662      	cpsie	i
 800d1ca:	60bb      	str	r3, [r7, #8]
}
 800d1cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d1ce:	bf00      	nop
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d0fc      	beq.n	800d1d0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d1d6:	bf00      	nop
 800d1d8:	bf00      	nop
 800d1da:	3714      	adds	r7, #20
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr
 800d1e4:	2000005c 	.word	0x2000005c
	...

0800d1f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d1f0:	4b07      	ldr	r3, [pc, #28]	; (800d210 <pxCurrentTCBConst2>)
 800d1f2:	6819      	ldr	r1, [r3, #0]
 800d1f4:	6808      	ldr	r0, [r1, #0]
 800d1f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1fa:	f380 8809 	msr	PSP, r0
 800d1fe:	f3bf 8f6f 	isb	sy
 800d202:	f04f 0000 	mov.w	r0, #0
 800d206:	f380 8811 	msr	BASEPRI, r0
 800d20a:	4770      	bx	lr
 800d20c:	f3af 8000 	nop.w

0800d210 <pxCurrentTCBConst2>:
 800d210:	20000568 	.word	0x20000568
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d214:	bf00      	nop
 800d216:	bf00      	nop

0800d218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d218:	4808      	ldr	r0, [pc, #32]	; (800d23c <prvPortStartFirstTask+0x24>)
 800d21a:	6800      	ldr	r0, [r0, #0]
 800d21c:	6800      	ldr	r0, [r0, #0]
 800d21e:	f380 8808 	msr	MSP, r0
 800d222:	f04f 0000 	mov.w	r0, #0
 800d226:	f380 8814 	msr	CONTROL, r0
 800d22a:	b662      	cpsie	i
 800d22c:	b661      	cpsie	f
 800d22e:	f3bf 8f4f 	dsb	sy
 800d232:	f3bf 8f6f 	isb	sy
 800d236:	df00      	svc	0
 800d238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d23a:	bf00      	nop
 800d23c:	e000ed08 	.word	0xe000ed08

0800d240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d246:	4b37      	ldr	r3, [pc, #220]	; (800d324 <xPortStartScheduler+0xe4>)
 800d248:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	b2db      	uxtb	r3, r3
 800d250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	22ff      	movs	r2, #255	; 0xff
 800d256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d260:	78fb      	ldrb	r3, [r7, #3]
 800d262:	b2db      	uxtb	r3, r3
 800d264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d268:	b2da      	uxtb	r2, r3
 800d26a:	4b2f      	ldr	r3, [pc, #188]	; (800d328 <xPortStartScheduler+0xe8>)
 800d26c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d26e:	4b2f      	ldr	r3, [pc, #188]	; (800d32c <xPortStartScheduler+0xec>)
 800d270:	2207      	movs	r2, #7
 800d272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d274:	e009      	b.n	800d28a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d276:	4b2d      	ldr	r3, [pc, #180]	; (800d32c <xPortStartScheduler+0xec>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	3b01      	subs	r3, #1
 800d27c:	4a2b      	ldr	r2, [pc, #172]	; (800d32c <xPortStartScheduler+0xec>)
 800d27e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d280:	78fb      	ldrb	r3, [r7, #3]
 800d282:	b2db      	uxtb	r3, r3
 800d284:	005b      	lsls	r3, r3, #1
 800d286:	b2db      	uxtb	r3, r3
 800d288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d28a:	78fb      	ldrb	r3, [r7, #3]
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d292:	2b80      	cmp	r3, #128	; 0x80
 800d294:	d0ef      	beq.n	800d276 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d296:	4b25      	ldr	r3, [pc, #148]	; (800d32c <xPortStartScheduler+0xec>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f1c3 0307 	rsb	r3, r3, #7
 800d29e:	2b04      	cmp	r3, #4
 800d2a0:	d00c      	beq.n	800d2bc <xPortStartScheduler+0x7c>
	__asm volatile
 800d2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a6:	b672      	cpsid	i
 800d2a8:	f383 8811 	msr	BASEPRI, r3
 800d2ac:	f3bf 8f6f 	isb	sy
 800d2b0:	f3bf 8f4f 	dsb	sy
 800d2b4:	b662      	cpsie	i
 800d2b6:	60bb      	str	r3, [r7, #8]
}
 800d2b8:	bf00      	nop
 800d2ba:	e7fe      	b.n	800d2ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d2bc:	4b1b      	ldr	r3, [pc, #108]	; (800d32c <xPortStartScheduler+0xec>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	021b      	lsls	r3, r3, #8
 800d2c2:	4a1a      	ldr	r2, [pc, #104]	; (800d32c <xPortStartScheduler+0xec>)
 800d2c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d2c6:	4b19      	ldr	r3, [pc, #100]	; (800d32c <xPortStartScheduler+0xec>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d2ce:	4a17      	ldr	r2, [pc, #92]	; (800d32c <xPortStartScheduler+0xec>)
 800d2d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	b2da      	uxtb	r2, r3
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d2da:	4b15      	ldr	r3, [pc, #84]	; (800d330 <xPortStartScheduler+0xf0>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4a14      	ldr	r2, [pc, #80]	; (800d330 <xPortStartScheduler+0xf0>)
 800d2e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d2e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d2e6:	4b12      	ldr	r3, [pc, #72]	; (800d330 <xPortStartScheduler+0xf0>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a11      	ldr	r2, [pc, #68]	; (800d330 <xPortStartScheduler+0xf0>)
 800d2ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d2f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d2f2:	f000 f8dd 	bl	800d4b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d2f6:	4b0f      	ldr	r3, [pc, #60]	; (800d334 <xPortStartScheduler+0xf4>)
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d2fc:	f000 f8fc 	bl	800d4f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d300:	4b0d      	ldr	r3, [pc, #52]	; (800d338 <xPortStartScheduler+0xf8>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4a0c      	ldr	r2, [pc, #48]	; (800d338 <xPortStartScheduler+0xf8>)
 800d306:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d30a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d30c:	f7ff ff84 	bl	800d218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d310:	f7ff fa74 	bl	800c7fc <vTaskSwitchContext>
	prvTaskExitError();
 800d314:	f7ff ff38 	bl	800d188 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d318:	2300      	movs	r3, #0
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	e000e400 	.word	0xe000e400
 800d328:	20000694 	.word	0x20000694
 800d32c:	20000698 	.word	0x20000698
 800d330:	e000ed20 	.word	0xe000ed20
 800d334:	2000005c 	.word	0x2000005c
 800d338:	e000ef34 	.word	0xe000ef34

0800d33c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
	__asm volatile
 800d342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d346:	b672      	cpsid	i
 800d348:	f383 8811 	msr	BASEPRI, r3
 800d34c:	f3bf 8f6f 	isb	sy
 800d350:	f3bf 8f4f 	dsb	sy
 800d354:	b662      	cpsie	i
 800d356:	607b      	str	r3, [r7, #4]
}
 800d358:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d35a:	4b10      	ldr	r3, [pc, #64]	; (800d39c <vPortEnterCritical+0x60>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	3301      	adds	r3, #1
 800d360:	4a0e      	ldr	r2, [pc, #56]	; (800d39c <vPortEnterCritical+0x60>)
 800d362:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d364:	4b0d      	ldr	r3, [pc, #52]	; (800d39c <vPortEnterCritical+0x60>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d111      	bne.n	800d390 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d36c:	4b0c      	ldr	r3, [pc, #48]	; (800d3a0 <vPortEnterCritical+0x64>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	b2db      	uxtb	r3, r3
 800d372:	2b00      	cmp	r3, #0
 800d374:	d00c      	beq.n	800d390 <vPortEnterCritical+0x54>
	__asm volatile
 800d376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37a:	b672      	cpsid	i
 800d37c:	f383 8811 	msr	BASEPRI, r3
 800d380:	f3bf 8f6f 	isb	sy
 800d384:	f3bf 8f4f 	dsb	sy
 800d388:	b662      	cpsie	i
 800d38a:	603b      	str	r3, [r7, #0]
}
 800d38c:	bf00      	nop
 800d38e:	e7fe      	b.n	800d38e <vPortEnterCritical+0x52>
	}
}
 800d390:	bf00      	nop
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr
 800d39c:	2000005c 	.word	0x2000005c
 800d3a0:	e000ed04 	.word	0xe000ed04

0800d3a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d3aa:	4b13      	ldr	r3, [pc, #76]	; (800d3f8 <vPortExitCritical+0x54>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d10c      	bne.n	800d3cc <vPortExitCritical+0x28>
	__asm volatile
 800d3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b6:	b672      	cpsid	i
 800d3b8:	f383 8811 	msr	BASEPRI, r3
 800d3bc:	f3bf 8f6f 	isb	sy
 800d3c0:	f3bf 8f4f 	dsb	sy
 800d3c4:	b662      	cpsie	i
 800d3c6:	607b      	str	r3, [r7, #4]
}
 800d3c8:	bf00      	nop
 800d3ca:	e7fe      	b.n	800d3ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d3cc:	4b0a      	ldr	r3, [pc, #40]	; (800d3f8 <vPortExitCritical+0x54>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	3b01      	subs	r3, #1
 800d3d2:	4a09      	ldr	r2, [pc, #36]	; (800d3f8 <vPortExitCritical+0x54>)
 800d3d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d3d6:	4b08      	ldr	r3, [pc, #32]	; (800d3f8 <vPortExitCritical+0x54>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d105      	bne.n	800d3ea <vPortExitCritical+0x46>
 800d3de:	2300      	movs	r3, #0
 800d3e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	f383 8811 	msr	BASEPRI, r3
}
 800d3e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d3ea:	bf00      	nop
 800d3ec:	370c      	adds	r7, #12
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr
 800d3f6:	bf00      	nop
 800d3f8:	2000005c 	.word	0x2000005c
 800d3fc:	00000000 	.word	0x00000000

0800d400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d400:	f3ef 8009 	mrs	r0, PSP
 800d404:	f3bf 8f6f 	isb	sy
 800d408:	4b15      	ldr	r3, [pc, #84]	; (800d460 <pxCurrentTCBConst>)
 800d40a:	681a      	ldr	r2, [r3, #0]
 800d40c:	f01e 0f10 	tst.w	lr, #16
 800d410:	bf08      	it	eq
 800d412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d41a:	6010      	str	r0, [r2, #0]
 800d41c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d420:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d424:	b672      	cpsid	i
 800d426:	f380 8811 	msr	BASEPRI, r0
 800d42a:	f3bf 8f4f 	dsb	sy
 800d42e:	f3bf 8f6f 	isb	sy
 800d432:	b662      	cpsie	i
 800d434:	f7ff f9e2 	bl	800c7fc <vTaskSwitchContext>
 800d438:	f04f 0000 	mov.w	r0, #0
 800d43c:	f380 8811 	msr	BASEPRI, r0
 800d440:	bc09      	pop	{r0, r3}
 800d442:	6819      	ldr	r1, [r3, #0]
 800d444:	6808      	ldr	r0, [r1, #0]
 800d446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d44a:	f01e 0f10 	tst.w	lr, #16
 800d44e:	bf08      	it	eq
 800d450:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d454:	f380 8809 	msr	PSP, r0
 800d458:	f3bf 8f6f 	isb	sy
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop

0800d460 <pxCurrentTCBConst>:
 800d460:	20000568 	.word	0x20000568
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d464:	bf00      	nop
 800d466:	bf00      	nop

0800d468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d472:	b672      	cpsid	i
 800d474:	f383 8811 	msr	BASEPRI, r3
 800d478:	f3bf 8f6f 	isb	sy
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	b662      	cpsie	i
 800d482:	607b      	str	r3, [r7, #4]
}
 800d484:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d486:	f7ff f8ff 	bl	800c688 <xTaskIncrementTick>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d003      	beq.n	800d498 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d490:	4b06      	ldr	r3, [pc, #24]	; (800d4ac <SysTick_Handler+0x44>)
 800d492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d496:	601a      	str	r2, [r3, #0]
 800d498:	2300      	movs	r3, #0
 800d49a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	f383 8811 	msr	BASEPRI, r3
}
 800d4a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d4a4:	bf00      	nop
 800d4a6:	3708      	adds	r7, #8
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}
 800d4ac:	e000ed04 	.word	0xe000ed04

0800d4b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d4b4:	4b0b      	ldr	r3, [pc, #44]	; (800d4e4 <vPortSetupTimerInterrupt+0x34>)
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d4ba:	4b0b      	ldr	r3, [pc, #44]	; (800d4e8 <vPortSetupTimerInterrupt+0x38>)
 800d4bc:	2200      	movs	r2, #0
 800d4be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d4c0:	4b0a      	ldr	r3, [pc, #40]	; (800d4ec <vPortSetupTimerInterrupt+0x3c>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4a0a      	ldr	r2, [pc, #40]	; (800d4f0 <vPortSetupTimerInterrupt+0x40>)
 800d4c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d4ca:	099b      	lsrs	r3, r3, #6
 800d4cc:	4a09      	ldr	r2, [pc, #36]	; (800d4f4 <vPortSetupTimerInterrupt+0x44>)
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d4d2:	4b04      	ldr	r3, [pc, #16]	; (800d4e4 <vPortSetupTimerInterrupt+0x34>)
 800d4d4:	2207      	movs	r2, #7
 800d4d6:	601a      	str	r2, [r3, #0]
}
 800d4d8:	bf00      	nop
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr
 800d4e2:	bf00      	nop
 800d4e4:	e000e010 	.word	0xe000e010
 800d4e8:	e000e018 	.word	0xe000e018
 800d4ec:	20000050 	.word	0x20000050
 800d4f0:	10624dd3 	.word	0x10624dd3
 800d4f4:	e000e014 	.word	0xe000e014

0800d4f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d4f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d508 <vPortEnableVFP+0x10>
 800d4fc:	6801      	ldr	r1, [r0, #0]
 800d4fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d502:	6001      	str	r1, [r0, #0]
 800d504:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d506:	bf00      	nop
 800d508:	e000ed88 	.word	0xe000ed88

0800d50c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d50c:	b480      	push	{r7}
 800d50e:	b085      	sub	sp, #20
 800d510:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d512:	f3ef 8305 	mrs	r3, IPSR
 800d516:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2b0f      	cmp	r3, #15
 800d51c:	d916      	bls.n	800d54c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d51e:	4a19      	ldr	r2, [pc, #100]	; (800d584 <vPortValidateInterruptPriority+0x78>)
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	4413      	add	r3, r2
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d528:	4b17      	ldr	r3, [pc, #92]	; (800d588 <vPortValidateInterruptPriority+0x7c>)
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	7afa      	ldrb	r2, [r7, #11]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d20c      	bcs.n	800d54c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800d532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d536:	b672      	cpsid	i
 800d538:	f383 8811 	msr	BASEPRI, r3
 800d53c:	f3bf 8f6f 	isb	sy
 800d540:	f3bf 8f4f 	dsb	sy
 800d544:	b662      	cpsie	i
 800d546:	607b      	str	r3, [r7, #4]
}
 800d548:	bf00      	nop
 800d54a:	e7fe      	b.n	800d54a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d54c:	4b0f      	ldr	r3, [pc, #60]	; (800d58c <vPortValidateInterruptPriority+0x80>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d554:	4b0e      	ldr	r3, [pc, #56]	; (800d590 <vPortValidateInterruptPriority+0x84>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d90c      	bls.n	800d576 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800d55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d560:	b672      	cpsid	i
 800d562:	f383 8811 	msr	BASEPRI, r3
 800d566:	f3bf 8f6f 	isb	sy
 800d56a:	f3bf 8f4f 	dsb	sy
 800d56e:	b662      	cpsie	i
 800d570:	603b      	str	r3, [r7, #0]
}
 800d572:	bf00      	nop
 800d574:	e7fe      	b.n	800d574 <vPortValidateInterruptPriority+0x68>
	}
 800d576:	bf00      	nop
 800d578:	3714      	adds	r7, #20
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	e000e3f0 	.word	0xe000e3f0
 800d588:	20000694 	.word	0x20000694
 800d58c:	e000ed0c 	.word	0xe000ed0c
 800d590:	20000698 	.word	0x20000698

0800d594 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b08a      	sub	sp, #40	; 0x28
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d59c:	2300      	movs	r3, #0
 800d59e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d5a0:	f7fe ffc6 	bl	800c530 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d5a4:	4b5b      	ldr	r3, [pc, #364]	; (800d714 <pvPortMalloc+0x180>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d101      	bne.n	800d5b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d5ac:	f000 f91a 	bl	800d7e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d5b0:	4b59      	ldr	r3, [pc, #356]	; (800d718 <pvPortMalloc+0x184>)
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	4013      	ands	r3, r2
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	f040 8092 	bne.w	800d6e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d01f      	beq.n	800d604 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d5c4:	2208      	movs	r2, #8
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f003 0307 	and.w	r3, r3, #7
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d016      	beq.n	800d604 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f023 0307 	bic.w	r3, r3, #7
 800d5dc:	3308      	adds	r3, #8
 800d5de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f003 0307 	and.w	r3, r3, #7
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d00c      	beq.n	800d604 <pvPortMalloc+0x70>
	__asm volatile
 800d5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ee:	b672      	cpsid	i
 800d5f0:	f383 8811 	msr	BASEPRI, r3
 800d5f4:	f3bf 8f6f 	isb	sy
 800d5f8:	f3bf 8f4f 	dsb	sy
 800d5fc:	b662      	cpsie	i
 800d5fe:	617b      	str	r3, [r7, #20]
}
 800d600:	bf00      	nop
 800d602:	e7fe      	b.n	800d602 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d06b      	beq.n	800d6e2 <pvPortMalloc+0x14e>
 800d60a:	4b44      	ldr	r3, [pc, #272]	; (800d71c <pvPortMalloc+0x188>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	429a      	cmp	r2, r3
 800d612:	d866      	bhi.n	800d6e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d614:	4b42      	ldr	r3, [pc, #264]	; (800d720 <pvPortMalloc+0x18c>)
 800d616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d618:	4b41      	ldr	r3, [pc, #260]	; (800d720 <pvPortMalloc+0x18c>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d61e:	e004      	b.n	800d62a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	429a      	cmp	r2, r3
 800d632:	d903      	bls.n	800d63c <pvPortMalloc+0xa8>
 800d634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d1f1      	bne.n	800d620 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d63c:	4b35      	ldr	r3, [pc, #212]	; (800d714 <pvPortMalloc+0x180>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d642:	429a      	cmp	r2, r3
 800d644:	d04d      	beq.n	800d6e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d646:	6a3b      	ldr	r3, [r7, #32]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2208      	movs	r2, #8
 800d64c:	4413      	add	r3, r2
 800d64e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d652:	681a      	ldr	r2, [r3, #0]
 800d654:	6a3b      	ldr	r3, [r7, #32]
 800d656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65a:	685a      	ldr	r2, [r3, #4]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	1ad2      	subs	r2, r2, r3
 800d660:	2308      	movs	r3, #8
 800d662:	005b      	lsls	r3, r3, #1
 800d664:	429a      	cmp	r2, r3
 800d666:	d921      	bls.n	800d6ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	4413      	add	r3, r2
 800d66e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	f003 0307 	and.w	r3, r3, #7
 800d676:	2b00      	cmp	r3, #0
 800d678:	d00c      	beq.n	800d694 <pvPortMalloc+0x100>
	__asm volatile
 800d67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67e:	b672      	cpsid	i
 800d680:	f383 8811 	msr	BASEPRI, r3
 800d684:	f3bf 8f6f 	isb	sy
 800d688:	f3bf 8f4f 	dsb	sy
 800d68c:	b662      	cpsie	i
 800d68e:	613b      	str	r3, [r7, #16]
}
 800d690:	bf00      	nop
 800d692:	e7fe      	b.n	800d692 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d696:	685a      	ldr	r2, [r3, #4]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	1ad2      	subs	r2, r2, r3
 800d69c:	69bb      	ldr	r3, [r7, #24]
 800d69e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d6a6:	69b8      	ldr	r0, [r7, #24]
 800d6a8:	f000 f8fe 	bl	800d8a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d6ac:	4b1b      	ldr	r3, [pc, #108]	; (800d71c <pvPortMalloc+0x188>)
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	1ad3      	subs	r3, r2, r3
 800d6b6:	4a19      	ldr	r2, [pc, #100]	; (800d71c <pvPortMalloc+0x188>)
 800d6b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d6ba:	4b18      	ldr	r3, [pc, #96]	; (800d71c <pvPortMalloc+0x188>)
 800d6bc:	681a      	ldr	r2, [r3, #0]
 800d6be:	4b19      	ldr	r3, [pc, #100]	; (800d724 <pvPortMalloc+0x190>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d203      	bcs.n	800d6ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d6c6:	4b15      	ldr	r3, [pc, #84]	; (800d71c <pvPortMalloc+0x188>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	4a16      	ldr	r2, [pc, #88]	; (800d724 <pvPortMalloc+0x190>)
 800d6cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d0:	685a      	ldr	r2, [r3, #4]
 800d6d2:	4b11      	ldr	r3, [pc, #68]	; (800d718 <pvPortMalloc+0x184>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	431a      	orrs	r2, r3
 800d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6de:	2200      	movs	r2, #0
 800d6e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d6e2:	f7fe ff33 	bl	800c54c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	f003 0307 	and.w	r3, r3, #7
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d00c      	beq.n	800d70a <pvPortMalloc+0x176>
	__asm volatile
 800d6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f4:	b672      	cpsid	i
 800d6f6:	f383 8811 	msr	BASEPRI, r3
 800d6fa:	f3bf 8f6f 	isb	sy
 800d6fe:	f3bf 8f4f 	dsb	sy
 800d702:	b662      	cpsie	i
 800d704:	60fb      	str	r3, [r7, #12]
}
 800d706:	bf00      	nop
 800d708:	e7fe      	b.n	800d708 <pvPortMalloc+0x174>
	return pvReturn;
 800d70a:	69fb      	ldr	r3, [r7, #28]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3728      	adds	r7, #40	; 0x28
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	200042a4 	.word	0x200042a4
 800d718:	200042b0 	.word	0x200042b0
 800d71c:	200042a8 	.word	0x200042a8
 800d720:	2000429c 	.word	0x2000429c
 800d724:	200042ac 	.word	0x200042ac

0800d728 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b086      	sub	sp, #24
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d04c      	beq.n	800d7d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d73a:	2308      	movs	r3, #8
 800d73c:	425b      	negs	r3, r3
 800d73e:	697a      	ldr	r2, [r7, #20]
 800d740:	4413      	add	r3, r2
 800d742:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	685a      	ldr	r2, [r3, #4]
 800d74c:	4b23      	ldr	r3, [pc, #140]	; (800d7dc <vPortFree+0xb4>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4013      	ands	r3, r2
 800d752:	2b00      	cmp	r3, #0
 800d754:	d10c      	bne.n	800d770 <vPortFree+0x48>
	__asm volatile
 800d756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d75a:	b672      	cpsid	i
 800d75c:	f383 8811 	msr	BASEPRI, r3
 800d760:	f3bf 8f6f 	isb	sy
 800d764:	f3bf 8f4f 	dsb	sy
 800d768:	b662      	cpsie	i
 800d76a:	60fb      	str	r3, [r7, #12]
}
 800d76c:	bf00      	nop
 800d76e:	e7fe      	b.n	800d76e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d00c      	beq.n	800d792 <vPortFree+0x6a>
	__asm volatile
 800d778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77c:	b672      	cpsid	i
 800d77e:	f383 8811 	msr	BASEPRI, r3
 800d782:	f3bf 8f6f 	isb	sy
 800d786:	f3bf 8f4f 	dsb	sy
 800d78a:	b662      	cpsie	i
 800d78c:	60bb      	str	r3, [r7, #8]
}
 800d78e:	bf00      	nop
 800d790:	e7fe      	b.n	800d790 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	685a      	ldr	r2, [r3, #4]
 800d796:	4b11      	ldr	r3, [pc, #68]	; (800d7dc <vPortFree+0xb4>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	4013      	ands	r3, r2
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d019      	beq.n	800d7d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d115      	bne.n	800d7d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	685a      	ldr	r2, [r3, #4]
 800d7ac:	4b0b      	ldr	r3, [pc, #44]	; (800d7dc <vPortFree+0xb4>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	43db      	mvns	r3, r3
 800d7b2:	401a      	ands	r2, r3
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d7b8:	f7fe feba 	bl	800c530 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	685a      	ldr	r2, [r3, #4]
 800d7c0:	4b07      	ldr	r3, [pc, #28]	; (800d7e0 <vPortFree+0xb8>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	4a06      	ldr	r2, [pc, #24]	; (800d7e0 <vPortFree+0xb8>)
 800d7c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d7ca:	6938      	ldr	r0, [r7, #16]
 800d7cc:	f000 f86c 	bl	800d8a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d7d0:	f7fe febc 	bl	800c54c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d7d4:	bf00      	nop
 800d7d6:	3718      	adds	r7, #24
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	200042b0 	.word	0x200042b0
 800d7e0:	200042a8 	.word	0x200042a8

0800d7e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b085      	sub	sp, #20
 800d7e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d7ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d7ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d7f0:	4b27      	ldr	r3, [pc, #156]	; (800d890 <prvHeapInit+0xac>)
 800d7f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f003 0307 	and.w	r3, r3, #7
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d00c      	beq.n	800d818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	3307      	adds	r3, #7
 800d802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f023 0307 	bic.w	r3, r3, #7
 800d80a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d80c:	68ba      	ldr	r2, [r7, #8]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	1ad3      	subs	r3, r2, r3
 800d812:	4a1f      	ldr	r2, [pc, #124]	; (800d890 <prvHeapInit+0xac>)
 800d814:	4413      	add	r3, r2
 800d816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d81c:	4a1d      	ldr	r2, [pc, #116]	; (800d894 <prvHeapInit+0xb0>)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d822:	4b1c      	ldr	r3, [pc, #112]	; (800d894 <prvHeapInit+0xb0>)
 800d824:	2200      	movs	r2, #0
 800d826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	68ba      	ldr	r2, [r7, #8]
 800d82c:	4413      	add	r3, r2
 800d82e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d830:	2208      	movs	r2, #8
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	1a9b      	subs	r3, r3, r2
 800d836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f023 0307 	bic.w	r3, r3, #7
 800d83e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	4a15      	ldr	r2, [pc, #84]	; (800d898 <prvHeapInit+0xb4>)
 800d844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d846:	4b14      	ldr	r3, [pc, #80]	; (800d898 <prvHeapInit+0xb4>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2200      	movs	r2, #0
 800d84c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d84e:	4b12      	ldr	r3, [pc, #72]	; (800d898 <prvHeapInit+0xb4>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2200      	movs	r2, #0
 800d854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	68fa      	ldr	r2, [r7, #12]
 800d85e:	1ad2      	subs	r2, r2, r3
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d864:	4b0c      	ldr	r3, [pc, #48]	; (800d898 <prvHeapInit+0xb4>)
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	4a0a      	ldr	r2, [pc, #40]	; (800d89c <prvHeapInit+0xb8>)
 800d872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	4a09      	ldr	r2, [pc, #36]	; (800d8a0 <prvHeapInit+0xbc>)
 800d87a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d87c:	4b09      	ldr	r3, [pc, #36]	; (800d8a4 <prvHeapInit+0xc0>)
 800d87e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d882:	601a      	str	r2, [r3, #0]
}
 800d884:	bf00      	nop
 800d886:	3714      	adds	r7, #20
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr
 800d890:	2000069c 	.word	0x2000069c
 800d894:	2000429c 	.word	0x2000429c
 800d898:	200042a4 	.word	0x200042a4
 800d89c:	200042ac 	.word	0x200042ac
 800d8a0:	200042a8 	.word	0x200042a8
 800d8a4:	200042b0 	.word	0x200042b0

0800d8a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d8b0:	4b28      	ldr	r3, [pc, #160]	; (800d954 <prvInsertBlockIntoFreeList+0xac>)
 800d8b2:	60fb      	str	r3, [r7, #12]
 800d8b4:	e002      	b.n	800d8bc <prvInsertBlockIntoFreeList+0x14>
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	60fb      	str	r3, [r7, #12]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	687a      	ldr	r2, [r7, #4]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d8f7      	bhi.n	800d8b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	68ba      	ldr	r2, [r7, #8]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d108      	bne.n	800d8ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	685a      	ldr	r2, [r3, #4]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	441a      	add	r2, r3
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	68ba      	ldr	r2, [r7, #8]
 800d8f4:	441a      	add	r2, r3
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d118      	bne.n	800d930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681a      	ldr	r2, [r3, #0]
 800d902:	4b15      	ldr	r3, [pc, #84]	; (800d958 <prvInsertBlockIntoFreeList+0xb0>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	429a      	cmp	r2, r3
 800d908:	d00d      	beq.n	800d926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	685a      	ldr	r2, [r3, #4]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	441a      	add	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	681a      	ldr	r2, [r3, #0]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	601a      	str	r2, [r3, #0]
 800d924:	e008      	b.n	800d938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d926:	4b0c      	ldr	r3, [pc, #48]	; (800d958 <prvInsertBlockIntoFreeList+0xb0>)
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	601a      	str	r2, [r3, #0]
 800d92e:	e003      	b.n	800d938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d938:	68fa      	ldr	r2, [r7, #12]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d002      	beq.n	800d946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d946:	bf00      	nop
 800d948:	3714      	adds	r7, #20
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	2000429c 	.word	0x2000429c
 800d958:	200042a4 	.word	0x200042a4

0800d95c <__errno>:
 800d95c:	4b01      	ldr	r3, [pc, #4]	; (800d964 <__errno+0x8>)
 800d95e:	6818      	ldr	r0, [r3, #0]
 800d960:	4770      	bx	lr
 800d962:	bf00      	nop
 800d964:	20000060 	.word	0x20000060

0800d968 <__libc_init_array>:
 800d968:	b570      	push	{r4, r5, r6, lr}
 800d96a:	4d0d      	ldr	r5, [pc, #52]	; (800d9a0 <__libc_init_array+0x38>)
 800d96c:	4c0d      	ldr	r4, [pc, #52]	; (800d9a4 <__libc_init_array+0x3c>)
 800d96e:	1b64      	subs	r4, r4, r5
 800d970:	10a4      	asrs	r4, r4, #2
 800d972:	2600      	movs	r6, #0
 800d974:	42a6      	cmp	r6, r4
 800d976:	d109      	bne.n	800d98c <__libc_init_array+0x24>
 800d978:	4d0b      	ldr	r5, [pc, #44]	; (800d9a8 <__libc_init_array+0x40>)
 800d97a:	4c0c      	ldr	r4, [pc, #48]	; (800d9ac <__libc_init_array+0x44>)
 800d97c:	f000 fcb8 	bl	800e2f0 <_init>
 800d980:	1b64      	subs	r4, r4, r5
 800d982:	10a4      	asrs	r4, r4, #2
 800d984:	2600      	movs	r6, #0
 800d986:	42a6      	cmp	r6, r4
 800d988:	d105      	bne.n	800d996 <__libc_init_array+0x2e>
 800d98a:	bd70      	pop	{r4, r5, r6, pc}
 800d98c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d990:	4798      	blx	r3
 800d992:	3601      	adds	r6, #1
 800d994:	e7ee      	b.n	800d974 <__libc_init_array+0xc>
 800d996:	f855 3b04 	ldr.w	r3, [r5], #4
 800d99a:	4798      	blx	r3
 800d99c:	3601      	adds	r6, #1
 800d99e:	e7f2      	b.n	800d986 <__libc_init_array+0x1e>
 800d9a0:	08010410 	.word	0x08010410
 800d9a4:	08010410 	.word	0x08010410
 800d9a8:	08010410 	.word	0x08010410
 800d9ac:	08010414 	.word	0x08010414

0800d9b0 <__retarget_lock_acquire_recursive>:
 800d9b0:	4770      	bx	lr

0800d9b2 <__retarget_lock_release_recursive>:
 800d9b2:	4770      	bx	lr

0800d9b4 <memcpy>:
 800d9b4:	440a      	add	r2, r1
 800d9b6:	4291      	cmp	r1, r2
 800d9b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9bc:	d100      	bne.n	800d9c0 <memcpy+0xc>
 800d9be:	4770      	bx	lr
 800d9c0:	b510      	push	{r4, lr}
 800d9c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9ca:	4291      	cmp	r1, r2
 800d9cc:	d1f9      	bne.n	800d9c2 <memcpy+0xe>
 800d9ce:	bd10      	pop	{r4, pc}

0800d9d0 <memset>:
 800d9d0:	4402      	add	r2, r0
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d100      	bne.n	800d9da <memset+0xa>
 800d9d8:	4770      	bx	lr
 800d9da:	f803 1b01 	strb.w	r1, [r3], #1
 800d9de:	e7f9      	b.n	800d9d4 <memset+0x4>

0800d9e0 <_malloc_r>:
 800d9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9e2:	1ccd      	adds	r5, r1, #3
 800d9e4:	f025 0503 	bic.w	r5, r5, #3
 800d9e8:	3508      	adds	r5, #8
 800d9ea:	2d0c      	cmp	r5, #12
 800d9ec:	bf38      	it	cc
 800d9ee:	250c      	movcc	r5, #12
 800d9f0:	2d00      	cmp	r5, #0
 800d9f2:	4606      	mov	r6, r0
 800d9f4:	db01      	blt.n	800d9fa <_malloc_r+0x1a>
 800d9f6:	42a9      	cmp	r1, r5
 800d9f8:	d903      	bls.n	800da02 <_malloc_r+0x22>
 800d9fa:	230c      	movs	r3, #12
 800d9fc:	6033      	str	r3, [r6, #0]
 800d9fe:	2000      	movs	r0, #0
 800da00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da02:	f000 f8e1 	bl	800dbc8 <__malloc_lock>
 800da06:	4921      	ldr	r1, [pc, #132]	; (800da8c <_malloc_r+0xac>)
 800da08:	680a      	ldr	r2, [r1, #0]
 800da0a:	4614      	mov	r4, r2
 800da0c:	b99c      	cbnz	r4, 800da36 <_malloc_r+0x56>
 800da0e:	4f20      	ldr	r7, [pc, #128]	; (800da90 <_malloc_r+0xb0>)
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	b923      	cbnz	r3, 800da1e <_malloc_r+0x3e>
 800da14:	4621      	mov	r1, r4
 800da16:	4630      	mov	r0, r6
 800da18:	f000 f8a6 	bl	800db68 <_sbrk_r>
 800da1c:	6038      	str	r0, [r7, #0]
 800da1e:	4629      	mov	r1, r5
 800da20:	4630      	mov	r0, r6
 800da22:	f000 f8a1 	bl	800db68 <_sbrk_r>
 800da26:	1c43      	adds	r3, r0, #1
 800da28:	d123      	bne.n	800da72 <_malloc_r+0x92>
 800da2a:	230c      	movs	r3, #12
 800da2c:	6033      	str	r3, [r6, #0]
 800da2e:	4630      	mov	r0, r6
 800da30:	f000 f8d0 	bl	800dbd4 <__malloc_unlock>
 800da34:	e7e3      	b.n	800d9fe <_malloc_r+0x1e>
 800da36:	6823      	ldr	r3, [r4, #0]
 800da38:	1b5b      	subs	r3, r3, r5
 800da3a:	d417      	bmi.n	800da6c <_malloc_r+0x8c>
 800da3c:	2b0b      	cmp	r3, #11
 800da3e:	d903      	bls.n	800da48 <_malloc_r+0x68>
 800da40:	6023      	str	r3, [r4, #0]
 800da42:	441c      	add	r4, r3
 800da44:	6025      	str	r5, [r4, #0]
 800da46:	e004      	b.n	800da52 <_malloc_r+0x72>
 800da48:	6863      	ldr	r3, [r4, #4]
 800da4a:	42a2      	cmp	r2, r4
 800da4c:	bf0c      	ite	eq
 800da4e:	600b      	streq	r3, [r1, #0]
 800da50:	6053      	strne	r3, [r2, #4]
 800da52:	4630      	mov	r0, r6
 800da54:	f000 f8be 	bl	800dbd4 <__malloc_unlock>
 800da58:	f104 000b 	add.w	r0, r4, #11
 800da5c:	1d23      	adds	r3, r4, #4
 800da5e:	f020 0007 	bic.w	r0, r0, #7
 800da62:	1ac2      	subs	r2, r0, r3
 800da64:	d0cc      	beq.n	800da00 <_malloc_r+0x20>
 800da66:	1a1b      	subs	r3, r3, r0
 800da68:	50a3      	str	r3, [r4, r2]
 800da6a:	e7c9      	b.n	800da00 <_malloc_r+0x20>
 800da6c:	4622      	mov	r2, r4
 800da6e:	6864      	ldr	r4, [r4, #4]
 800da70:	e7cc      	b.n	800da0c <_malloc_r+0x2c>
 800da72:	1cc4      	adds	r4, r0, #3
 800da74:	f024 0403 	bic.w	r4, r4, #3
 800da78:	42a0      	cmp	r0, r4
 800da7a:	d0e3      	beq.n	800da44 <_malloc_r+0x64>
 800da7c:	1a21      	subs	r1, r4, r0
 800da7e:	4630      	mov	r0, r6
 800da80:	f000 f872 	bl	800db68 <_sbrk_r>
 800da84:	3001      	adds	r0, #1
 800da86:	d1dd      	bne.n	800da44 <_malloc_r+0x64>
 800da88:	e7cf      	b.n	800da2a <_malloc_r+0x4a>
 800da8a:	bf00      	nop
 800da8c:	200042b4 	.word	0x200042b4
 800da90:	200042b8 	.word	0x200042b8

0800da94 <cleanup_glue>:
 800da94:	b538      	push	{r3, r4, r5, lr}
 800da96:	460c      	mov	r4, r1
 800da98:	6809      	ldr	r1, [r1, #0]
 800da9a:	4605      	mov	r5, r0
 800da9c:	b109      	cbz	r1, 800daa2 <cleanup_glue+0xe>
 800da9e:	f7ff fff9 	bl	800da94 <cleanup_glue>
 800daa2:	4621      	mov	r1, r4
 800daa4:	4628      	mov	r0, r5
 800daa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daaa:	f000 b899 	b.w	800dbe0 <_free_r>
	...

0800dab0 <_reclaim_reent>:
 800dab0:	4b2c      	ldr	r3, [pc, #176]	; (800db64 <_reclaim_reent+0xb4>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4283      	cmp	r3, r0
 800dab6:	b570      	push	{r4, r5, r6, lr}
 800dab8:	4604      	mov	r4, r0
 800daba:	d051      	beq.n	800db60 <_reclaim_reent+0xb0>
 800dabc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800dabe:	b143      	cbz	r3, 800dad2 <_reclaim_reent+0x22>
 800dac0:	68db      	ldr	r3, [r3, #12]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d14a      	bne.n	800db5c <_reclaim_reent+0xac>
 800dac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dac8:	6819      	ldr	r1, [r3, #0]
 800daca:	b111      	cbz	r1, 800dad2 <_reclaim_reent+0x22>
 800dacc:	4620      	mov	r0, r4
 800dace:	f000 f887 	bl	800dbe0 <_free_r>
 800dad2:	6961      	ldr	r1, [r4, #20]
 800dad4:	b111      	cbz	r1, 800dadc <_reclaim_reent+0x2c>
 800dad6:	4620      	mov	r0, r4
 800dad8:	f000 f882 	bl	800dbe0 <_free_r>
 800dadc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dade:	b111      	cbz	r1, 800dae6 <_reclaim_reent+0x36>
 800dae0:	4620      	mov	r0, r4
 800dae2:	f000 f87d 	bl	800dbe0 <_free_r>
 800dae6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dae8:	b111      	cbz	r1, 800daf0 <_reclaim_reent+0x40>
 800daea:	4620      	mov	r0, r4
 800daec:	f000 f878 	bl	800dbe0 <_free_r>
 800daf0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800daf2:	b111      	cbz	r1, 800dafa <_reclaim_reent+0x4a>
 800daf4:	4620      	mov	r0, r4
 800daf6:	f000 f873 	bl	800dbe0 <_free_r>
 800dafa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dafc:	b111      	cbz	r1, 800db04 <_reclaim_reent+0x54>
 800dafe:	4620      	mov	r0, r4
 800db00:	f000 f86e 	bl	800dbe0 <_free_r>
 800db04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800db06:	b111      	cbz	r1, 800db0e <_reclaim_reent+0x5e>
 800db08:	4620      	mov	r0, r4
 800db0a:	f000 f869 	bl	800dbe0 <_free_r>
 800db0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800db10:	b111      	cbz	r1, 800db18 <_reclaim_reent+0x68>
 800db12:	4620      	mov	r0, r4
 800db14:	f000 f864 	bl	800dbe0 <_free_r>
 800db18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db1a:	b111      	cbz	r1, 800db22 <_reclaim_reent+0x72>
 800db1c:	4620      	mov	r0, r4
 800db1e:	f000 f85f 	bl	800dbe0 <_free_r>
 800db22:	69a3      	ldr	r3, [r4, #24]
 800db24:	b1e3      	cbz	r3, 800db60 <_reclaim_reent+0xb0>
 800db26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800db28:	4620      	mov	r0, r4
 800db2a:	4798      	blx	r3
 800db2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800db2e:	b1b9      	cbz	r1, 800db60 <_reclaim_reent+0xb0>
 800db30:	4620      	mov	r0, r4
 800db32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db36:	f7ff bfad 	b.w	800da94 <cleanup_glue>
 800db3a:	5949      	ldr	r1, [r1, r5]
 800db3c:	b941      	cbnz	r1, 800db50 <_reclaim_reent+0xa0>
 800db3e:	3504      	adds	r5, #4
 800db40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db42:	2d80      	cmp	r5, #128	; 0x80
 800db44:	68d9      	ldr	r1, [r3, #12]
 800db46:	d1f8      	bne.n	800db3a <_reclaim_reent+0x8a>
 800db48:	4620      	mov	r0, r4
 800db4a:	f000 f849 	bl	800dbe0 <_free_r>
 800db4e:	e7ba      	b.n	800dac6 <_reclaim_reent+0x16>
 800db50:	680e      	ldr	r6, [r1, #0]
 800db52:	4620      	mov	r0, r4
 800db54:	f000 f844 	bl	800dbe0 <_free_r>
 800db58:	4631      	mov	r1, r6
 800db5a:	e7ef      	b.n	800db3c <_reclaim_reent+0x8c>
 800db5c:	2500      	movs	r5, #0
 800db5e:	e7ef      	b.n	800db40 <_reclaim_reent+0x90>
 800db60:	bd70      	pop	{r4, r5, r6, pc}
 800db62:	bf00      	nop
 800db64:	20000060 	.word	0x20000060

0800db68 <_sbrk_r>:
 800db68:	b538      	push	{r3, r4, r5, lr}
 800db6a:	4d06      	ldr	r5, [pc, #24]	; (800db84 <_sbrk_r+0x1c>)
 800db6c:	2300      	movs	r3, #0
 800db6e:	4604      	mov	r4, r0
 800db70:	4608      	mov	r0, r1
 800db72:	602b      	str	r3, [r5, #0]
 800db74:	f7f6 fd60 	bl	8004638 <_sbrk>
 800db78:	1c43      	adds	r3, r0, #1
 800db7a:	d102      	bne.n	800db82 <_sbrk_r+0x1a>
 800db7c:	682b      	ldr	r3, [r5, #0]
 800db7e:	b103      	cbz	r3, 800db82 <_sbrk_r+0x1a>
 800db80:	6023      	str	r3, [r4, #0]
 800db82:	bd38      	pop	{r3, r4, r5, pc}
 800db84:	20004a14 	.word	0x20004a14

0800db88 <siprintf>:
 800db88:	b40e      	push	{r1, r2, r3}
 800db8a:	b500      	push	{lr}
 800db8c:	b09c      	sub	sp, #112	; 0x70
 800db8e:	ab1d      	add	r3, sp, #116	; 0x74
 800db90:	9002      	str	r0, [sp, #8]
 800db92:	9006      	str	r0, [sp, #24]
 800db94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800db98:	4809      	ldr	r0, [pc, #36]	; (800dbc0 <siprintf+0x38>)
 800db9a:	9107      	str	r1, [sp, #28]
 800db9c:	9104      	str	r1, [sp, #16]
 800db9e:	4909      	ldr	r1, [pc, #36]	; (800dbc4 <siprintf+0x3c>)
 800dba0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dba4:	9105      	str	r1, [sp, #20]
 800dba6:	6800      	ldr	r0, [r0, #0]
 800dba8:	9301      	str	r3, [sp, #4]
 800dbaa:	a902      	add	r1, sp, #8
 800dbac:	f000 f8c4 	bl	800dd38 <_svfiprintf_r>
 800dbb0:	9b02      	ldr	r3, [sp, #8]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	701a      	strb	r2, [r3, #0]
 800dbb6:	b01c      	add	sp, #112	; 0x70
 800dbb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbbc:	b003      	add	sp, #12
 800dbbe:	4770      	bx	lr
 800dbc0:	20000060 	.word	0x20000060
 800dbc4:	ffff0208 	.word	0xffff0208

0800dbc8 <__malloc_lock>:
 800dbc8:	4801      	ldr	r0, [pc, #4]	; (800dbd0 <__malloc_lock+0x8>)
 800dbca:	f7ff bef1 	b.w	800d9b0 <__retarget_lock_acquire_recursive>
 800dbce:	bf00      	nop
 800dbd0:	20004a0c 	.word	0x20004a0c

0800dbd4 <__malloc_unlock>:
 800dbd4:	4801      	ldr	r0, [pc, #4]	; (800dbdc <__malloc_unlock+0x8>)
 800dbd6:	f7ff beec 	b.w	800d9b2 <__retarget_lock_release_recursive>
 800dbda:	bf00      	nop
 800dbdc:	20004a0c 	.word	0x20004a0c

0800dbe0 <_free_r>:
 800dbe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbe2:	2900      	cmp	r1, #0
 800dbe4:	d048      	beq.n	800dc78 <_free_r+0x98>
 800dbe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbea:	9001      	str	r0, [sp, #4]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	f1a1 0404 	sub.w	r4, r1, #4
 800dbf2:	bfb8      	it	lt
 800dbf4:	18e4      	addlt	r4, r4, r3
 800dbf6:	f7ff ffe7 	bl	800dbc8 <__malloc_lock>
 800dbfa:	4a20      	ldr	r2, [pc, #128]	; (800dc7c <_free_r+0x9c>)
 800dbfc:	9801      	ldr	r0, [sp, #4]
 800dbfe:	6813      	ldr	r3, [r2, #0]
 800dc00:	4615      	mov	r5, r2
 800dc02:	b933      	cbnz	r3, 800dc12 <_free_r+0x32>
 800dc04:	6063      	str	r3, [r4, #4]
 800dc06:	6014      	str	r4, [r2, #0]
 800dc08:	b003      	add	sp, #12
 800dc0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc0e:	f7ff bfe1 	b.w	800dbd4 <__malloc_unlock>
 800dc12:	42a3      	cmp	r3, r4
 800dc14:	d90b      	bls.n	800dc2e <_free_r+0x4e>
 800dc16:	6821      	ldr	r1, [r4, #0]
 800dc18:	1862      	adds	r2, r4, r1
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	bf04      	itt	eq
 800dc1e:	681a      	ldreq	r2, [r3, #0]
 800dc20:	685b      	ldreq	r3, [r3, #4]
 800dc22:	6063      	str	r3, [r4, #4]
 800dc24:	bf04      	itt	eq
 800dc26:	1852      	addeq	r2, r2, r1
 800dc28:	6022      	streq	r2, [r4, #0]
 800dc2a:	602c      	str	r4, [r5, #0]
 800dc2c:	e7ec      	b.n	800dc08 <_free_r+0x28>
 800dc2e:	461a      	mov	r2, r3
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	b10b      	cbz	r3, 800dc38 <_free_r+0x58>
 800dc34:	42a3      	cmp	r3, r4
 800dc36:	d9fa      	bls.n	800dc2e <_free_r+0x4e>
 800dc38:	6811      	ldr	r1, [r2, #0]
 800dc3a:	1855      	adds	r5, r2, r1
 800dc3c:	42a5      	cmp	r5, r4
 800dc3e:	d10b      	bne.n	800dc58 <_free_r+0x78>
 800dc40:	6824      	ldr	r4, [r4, #0]
 800dc42:	4421      	add	r1, r4
 800dc44:	1854      	adds	r4, r2, r1
 800dc46:	42a3      	cmp	r3, r4
 800dc48:	6011      	str	r1, [r2, #0]
 800dc4a:	d1dd      	bne.n	800dc08 <_free_r+0x28>
 800dc4c:	681c      	ldr	r4, [r3, #0]
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	6053      	str	r3, [r2, #4]
 800dc52:	4421      	add	r1, r4
 800dc54:	6011      	str	r1, [r2, #0]
 800dc56:	e7d7      	b.n	800dc08 <_free_r+0x28>
 800dc58:	d902      	bls.n	800dc60 <_free_r+0x80>
 800dc5a:	230c      	movs	r3, #12
 800dc5c:	6003      	str	r3, [r0, #0]
 800dc5e:	e7d3      	b.n	800dc08 <_free_r+0x28>
 800dc60:	6825      	ldr	r5, [r4, #0]
 800dc62:	1961      	adds	r1, r4, r5
 800dc64:	428b      	cmp	r3, r1
 800dc66:	bf04      	itt	eq
 800dc68:	6819      	ldreq	r1, [r3, #0]
 800dc6a:	685b      	ldreq	r3, [r3, #4]
 800dc6c:	6063      	str	r3, [r4, #4]
 800dc6e:	bf04      	itt	eq
 800dc70:	1949      	addeq	r1, r1, r5
 800dc72:	6021      	streq	r1, [r4, #0]
 800dc74:	6054      	str	r4, [r2, #4]
 800dc76:	e7c7      	b.n	800dc08 <_free_r+0x28>
 800dc78:	b003      	add	sp, #12
 800dc7a:	bd30      	pop	{r4, r5, pc}
 800dc7c:	200042b4 	.word	0x200042b4

0800dc80 <__ssputs_r>:
 800dc80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc84:	688e      	ldr	r6, [r1, #8]
 800dc86:	429e      	cmp	r6, r3
 800dc88:	4682      	mov	sl, r0
 800dc8a:	460c      	mov	r4, r1
 800dc8c:	4690      	mov	r8, r2
 800dc8e:	461f      	mov	r7, r3
 800dc90:	d838      	bhi.n	800dd04 <__ssputs_r+0x84>
 800dc92:	898a      	ldrh	r2, [r1, #12]
 800dc94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dc98:	d032      	beq.n	800dd00 <__ssputs_r+0x80>
 800dc9a:	6825      	ldr	r5, [r4, #0]
 800dc9c:	6909      	ldr	r1, [r1, #16]
 800dc9e:	eba5 0901 	sub.w	r9, r5, r1
 800dca2:	6965      	ldr	r5, [r4, #20]
 800dca4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dca8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dcac:	3301      	adds	r3, #1
 800dcae:	444b      	add	r3, r9
 800dcb0:	106d      	asrs	r5, r5, #1
 800dcb2:	429d      	cmp	r5, r3
 800dcb4:	bf38      	it	cc
 800dcb6:	461d      	movcc	r5, r3
 800dcb8:	0553      	lsls	r3, r2, #21
 800dcba:	d531      	bpl.n	800dd20 <__ssputs_r+0xa0>
 800dcbc:	4629      	mov	r1, r5
 800dcbe:	f7ff fe8f 	bl	800d9e0 <_malloc_r>
 800dcc2:	4606      	mov	r6, r0
 800dcc4:	b950      	cbnz	r0, 800dcdc <__ssputs_r+0x5c>
 800dcc6:	230c      	movs	r3, #12
 800dcc8:	f8ca 3000 	str.w	r3, [sl]
 800dccc:	89a3      	ldrh	r3, [r4, #12]
 800dcce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcd2:	81a3      	strh	r3, [r4, #12]
 800dcd4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcdc:	6921      	ldr	r1, [r4, #16]
 800dcde:	464a      	mov	r2, r9
 800dce0:	f7ff fe68 	bl	800d9b4 <memcpy>
 800dce4:	89a3      	ldrh	r3, [r4, #12]
 800dce6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dcea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcee:	81a3      	strh	r3, [r4, #12]
 800dcf0:	6126      	str	r6, [r4, #16]
 800dcf2:	6165      	str	r5, [r4, #20]
 800dcf4:	444e      	add	r6, r9
 800dcf6:	eba5 0509 	sub.w	r5, r5, r9
 800dcfa:	6026      	str	r6, [r4, #0]
 800dcfc:	60a5      	str	r5, [r4, #8]
 800dcfe:	463e      	mov	r6, r7
 800dd00:	42be      	cmp	r6, r7
 800dd02:	d900      	bls.n	800dd06 <__ssputs_r+0x86>
 800dd04:	463e      	mov	r6, r7
 800dd06:	4632      	mov	r2, r6
 800dd08:	6820      	ldr	r0, [r4, #0]
 800dd0a:	4641      	mov	r1, r8
 800dd0c:	f000 faa8 	bl	800e260 <memmove>
 800dd10:	68a3      	ldr	r3, [r4, #8]
 800dd12:	6822      	ldr	r2, [r4, #0]
 800dd14:	1b9b      	subs	r3, r3, r6
 800dd16:	4432      	add	r2, r6
 800dd18:	60a3      	str	r3, [r4, #8]
 800dd1a:	6022      	str	r2, [r4, #0]
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	e7db      	b.n	800dcd8 <__ssputs_r+0x58>
 800dd20:	462a      	mov	r2, r5
 800dd22:	f000 fab7 	bl	800e294 <_realloc_r>
 800dd26:	4606      	mov	r6, r0
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	d1e1      	bne.n	800dcf0 <__ssputs_r+0x70>
 800dd2c:	6921      	ldr	r1, [r4, #16]
 800dd2e:	4650      	mov	r0, sl
 800dd30:	f7ff ff56 	bl	800dbe0 <_free_r>
 800dd34:	e7c7      	b.n	800dcc6 <__ssputs_r+0x46>
	...

0800dd38 <_svfiprintf_r>:
 800dd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd3c:	4698      	mov	r8, r3
 800dd3e:	898b      	ldrh	r3, [r1, #12]
 800dd40:	061b      	lsls	r3, r3, #24
 800dd42:	b09d      	sub	sp, #116	; 0x74
 800dd44:	4607      	mov	r7, r0
 800dd46:	460d      	mov	r5, r1
 800dd48:	4614      	mov	r4, r2
 800dd4a:	d50e      	bpl.n	800dd6a <_svfiprintf_r+0x32>
 800dd4c:	690b      	ldr	r3, [r1, #16]
 800dd4e:	b963      	cbnz	r3, 800dd6a <_svfiprintf_r+0x32>
 800dd50:	2140      	movs	r1, #64	; 0x40
 800dd52:	f7ff fe45 	bl	800d9e0 <_malloc_r>
 800dd56:	6028      	str	r0, [r5, #0]
 800dd58:	6128      	str	r0, [r5, #16]
 800dd5a:	b920      	cbnz	r0, 800dd66 <_svfiprintf_r+0x2e>
 800dd5c:	230c      	movs	r3, #12
 800dd5e:	603b      	str	r3, [r7, #0]
 800dd60:	f04f 30ff 	mov.w	r0, #4294967295
 800dd64:	e0d1      	b.n	800df0a <_svfiprintf_r+0x1d2>
 800dd66:	2340      	movs	r3, #64	; 0x40
 800dd68:	616b      	str	r3, [r5, #20]
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	9309      	str	r3, [sp, #36]	; 0x24
 800dd6e:	2320      	movs	r3, #32
 800dd70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd74:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd78:	2330      	movs	r3, #48	; 0x30
 800dd7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800df24 <_svfiprintf_r+0x1ec>
 800dd7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd82:	f04f 0901 	mov.w	r9, #1
 800dd86:	4623      	mov	r3, r4
 800dd88:	469a      	mov	sl, r3
 800dd8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd8e:	b10a      	cbz	r2, 800dd94 <_svfiprintf_r+0x5c>
 800dd90:	2a25      	cmp	r2, #37	; 0x25
 800dd92:	d1f9      	bne.n	800dd88 <_svfiprintf_r+0x50>
 800dd94:	ebba 0b04 	subs.w	fp, sl, r4
 800dd98:	d00b      	beq.n	800ddb2 <_svfiprintf_r+0x7a>
 800dd9a:	465b      	mov	r3, fp
 800dd9c:	4622      	mov	r2, r4
 800dd9e:	4629      	mov	r1, r5
 800dda0:	4638      	mov	r0, r7
 800dda2:	f7ff ff6d 	bl	800dc80 <__ssputs_r>
 800dda6:	3001      	adds	r0, #1
 800dda8:	f000 80aa 	beq.w	800df00 <_svfiprintf_r+0x1c8>
 800ddac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddae:	445a      	add	r2, fp
 800ddb0:	9209      	str	r2, [sp, #36]	; 0x24
 800ddb2:	f89a 3000 	ldrb.w	r3, [sl]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	f000 80a2 	beq.w	800df00 <_svfiprintf_r+0x1c8>
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	f04f 32ff 	mov.w	r2, #4294967295
 800ddc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddc6:	f10a 0a01 	add.w	sl, sl, #1
 800ddca:	9304      	str	r3, [sp, #16]
 800ddcc:	9307      	str	r3, [sp, #28]
 800ddce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddd2:	931a      	str	r3, [sp, #104]	; 0x68
 800ddd4:	4654      	mov	r4, sl
 800ddd6:	2205      	movs	r2, #5
 800ddd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dddc:	4851      	ldr	r0, [pc, #324]	; (800df24 <_svfiprintf_r+0x1ec>)
 800ddde:	f7f2 fa17 	bl	8000210 <memchr>
 800dde2:	9a04      	ldr	r2, [sp, #16]
 800dde4:	b9d8      	cbnz	r0, 800de1e <_svfiprintf_r+0xe6>
 800dde6:	06d0      	lsls	r0, r2, #27
 800dde8:	bf44      	itt	mi
 800ddea:	2320      	movmi	r3, #32
 800ddec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddf0:	0711      	lsls	r1, r2, #28
 800ddf2:	bf44      	itt	mi
 800ddf4:	232b      	movmi	r3, #43	; 0x2b
 800ddf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddfa:	f89a 3000 	ldrb.w	r3, [sl]
 800ddfe:	2b2a      	cmp	r3, #42	; 0x2a
 800de00:	d015      	beq.n	800de2e <_svfiprintf_r+0xf6>
 800de02:	9a07      	ldr	r2, [sp, #28]
 800de04:	4654      	mov	r4, sl
 800de06:	2000      	movs	r0, #0
 800de08:	f04f 0c0a 	mov.w	ip, #10
 800de0c:	4621      	mov	r1, r4
 800de0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de12:	3b30      	subs	r3, #48	; 0x30
 800de14:	2b09      	cmp	r3, #9
 800de16:	d94e      	bls.n	800deb6 <_svfiprintf_r+0x17e>
 800de18:	b1b0      	cbz	r0, 800de48 <_svfiprintf_r+0x110>
 800de1a:	9207      	str	r2, [sp, #28]
 800de1c:	e014      	b.n	800de48 <_svfiprintf_r+0x110>
 800de1e:	eba0 0308 	sub.w	r3, r0, r8
 800de22:	fa09 f303 	lsl.w	r3, r9, r3
 800de26:	4313      	orrs	r3, r2
 800de28:	9304      	str	r3, [sp, #16]
 800de2a:	46a2      	mov	sl, r4
 800de2c:	e7d2      	b.n	800ddd4 <_svfiprintf_r+0x9c>
 800de2e:	9b03      	ldr	r3, [sp, #12]
 800de30:	1d19      	adds	r1, r3, #4
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	9103      	str	r1, [sp, #12]
 800de36:	2b00      	cmp	r3, #0
 800de38:	bfbb      	ittet	lt
 800de3a:	425b      	neglt	r3, r3
 800de3c:	f042 0202 	orrlt.w	r2, r2, #2
 800de40:	9307      	strge	r3, [sp, #28]
 800de42:	9307      	strlt	r3, [sp, #28]
 800de44:	bfb8      	it	lt
 800de46:	9204      	strlt	r2, [sp, #16]
 800de48:	7823      	ldrb	r3, [r4, #0]
 800de4a:	2b2e      	cmp	r3, #46	; 0x2e
 800de4c:	d10c      	bne.n	800de68 <_svfiprintf_r+0x130>
 800de4e:	7863      	ldrb	r3, [r4, #1]
 800de50:	2b2a      	cmp	r3, #42	; 0x2a
 800de52:	d135      	bne.n	800dec0 <_svfiprintf_r+0x188>
 800de54:	9b03      	ldr	r3, [sp, #12]
 800de56:	1d1a      	adds	r2, r3, #4
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	9203      	str	r2, [sp, #12]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	bfb8      	it	lt
 800de60:	f04f 33ff 	movlt.w	r3, #4294967295
 800de64:	3402      	adds	r4, #2
 800de66:	9305      	str	r3, [sp, #20]
 800de68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800df34 <_svfiprintf_r+0x1fc>
 800de6c:	7821      	ldrb	r1, [r4, #0]
 800de6e:	2203      	movs	r2, #3
 800de70:	4650      	mov	r0, sl
 800de72:	f7f2 f9cd 	bl	8000210 <memchr>
 800de76:	b140      	cbz	r0, 800de8a <_svfiprintf_r+0x152>
 800de78:	2340      	movs	r3, #64	; 0x40
 800de7a:	eba0 000a 	sub.w	r0, r0, sl
 800de7e:	fa03 f000 	lsl.w	r0, r3, r0
 800de82:	9b04      	ldr	r3, [sp, #16]
 800de84:	4303      	orrs	r3, r0
 800de86:	3401      	adds	r4, #1
 800de88:	9304      	str	r3, [sp, #16]
 800de8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de8e:	4826      	ldr	r0, [pc, #152]	; (800df28 <_svfiprintf_r+0x1f0>)
 800de90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de94:	2206      	movs	r2, #6
 800de96:	f7f2 f9bb 	bl	8000210 <memchr>
 800de9a:	2800      	cmp	r0, #0
 800de9c:	d038      	beq.n	800df10 <_svfiprintf_r+0x1d8>
 800de9e:	4b23      	ldr	r3, [pc, #140]	; (800df2c <_svfiprintf_r+0x1f4>)
 800dea0:	bb1b      	cbnz	r3, 800deea <_svfiprintf_r+0x1b2>
 800dea2:	9b03      	ldr	r3, [sp, #12]
 800dea4:	3307      	adds	r3, #7
 800dea6:	f023 0307 	bic.w	r3, r3, #7
 800deaa:	3308      	adds	r3, #8
 800deac:	9303      	str	r3, [sp, #12]
 800deae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deb0:	4433      	add	r3, r6
 800deb2:	9309      	str	r3, [sp, #36]	; 0x24
 800deb4:	e767      	b.n	800dd86 <_svfiprintf_r+0x4e>
 800deb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800deba:	460c      	mov	r4, r1
 800debc:	2001      	movs	r0, #1
 800debe:	e7a5      	b.n	800de0c <_svfiprintf_r+0xd4>
 800dec0:	2300      	movs	r3, #0
 800dec2:	3401      	adds	r4, #1
 800dec4:	9305      	str	r3, [sp, #20]
 800dec6:	4619      	mov	r1, r3
 800dec8:	f04f 0c0a 	mov.w	ip, #10
 800decc:	4620      	mov	r0, r4
 800dece:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ded2:	3a30      	subs	r2, #48	; 0x30
 800ded4:	2a09      	cmp	r2, #9
 800ded6:	d903      	bls.n	800dee0 <_svfiprintf_r+0x1a8>
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d0c5      	beq.n	800de68 <_svfiprintf_r+0x130>
 800dedc:	9105      	str	r1, [sp, #20]
 800dede:	e7c3      	b.n	800de68 <_svfiprintf_r+0x130>
 800dee0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dee4:	4604      	mov	r4, r0
 800dee6:	2301      	movs	r3, #1
 800dee8:	e7f0      	b.n	800decc <_svfiprintf_r+0x194>
 800deea:	ab03      	add	r3, sp, #12
 800deec:	9300      	str	r3, [sp, #0]
 800deee:	462a      	mov	r2, r5
 800def0:	4b0f      	ldr	r3, [pc, #60]	; (800df30 <_svfiprintf_r+0x1f8>)
 800def2:	a904      	add	r1, sp, #16
 800def4:	4638      	mov	r0, r7
 800def6:	f3af 8000 	nop.w
 800defa:	1c42      	adds	r2, r0, #1
 800defc:	4606      	mov	r6, r0
 800defe:	d1d6      	bne.n	800deae <_svfiprintf_r+0x176>
 800df00:	89ab      	ldrh	r3, [r5, #12]
 800df02:	065b      	lsls	r3, r3, #25
 800df04:	f53f af2c 	bmi.w	800dd60 <_svfiprintf_r+0x28>
 800df08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df0a:	b01d      	add	sp, #116	; 0x74
 800df0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df10:	ab03      	add	r3, sp, #12
 800df12:	9300      	str	r3, [sp, #0]
 800df14:	462a      	mov	r2, r5
 800df16:	4b06      	ldr	r3, [pc, #24]	; (800df30 <_svfiprintf_r+0x1f8>)
 800df18:	a904      	add	r1, sp, #16
 800df1a:	4638      	mov	r0, r7
 800df1c:	f000 f87a 	bl	800e014 <_printf_i>
 800df20:	e7eb      	b.n	800defa <_svfiprintf_r+0x1c2>
 800df22:	bf00      	nop
 800df24:	080103d4 	.word	0x080103d4
 800df28:	080103de 	.word	0x080103de
 800df2c:	00000000 	.word	0x00000000
 800df30:	0800dc81 	.word	0x0800dc81
 800df34:	080103da 	.word	0x080103da

0800df38 <_printf_common>:
 800df38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df3c:	4616      	mov	r6, r2
 800df3e:	4699      	mov	r9, r3
 800df40:	688a      	ldr	r2, [r1, #8]
 800df42:	690b      	ldr	r3, [r1, #16]
 800df44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800df48:	4293      	cmp	r3, r2
 800df4a:	bfb8      	it	lt
 800df4c:	4613      	movlt	r3, r2
 800df4e:	6033      	str	r3, [r6, #0]
 800df50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800df54:	4607      	mov	r7, r0
 800df56:	460c      	mov	r4, r1
 800df58:	b10a      	cbz	r2, 800df5e <_printf_common+0x26>
 800df5a:	3301      	adds	r3, #1
 800df5c:	6033      	str	r3, [r6, #0]
 800df5e:	6823      	ldr	r3, [r4, #0]
 800df60:	0699      	lsls	r1, r3, #26
 800df62:	bf42      	ittt	mi
 800df64:	6833      	ldrmi	r3, [r6, #0]
 800df66:	3302      	addmi	r3, #2
 800df68:	6033      	strmi	r3, [r6, #0]
 800df6a:	6825      	ldr	r5, [r4, #0]
 800df6c:	f015 0506 	ands.w	r5, r5, #6
 800df70:	d106      	bne.n	800df80 <_printf_common+0x48>
 800df72:	f104 0a19 	add.w	sl, r4, #25
 800df76:	68e3      	ldr	r3, [r4, #12]
 800df78:	6832      	ldr	r2, [r6, #0]
 800df7a:	1a9b      	subs	r3, r3, r2
 800df7c:	42ab      	cmp	r3, r5
 800df7e:	dc26      	bgt.n	800dfce <_printf_common+0x96>
 800df80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800df84:	1e13      	subs	r3, r2, #0
 800df86:	6822      	ldr	r2, [r4, #0]
 800df88:	bf18      	it	ne
 800df8a:	2301      	movne	r3, #1
 800df8c:	0692      	lsls	r2, r2, #26
 800df8e:	d42b      	bmi.n	800dfe8 <_printf_common+0xb0>
 800df90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800df94:	4649      	mov	r1, r9
 800df96:	4638      	mov	r0, r7
 800df98:	47c0      	blx	r8
 800df9a:	3001      	adds	r0, #1
 800df9c:	d01e      	beq.n	800dfdc <_printf_common+0xa4>
 800df9e:	6823      	ldr	r3, [r4, #0]
 800dfa0:	68e5      	ldr	r5, [r4, #12]
 800dfa2:	6832      	ldr	r2, [r6, #0]
 800dfa4:	f003 0306 	and.w	r3, r3, #6
 800dfa8:	2b04      	cmp	r3, #4
 800dfaa:	bf08      	it	eq
 800dfac:	1aad      	subeq	r5, r5, r2
 800dfae:	68a3      	ldr	r3, [r4, #8]
 800dfb0:	6922      	ldr	r2, [r4, #16]
 800dfb2:	bf0c      	ite	eq
 800dfb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dfb8:	2500      	movne	r5, #0
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	bfc4      	itt	gt
 800dfbe:	1a9b      	subgt	r3, r3, r2
 800dfc0:	18ed      	addgt	r5, r5, r3
 800dfc2:	2600      	movs	r6, #0
 800dfc4:	341a      	adds	r4, #26
 800dfc6:	42b5      	cmp	r5, r6
 800dfc8:	d11a      	bne.n	800e000 <_printf_common+0xc8>
 800dfca:	2000      	movs	r0, #0
 800dfcc:	e008      	b.n	800dfe0 <_printf_common+0xa8>
 800dfce:	2301      	movs	r3, #1
 800dfd0:	4652      	mov	r2, sl
 800dfd2:	4649      	mov	r1, r9
 800dfd4:	4638      	mov	r0, r7
 800dfd6:	47c0      	blx	r8
 800dfd8:	3001      	adds	r0, #1
 800dfda:	d103      	bne.n	800dfe4 <_printf_common+0xac>
 800dfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfe4:	3501      	adds	r5, #1
 800dfe6:	e7c6      	b.n	800df76 <_printf_common+0x3e>
 800dfe8:	18e1      	adds	r1, r4, r3
 800dfea:	1c5a      	adds	r2, r3, #1
 800dfec:	2030      	movs	r0, #48	; 0x30
 800dfee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dff2:	4422      	add	r2, r4
 800dff4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dff8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dffc:	3302      	adds	r3, #2
 800dffe:	e7c7      	b.n	800df90 <_printf_common+0x58>
 800e000:	2301      	movs	r3, #1
 800e002:	4622      	mov	r2, r4
 800e004:	4649      	mov	r1, r9
 800e006:	4638      	mov	r0, r7
 800e008:	47c0      	blx	r8
 800e00a:	3001      	adds	r0, #1
 800e00c:	d0e6      	beq.n	800dfdc <_printf_common+0xa4>
 800e00e:	3601      	adds	r6, #1
 800e010:	e7d9      	b.n	800dfc6 <_printf_common+0x8e>
	...

0800e014 <_printf_i>:
 800e014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e018:	460c      	mov	r4, r1
 800e01a:	4691      	mov	r9, r2
 800e01c:	7e27      	ldrb	r7, [r4, #24]
 800e01e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e020:	2f78      	cmp	r7, #120	; 0x78
 800e022:	4680      	mov	r8, r0
 800e024:	469a      	mov	sl, r3
 800e026:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e02a:	d807      	bhi.n	800e03c <_printf_i+0x28>
 800e02c:	2f62      	cmp	r7, #98	; 0x62
 800e02e:	d80a      	bhi.n	800e046 <_printf_i+0x32>
 800e030:	2f00      	cmp	r7, #0
 800e032:	f000 80d8 	beq.w	800e1e6 <_printf_i+0x1d2>
 800e036:	2f58      	cmp	r7, #88	; 0x58
 800e038:	f000 80a3 	beq.w	800e182 <_printf_i+0x16e>
 800e03c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e040:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e044:	e03a      	b.n	800e0bc <_printf_i+0xa8>
 800e046:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e04a:	2b15      	cmp	r3, #21
 800e04c:	d8f6      	bhi.n	800e03c <_printf_i+0x28>
 800e04e:	a001      	add	r0, pc, #4	; (adr r0, 800e054 <_printf_i+0x40>)
 800e050:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e054:	0800e0ad 	.word	0x0800e0ad
 800e058:	0800e0c1 	.word	0x0800e0c1
 800e05c:	0800e03d 	.word	0x0800e03d
 800e060:	0800e03d 	.word	0x0800e03d
 800e064:	0800e03d 	.word	0x0800e03d
 800e068:	0800e03d 	.word	0x0800e03d
 800e06c:	0800e0c1 	.word	0x0800e0c1
 800e070:	0800e03d 	.word	0x0800e03d
 800e074:	0800e03d 	.word	0x0800e03d
 800e078:	0800e03d 	.word	0x0800e03d
 800e07c:	0800e03d 	.word	0x0800e03d
 800e080:	0800e1cd 	.word	0x0800e1cd
 800e084:	0800e0f1 	.word	0x0800e0f1
 800e088:	0800e1af 	.word	0x0800e1af
 800e08c:	0800e03d 	.word	0x0800e03d
 800e090:	0800e03d 	.word	0x0800e03d
 800e094:	0800e1ef 	.word	0x0800e1ef
 800e098:	0800e03d 	.word	0x0800e03d
 800e09c:	0800e0f1 	.word	0x0800e0f1
 800e0a0:	0800e03d 	.word	0x0800e03d
 800e0a4:	0800e03d 	.word	0x0800e03d
 800e0a8:	0800e1b7 	.word	0x0800e1b7
 800e0ac:	680b      	ldr	r3, [r1, #0]
 800e0ae:	1d1a      	adds	r2, r3, #4
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	600a      	str	r2, [r1, #0]
 800e0b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e0b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e0bc:	2301      	movs	r3, #1
 800e0be:	e0a3      	b.n	800e208 <_printf_i+0x1f4>
 800e0c0:	6825      	ldr	r5, [r4, #0]
 800e0c2:	6808      	ldr	r0, [r1, #0]
 800e0c4:	062e      	lsls	r6, r5, #24
 800e0c6:	f100 0304 	add.w	r3, r0, #4
 800e0ca:	d50a      	bpl.n	800e0e2 <_printf_i+0xce>
 800e0cc:	6805      	ldr	r5, [r0, #0]
 800e0ce:	600b      	str	r3, [r1, #0]
 800e0d0:	2d00      	cmp	r5, #0
 800e0d2:	da03      	bge.n	800e0dc <_printf_i+0xc8>
 800e0d4:	232d      	movs	r3, #45	; 0x2d
 800e0d6:	426d      	negs	r5, r5
 800e0d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0dc:	485e      	ldr	r0, [pc, #376]	; (800e258 <_printf_i+0x244>)
 800e0de:	230a      	movs	r3, #10
 800e0e0:	e019      	b.n	800e116 <_printf_i+0x102>
 800e0e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e0e6:	6805      	ldr	r5, [r0, #0]
 800e0e8:	600b      	str	r3, [r1, #0]
 800e0ea:	bf18      	it	ne
 800e0ec:	b22d      	sxthne	r5, r5
 800e0ee:	e7ef      	b.n	800e0d0 <_printf_i+0xbc>
 800e0f0:	680b      	ldr	r3, [r1, #0]
 800e0f2:	6825      	ldr	r5, [r4, #0]
 800e0f4:	1d18      	adds	r0, r3, #4
 800e0f6:	6008      	str	r0, [r1, #0]
 800e0f8:	0628      	lsls	r0, r5, #24
 800e0fa:	d501      	bpl.n	800e100 <_printf_i+0xec>
 800e0fc:	681d      	ldr	r5, [r3, #0]
 800e0fe:	e002      	b.n	800e106 <_printf_i+0xf2>
 800e100:	0669      	lsls	r1, r5, #25
 800e102:	d5fb      	bpl.n	800e0fc <_printf_i+0xe8>
 800e104:	881d      	ldrh	r5, [r3, #0]
 800e106:	4854      	ldr	r0, [pc, #336]	; (800e258 <_printf_i+0x244>)
 800e108:	2f6f      	cmp	r7, #111	; 0x6f
 800e10a:	bf0c      	ite	eq
 800e10c:	2308      	moveq	r3, #8
 800e10e:	230a      	movne	r3, #10
 800e110:	2100      	movs	r1, #0
 800e112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e116:	6866      	ldr	r6, [r4, #4]
 800e118:	60a6      	str	r6, [r4, #8]
 800e11a:	2e00      	cmp	r6, #0
 800e11c:	bfa2      	ittt	ge
 800e11e:	6821      	ldrge	r1, [r4, #0]
 800e120:	f021 0104 	bicge.w	r1, r1, #4
 800e124:	6021      	strge	r1, [r4, #0]
 800e126:	b90d      	cbnz	r5, 800e12c <_printf_i+0x118>
 800e128:	2e00      	cmp	r6, #0
 800e12a:	d04d      	beq.n	800e1c8 <_printf_i+0x1b4>
 800e12c:	4616      	mov	r6, r2
 800e12e:	fbb5 f1f3 	udiv	r1, r5, r3
 800e132:	fb03 5711 	mls	r7, r3, r1, r5
 800e136:	5dc7      	ldrb	r7, [r0, r7]
 800e138:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e13c:	462f      	mov	r7, r5
 800e13e:	42bb      	cmp	r3, r7
 800e140:	460d      	mov	r5, r1
 800e142:	d9f4      	bls.n	800e12e <_printf_i+0x11a>
 800e144:	2b08      	cmp	r3, #8
 800e146:	d10b      	bne.n	800e160 <_printf_i+0x14c>
 800e148:	6823      	ldr	r3, [r4, #0]
 800e14a:	07df      	lsls	r7, r3, #31
 800e14c:	d508      	bpl.n	800e160 <_printf_i+0x14c>
 800e14e:	6923      	ldr	r3, [r4, #16]
 800e150:	6861      	ldr	r1, [r4, #4]
 800e152:	4299      	cmp	r1, r3
 800e154:	bfde      	ittt	le
 800e156:	2330      	movle	r3, #48	; 0x30
 800e158:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e15c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e160:	1b92      	subs	r2, r2, r6
 800e162:	6122      	str	r2, [r4, #16]
 800e164:	f8cd a000 	str.w	sl, [sp]
 800e168:	464b      	mov	r3, r9
 800e16a:	aa03      	add	r2, sp, #12
 800e16c:	4621      	mov	r1, r4
 800e16e:	4640      	mov	r0, r8
 800e170:	f7ff fee2 	bl	800df38 <_printf_common>
 800e174:	3001      	adds	r0, #1
 800e176:	d14c      	bne.n	800e212 <_printf_i+0x1fe>
 800e178:	f04f 30ff 	mov.w	r0, #4294967295
 800e17c:	b004      	add	sp, #16
 800e17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e182:	4835      	ldr	r0, [pc, #212]	; (800e258 <_printf_i+0x244>)
 800e184:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e188:	6823      	ldr	r3, [r4, #0]
 800e18a:	680e      	ldr	r6, [r1, #0]
 800e18c:	061f      	lsls	r7, r3, #24
 800e18e:	f856 5b04 	ldr.w	r5, [r6], #4
 800e192:	600e      	str	r6, [r1, #0]
 800e194:	d514      	bpl.n	800e1c0 <_printf_i+0x1ac>
 800e196:	07d9      	lsls	r1, r3, #31
 800e198:	bf44      	itt	mi
 800e19a:	f043 0320 	orrmi.w	r3, r3, #32
 800e19e:	6023      	strmi	r3, [r4, #0]
 800e1a0:	b91d      	cbnz	r5, 800e1aa <_printf_i+0x196>
 800e1a2:	6823      	ldr	r3, [r4, #0]
 800e1a4:	f023 0320 	bic.w	r3, r3, #32
 800e1a8:	6023      	str	r3, [r4, #0]
 800e1aa:	2310      	movs	r3, #16
 800e1ac:	e7b0      	b.n	800e110 <_printf_i+0xfc>
 800e1ae:	6823      	ldr	r3, [r4, #0]
 800e1b0:	f043 0320 	orr.w	r3, r3, #32
 800e1b4:	6023      	str	r3, [r4, #0]
 800e1b6:	2378      	movs	r3, #120	; 0x78
 800e1b8:	4828      	ldr	r0, [pc, #160]	; (800e25c <_printf_i+0x248>)
 800e1ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e1be:	e7e3      	b.n	800e188 <_printf_i+0x174>
 800e1c0:	065e      	lsls	r6, r3, #25
 800e1c2:	bf48      	it	mi
 800e1c4:	b2ad      	uxthmi	r5, r5
 800e1c6:	e7e6      	b.n	800e196 <_printf_i+0x182>
 800e1c8:	4616      	mov	r6, r2
 800e1ca:	e7bb      	b.n	800e144 <_printf_i+0x130>
 800e1cc:	680b      	ldr	r3, [r1, #0]
 800e1ce:	6826      	ldr	r6, [r4, #0]
 800e1d0:	6960      	ldr	r0, [r4, #20]
 800e1d2:	1d1d      	adds	r5, r3, #4
 800e1d4:	600d      	str	r5, [r1, #0]
 800e1d6:	0635      	lsls	r5, r6, #24
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	d501      	bpl.n	800e1e0 <_printf_i+0x1cc>
 800e1dc:	6018      	str	r0, [r3, #0]
 800e1de:	e002      	b.n	800e1e6 <_printf_i+0x1d2>
 800e1e0:	0671      	lsls	r1, r6, #25
 800e1e2:	d5fb      	bpl.n	800e1dc <_printf_i+0x1c8>
 800e1e4:	8018      	strh	r0, [r3, #0]
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	6123      	str	r3, [r4, #16]
 800e1ea:	4616      	mov	r6, r2
 800e1ec:	e7ba      	b.n	800e164 <_printf_i+0x150>
 800e1ee:	680b      	ldr	r3, [r1, #0]
 800e1f0:	1d1a      	adds	r2, r3, #4
 800e1f2:	600a      	str	r2, [r1, #0]
 800e1f4:	681e      	ldr	r6, [r3, #0]
 800e1f6:	6862      	ldr	r2, [r4, #4]
 800e1f8:	2100      	movs	r1, #0
 800e1fa:	4630      	mov	r0, r6
 800e1fc:	f7f2 f808 	bl	8000210 <memchr>
 800e200:	b108      	cbz	r0, 800e206 <_printf_i+0x1f2>
 800e202:	1b80      	subs	r0, r0, r6
 800e204:	6060      	str	r0, [r4, #4]
 800e206:	6863      	ldr	r3, [r4, #4]
 800e208:	6123      	str	r3, [r4, #16]
 800e20a:	2300      	movs	r3, #0
 800e20c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e210:	e7a8      	b.n	800e164 <_printf_i+0x150>
 800e212:	6923      	ldr	r3, [r4, #16]
 800e214:	4632      	mov	r2, r6
 800e216:	4649      	mov	r1, r9
 800e218:	4640      	mov	r0, r8
 800e21a:	47d0      	blx	sl
 800e21c:	3001      	adds	r0, #1
 800e21e:	d0ab      	beq.n	800e178 <_printf_i+0x164>
 800e220:	6823      	ldr	r3, [r4, #0]
 800e222:	079b      	lsls	r3, r3, #30
 800e224:	d413      	bmi.n	800e24e <_printf_i+0x23a>
 800e226:	68e0      	ldr	r0, [r4, #12]
 800e228:	9b03      	ldr	r3, [sp, #12]
 800e22a:	4298      	cmp	r0, r3
 800e22c:	bfb8      	it	lt
 800e22e:	4618      	movlt	r0, r3
 800e230:	e7a4      	b.n	800e17c <_printf_i+0x168>
 800e232:	2301      	movs	r3, #1
 800e234:	4632      	mov	r2, r6
 800e236:	4649      	mov	r1, r9
 800e238:	4640      	mov	r0, r8
 800e23a:	47d0      	blx	sl
 800e23c:	3001      	adds	r0, #1
 800e23e:	d09b      	beq.n	800e178 <_printf_i+0x164>
 800e240:	3501      	adds	r5, #1
 800e242:	68e3      	ldr	r3, [r4, #12]
 800e244:	9903      	ldr	r1, [sp, #12]
 800e246:	1a5b      	subs	r3, r3, r1
 800e248:	42ab      	cmp	r3, r5
 800e24a:	dcf2      	bgt.n	800e232 <_printf_i+0x21e>
 800e24c:	e7eb      	b.n	800e226 <_printf_i+0x212>
 800e24e:	2500      	movs	r5, #0
 800e250:	f104 0619 	add.w	r6, r4, #25
 800e254:	e7f5      	b.n	800e242 <_printf_i+0x22e>
 800e256:	bf00      	nop
 800e258:	080103e5 	.word	0x080103e5
 800e25c:	080103f6 	.word	0x080103f6

0800e260 <memmove>:
 800e260:	4288      	cmp	r0, r1
 800e262:	b510      	push	{r4, lr}
 800e264:	eb01 0402 	add.w	r4, r1, r2
 800e268:	d902      	bls.n	800e270 <memmove+0x10>
 800e26a:	4284      	cmp	r4, r0
 800e26c:	4623      	mov	r3, r4
 800e26e:	d807      	bhi.n	800e280 <memmove+0x20>
 800e270:	1e43      	subs	r3, r0, #1
 800e272:	42a1      	cmp	r1, r4
 800e274:	d008      	beq.n	800e288 <memmove+0x28>
 800e276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e27a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e27e:	e7f8      	b.n	800e272 <memmove+0x12>
 800e280:	4402      	add	r2, r0
 800e282:	4601      	mov	r1, r0
 800e284:	428a      	cmp	r2, r1
 800e286:	d100      	bne.n	800e28a <memmove+0x2a>
 800e288:	bd10      	pop	{r4, pc}
 800e28a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e28e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e292:	e7f7      	b.n	800e284 <memmove+0x24>

0800e294 <_realloc_r>:
 800e294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e296:	4607      	mov	r7, r0
 800e298:	4614      	mov	r4, r2
 800e29a:	460e      	mov	r6, r1
 800e29c:	b921      	cbnz	r1, 800e2a8 <_realloc_r+0x14>
 800e29e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e2a2:	4611      	mov	r1, r2
 800e2a4:	f7ff bb9c 	b.w	800d9e0 <_malloc_r>
 800e2a8:	b922      	cbnz	r2, 800e2b4 <_realloc_r+0x20>
 800e2aa:	f7ff fc99 	bl	800dbe0 <_free_r>
 800e2ae:	4625      	mov	r5, r4
 800e2b0:	4628      	mov	r0, r5
 800e2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2b4:	f000 f814 	bl	800e2e0 <_malloc_usable_size_r>
 800e2b8:	42a0      	cmp	r0, r4
 800e2ba:	d20f      	bcs.n	800e2dc <_realloc_r+0x48>
 800e2bc:	4621      	mov	r1, r4
 800e2be:	4638      	mov	r0, r7
 800e2c0:	f7ff fb8e 	bl	800d9e0 <_malloc_r>
 800e2c4:	4605      	mov	r5, r0
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	d0f2      	beq.n	800e2b0 <_realloc_r+0x1c>
 800e2ca:	4631      	mov	r1, r6
 800e2cc:	4622      	mov	r2, r4
 800e2ce:	f7ff fb71 	bl	800d9b4 <memcpy>
 800e2d2:	4631      	mov	r1, r6
 800e2d4:	4638      	mov	r0, r7
 800e2d6:	f7ff fc83 	bl	800dbe0 <_free_r>
 800e2da:	e7e9      	b.n	800e2b0 <_realloc_r+0x1c>
 800e2dc:	4635      	mov	r5, r6
 800e2de:	e7e7      	b.n	800e2b0 <_realloc_r+0x1c>

0800e2e0 <_malloc_usable_size_r>:
 800e2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2e4:	1f18      	subs	r0, r3, #4
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	bfbc      	itt	lt
 800e2ea:	580b      	ldrlt	r3, [r1, r0]
 800e2ec:	18c0      	addlt	r0, r0, r3
 800e2ee:	4770      	bx	lr

0800e2f0 <_init>:
 800e2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2f2:	bf00      	nop
 800e2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2f6:	bc08      	pop	{r3}
 800e2f8:	469e      	mov	lr, r3
 800e2fa:	4770      	bx	lr

0800e2fc <_fini>:
 800e2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2fe:	bf00      	nop
 800e300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e302:	bc08      	pop	{r3}
 800e304:	469e      	mov	lr, r3
 800e306:	4770      	bx	lr
