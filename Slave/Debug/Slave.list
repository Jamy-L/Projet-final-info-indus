
Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020c0  0800d878  0800d878  0001d878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f938  0800f938  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f938  0800f938  0001f938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f940  0800f940  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f940  0800f940  0001f940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f944  0800f944  0001f944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800f948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004934  200000c0  0800fa08  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049f4  0800fa08  000249f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032aa4  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d4c  00000000  00000000  00052b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002650  00000000  00000000  000588e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023f8  00000000  00000000  0005af30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e83a  00000000  00000000  0005d328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f968  00000000  00000000  0008bb62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117900  00000000  00000000  000bb4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d2dca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a5c8  00000000  00000000  001d2e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d860 	.word	0x0800d860

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	0800d860 	.word	0x0800d860

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200000dc 	.word	0x200000dc
 8000538:	20000190 	.word	0x20000190

0800053c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000546:	20c8      	movs	r0, #200	; 0xc8
 8000548:	f001 fff2 	bl	8002530 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800054c:	f000 f9b4 	bl	80008b8 <ft5336_I2C_InitializeIfRequired>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b084      	sub	sp, #16
 8000572:	af00      	add	r7, sp, #0
 8000574:	4603      	mov	r3, r0
 8000576:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000580:	2300      	movs	r3, #0
 8000582:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000584:	f000 f998 	bl	80008b8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e010      	b.n	80005b0 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	21a8      	movs	r1, #168	; 0xa8
 8000594:	4618      	mov	r0, r3
 8000596:	f001 ffad 	bl	80024f4 <TS_IO_Read>
 800059a:	4603      	mov	r3, r0
 800059c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800059e:	7b7b      	ldrb	r3, [r7, #13]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b51      	cmp	r3, #81	; 0x51
 80005a4:	d101      	bne.n	80005aa <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d802      	bhi.n	80005bc <ft5336_ReadID+0x4e>
 80005b6:	7bbb      	ldrb	r3, [r7, #14]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0e8      	beq.n	800058e <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005bc:	7b7b      	ldrb	r3, [r7, #13]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	b29b      	uxth	r3, r3
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	4603      	mov	r3, r0
 80005d2:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f97e 	bl	80008d8 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f932 	bl	8000848 <ft5336_TS_DisableIT>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f001 ff77 	bl	80024f4 <TS_IO_Read>
 8000606:	4603      	mov	r3, r0
 8000608:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	b2db      	uxtb	r3, r3
 8000614:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b05      	cmp	r3, #5
 800061c:	d901      	bls.n	8000622 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 8000628:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	b2db      	uxtb	r3, r3
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000390 	.word	0x20000390

08000640 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000662:	4b6d      	ldr	r3, [pc, #436]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000664:	789a      	ldrb	r2, [r3, #2]
 8000666:	4b6c      	ldr	r3, [pc, #432]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	429a      	cmp	r2, r3
 800066c:	f080 80cf 	bcs.w	800080e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000670:	4b69      	ldr	r3, [pc, #420]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	2b09      	cmp	r3, #9
 8000676:	d871      	bhi.n	800075c <ft5336_TS_GetXY+0x11c>
 8000678:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <ft5336_TS_GetXY+0x40>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	080006a9 	.word	0x080006a9
 8000684:	080006bb 	.word	0x080006bb
 8000688:	080006cd 	.word	0x080006cd
 800068c:	080006df 	.word	0x080006df
 8000690:	080006f1 	.word	0x080006f1
 8000694:	08000703 	.word	0x08000703
 8000698:	08000715 	.word	0x08000715
 800069c:	08000727 	.word	0x08000727
 80006a0:	08000739 	.word	0x08000739
 80006a4:	0800074b 	.word	0x0800074b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006a8:	2304      	movs	r3, #4
 80006aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006ac:	2303      	movs	r3, #3
 80006ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006b0:	2306      	movs	r3, #6
 80006b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006b4:	2305      	movs	r3, #5
 80006b6:	753b      	strb	r3, [r7, #20]
      break;
 80006b8:	e051      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006ba:	230a      	movs	r3, #10
 80006bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006be:	2309      	movs	r3, #9
 80006c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006c2:	230c      	movs	r3, #12
 80006c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80006c6:	230b      	movs	r3, #11
 80006c8:	753b      	strb	r3, [r7, #20]
      break;
 80006ca:	e048      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80006cc:	2310      	movs	r3, #16
 80006ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80006d0:	230f      	movs	r3, #15
 80006d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80006d4:	2312      	movs	r3, #18
 80006d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80006d8:	2311      	movs	r3, #17
 80006da:	753b      	strb	r3, [r7, #20]
      break;
 80006dc:	e03f      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80006de:	2316      	movs	r3, #22
 80006e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80006e2:	2315      	movs	r3, #21
 80006e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80006e6:	2318      	movs	r3, #24
 80006e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80006ea:	2317      	movs	r3, #23
 80006ec:	753b      	strb	r3, [r7, #20]
      break;
 80006ee:	e036      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80006f0:	231c      	movs	r3, #28
 80006f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80006f4:	231b      	movs	r3, #27
 80006f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80006f8:	231e      	movs	r3, #30
 80006fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80006fc:	231d      	movs	r3, #29
 80006fe:	753b      	strb	r3, [r7, #20]
      break;
 8000700:	e02d      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000702:	2322      	movs	r3, #34	; 0x22
 8000704:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000706:	2321      	movs	r3, #33	; 0x21
 8000708:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800070a:	2324      	movs	r3, #36	; 0x24
 800070c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800070e:	2323      	movs	r3, #35	; 0x23
 8000710:	753b      	strb	r3, [r7, #20]
      break;
 8000712:	e024      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000714:	2328      	movs	r3, #40	; 0x28
 8000716:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000718:	2327      	movs	r3, #39	; 0x27
 800071a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800071c:	232a      	movs	r3, #42	; 0x2a
 800071e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000720:	2329      	movs	r3, #41	; 0x29
 8000722:	753b      	strb	r3, [r7, #20]
      break;
 8000724:	e01b      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000726:	232e      	movs	r3, #46	; 0x2e
 8000728:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800072a:	232d      	movs	r3, #45	; 0x2d
 800072c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800072e:	2330      	movs	r3, #48	; 0x30
 8000730:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000732:	232f      	movs	r3, #47	; 0x2f
 8000734:	753b      	strb	r3, [r7, #20]
      break;
 8000736:	e012      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000738:	2334      	movs	r3, #52	; 0x34
 800073a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800073c:	2333      	movs	r3, #51	; 0x33
 800073e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000740:	2336      	movs	r3, #54	; 0x36
 8000742:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000744:	2335      	movs	r3, #53	; 0x35
 8000746:	753b      	strb	r3, [r7, #20]
      break;
 8000748:	e009      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800074a:	233a      	movs	r3, #58	; 0x3a
 800074c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800074e:	2339      	movs	r3, #57	; 0x39
 8000750:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000752:	233c      	movs	r3, #60	; 0x3c
 8000754:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000756:	233b      	movs	r3, #59	; 0x3b
 8000758:	753b      	strb	r3, [r7, #20]
      break;
 800075a:	e000      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 800075c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800075e:	89fb      	ldrh	r3, [r7, #14]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	7dfa      	ldrb	r2, [r7, #23]
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f001 fec4 	bl	80024f4 <TS_IO_Read>
 800076c:	4603      	mov	r3, r0
 800076e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000770:	7cfb      	ldrb	r3, [r7, #19]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 8000778:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	7dba      	ldrb	r2, [r7, #22]
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f001 feb6 	bl	80024f4 <TS_IO_Read>
 8000788:	4603      	mov	r3, r0
 800078a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800078c:	7cfb      	ldrb	r3, [r7, #19]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000796:	b21a      	sxth	r2, r3
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007a6:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007aa:	881a      	ldrh	r2, [r3, #0]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007b0:	89fb      	ldrh	r3, [r7, #14]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	7d7a      	ldrb	r2, [r7, #21]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fe9b 	bl	80024f4 <TS_IO_Read>
 80007be:	4603      	mov	r3, r0
 80007c0:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007c2:	7cfb      	ldrb	r3, [r7, #19]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ca:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80007cc:	89fb      	ldrh	r3, [r7, #14]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	7d3a      	ldrb	r2, [r7, #20]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 fe8d 	bl	80024f4 <TS_IO_Read>
 80007da:	4603      	mov	r3, r0
 80007dc:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007de:	7cfb      	ldrb	r3, [r7, #19]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007f8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007fc:	881a      	ldrh	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000804:	789b      	ldrb	r3, [r3, #2]
 8000806:	3301      	adds	r3, #1
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b03      	ldr	r3, [pc, #12]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 800080c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000390 	.word	0x20000390
 800081c:	20000394 	.word	0x20000394

08000820 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	7bfa      	ldrb	r2, [r7, #15]
 8000838:	21a4      	movs	r1, #164	; 0xa4
 800083a:	4618      	mov	r0, r3
 800083c:	f001 fe40 	bl	80024c0 <TS_IO_Write>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	7bfa      	ldrb	r2, [r7, #15]
 8000860:	21a4      	movs	r1, #164	; 0xa4
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fe2c 	bl	80024c0 <TS_IO_Write>
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20000390 	.word	0x20000390

080008b8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80008bc:	f7ff fff0 	bl	80008a0 <ft5336_Get_I2C_InitializedStatus>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d104      	bne.n	80008d0 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80008c6:	f001 fdf1 	bl	80024ac <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80008ca:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
  }
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000390 	.word	0x20000390

080008d8 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80008e6:	68fb      	ldr	r3, [r7, #12]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <test_hitbox>:
uint16_t y_viseur =100 ;

uint16_t x_ennemi =100 ;
uint16_t y_ennemi =100 ;

int test_hitbox(int x1, int y1, int x2, int y2){
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
 8000900:	603b      	str	r3, [r7, #0]
	if ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)<=400){
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	68f9      	ldr	r1, [r7, #12]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	1a8a      	subs	r2, r1, r2
 800090e:	fb02 f203 	mul.w	r2, r2, r3
 8000912:	68b9      	ldr	r1, [r7, #8]
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	1acb      	subs	r3, r1, r3
 8000918:	68b8      	ldr	r0, [r7, #8]
 800091a:	6839      	ldr	r1, [r7, #0]
 800091c:	1a41      	subs	r1, r0, r1
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	4413      	add	r3, r2
 8000924:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000928:	dc01      	bgt.n	800092e <test_hitbox+0x3a>
		return 1;
 800092a:	2301      	movs	r3, #1
 800092c:	e000      	b.n	8000930 <test_hitbox+0x3c>
	}
	else
		return 0;
 800092e:	2300      	movs	r3, #0
}
 8000930:	4618      	mov	r0, r3
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b5b0      	push	{r4, r5, r7, lr}
 800093e:	b0bc      	sub	sp, #240	; 0xf0
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000942:	f003 fc5e 	bl	8004202 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000946:	f000 f939 	bl	8000bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094a:	f000 ff05 	bl	8001758 <MX_GPIO_Init>
  MX_ADC3_Init();
 800094e:	f000 f9f9 	bl	8000d44 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8000952:	f000 fa73 	bl	8000e3c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000956:	f000 feaf 	bl	80016b8 <MX_FMC_Init>
  MX_I2C1_Init();
 800095a:	f000 faa1 	bl	8000ea0 <MX_I2C1_Init>
  MX_I2C3_Init();
 800095e:	f000 fadf 	bl	8000f20 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000962:	f000 fb1d 	bl	8000fa0 <MX_LTDC_Init>
  MX_RTC_Init();
 8000966:	f000 fb9d 	bl	80010a4 <MX_RTC_Init>
  MX_SPI2_Init();
 800096a:	f000 fc41 	bl	80011f0 <MX_SPI2_Init>
  MX_TIM1_Init();
 800096e:	f000 fc79 	bl	8001264 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000972:	f000 fccb 	bl	800130c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000976:	f000 fd17 	bl	80013a8 <MX_TIM3_Init>
  MX_TIM5_Init();
 800097a:	f000 fd63 	bl	8001444 <MX_TIM5_Init>
  MX_TIM8_Init();
 800097e:	f000 fdaf 	bl	80014e0 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000982:	f000 fe31 	bl	80015e8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000986:	f000 fe67 	bl	8001658 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800098a:	f000 f989 	bl	8000ca0 <MX_ADC1_Init>
  MX_DAC_Init();
 800098e:	f000 fa2b 	bl	8000de8 <MX_DAC_Init>
  MX_UART7_Init();
 8000992:	f000 fdf9 	bl	8001588 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000996:	f001 fdd7 	bl	8002548 <BSP_LCD_Init>
BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800099a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800099e:	2000      	movs	r0, #0
 80009a0:	f001 fe6a 	bl	8002678 <BSP_LCD_LayerDefaultInit>
BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 80009a4:	f001 fe40 	bl	8002628 <BSP_LCD_GetXSize>
 80009a8:	4604      	mov	r4, r0
 80009aa:	f001 fe51 	bl	8002650 <BSP_LCD_GetYSize>
 80009ae:	4603      	mov	r3, r0
 80009b0:	fb03 f304 	mul.w	r3, r3, r4
 80009b4:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4619      	mov	r1, r3
 80009bc:	2001      	movs	r0, #1
 80009be:	f001 fe5b 	bl	8002678 <BSP_LCD_LayerDefaultInit>
BSP_LCD_DisplayOn();
 80009c2:	f002 fa39 	bl	8002e38 <BSP_LCD_DisplayOn>
BSP_LCD_SelectLayer(0);
 80009c6:	2000      	movs	r0, #0
 80009c8:	f001 feb6 	bl	8002738 <BSP_LCD_SelectLayer>
//BSP_LCD_Clear(LCD_COLOR_GREEN);
BSP_LCD_SelectLayer(1);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f001 feb3 	bl	8002738 <BSP_LCD_SelectLayer>
BSP_LCD_Clear(00);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f001 ff0c 	bl	80027f0 <BSP_LCD_Clear>
BSP_LCD_SetFont(&Font12);
 80009d8:	4864      	ldr	r0, [pc, #400]	; (8000b6c <main+0x230>)
 80009da:	f001 feef 	bl	80027bc <BSP_LCD_SetFont>
BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80009de:	4864      	ldr	r0, [pc, #400]	; (8000b70 <main+0x234>)
 80009e0:	f001 feba 	bl	8002758 <BSP_LCD_SetTextColor>
BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 80009e4:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80009e8:	f001 fece 	bl	8002788 <BSP_LCD_SetBackColor>

BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80009ec:	f001 fe1c 	bl	8002628 <BSP_LCD_GetXSize>
 80009f0:	4603      	mov	r3, r0
 80009f2:	b29c      	uxth	r4, r3
 80009f4:	f001 fe2c 	bl	8002650 <BSP_LCD_GetYSize>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	4619      	mov	r1, r3
 80009fe:	4620      	mov	r0, r4
 8000a00:	f002 fd30 	bl	8003464 <BSP_TS_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Mutex_Ecran */
  osSemaphoreDef(Mutex_Ecran);
 8000a04:	2300      	movs	r3, #0
 8000a06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  Mutex_EcranHandle = osSemaphoreCreate(osSemaphore(Mutex_Ecran), 1);
 8000a10:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000a14:	2101      	movs	r1, #1
 8000a16:	4618      	mov	r0, r3
 8000a18:	f00a f9fb 	bl	800ae12 <osSemaphoreCreate>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4a55      	ldr	r2, [pc, #340]	; (8000b74 <main+0x238>)
 8000a20:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Queue_Tir */
  osMessageQDef(Queue_Tir, 16, uint16_t);
 8000a22:	4b55      	ldr	r3, [pc, #340]	; (8000b78 <main+0x23c>)
 8000a24:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8000a28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_TirHandle = osMessageCreate(osMessageQ(Queue_Tir), NULL);
 8000a2e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f00a fa1e 	bl	800ae76 <osMessageCreate>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4a4f      	ldr	r2, [pc, #316]	; (8000b7c <main+0x240>)
 8000a3e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Queue_hit */
  osMessageQDef(Queue_hit, 16, uint16_t);
 8000a40:	4b4d      	ldr	r3, [pc, #308]	; (8000b78 <main+0x23c>)
 8000a42:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_hitHandle = osMessageCreate(osMessageQ(Queue_hit), NULL);
 8000a4c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f00a fa0f 	bl	800ae76 <osMessageCreate>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4a49      	ldr	r2, [pc, #292]	; (8000b80 <main+0x244>)
 8000a5c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a5e:	4b49      	ldr	r3, [pc, #292]	; (8000b84 <main+0x248>)
 8000a60:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000a64:	461d      	mov	r5, r3
 8000a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f00a f96a 	bl	800ad52 <osThreadCreate>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	4a41      	ldr	r2, [pc, #260]	; (8000b88 <main+0x24c>)
 8000a82:	6013      	str	r3, [r2, #0]

  /* definition and creation of viseur */
  osThreadDef(viseur, Task_Viseur, osPriorityBelowNormal, 0, 128);
 8000a84:	4b41      	ldr	r3, [pc, #260]	; (8000b8c <main+0x250>)
 8000a86:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000a8a:	461d      	mov	r5, r3
 8000a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  viseurHandle = osThreadCreate(osThread(viseur), NULL);
 8000a98:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f00a f957 	bl	800ad52 <osThreadCreate>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	4a3a      	ldr	r2, [pc, #232]	; (8000b90 <main+0x254>)
 8000aa8:	6013      	str	r3, [r2, #0]

  /* definition and creation of tir */
  osThreadDef(tir, Task_Tir, osPriorityNormal, 0, 128);
 8000aaa:	4b3a      	ldr	r3, [pc, #232]	; (8000b94 <main+0x258>)
 8000aac:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000ab0:	461d      	mov	r5, r3
 8000ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tirHandle = osThreadCreate(osThread(tir), NULL);
 8000abe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f00a f944 	bl	800ad52 <osThreadCreate>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4a32      	ldr	r2, [pc, #200]	; (8000b98 <main+0x25c>)
 8000ace:	6013      	str	r3, [r2, #0]

  /* definition and creation of Ennemi */
  osThreadDef(Ennemi, Task_Ennemi, osPriorityLow, 0, 128);
 8000ad0:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <main+0x260>)
 8000ad2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000ad6:	461d      	mov	r5, r3
 8000ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000adc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ae0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EnnemiHandle = osThreadCreate(osThread(Ennemi), NULL);
 8000ae4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f00a f931 	bl	800ad52 <osThreadCreate>
 8000af0:	4603      	mov	r3, r0
 8000af2:	4a2b      	ldr	r2, [pc, #172]	; (8000ba0 <main+0x264>)
 8000af4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Led */
  osThreadDef(Led, Task_Tir, osPriorityAboveNormal, 0, 128);
 8000af6:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <main+0x268>)
 8000af8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000afc:	461d      	mov	r5, r3
 8000afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LedHandle = osThreadCreate(osThread(Led), NULL);
 8000b0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f00a f91e 	bl	800ad52 <osThreadCreate>
 8000b16:	4603      	mov	r3, r0
 8000b18:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <main+0x26c>)
 8000b1a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Affichage */
  osThreadDef(Affichage, Task_Affichage, osPriorityHigh, 0, 128);
 8000b1c:	4b23      	ldr	r3, [pc, #140]	; (8000bac <main+0x270>)
 8000b1e:	f107 0420 	add.w	r4, r7, #32
 8000b22:	461d      	mov	r5, r3
 8000b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AffichageHandle = osThreadCreate(osThread(Affichage), NULL);
 8000b30:	f107 0320 	add.w	r3, r7, #32
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f00a f90b 	bl	800ad52 <osThreadCreate>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a1c      	ldr	r2, [pc, #112]	; (8000bb0 <main+0x274>)
 8000b40:	6013      	str	r3, [r2, #0]

  /* definition and creation of share */
  osThreadDef(share, Task_Share, osPriorityHigh, 0, 128);
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <main+0x278>)
 8000b44:	1d3c      	adds	r4, r7, #4
 8000b46:	461d      	mov	r5, r3
 8000b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  shareHandle = osThreadCreate(osThread(share), NULL);
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f00a f8fa 	bl	800ad52 <osThreadCreate>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4a15      	ldr	r2, [pc, #84]	; (8000bb8 <main+0x27c>)
 8000b62:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b64:	f00a f8ee 	bl	800ad44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <main+0x22c>
 8000b6a:	bf00      	nop
 8000b6c:	20000040 	.word	0x20000040
 8000b70:	ffff0000 	.word	0xffff0000
 8000b74:	20004520 	.word	0x20004520
 8000b78:	0800d8b0 	.word	0x0800d8b0
 8000b7c:	20004830 	.word	0x20004830
 8000b80:	200046e4 	.word	0x200046e4
 8000b84:	0800d8c0 	.word	0x0800d8c0
 8000b88:	200042b4 	.word	0x200042b4
 8000b8c:	0800d8dc 	.word	0x0800d8dc
 8000b90:	200048b4 	.word	0x200048b4
 8000b94:	0800d8f8 	.word	0x0800d8f8
 8000b98:	2000482c 	.word	0x2000482c
 8000b9c:	0800d914 	.word	0x0800d914
 8000ba0:	2000465c 	.word	0x2000465c
 8000ba4:	0800d930 	.word	0x0800d930
 8000ba8:	200042b0 	.word	0x200042b0
 8000bac:	0800d94c 	.word	0x0800d94c
 8000bb0:	20004304 	.word	0x20004304
 8000bb4:	0800d968 	.word	0x0800d968
 8000bb8:	200048b8 	.word	0x200048b8

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b094      	sub	sp, #80	; 0x50
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 0320 	add.w	r3, r7, #32
 8000bc6:	2230      	movs	r2, #48	; 0x30
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f00c fd7a 	bl	800d6c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000be0:	f006 fb2c 	bl	800723c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be4:	4b2c      	ldr	r3, [pc, #176]	; (8000c98 <SystemClock_Config+0xdc>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	4a2b      	ldr	r2, [pc, #172]	; (8000c98 <SystemClock_Config+0xdc>)
 8000bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bee:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf0:	4b29      	ldr	r3, [pc, #164]	; (8000c98 <SystemClock_Config+0xdc>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfc:	4b27      	ldr	r3, [pc, #156]	; (8000c9c <SystemClock_Config+0xe0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a26      	ldr	r2, [pc, #152]	; (8000c9c <SystemClock_Config+0xe0>)
 8000c02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <SystemClock_Config+0xe0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000c14:	2309      	movs	r3, #9
 8000c16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c2c:	2319      	movs	r3, #25
 8000c2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000c30:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c36:	2302      	movs	r3, #2
 8000c38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c3a:	2309      	movs	r3, #9
 8000c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	4618      	mov	r0, r3
 8000c44:	f006 fb5a 	bl	80072fc <HAL_RCC_OscConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c4e:	f001 fad1 	bl	80021f4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c52:	f006 fb03 	bl	800725c <HAL_PWREx_EnableOverDrive>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c5c:	f001 faca 	bl	80021f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c60:	230f      	movs	r3, #15
 8000c62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c64:	2302      	movs	r3, #2
 8000c66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2106      	movs	r1, #6
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f006 fde0 	bl	8007844 <HAL_RCC_ClockConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c8a:	f001 fab3 	bl	80021f4 <Error_Handler>
  }
}
 8000c8e:	bf00      	nop
 8000c90:	3750      	adds	r7, #80	; 0x50
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40007000 	.word	0x40007000

08000ca0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cb4:	4a21      	ldr	r2, [pc, #132]	; (8000d3c <MX_ADC1_Init+0x9c>)
 8000cb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <MX_ADC1_Init+0xa0>)
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000d02:	f003 facf 	bl	80042a4 <HAL_ADC_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d0c:	f001 fa72 	bl	80021f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000d22:	f003 fc69 	bl	80045f8 <HAL_ADC_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d2c:	f001 fa62 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200045cc 	.word	0x200045cc
 8000d3c:	40012000 	.word	0x40012000
 8000d40:	0f000001 	.word	0x0f000001

08000d44 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000d56:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <MX_ADC3_Init+0x98>)
 8000d58:	4a21      	ldr	r2, [pc, #132]	; (8000de0 <MX_ADC3_Init+0x9c>)
 8000d5a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <MX_ADC3_Init+0x98>)
 8000d5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d62:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <MX_ADC3_Init+0x98>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_ADC3_Init+0x98>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_ADC3_Init+0x98>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_ADC3_Init+0x98>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <MX_ADC3_Init+0x98>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_ADC3_Init+0x98>)
 8000d86:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <MX_ADC3_Init+0xa0>)
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_ADC3_Init+0x98>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_ADC3_Init+0x98>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_ADC3_Init+0x98>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_ADC3_Init+0x98>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <MX_ADC3_Init+0x98>)
 8000da6:	f003 fa7d 	bl	80042a4 <HAL_ADC_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000db0:	f001 fa20 	bl	80021f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000db4:	2306      	movs	r3, #6
 8000db6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_ADC3_Init+0x98>)
 8000dc6:	f003 fc17 	bl	80045f8 <HAL_ADC_ConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000dd0:	f001 fa10 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20004614 	.word	0x20004614
 8000de0:	40012200 	.word	0x40012200
 8000de4:	0f000001 	.word	0x0f000001

08000de8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000dee:	463b      	mov	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_DAC_Init+0x4c>)
 8000df8:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <MX_DAC_Init+0x50>)
 8000dfa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <MX_DAC_Init+0x4c>)
 8000dfe:	f003 ff2d 	bl	8004c5c <HAL_DAC_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e08:	f001 f9f4 	bl	80021f4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e14:	463b      	mov	r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4806      	ldr	r0, [pc, #24]	; (8000e34 <MX_DAC_Init+0x4c>)
 8000e1c:	f003 ffa4 	bl	8004d68 <HAL_DAC_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e26:	f001 f9e5 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200046e8 	.word	0x200046e8
 8000e38:	40007400 	.word	0x40007400

08000e3c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <MX_DMA2D_Init+0x5c>)
 8000e42:	4a16      	ldr	r2, [pc, #88]	; (8000e9c <MX_DMA2D_Init+0x60>)
 8000e44:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_DMA2D_Init+0x5c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <MX_DMA2D_Init+0x5c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_DMA2D_Init+0x5c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_DMA2D_Init+0x5c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_DMA2D_Init+0x5c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_DMA2D_Init+0x5c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_DMA2D_Init+0x5c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000e70:	4809      	ldr	r0, [pc, #36]	; (8000e98 <MX_DMA2D_Init+0x5c>)
 8000e72:	f004 f991 	bl	8005198 <HAL_DMA2D_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000e7c:	f001 f9ba 	bl	80021f4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000e80:	2101      	movs	r1, #1
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_DMA2D_Init+0x5c>)
 8000e84:	f004 fbf6 	bl	8005674 <HAL_DMA2D_ConfigLayer>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000e8e:	f001 f9b1 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200047ec 	.word	0x200047ec
 8000e9c:	4002b000 	.word	0x4002b000

08000ea0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	; (8000f18 <MX_I2C1_Init+0x78>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eac:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <MX_I2C1_Init+0x7c>)
 8000eae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eda:	480e      	ldr	r0, [pc, #56]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000edc:	f004 fffc 	bl	8005ed8 <HAL_I2C_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ee6:	f001 f985 	bl	80021f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eea:	2100      	movs	r1, #0
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eee:	f005 fd95 	bl	8006a1c <HAL_I2CEx_ConfigAnalogFilter>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ef8:	f001 f97c 	bl	80021f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000efc:	2100      	movs	r1, #0
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000f00:	f005 fdd7 	bl	8006ab2 <HAL_I2CEx_ConfigDigitalFilter>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f0a:	f001 f973 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000443c 	.word	0x2000443c
 8000f18:	40005400 	.word	0x40005400
 8000f1c:	00c0eaff 	.word	0x00c0eaff

08000f20 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f26:	4a1c      	ldr	r2, [pc, #112]	; (8000f98 <MX_I2C3_Init+0x78>)
 8000f28:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f2c:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <MX_I2C3_Init+0x7c>)
 8000f2e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f5a:	480e      	ldr	r0, [pc, #56]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f5c:	f004 ffbc 	bl	8005ed8 <HAL_I2C_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000f66:	f001 f945 	bl	80021f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f6e:	f005 fd55 	bl	8006a1c <HAL_I2CEx_ConfigAnalogFilter>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f78:	f001 f93c 	bl	80021f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f80:	f005 fd97 	bl	8006ab2 <HAL_I2CEx_ConfigDigitalFilter>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f8a:	f001 f933 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200042b8 	.word	0x200042b8
 8000f98:	40005c00 	.word	0x40005c00
 8000f9c:	00c0eaff 	.word	0x00c0eaff

08000fa0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08e      	sub	sp, #56	; 0x38
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2234      	movs	r2, #52	; 0x34
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f00c fb89 	bl	800d6c4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000fb2:	4b3a      	ldr	r3, [pc, #232]	; (800109c <MX_LTDC_Init+0xfc>)
 8000fb4:	4a3a      	ldr	r2, [pc, #232]	; (80010a0 <MX_LTDC_Init+0x100>)
 8000fb6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000fb8:	4b38      	ldr	r3, [pc, #224]	; (800109c <MX_LTDC_Init+0xfc>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000fbe:	4b37      	ldr	r3, [pc, #220]	; (800109c <MX_LTDC_Init+0xfc>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000fc4:	4b35      	ldr	r3, [pc, #212]	; (800109c <MX_LTDC_Init+0xfc>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000fca:	4b34      	ldr	r3, [pc, #208]	; (800109c <MX_LTDC_Init+0xfc>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <MX_LTDC_Init+0xfc>)
 8000fd2:	2228      	movs	r2, #40	; 0x28
 8000fd4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000fd6:	4b31      	ldr	r3, [pc, #196]	; (800109c <MX_LTDC_Init+0xfc>)
 8000fd8:	2209      	movs	r2, #9
 8000fda:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	; (800109c <MX_LTDC_Init+0xfc>)
 8000fde:	2235      	movs	r2, #53	; 0x35
 8000fe0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <MX_LTDC_Init+0xfc>)
 8000fe4:	220b      	movs	r2, #11
 8000fe6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <MX_LTDC_Init+0xfc>)
 8000fea:	f240 2215 	movw	r2, #533	; 0x215
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000ff0:	4b2a      	ldr	r3, [pc, #168]	; (800109c <MX_LTDC_Init+0xfc>)
 8000ff2:	f240 121b 	movw	r2, #283	; 0x11b
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000ff8:	4b28      	ldr	r3, [pc, #160]	; (800109c <MX_LTDC_Init+0xfc>)
 8000ffa:	f240 2235 	movw	r2, #565	; 0x235
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <MX_LTDC_Init+0xfc>)
 8001002:	f240 121d 	movw	r2, #285	; 0x11d
 8001006:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <MX_LTDC_Init+0xfc>)
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <MX_LTDC_Init+0xfc>)
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <MX_LTDC_Init+0xfc>)
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <MX_LTDC_Init+0xfc>)
 8001022:	f005 fd93 	bl	8006b4c <HAL_LTDC_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800102c:	f001 f8e2 	bl	80021f4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001034:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001038:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800103e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001042:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001044:	2302      	movs	r3, #2
 8001046:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001048:	23ff      	movs	r3, #255	; 0xff
 800104a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001050:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001054:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001056:	2307      	movs	r3, #7
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800105a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001060:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001066:	f44f 7388 	mov.w	r3, #272	; 0x110
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_LTDC_Init+0xfc>)
 8001086:	f005 fef3 	bl	8006e70 <HAL_LTDC_ConfigLayer>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001090:	f001 f8b0 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	3738      	adds	r7, #56	; 0x38
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20004524 	.word	0x20004524
 80010a0:	40016800 	.word	0x40016800

080010a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b092      	sub	sp, #72	; 0x48
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]
 80010ba:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80010c0:	463b      	mov	r3, r7
 80010c2:	222c      	movs	r2, #44	; 0x2c
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f00c fafc 	bl	800d6c4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010cc:	4b46      	ldr	r3, [pc, #280]	; (80011e8 <MX_RTC_Init+0x144>)
 80010ce:	4a47      	ldr	r2, [pc, #284]	; (80011ec <MX_RTC_Init+0x148>)
 80010d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010d2:	4b45      	ldr	r3, [pc, #276]	; (80011e8 <MX_RTC_Init+0x144>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010d8:	4b43      	ldr	r3, [pc, #268]	; (80011e8 <MX_RTC_Init+0x144>)
 80010da:	227f      	movs	r2, #127	; 0x7f
 80010dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010de:	4b42      	ldr	r3, [pc, #264]	; (80011e8 <MX_RTC_Init+0x144>)
 80010e0:	22ff      	movs	r2, #255	; 0xff
 80010e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010e4:	4b40      	ldr	r3, [pc, #256]	; (80011e8 <MX_RTC_Init+0x144>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010ea:	4b3f      	ldr	r3, [pc, #252]	; (80011e8 <MX_RTC_Init+0x144>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010f0:	4b3d      	ldr	r3, [pc, #244]	; (80011e8 <MX_RTC_Init+0x144>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010f6:	483c      	ldr	r0, [pc, #240]	; (80011e8 <MX_RTC_Init+0x144>)
 80010f8:	f007 f99c 	bl	8008434 <HAL_RTC_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001102:	f001 f877 	bl	80021f4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001106:	2300      	movs	r3, #0
 8001108:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 800110c:	2300      	movs	r3, #0
 800110e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001112:	2300      	movs	r3, #0
 8001114:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001118:	2300      	movs	r3, #0
 800111a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800111c:	2300      	movs	r3, #0
 800111e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001120:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001124:	2201      	movs	r2, #1
 8001126:	4619      	mov	r1, r3
 8001128:	482f      	ldr	r0, [pc, #188]	; (80011e8 <MX_RTC_Init+0x144>)
 800112a:	f007 fa15 	bl	8008558 <HAL_RTC_SetTime>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001134:	f001 f85e 	bl	80021f4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001138:	2301      	movs	r3, #1
 800113a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800113e:	2301      	movs	r3, #1
 8001140:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001144:	2301      	movs	r3, #1
 8001146:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001150:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001154:	2201      	movs	r2, #1
 8001156:	4619      	mov	r1, r3
 8001158:	4823      	ldr	r0, [pc, #140]	; (80011e8 <MX_RTC_Init+0x144>)
 800115a:	f007 fabb 	bl	80086d4 <HAL_RTC_SetDate>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001164:	f001 f846 	bl	80021f4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001168:	2300      	movs	r3, #0
 800116a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800116c:	2300      	movs	r3, #0
 800116e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001170:	2300      	movs	r3, #0
 8001172:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800118c:	2301      	movs	r3, #1
 800118e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	2201      	movs	r2, #1
 800119c:	4619      	mov	r1, r3
 800119e:	4812      	ldr	r0, [pc, #72]	; (80011e8 <MX_RTC_Init+0x144>)
 80011a0:	f007 fb40 	bl	8008824 <HAL_RTC_SetAlarm>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80011aa:	f001 f823 	bl	80021f4 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80011ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80011b4:	463b      	mov	r3, r7
 80011b6:	2201      	movs	r2, #1
 80011b8:	4619      	mov	r1, r3
 80011ba:	480b      	ldr	r0, [pc, #44]	; (80011e8 <MX_RTC_Init+0x144>)
 80011bc:	f007 fb32 	bl	8008824 <HAL_RTC_SetAlarm>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_RTC_Init+0x126>
  {
    Error_Handler();
 80011c6:	f001 f815 	bl	80021f4 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80011ca:	2202      	movs	r2, #2
 80011cc:	2100      	movs	r1, #0
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <MX_RTC_Init+0x144>)
 80011d0:	f007 fcb2 	bl	8008b38 <HAL_RTCEx_SetTimeStamp>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 80011da:	f001 f80b 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	3748      	adds	r7, #72	; 0x48
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200046fc 	.word	0x200046fc
 80011ec:	40002800 	.word	0x40002800

080011f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <MX_SPI2_Init+0x6c>)
 80011f6:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <MX_SPI2_Init+0x70>)
 80011f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_SPI2_Init+0x6c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_SPI2_Init+0x6c>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_SPI2_Init+0x6c>)
 8001208:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800120c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <MX_SPI2_Init+0x6c>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_SPI2_Init+0x6c>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <MX_SPI2_Init+0x6c>)
 800121c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001220:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_SPI2_Init+0x6c>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_SPI2_Init+0x6c>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_SPI2_Init+0x6c>)
 8001230:	2200      	movs	r2, #0
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_SPI2_Init+0x6c>)
 8001236:	2207      	movs	r2, #7
 8001238:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_SPI2_Init+0x6c>)
 800123c:	2200      	movs	r2, #0
 800123e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_SPI2_Init+0x6c>)
 8001242:	2200      	movs	r2, #0
 8001244:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_SPI2_Init+0x6c>)
 8001248:	f007 fd5d 	bl	8008d06 <HAL_SPI_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8001252:	f000 ffcf 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20004308 	.word	0x20004308
 8001260:	40003800 	.word	0x40003800

08001264 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <MX_TIM1_Init+0xa0>)
 8001284:	4a20      	ldr	r2, [pc, #128]	; (8001308 <MX_TIM1_Init+0xa4>)
 8001286:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_TIM1_Init+0xa0>)
 800128a:	2200      	movs	r2, #0
 800128c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_TIM1_Init+0xa0>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_TIM1_Init+0xa0>)
 8001296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_TIM1_Init+0xa0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_TIM1_Init+0xa0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_TIM1_Init+0xa0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ae:	4815      	ldr	r0, [pc, #84]	; (8001304 <MX_TIM1_Init+0xa0>)
 80012b0:	f008 fb1c 	bl	80098ec <HAL_TIM_Base_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80012ba:	f000 ff9b 	bl	80021f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	480e      	ldr	r0, [pc, #56]	; (8001304 <MX_TIM1_Init+0xa0>)
 80012cc:	f008 fcfe 	bl	8009ccc <HAL_TIM_ConfigClockSource>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80012d6:	f000 ff8d 	bl	80021f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <MX_TIM1_Init+0xa0>)
 80012ec:	f008 ff1a 	bl	800a124 <HAL_TIMEx_MasterConfigSynchronization>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012f6:	f000 ff7d 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000471c 	.word	0x2000471c
 8001308:	40010000 	.word	0x40010000

0800130c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0310 	add.w	r3, r7, #16
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <MX_TIM2_Init+0x98>)
 800132c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001330:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <MX_TIM2_Init+0x98>)
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_TIM2_Init+0x98>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <MX_TIM2_Init+0x98>)
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <MX_TIM2_Init+0x98>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_TIM2_Init+0x98>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001352:	4814      	ldr	r0, [pc, #80]	; (80013a4 <MX_TIM2_Init+0x98>)
 8001354:	f008 faca 	bl	80098ec <HAL_TIM_Base_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800135e:	f000 ff49 	bl	80021f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001366:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	4619      	mov	r1, r3
 800136e:	480d      	ldr	r0, [pc, #52]	; (80013a4 <MX_TIM2_Init+0x98>)
 8001370:	f008 fcac 	bl	8009ccc <HAL_TIM_ConfigClockSource>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800137a:	f000 ff3b 	bl	80021f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <MX_TIM2_Init+0x98>)
 800138c:	f008 feca 	bl	800a124 <HAL_TIMEx_MasterConfigSynchronization>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001396:	f000 ff2d 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20004834 	.word	0x20004834

080013a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c6:	4b1d      	ldr	r3, [pc, #116]	; (800143c <MX_TIM3_Init+0x94>)
 80013c8:	4a1d      	ldr	r2, [pc, #116]	; (8001440 <MX_TIM3_Init+0x98>)
 80013ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_TIM3_Init+0x94>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_TIM3_Init+0x94>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_TIM3_Init+0x94>)
 80013da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_TIM3_Init+0x94>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <MX_TIM3_Init+0x94>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <MX_TIM3_Init+0x94>)
 80013ee:	f008 fa7d 	bl	80098ec <HAL_TIM_Base_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80013f8:	f000 fefc 	bl	80021f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001400:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4619      	mov	r1, r3
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <MX_TIM3_Init+0x94>)
 800140a:	f008 fc5f 	bl	8009ccc <HAL_TIM_ConfigClockSource>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001414:	f000 feee 	bl	80021f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_TIM3_Init+0x94>)
 8001426:	f008 fe7d 	bl	800a124 <HAL_TIMEx_MasterConfigSynchronization>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001430:	f000 fee0 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200044d4 	.word	0x200044d4
 8001440:	40000400 	.word	0x40000400

08001444 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MX_TIM5_Init+0x94>)
 8001464:	4a1d      	ldr	r2, [pc, #116]	; (80014dc <MX_TIM5_Init+0x98>)
 8001466:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <MX_TIM5_Init+0x94>)
 800146a:	2200      	movs	r2, #0
 800146c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MX_TIM5_Init+0x94>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <MX_TIM5_Init+0x94>)
 8001476:	f04f 32ff 	mov.w	r2, #4294967295
 800147a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <MX_TIM5_Init+0x94>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <MX_TIM5_Init+0x94>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001488:	4813      	ldr	r0, [pc, #76]	; (80014d8 <MX_TIM5_Init+0x94>)
 800148a:	f008 fa2f 	bl	80098ec <HAL_TIM_Base_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001494:	f000 feae 	bl	80021f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	4619      	mov	r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	; (80014d8 <MX_TIM5_Init+0x94>)
 80014a6:	f008 fc11 	bl	8009ccc <HAL_TIM_ConfigClockSource>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80014b0:	f000 fea0 	bl	80021f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_TIM5_Init+0x94>)
 80014c2:	f008 fe2f 	bl	800a124 <HAL_TIMEx_MasterConfigSynchronization>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80014cc:	f000 fe92 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20004488 	.word	0x20004488
 80014dc:	40000c00 	.word	0x40000c00

080014e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <MX_TIM8_Init+0xa0>)
 8001500:	4a20      	ldr	r2, [pc, #128]	; (8001584 <MX_TIM8_Init+0xa4>)
 8001502:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <MX_TIM8_Init+0xa0>)
 8001506:	2200      	movs	r2, #0
 8001508:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <MX_TIM8_Init+0xa0>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <MX_TIM8_Init+0xa0>)
 8001512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001516:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <MX_TIM8_Init+0xa0>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <MX_TIM8_Init+0xa0>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <MX_TIM8_Init+0xa0>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800152a:	4815      	ldr	r0, [pc, #84]	; (8001580 <MX_TIM8_Init+0xa0>)
 800152c:	f008 f9de 	bl	80098ec <HAL_TIM_Base_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001536:	f000 fe5d 	bl	80021f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	4619      	mov	r1, r3
 8001546:	480e      	ldr	r0, [pc, #56]	; (8001580 <MX_TIM8_Init+0xa0>)
 8001548:	f008 fbc0 	bl	8009ccc <HAL_TIM_ConfigClockSource>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001552:	f000 fe4f 	bl	80021f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	4619      	mov	r1, r3
 8001566:	4806      	ldr	r0, [pc, #24]	; (8001580 <MX_TIM8_Init+0xa0>)
 8001568:	f008 fddc 	bl	800a124 <HAL_TIMEx_MasterConfigSynchronization>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001572:	f000 fe3f 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	3720      	adds	r7, #32
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200043f0 	.word	0x200043f0
 8001584:	40010400 	.word	0x40010400

08001588 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_UART7_Init+0x58>)
 800158e:	4a15      	ldr	r2, [pc, #84]	; (80015e4 <MX_UART7_Init+0x5c>)
 8001590:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <MX_UART7_Init+0x58>)
 8001594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001598:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_UART7_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_UART7_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_UART7_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_UART7_Init+0x58>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_UART7_Init+0x58>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_UART7_Init+0x58>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_UART7_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_UART7_Init+0x58>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_UART7_Init+0x58>)
 80015cc:	f008 fe56 	bl	800a27c <HAL_UART_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80015d6:	f000 fe0d 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000436c 	.word	0x2000436c
 80015e4:	40007800 	.word	0x40007800

080015e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_USART1_UART_Init+0x68>)
 80015ee:	4a19      	ldr	r2, [pc, #100]	; (8001654 <MX_USART1_UART_Init+0x6c>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_USART1_UART_Init+0x68>)
 80015f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_USART1_UART_Init+0x68>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_USART1_UART_Init+0x68>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_USART1_UART_Init+0x68>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <MX_USART1_UART_Init+0x68>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_USART1_UART_Init+0x68>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <MX_USART1_UART_Init+0x68>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_USART1_UART_Init+0x68>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <MX_USART1_UART_Init+0x68>)
 8001626:	2230      	movs	r2, #48	; 0x30
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_USART1_UART_Init+0x68>)
 800162c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001630:	639a      	str	r2, [r3, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <MX_USART1_UART_Init+0x68>)
 8001634:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001638:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_USART1_UART_Init+0x68>)
 800163c:	f008 fe1e 	bl	800a27c <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 8001646:	f000 fdd5 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20004660 	.word	0x20004660
 8001654:	40011000 	.word	0x40011000

08001658 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 800165e:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <MX_USART6_UART_Init+0x5c>)
 8001660:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 800169c:	f008 fdee 	bl	800a27c <HAL_UART_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80016a6:	f000 fda5 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20004768 	.word	0x20004768
 80016b4:	40011400 	.word	0x40011400

080016b8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
 80016cc:	615a      	str	r2, [r3, #20]
 80016ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <MX_FMC_Init+0x98>)
 80016d2:	4a20      	ldr	r2, [pc, #128]	; (8001754 <MX_FMC_Init+0x9c>)
 80016d4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_FMC_Init+0x98>)
 80016d8:	2200      	movs	r2, #0
 80016da:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_FMC_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_FMC_Init+0x98>)
 80016e4:	2204      	movs	r2, #4
 80016e6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_FMC_Init+0x98>)
 80016ea:	2210      	movs	r2, #16
 80016ec:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <MX_FMC_Init+0x98>)
 80016f0:	2240      	movs	r2, #64	; 0x40
 80016f2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <MX_FMC_Init+0x98>)
 80016f6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80016fa:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_FMC_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_FMC_Init+0x98>)
 8001704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001708:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_FMC_Init+0x98>)
 800170c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_FMC_Init+0x98>)
 8001714:	2200      	movs	r2, #0
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001718:	2302      	movs	r3, #2
 800171a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800171c:	2307      	movs	r3, #7
 800171e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001720:	2304      	movs	r3, #4
 8001722:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001724:	2307      	movs	r3, #7
 8001726:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001728:	2303      	movs	r3, #3
 800172a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800172c:	2302      	movs	r3, #2
 800172e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001730:	2302      	movs	r3, #2
 8001732:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_FMC_Init+0x98>)
 800173a:	f007 fa53 	bl	8008be4 <HAL_SDRAM_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001744:	f000 fd56 	bl	80021f4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001748:	bf00      	nop
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20004880 	.word	0x20004880
 8001754:	a0000140 	.word	0xa0000140

08001758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b090      	sub	sp, #64	; 0x40
 800175c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800176e:	4baf      	ldr	r3, [pc, #700]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4aae      	ldr	r2, [pc, #696]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 8001774:	f043 0310 	orr.w	r3, r3, #16
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4bac      	ldr	r3, [pc, #688]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
 8001784:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001786:	4ba9      	ldr	r3, [pc, #676]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4aa8      	ldr	r2, [pc, #672]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 800178c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4ba6      	ldr	r3, [pc, #664]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	4ba3      	ldr	r3, [pc, #652]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4aa2      	ldr	r2, [pc, #648]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4ba0      	ldr	r3, [pc, #640]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	623b      	str	r3, [r7, #32]
 80017b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b6:	4b9d      	ldr	r3, [pc, #628]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a9c      	ldr	r2, [pc, #624]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 80017bc:	f043 0308 	orr.w	r3, r3, #8
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b9a      	ldr	r3, [pc, #616]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	4b97      	ldr	r3, [pc, #604]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a96      	ldr	r2, [pc, #600]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b94      	ldr	r3, [pc, #592]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	61bb      	str	r3, [r7, #24]
 80017e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	4b91      	ldr	r3, [pc, #580]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a90      	ldr	r2, [pc, #576]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b8e      	ldr	r3, [pc, #568]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017fe:	4b8b      	ldr	r3, [pc, #556]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a8a      	ldr	r2, [pc, #552]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 8001804:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b88      	ldr	r3, [pc, #544]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001816:	4b85      	ldr	r3, [pc, #532]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a84      	ldr	r2, [pc, #528]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 800181c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b82      	ldr	r3, [pc, #520]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800182e:	4b7f      	ldr	r3, [pc, #508]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a7e      	ldr	r2, [pc, #504]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 8001834:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b7c      	ldr	r3, [pc, #496]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001846:	4b79      	ldr	r3, [pc, #484]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a78      	ldr	r2, [pc, #480]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 800184c:	f043 0320 	orr.w	r3, r3, #32
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b76      	ldr	r3, [pc, #472]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185e:	4b73      	ldr	r3, [pc, #460]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a72      	ldr	r2, [pc, #456]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 8001864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b70      	ldr	r3, [pc, #448]	; (8001a2c <MX_GPIO_Init+0x2d4>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	2160      	movs	r1, #96	; 0x60
 800187a:	486d      	ldr	r0, [pc, #436]	; (8001a30 <MX_GPIO_Init+0x2d8>)
 800187c:	f004 fae0 	bl	8005e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	2120      	movs	r1, #32
 8001884:	486b      	ldr	r0, [pc, #428]	; (8001a34 <MX_GPIO_Init+0x2dc>)
 8001886:	f004 fadb 	bl	8005e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	2108      	movs	r1, #8
 800188e:	4869      	ldr	r0, [pc, #420]	; (8001a34 <MX_GPIO_Init+0x2dc>)
 8001890:	f004 fad6 	bl	8005e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	2108      	movs	r1, #8
 8001898:	4867      	ldr	r0, [pc, #412]	; (8001a38 <MX_GPIO_Init+0x2e0>)
 800189a:	f004 fad1 	bl	8005e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018a4:	4865      	ldr	r0, [pc, #404]	; (8001a3c <MX_GPIO_Init+0x2e4>)
 80018a6:	f004 facb 	bl	8005e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80018aa:	2200      	movs	r2, #0
 80018ac:	f645 6140 	movw	r1, #24128	; 0x5e40
 80018b0:	4863      	ldr	r0, [pc, #396]	; (8001a40 <MX_GPIO_Init+0x2e8>)
 80018b2:	f004 fac5 	bl	8005e40 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	21c8      	movs	r1, #200	; 0xc8
 80018ba:	4862      	ldr	r0, [pc, #392]	; (8001a44 <MX_GPIO_Init+0x2ec>)
 80018bc:	f004 fac0 	bl	8005e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80018c0:	2308      	movs	r3, #8
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c4:	2300      	movs	r3, #0
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d0:	4619      	mov	r1, r3
 80018d2:	4857      	ldr	r0, [pc, #348]	; (8001a30 <MX_GPIO_Init+0x2d8>)
 80018d4:	f003 fffc 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80018d8:	2304      	movs	r3, #4
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80018e8:	2309      	movs	r3, #9
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f0:	4619      	mov	r1, r3
 80018f2:	484f      	ldr	r0, [pc, #316]	; (8001a30 <MX_GPIO_Init+0x2d8>)
 80018f4:	f003 ffec 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80018f8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800190a:	230b      	movs	r3, #11
 800190c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800190e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001912:	4619      	mov	r1, r3
 8001914:	484b      	ldr	r0, [pc, #300]	; (8001a44 <MX_GPIO_Init+0x2ec>)
 8001916:	f003 ffdb 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 800191a:	f643 0323 	movw	r3, #14371	; 0x3823
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800192c:	230a      	movs	r3, #10
 800192e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001934:	4619      	mov	r1, r3
 8001936:	4844      	ldr	r0, [pc, #272]	; (8001a48 <MX_GPIO_Init+0x2f0>)
 8001938:	f003 ffca 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001948:	2300      	movs	r3, #0
 800194a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800194c:	2308      	movs	r3, #8
 800194e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001954:	4619      	mov	r1, r3
 8001956:	4837      	ldr	r0, [pc, #220]	; (8001a34 <MX_GPIO_Init+0x2dc>)
 8001958:	f003 ffba 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800195c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800196e:	230c      	movs	r3, #12
 8001970:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001976:	4619      	mov	r1, r3
 8001978:	4834      	ldr	r0, [pc, #208]	; (8001a4c <MX_GPIO_Init+0x2f4>)
 800197a:	f003 ffa9 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|GPIO_PIN_6;
 800197e:	f248 0340 	movw	r3, #32832	; 0x8040
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001984:	2300      	movs	r3, #0
 8001986:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001990:	4619      	mov	r1, r3
 8001992:	482f      	ldr	r0, [pc, #188]	; (8001a50 <MX_GPIO_Init+0x2f8>)
 8001994:	f003 ff9c 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001998:	2360      	movs	r3, #96	; 0x60
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2301      	movs	r3, #1
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ac:	4619      	mov	r1, r3
 80019ae:	4820      	ldr	r0, [pc, #128]	; (8001a30 <MX_GPIO_Init+0x2d8>)
 80019b0:	f003 ff8e 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80019b4:	2340      	movs	r3, #64	; 0x40
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019c4:	230a      	movs	r3, #10
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019cc:	4619      	mov	r1, r3
 80019ce:	481e      	ldr	r0, [pc, #120]	; (8001a48 <MX_GPIO_Init+0x2f0>)
 80019d0:	f003 ff7e 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80019d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019da:	2300      	movs	r3, #0
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e6:	4619      	mov	r1, r3
 80019e8:	481a      	ldr	r0, [pc, #104]	; (8001a54 <MX_GPIO_Init+0x2fc>)
 80019ea:	f003 ff71 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80019ee:	2340      	movs	r3, #64	; 0x40
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019f2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80019fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a00:	4619      	mov	r1, r3
 8001a02:	480c      	ldr	r0, [pc, #48]	; (8001a34 <MX_GPIO_Init+0x2dc>)
 8001a04:	f003 ff64 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8001a08:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a1a:	230a      	movs	r3, #10
 8001a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a22:	4619      	mov	r1, r3
 8001a24:	480a      	ldr	r0, [pc, #40]	; (8001a50 <MX_GPIO_Init+0x2f8>)
 8001a26:	f003 ff53 	bl	80058d0 <HAL_GPIO_Init>
 8001a2a:	e015      	b.n	8001a58 <MX_GPIO_Init+0x300>
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40020c00 	.word	0x40020c00
 8001a38:	40022800 	.word	0x40022800
 8001a3c:	40022000 	.word	0x40022000
 8001a40:	40021c00 	.word	0x40021c00
 8001a44:	40021800 	.word	0x40021800
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40020800 	.word	0x40020800
 8001a50:	40020000 	.word	0x40020000
 8001a54:	40022400 	.word	0x40022400

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001a58:	23f0      	movs	r3, #240	; 0xf0
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001a68:	230a      	movs	r3, #10
 8001a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a70:	4619      	mov	r1, r3
 8001a72:	489c      	ldr	r0, [pc, #624]	; (8001ce4 <MX_GPIO_Init+0x58c>)
 8001a74:	f003 ff2c 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001a8a:	230a      	movs	r3, #10
 8001a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a92:	4619      	mov	r1, r3
 8001a94:	4894      	ldr	r0, [pc, #592]	; (8001ce8 <MX_GPIO_Init+0x590>)
 8001a96:	f003 ff1b 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001a9a:	2328      	movs	r3, #40	; 0x28
 8001a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aae:	4619      	mov	r1, r3
 8001ab0:	488e      	ldr	r0, [pc, #568]	; (8001cec <MX_GPIO_Init+0x594>)
 8001ab2:	f003 ff0d 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4889      	ldr	r0, [pc, #548]	; (8001cf0 <MX_GPIO_Init+0x598>)
 8001acc:	f003 ff00 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001ad0:	2308      	movs	r3, #8
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4883      	ldr	r0, [pc, #524]	; (8001cf4 <MX_GPIO_Init+0x59c>)
 8001ae8:	f003 fef2 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001aec:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af2:	2300      	movs	r3, #0
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001afe:	4619      	mov	r1, r3
 8001b00:	4879      	ldr	r0, [pc, #484]	; (8001ce8 <MX_GPIO_Init+0x590>)
 8001b02:	f003 fee5 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b06:	2310      	movs	r3, #16
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b16:	4619      	mov	r1, r3
 8001b18:	4874      	ldr	r0, [pc, #464]	; (8001cec <MX_GPIO_Init+0x594>)
 8001b1a:	f003 fed9 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001b1e:	2304      	movs	r3, #4
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b2e:	230c      	movs	r3, #12
 8001b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b36:	4619      	mov	r1, r3
 8001b38:	486c      	ldr	r0, [pc, #432]	; (8001cec <MX_GPIO_Init+0x594>)
 8001b3a:	f003 fec9 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8001b3e:	f24a 0304 	movw	r3, #40964	; 0xa004
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b44:	2300      	movs	r3, #0
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b50:	4619      	mov	r1, r3
 8001b52:	4869      	ldr	r0, [pc, #420]	; (8001cf8 <MX_GPIO_Init+0x5a0>)
 8001b54:	f003 febc 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6e:	4619      	mov	r1, r3
 8001b70:	485c      	ldr	r0, [pc, #368]	; (8001ce4 <MX_GPIO_Init+0x58c>)
 8001b72:	f003 fead 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001b76:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	485a      	ldr	r0, [pc, #360]	; (8001cf8 <MX_GPIO_Init+0x5a0>)
 8001b90:	f003 fe9e 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4854      	ldr	r0, [pc, #336]	; (8001cfc <MX_GPIO_Init+0x5a4>)
 8001bac:	f003 fe90 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bb6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001bba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4847      	ldr	r0, [pc, #284]	; (8001ce4 <MX_GPIO_Init+0x58c>)
 8001bc8:	f003 fe82 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001bcc:	2310      	movs	r3, #16
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bdc:	230a      	movs	r3, #10
 8001bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be4:	4619      	mov	r1, r3
 8001be6:	4844      	ldr	r0, [pc, #272]	; (8001cf8 <MX_GPIO_Init+0x5a0>)
 8001be8:	f003 fe72 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001bec:	23c8      	movs	r3, #200	; 0xc8
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c00:	4619      	mov	r1, r3
 8001c02:	4839      	ldr	r0, [pc, #228]	; (8001ce8 <MX_GPIO_Init+0x590>)
 8001c04:	f003 fe64 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001c08:	2305      	movs	r3, #5
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c18:	230a      	movs	r3, #10
 8001c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c20:	4619      	mov	r1, r3
 8001c22:	4833      	ldr	r0, [pc, #204]	; (8001cf0 <MX_GPIO_Init+0x598>)
 8001c24:	f003 fe54 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c28:	2332      	movs	r3, #50	; 0x32
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	2303      	movs	r3, #3
 8001c36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c38:	230b      	movs	r3, #11
 8001c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c40:	4619      	mov	r1, r3
 8001c42:	482b      	ldr	r0, [pc, #172]	; (8001cf0 <MX_GPIO_Init+0x598>)
 8001c44:	f003 fe44 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c48:	2304      	movs	r3, #4
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c58:	2309      	movs	r3, #9
 8001c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c60:	4619      	mov	r1, r3
 8001c62:	4827      	ldr	r0, [pc, #156]	; (8001d00 <MX_GPIO_Init+0x5a8>)
 8001c64:	f003 fe34 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001c68:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c7a:	2309      	movs	r3, #9
 8001c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c82:	4619      	mov	r1, r3
 8001c84:	4819      	ldr	r0, [pc, #100]	; (8001cec <MX_GPIO_Init+0x594>)
 8001c86:	f003 fe23 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001c8a:	2386      	movs	r3, #134	; 0x86
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c96:	2303      	movs	r3, #3
 8001c98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c9a:	230b      	movs	r3, #11
 8001c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4815      	ldr	r0, [pc, #84]	; (8001cfc <MX_GPIO_Init+0x5a4>)
 8001ca6:	f003 fe13 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001caa:	2328      	movs	r3, #40	; 0x28
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001cba:	230a      	movs	r3, #10
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <MX_GPIO_Init+0x5a4>)
 8001cc6:	f003 fe03 	bl	80058d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2105      	movs	r1, #5
 8001cce:	2017      	movs	r0, #23
 8001cd0:	f002 ff9a 	bl	8004c08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cd4:	2017      	movs	r0, #23
 8001cd6:	f002 ffb3 	bl	8004c40 <HAL_NVIC_EnableIRQ>

}
 8001cda:	bf00      	nop
 8001cdc:	3740      	adds	r7, #64	; 0x40
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40022000 	.word	0x40022000
 8001ce8:	40021800 	.word	0x40021800
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	40020800 	.word	0x40020800
 8001cf4:	40022800 	.word	0x40022800
 8001cf8:	40021c00 	.word	0x40021c00
 8001cfc:	40020000 	.word	0x40020000
 8001d00:	40020400 	.word	0x40020400

08001d04 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	80fb      	strh	r3, [r7, #6]
	int Message = 1;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	60fb      	str	r3, [r7, #12]
	xQueueSendFromISR(Queue_TirHandle, &Message, 0);
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_GPIO_EXTI_Callback+0x28>)
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	f107 010c 	add.w	r1, r7, #12
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f009 fbdb 	bl	800b4d8 <xQueueGenericSendFromISR>
}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20004830 	.word	0x20004830

08001d30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED15_GPIO_Port,LED15_Pin);
 8001d38:	2140      	movs	r1, #64	; 0x40
 8001d3a:	4803      	ldr	r0, [pc, #12]	; (8001d48 <StartDefaultTask+0x18>)
 8001d3c:	f004 f899 	bl	8005e72 <HAL_GPIO_TogglePin>
	  osDelay(100);
 8001d40:	2064      	movs	r0, #100	; 0x64
 8001d42:	f009 f852 	bl	800adea <osDelay>
	  HAL_GPIO_TogglePin(LED15_GPIO_Port,LED15_Pin);
 8001d46:	e7f7      	b.n	8001d38 <StartDefaultTask+0x8>
 8001d48:	40021000 	.word	0x40021000

08001d4c <Task_Viseur>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Viseur */
void Task_Viseur(void const * argument)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Viseur */
	uint32_t joystick_h, joystick_v;

	ADC_ChannelConfTypeDef sConfig = {0};
 8001d54:	f107 0308 	add.w	r3, r7, #8
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d62:	2301      	movs	r3, #1
 8001d64:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
	sConfig.Channel = ADC_CHANNEL_8;
 8001d6a:	2308      	movs	r3, #8
 8001d6c:	60bb      	str	r3, [r7, #8]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001d6e:	f107 0308 	add.w	r3, r7, #8
 8001d72:	4619      	mov	r1, r3
 8001d74:	483b      	ldr	r0, [pc, #236]	; (8001e64 <Task_Viseur+0x118>)
 8001d76:	f002 fc3f 	bl	80045f8 <HAL_ADC_ConfigChannel>

  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start(&hadc3);
 8001d7a:	483a      	ldr	r0, [pc, #232]	; (8001e64 <Task_Viseur+0x118>)
 8001d7c:	f002 fad6 	bl	800432c <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001d80:	bf00      	nop
 8001d82:	2164      	movs	r1, #100	; 0x64
 8001d84:	4837      	ldr	r0, [pc, #220]	; (8001e64 <Task_Viseur+0x118>)
 8001d86:	f002 fb9f 	bl	80044c8 <HAL_ADC_PollForConversion>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f8      	bne.n	8001d82 <Task_Viseur+0x36>
	joystick_v = HAL_ADC_GetValue(&hadc3);
 8001d90:	4834      	ldr	r0, [pc, #208]	; (8001e64 <Task_Viseur+0x118>)
 8001d92:	f002 fc24 	bl	80045de <HAL_ADC_GetValue>
 8001d96:	6278      	str	r0, [r7, #36]	; 0x24

	HAL_ADC_Start(&hadc1);
 8001d98:	4833      	ldr	r0, [pc, #204]	; (8001e68 <Task_Viseur+0x11c>)
 8001d9a:	f002 fac7 	bl	800432c <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8001d9e:	bf00      	nop
 8001da0:	2164      	movs	r1, #100	; 0x64
 8001da2:	4831      	ldr	r0, [pc, #196]	; (8001e68 <Task_Viseur+0x11c>)
 8001da4:	f002 fb90 	bl	80044c8 <HAL_ADC_PollForConversion>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f8      	bne.n	8001da0 <Task_Viseur+0x54>
	joystick_h = HAL_ADC_GetValue(&hadc1);
 8001dae:	482e      	ldr	r0, [pc, #184]	; (8001e68 <Task_Viseur+0x11c>)
 8001db0:	f002 fc15 	bl	80045de <HAL_ADC_GetValue>
 8001db4:	6238      	str	r0, [r7, #32]


	int x = (2050-(int)joystick_h)*50/4100;
 8001db6:	6a3a      	ldr	r2, [r7, #32]
 8001db8:	f640 0302 	movw	r3, #2050	; 0x802
 8001dbc:	1a9b      	subs	r3, r3, r2
 8001dbe:	4a2b      	ldr	r2, [pc, #172]	; (8001e6c <Task_Viseur+0x120>)
 8001dc0:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc4:	1152      	asrs	r2, r2, #5
 8001dc6:	17db      	asrs	r3, r3, #31
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	61fb      	str	r3, [r7, #28]
	int y = (2050-(int)joystick_v)*50/4100;
 8001dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dce:	f640 0302 	movw	r3, #2050	; 0x802
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	4a25      	ldr	r2, [pc, #148]	; (8001e6c <Task_Viseur+0x120>)
 8001dd6:	fb82 1203 	smull	r1, r2, r2, r3
 8001dda:	1152      	asrs	r2, r2, #5
 8001ddc:	17db      	asrs	r3, r3, #31
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	61bb      	str	r3, [r7, #24]

	xSemaphoreTake( Mutex_EcranHandle, portMAX_DELAY );
 8001de2:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <Task_Viseur+0x124>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f04f 31ff 	mov.w	r1, #4294967295
 8001dea:	4618      	mov	r0, r3
 8001dec:	f009 fcfa 	bl	800b7e4 <xQueueSemaphoreTake>
	extern uint16_t x_viseur;
	if ((x+x_viseur>=1+10) && (x+x_viseur<=480-10)){x_viseur= x_viseur + x;};
 8001df0:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <Task_Viseur+0x128>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	4413      	add	r3, r2
 8001dfa:	2b0a      	cmp	r3, #10
 8001dfc:	dd0f      	ble.n	8001e1e <Task_Viseur+0xd2>
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <Task_Viseur+0x128>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	4413      	add	r3, r2
 8001e08:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 8001e0c:	dc07      	bgt.n	8001e1e <Task_Viseur+0xd2>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <Task_Viseur+0x128>)
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <Task_Viseur+0x128>)
 8001e1c:	801a      	strh	r2, [r3, #0]

	extern uint16_t y_viseur;
	if ((y+y_viseur>=1+10)&&(y+y_viseur<=272-10)){y_viseur = y_viseur + y;};
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <Task_Viseur+0x12c>)
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	4413      	add	r3, r2
 8001e28:	2b0a      	cmp	r3, #10
 8001e2a:	dd0f      	ble.n	8001e4c <Task_Viseur+0x100>
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <Task_Viseur+0x12c>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	4413      	add	r3, r2
 8001e36:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8001e3a:	dc07      	bgt.n	8001e4c <Task_Viseur+0x100>
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <Task_Viseur+0x12c>)
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <Task_Viseur+0x12c>)
 8001e4a:	801a      	strh	r2, [r3, #0]

	xSemaphoreGive( Mutex_EcranHandle );
 8001e4c:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <Task_Viseur+0x124>)
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	2300      	movs	r3, #0
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	f009 fa39 	bl	800b2cc <xQueueGenericSend>

    osDelay(50);
 8001e5a:	2032      	movs	r0, #50	; 0x32
 8001e5c:	f008 ffc5 	bl	800adea <osDelay>
  {
 8001e60:	e78b      	b.n	8001d7a <Task_Viseur+0x2e>
 8001e62:	bf00      	nop
 8001e64:	20004614 	.word	0x20004614
 8001e68:	200045cc 	.word	0x200045cc
 8001e6c:	63e7063f 	.word	0x63e7063f
 8001e70:	20004520 	.word	0x20004520
 8001e74:	20000030 	.word	0x20000030
 8001e78:	20000032 	.word	0x20000032

08001e7c <Task_Tir>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Tir */
void Task_Tir(void const * argument)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  {
	extern uint16_t x_viseur;
	extern uint16_t y_viseur;
	extern uint16_t x_ennemi;
	extern uint16_t y_ennemi;
	int Message = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
	xQueueReceive(Queue_TirHandle, &Message, 0);
 8001e88:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <Task_Tir+0xc4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f107 0110 	add.w	r1, r7, #16
 8001e90:	2200      	movs	r2, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f009 fbc0 	bl	800b618 <xQueueReceive>
	if (Message == 1){
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d14b      	bne.n	8001f36 <Task_Tir+0xba>

		HAL_GPIO_TogglePin(LED11_GPIO_Port,LED11_Pin);
 8001e9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ea2:	4828      	ldr	r0, [pc, #160]	; (8001f44 <Task_Tir+0xc8>)
 8001ea4:	f003 ffe5 	bl	8005e72 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED12_GPIO_Port,LED12_Pin);
 8001ea8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eac:	4825      	ldr	r0, [pc, #148]	; (8001f44 <Task_Tir+0xc8>)
 8001eae:	f003 ffe0 	bl	8005e72 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED13_GPIO_Port,LED13_Pin);
 8001eb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eb6:	4823      	ldr	r0, [pc, #140]	; (8001f44 <Task_Tir+0xc8>)
 8001eb8:	f003 ffdb 	bl	8005e72 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED14_GPIO_Port,LED14_Pin);
 8001ebc:	2120      	movs	r1, #32
 8001ebe:	4822      	ldr	r0, [pc, #136]	; (8001f48 <Task_Tir+0xcc>)
 8001ec0:	f003 ffd7 	bl	8005e72 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED14_GPIO_Port,LED15_Pin);
 8001ec4:	2140      	movs	r1, #64	; 0x40
 8001ec6:	4820      	ldr	r0, [pc, #128]	; (8001f48 <Task_Tir+0xcc>)
 8001ec8:	f003 ffd3 	bl	8005e72 <HAL_GPIO_TogglePin>
		osDelay(100);
 8001ecc:	2064      	movs	r0, #100	; 0x64
 8001ece:	f008 ff8c 	bl	800adea <osDelay>
		HAL_GPIO_TogglePin(LED11_GPIO_Port,LED11_Pin);
 8001ed2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ed6:	481b      	ldr	r0, [pc, #108]	; (8001f44 <Task_Tir+0xc8>)
 8001ed8:	f003 ffcb 	bl	8005e72 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED12_GPIO_Port,LED12_Pin);
 8001edc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ee0:	4818      	ldr	r0, [pc, #96]	; (8001f44 <Task_Tir+0xc8>)
 8001ee2:	f003 ffc6 	bl	8005e72 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED13_GPIO_Port,LED13_Pin);
 8001ee6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eea:	4816      	ldr	r0, [pc, #88]	; (8001f44 <Task_Tir+0xc8>)
 8001eec:	f003 ffc1 	bl	8005e72 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED14_GPIO_Port,LED14_Pin);
 8001ef0:	2120      	movs	r1, #32
 8001ef2:	4815      	ldr	r0, [pc, #84]	; (8001f48 <Task_Tir+0xcc>)
 8001ef4:	f003 ffbd 	bl	8005e72 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED14_GPIO_Port,LED15_Pin);
 8001ef8:	2140      	movs	r1, #64	; 0x40
 8001efa:	4813      	ldr	r0, [pc, #76]	; (8001f48 <Task_Tir+0xcc>)
 8001efc:	f003 ffb9 	bl	8005e72 <HAL_GPIO_TogglePin>

		int hit = test_hitbox(x_viseur, y_viseur, x_ennemi, y_ennemi);
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <Task_Tir+0xd0>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <Task_Tir+0xd4>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <Task_Tir+0xd8>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <Task_Tir+0xdc>)
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	f7fe fced 	bl	80008f4 <test_hitbox>
 8001f1a:	6178      	str	r0, [r7, #20]
		int Message_hit = 1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
		if (hit == 1){
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d107      	bne.n	8001f36 <Task_Tir+0xba>
			xQueueSend(Queue_hitHandle, &Message_hit, 0);
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <Task_Tir+0xe0>)
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	f107 010c 	add.w	r1, r7, #12
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2200      	movs	r2, #0
 8001f32:	f009 f9cb 	bl	800b2cc <xQueueGenericSend>
			};
	}
    osDelay(100);
 8001f36:	2064      	movs	r0, #100	; 0x64
 8001f38:	f008 ff57 	bl	800adea <osDelay>
  {
 8001f3c:	e7a2      	b.n	8001e84 <Task_Tir+0x8>
 8001f3e:	bf00      	nop
 8001f40:	20004830 	.word	0x20004830
 8001f44:	40021c00 	.word	0x40021c00
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	20000030 	.word	0x20000030
 8001f50:	20000032 	.word	0x20000032
 8001f54:	20000034 	.word	0x20000034
 8001f58:	20000036 	.word	0x20000036
 8001f5c:	200046e4 	.word	0x200046e4

08001f60 <Task_Ennemi>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Ennemi */
void Task_Ennemi(void const * argument)
{
 8001f60:	b5b0      	push	{r4, r5, r7, lr}
 8001f62:	b092      	sub	sp, #72	; 0x48
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Ennemi */
	extern uint16_t x_ennemi;
	extern uint16_t y_ennemi;

	x_ennemi=100;
 8001f68:	4b34      	ldr	r3, [pc, #208]	; (800203c <Task_Ennemi+0xdc>)
 8001f6a:	2264      	movs	r2, #100	; 0x64
 8001f6c:	801a      	strh	r2, [r3, #0]
	y_ennemi=100;
 8001f6e:	4b34      	ldr	r3, [pc, #208]	; (8002040 <Task_Ennemi+0xe0>)
 8001f70:	2264      	movs	r2, #100	; 0x64
 8001f72:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
	int Message_hit = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	647b      	str	r3, [r7, #68]	; 0x44
	xQueueReceive(Queue_hitHandle, &Message_hit, 0);
 8001f78:	4b32      	ldr	r3, [pc, #200]	; (8002044 <Task_Ennemi+0xe4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001f80:	2200      	movs	r2, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f009 fb48 	bl	800b618 <xQueueReceive>

	if (Message_hit == 1){
 8001f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d115      	bne.n	8001fba <Task_Ennemi+0x5a>
		osThreadDef(Ennemi, Task_Ennemi, osPriorityLow, 0, 128);
 8001f8e:	4b2e      	ldr	r3, [pc, #184]	; (8002048 <Task_Ennemi+0xe8>)
 8001f90:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f94:	461d      	mov	r5, r3
 8001f96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		EnnemiHandle = osThreadCreate(osThread(Ennemi), NULL);
 8001fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f008 fed2 	bl	800ad52 <osThreadCreate>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4a26      	ldr	r2, [pc, #152]	; (800204c <Task_Ennemi+0xec>)
 8001fb2:	6013      	str	r3, [r2, #0]
		vTaskDelete(NULL);
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f00a f803 	bl	800bfc0 <vTaskDelete>

	}
	if ((x_ennemi+1>=1+20)&&(x_ennemi+1<=480-20)&&(y_ennemi+1>1+20)&&(y_ennemi+1<=272-20)){
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <Task_Ennemi+0xdc>)
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	2b13      	cmp	r3, #19
 8001fc0:	d91a      	bls.n	8001ff8 <Task_Ennemi+0x98>
 8001fc2:	4b1e      	ldr	r3, [pc, #120]	; (800203c <Task_Ennemi+0xdc>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8001fca:	d215      	bcs.n	8001ff8 <Task_Ennemi+0x98>
 8001fcc:	4b1c      	ldr	r3, [pc, #112]	; (8002040 <Task_Ennemi+0xe0>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	2b14      	cmp	r3, #20
 8001fd2:	d911      	bls.n	8001ff8 <Task_Ennemi+0x98>
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <Task_Ennemi+0xe0>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	2bfb      	cmp	r3, #251	; 0xfb
 8001fda:	d80d      	bhi.n	8001ff8 <Task_Ennemi+0x98>
		xSemaphoreTake( Mutex_EcranHandle, portMAX_DELAY );
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <Task_Ennemi+0xf0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f009 fbfd 	bl	800b7e4 <xQueueSemaphoreTake>
		x_ennemi++;
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <Task_Ennemi+0xdc>)
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <Task_Ennemi+0xdc>)
 8001ff4:	801a      	strh	r2, [r3, #0]
 8001ff6:	e015      	b.n	8002024 <Task_Ennemi+0xc4>
		//y_ennemi++;
	}
	else{
		osThreadDef(Ennemi, Task_Ennemi, osPriorityLow, 0, 128);
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <Task_Ennemi+0xe8>)
 8001ffa:	f107 040c 	add.w	r4, r7, #12
 8001ffe:	461d      	mov	r5, r3
 8002000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002004:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002008:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		EnnemiHandle = osThreadCreate(osThread(Ennemi), NULL);
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f008 fe9d 	bl	800ad52 <osThreadCreate>
 8002018:	4603      	mov	r3, r0
 800201a:	4a0c      	ldr	r2, [pc, #48]	; (800204c <Task_Ennemi+0xec>)
 800201c:	6013      	str	r3, [r2, #0]
		vTaskDelete(NULL);
 800201e:	2000      	movs	r0, #0
 8002020:	f009 ffce 	bl	800bfc0 <vTaskDelete>
	}
	xSemaphoreGive( Mutex_EcranHandle );
 8002024:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <Task_Ennemi+0xf0>)
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	2300      	movs	r3, #0
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	f009 f94d 	bl	800b2cc <xQueueGenericSend>
    osDelay(10);
 8002032:	200a      	movs	r0, #10
 8002034:	f008 fed9 	bl	800adea <osDelay>
  {
 8002038:	e79c      	b.n	8001f74 <Task_Ennemi+0x14>
 800203a:	bf00      	nop
 800203c:	20000034 	.word	0x20000034
 8002040:	20000036 	.word	0x20000036
 8002044:	200046e4 	.word	0x200046e4
 8002048:	0800d914 	.word	0x0800d914
 800204c:	2000465c 	.word	0x2000465c
 8002050:	20004520 	.word	0x20004520

08002054 <Task_Affichage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Affichage */
void Task_Affichage(void const * argument)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	extern uint16_t x_viseur, y_viseur;

	extern uint16_t x_ennemi;
	extern uint16_t y_ennemi;

	xSemaphoreTake( Mutex_EcranHandle, portMAX_DELAY );
 800205c:	4b37      	ldr	r3, [pc, #220]	; (800213c <Task_Affichage+0xe8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f04f 31ff 	mov.w	r1, #4294967295
 8002064:	4618      	mov	r0, r3
 8002066:	f009 fbbd 	bl	800b7e4 <xQueueSemaphoreTake>
	BSP_LCD_Clear(LCD_COLOR_GREEN);
 800206a:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800206e:	f000 fbbf 	bl	80027f0 <BSP_LCD_Clear>

	//ennemi
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8002072:	4833      	ldr	r0, [pc, #204]	; (8002140 <Task_Affichage+0xec>)
 8002074:	f000 fb70 	bl	8002758 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(x_ennemi,y_ennemi, 20);
 8002078:	4b32      	ldr	r3, [pc, #200]	; (8002144 <Task_Affichage+0xf0>)
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	4a32      	ldr	r2, [pc, #200]	; (8002148 <Task_Affichage+0xf4>)
 800207e:	8811      	ldrh	r1, [r2, #0]
 8002080:	2214      	movs	r2, #20
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fe38 	bl	8002cf8 <BSP_LCD_FillCircle>

	//viseur1
	BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8002088:	4830      	ldr	r0, [pc, #192]	; (800214c <Task_Affichage+0xf8>)
 800208a:	f000 fb65 	bl	8002758 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(x_viseur1, y_viseur1+10, x_viseur1, y_viseur1-10);
 800208e:	4b30      	ldr	r3, [pc, #192]	; (8002150 <Task_Affichage+0xfc>)
 8002090:	8818      	ldrh	r0, [r3, #0]
 8002092:	4b30      	ldr	r3, [pc, #192]	; (8002154 <Task_Affichage+0x100>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	330a      	adds	r3, #10
 8002098:	b299      	uxth	r1, r3
 800209a:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <Task_Affichage+0xfc>)
 800209c:	881a      	ldrh	r2, [r3, #0]
 800209e:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <Task_Affichage+0x100>)
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	3b0a      	subs	r3, #10
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	f000 fc29 	bl	80028fc <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(x_viseur1+10, y_viseur1, x_viseur1-10, y_viseur1);
 80020aa:	4b29      	ldr	r3, [pc, #164]	; (8002150 <Task_Affichage+0xfc>)
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	330a      	adds	r3, #10
 80020b0:	b298      	uxth	r0, r3
 80020b2:	4b28      	ldr	r3, [pc, #160]	; (8002154 <Task_Affichage+0x100>)
 80020b4:	8819      	ldrh	r1, [r3, #0]
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <Task_Affichage+0xfc>)
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	3b0a      	subs	r3, #10
 80020bc:	b29a      	uxth	r2, r3
 80020be:	4b25      	ldr	r3, [pc, #148]	; (8002154 <Task_Affichage+0x100>)
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	f000 fc1b 	bl	80028fc <BSP_LCD_DrawLine>
	BSP_LCD_DrawCircle(x_viseur1, y_viseur1, 10);
 80020c6:	4b22      	ldr	r3, [pc, #136]	; (8002150 <Task_Affichage+0xfc>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	4a22      	ldr	r2, [pc, #136]	; (8002154 <Task_Affichage+0x100>)
 80020cc:	8811      	ldrh	r1, [r2, #0]
 80020ce:	220a      	movs	r2, #10
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fcdf 	bl	8002a94 <BSP_LCD_DrawCircle>

	//viseur2
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80020d6:	4820      	ldr	r0, [pc, #128]	; (8002158 <Task_Affichage+0x104>)
 80020d8:	f000 fb3e 	bl	8002758 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(x_viseur, y_viseur+10, x_viseur, y_viseur-10);
 80020dc:	4b1f      	ldr	r3, [pc, #124]	; (800215c <Task_Affichage+0x108>)
 80020de:	8818      	ldrh	r0, [r3, #0]
 80020e0:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <Task_Affichage+0x10c>)
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	330a      	adds	r3, #10
 80020e6:	b299      	uxth	r1, r3
 80020e8:	4b1c      	ldr	r3, [pc, #112]	; (800215c <Task_Affichage+0x108>)
 80020ea:	881a      	ldrh	r2, [r3, #0]
 80020ec:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <Task_Affichage+0x10c>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	3b0a      	subs	r3, #10
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	f000 fc02 	bl	80028fc <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(x_viseur+10, y_viseur, x_viseur-10, y_viseur);
 80020f8:	4b18      	ldr	r3, [pc, #96]	; (800215c <Task_Affichage+0x108>)
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	330a      	adds	r3, #10
 80020fe:	b298      	uxth	r0, r3
 8002100:	4b17      	ldr	r3, [pc, #92]	; (8002160 <Task_Affichage+0x10c>)
 8002102:	8819      	ldrh	r1, [r3, #0]
 8002104:	4b15      	ldr	r3, [pc, #84]	; (800215c <Task_Affichage+0x108>)
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	3b0a      	subs	r3, #10
 800210a:	b29a      	uxth	r2, r3
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <Task_Affichage+0x10c>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	f000 fbf4 	bl	80028fc <BSP_LCD_DrawLine>
	BSP_LCD_DrawCircle(x_viseur, y_viseur, 10);
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <Task_Affichage+0x108>)
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	4a11      	ldr	r2, [pc, #68]	; (8002160 <Task_Affichage+0x10c>)
 800211a:	8811      	ldrh	r1, [r2, #0]
 800211c:	220a      	movs	r2, #10
 800211e:	4618      	mov	r0, r3
 8002120:	f000 fcb8 	bl	8002a94 <BSP_LCD_DrawCircle>



	xSemaphoreGive( Mutex_EcranHandle );
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <Task_Affichage+0xe8>)
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	2300      	movs	r3, #0
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	f009 f8cd 	bl	800b2cc <xQueueGenericSend>

    osDelay(50);
 8002132:	2032      	movs	r0, #50	; 0x32
 8002134:	f008 fe59 	bl	800adea <osDelay>
  {
 8002138:	e790      	b.n	800205c <Task_Affichage+0x8>
 800213a:	bf00      	nop
 800213c:	20004520 	.word	0x20004520
 8002140:	ff0000ff 	.word	0xff0000ff
 8002144:	20000034 	.word	0x20000034
 8002148:	20000036 	.word	0x20000036
 800214c:	ffffa500 	.word	0xffffa500
 8002150:	2000002c 	.word	0x2000002c
 8002154:	2000002e 	.word	0x2000002e
 8002158:	ffff0000 	.word	0xffff0000
 800215c:	20000030 	.word	0x20000030
 8002160:	20000032 	.word	0x20000032

08002164 <Task_Share>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Share */
void Task_Share(void const * argument)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Share */
	uint32_t pData;
  /* Infinite loop */
  for(;;)
  {
	uint16_t Size = 32;
 800216c:	2320      	movs	r3, #32
 800216e:	82fb      	strh	r3, [r7, #22]
	uint32_t Timeout = 10;
 8002170:	230a      	movs	r3, #10
 8002172:	613b      	str	r3, [r7, #16]

	extern uint16_t x_viseur1, y_viseur1;
	HAL_SPI_Receive(&hspi2, &pData, Size, Timeout);
 8002174:	8afa      	ldrh	r2, [r7, #22]
 8002176:	f107 0108 	add.w	r1, r7, #8
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4810      	ldr	r0, [pc, #64]	; (80021c0 <Task_Share+0x5c>)
 800217e:	f006 fe6d 	bl	8008e5c <HAL_SPI_Receive>

	uint16_t y = (uint16_t)( pData);
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	81fb      	strh	r3, [r7, #14]
	uint16_t x = (uint16_t) (pData>>16);
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	0c1b      	lsrs	r3, r3, #16
 800218a:	81bb      	strh	r3, [r7, #12]

	if ((x>=1+10) && (x<=480-10)){x_viseur1= x;};
 800218c:	89bb      	ldrh	r3, [r7, #12]
 800218e:	2b0a      	cmp	r3, #10
 8002190:	d906      	bls.n	80021a0 <Task_Share+0x3c>
 8002192:	89bb      	ldrh	r3, [r7, #12]
 8002194:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 8002198:	d802      	bhi.n	80021a0 <Task_Share+0x3c>
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <Task_Share+0x60>)
 800219c:	89bb      	ldrh	r3, [r7, #12]
 800219e:	8013      	strh	r3, [r2, #0]
	if ((y>=1+10)&&(y<=272-10)){y_viseur1 = y;};
 80021a0:	89fb      	ldrh	r3, [r7, #14]
 80021a2:	2b0a      	cmp	r3, #10
 80021a4:	d906      	bls.n	80021b4 <Task_Share+0x50>
 80021a6:	89fb      	ldrh	r3, [r7, #14]
 80021a8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80021ac:	d802      	bhi.n	80021b4 <Task_Share+0x50>
 80021ae:	4a06      	ldr	r2, [pc, #24]	; (80021c8 <Task_Share+0x64>)
 80021b0:	89fb      	ldrh	r3, [r7, #14]
 80021b2:	8013      	strh	r3, [r2, #0]


    osDelay(SPI_PERIOD);
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <Task_Share+0x68>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f008 fe16 	bl	800adea <osDelay>
  {
 80021be:	e7d5      	b.n	800216c <Task_Share+0x8>
 80021c0:	20004308 	.word	0x20004308
 80021c4:	2000002c 	.word	0x2000002c
 80021c8:	2000002e 	.word	0x2000002e
 80021cc:	20000028 	.word	0x20000028

080021d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021e2:	f002 f81b 	bl	800421c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40001000 	.word	0x40001000

080021f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f8:	b672      	cpsid	i
}
 80021fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021fc:	e7fe      	b.n	80021fc <Error_Handler+0x8>
	...

08002200 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	; 0x30
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a51      	ldr	r2, [pc, #324]	; (8002350 <I2Cx_MspInit+0x150>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d14d      	bne.n	80022ac <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002210:	4b50      	ldr	r3, [pc, #320]	; (8002354 <I2Cx_MspInit+0x154>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	4a4f      	ldr	r2, [pc, #316]	; (8002354 <I2Cx_MspInit+0x154>)
 8002216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800221a:	6313      	str	r3, [r2, #48]	; 0x30
 800221c:	4b4d      	ldr	r3, [pc, #308]	; (8002354 <I2Cx_MspInit+0x154>)
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800222c:	2312      	movs	r3, #18
 800222e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002234:	2302      	movs	r3, #2
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002238:	2304      	movs	r3, #4
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	4619      	mov	r1, r3
 8002242:	4845      	ldr	r0, [pc, #276]	; (8002358 <I2Cx_MspInit+0x158>)
 8002244:	f003 fb44 	bl	80058d0 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800224c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800224e:	f107 031c 	add.w	r3, r7, #28
 8002252:	4619      	mov	r1, r3
 8002254:	4840      	ldr	r0, [pc, #256]	; (8002358 <I2Cx_MspInit+0x158>)
 8002256:	f003 fb3b 	bl	80058d0 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800225a:	4b3e      	ldr	r3, [pc, #248]	; (8002354 <I2Cx_MspInit+0x154>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a3d      	ldr	r2, [pc, #244]	; (8002354 <I2Cx_MspInit+0x154>)
 8002260:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b3b      	ldr	r3, [pc, #236]	; (8002354 <I2Cx_MspInit+0x154>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002272:	4b38      	ldr	r3, [pc, #224]	; (8002354 <I2Cx_MspInit+0x154>)
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	4a37      	ldr	r2, [pc, #220]	; (8002354 <I2Cx_MspInit+0x154>)
 8002278:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800227c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800227e:	4b35      	ldr	r3, [pc, #212]	; (8002354 <I2Cx_MspInit+0x154>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4a34      	ldr	r2, [pc, #208]	; (8002354 <I2Cx_MspInit+0x154>)
 8002284:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002288:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	210f      	movs	r1, #15
 800228e:	2048      	movs	r0, #72	; 0x48
 8002290:	f002 fcba 	bl	8004c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002294:	2048      	movs	r0, #72	; 0x48
 8002296:	f002 fcd3 	bl	8004c40 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	210f      	movs	r1, #15
 800229e:	2049      	movs	r0, #73	; 0x49
 80022a0:	f002 fcb2 	bl	8004c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80022a4:	2049      	movs	r0, #73	; 0x49
 80022a6:	f002 fccb 	bl	8004c40 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80022aa:	e04d      	b.n	8002348 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80022ac:	4b29      	ldr	r3, [pc, #164]	; (8002354 <I2Cx_MspInit+0x154>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	4a28      	ldr	r2, [pc, #160]	; (8002354 <I2Cx_MspInit+0x154>)
 80022b2:	f043 0302 	orr.w	r3, r3, #2
 80022b6:	6313      	str	r3, [r2, #48]	; 0x30
 80022b8:	4b26      	ldr	r3, [pc, #152]	; (8002354 <I2Cx_MspInit+0x154>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80022c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022c8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80022ca:	2312      	movs	r3, #18
 80022cc:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80022d2:	2302      	movs	r3, #2
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80022d6:	2304      	movs	r3, #4
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80022da:	f107 031c 	add.w	r3, r7, #28
 80022de:	4619      	mov	r1, r3
 80022e0:	481e      	ldr	r0, [pc, #120]	; (800235c <I2Cx_MspInit+0x15c>)
 80022e2:	f003 faf5 	bl	80058d0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80022e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	4619      	mov	r1, r3
 80022f2:	481a      	ldr	r0, [pc, #104]	; (800235c <I2Cx_MspInit+0x15c>)
 80022f4:	f003 faec 	bl	80058d0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80022f8:	4b16      	ldr	r3, [pc, #88]	; (8002354 <I2Cx_MspInit+0x154>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	4a15      	ldr	r2, [pc, #84]	; (8002354 <I2Cx_MspInit+0x154>)
 80022fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002302:	6413      	str	r3, [r2, #64]	; 0x40
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <I2Cx_MspInit+0x154>)
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002310:	4b10      	ldr	r3, [pc, #64]	; (8002354 <I2Cx_MspInit+0x154>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4a0f      	ldr	r2, [pc, #60]	; (8002354 <I2Cx_MspInit+0x154>)
 8002316:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800231a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800231c:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <I2Cx_MspInit+0x154>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <I2Cx_MspInit+0x154>)
 8002322:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002326:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002328:	2200      	movs	r2, #0
 800232a:	210f      	movs	r1, #15
 800232c:	201f      	movs	r0, #31
 800232e:	f002 fc6b 	bl	8004c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002332:	201f      	movs	r0, #31
 8002334:	f002 fc84 	bl	8004c40 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002338:	2200      	movs	r2, #0
 800233a:	210f      	movs	r1, #15
 800233c:	2020      	movs	r0, #32
 800233e:	f002 fc63 	bl	8004c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002342:	2020      	movs	r0, #32
 8002344:	f002 fc7c 	bl	8004c40 <HAL_NVIC_EnableIRQ>
}
 8002348:	bf00      	nop
 800234a:	3730      	adds	r7, #48	; 0x30
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000398 	.word	0x20000398
 8002354:	40023800 	.word	0x40023800
 8002358:	40021c00 	.word	0x40021c00
 800235c:	40020400 	.word	0x40020400

08002360 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f004 f8a3 	bl	80064b4 <HAL_I2C_GetState>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d125      	bne.n	80023c0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <I2Cx_Init+0x68>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d103      	bne.n	8002384 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a13      	ldr	r2, [pc, #76]	; (80023cc <I2Cx_Init+0x6c>)
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e002      	b.n	800238a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <I2Cx_Init+0x70>)
 8002388:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <I2Cx_Init+0x74>)
 800238e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff23 	bl	8002200 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f003 fd8c 	bl	8005ed8 <HAL_I2C_Init>
  }
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000398 	.word	0x20000398
 80023cc:	40005c00 	.word	0x40005c00
 80023d0:	40005400 	.word	0x40005400
 80023d4:	40912732 	.word	0x40912732

080023d8 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af04      	add	r7, sp, #16
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	4608      	mov	r0, r1
 80023e2:	4611      	mov	r1, r2
 80023e4:	461a      	mov	r2, r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	72fb      	strb	r3, [r7, #11]
 80023ea:	460b      	mov	r3, r1
 80023ec:	813b      	strh	r3, [r7, #8]
 80023ee:	4613      	mov	r3, r2
 80023f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80023f6:	7afb      	ldrb	r3, [r7, #11]
 80023f8:	b299      	uxth	r1, r3
 80023fa:	88f8      	ldrh	r0, [r7, #6]
 80023fc:	893a      	ldrh	r2, [r7, #8]
 80023fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002402:	9302      	str	r3, [sp, #8]
 8002404:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	4603      	mov	r3, r0
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f003 ff36 	bl	8006280 <HAL_I2C_Mem_Read>
 8002414:	4603      	mov	r3, r0
 8002416:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d004      	beq.n	8002428 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800241e:	7afb      	ldrb	r3, [r7, #11]
 8002420:	4619      	mov	r1, r3
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 f832 	bl	800248c <I2Cx_Error>
  }
  return status;    
 8002428:	7dfb      	ldrb	r3, [r7, #23]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b08a      	sub	sp, #40	; 0x28
 8002436:	af04      	add	r7, sp, #16
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	4608      	mov	r0, r1
 800243c:	4611      	mov	r1, r2
 800243e:	461a      	mov	r2, r3
 8002440:	4603      	mov	r3, r0
 8002442:	72fb      	strb	r3, [r7, #11]
 8002444:	460b      	mov	r3, r1
 8002446:	813b      	strh	r3, [r7, #8]
 8002448:	4613      	mov	r3, r2
 800244a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002450:	7afb      	ldrb	r3, [r7, #11]
 8002452:	b299      	uxth	r1, r3
 8002454:	88f8      	ldrh	r0, [r7, #6]
 8002456:	893a      	ldrh	r2, [r7, #8]
 8002458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245c:	9302      	str	r3, [sp, #8]
 800245e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	4603      	mov	r3, r0
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f003 fdf5 	bl	8006058 <HAL_I2C_Mem_Write>
 800246e:	4603      	mov	r3, r0
 8002470:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002472:	7dfb      	ldrb	r3, [r7, #23]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d004      	beq.n	8002482 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002478:	7afb      	ldrb	r3, [r7, #11]
 800247a:	4619      	mov	r1, r3
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f805 	bl	800248c <I2Cx_Error>
  }
  return status;
 8002482:	7dfb      	ldrb	r3, [r7, #23]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f003 fdad 	bl	8005ff8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ff5e 	bl	8002360 <I2Cx_Init>
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <TS_IO_Init+0x10>)
 80024b2:	f7ff ff55 	bl	8002360 <I2Cx_Init>
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000398 	.word	0x20000398

080024c0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
 80024ca:	460b      	mov	r3, r1
 80024cc:	71bb      	strb	r3, [r7, #6]
 80024ce:	4613      	mov	r3, r2
 80024d0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80024d2:	79bb      	ldrb	r3, [r7, #6]
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	79f9      	ldrb	r1, [r7, #7]
 80024d8:	2301      	movs	r3, #1
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	1d7b      	adds	r3, r7, #5
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2301      	movs	r3, #1
 80024e2:	4803      	ldr	r0, [pc, #12]	; (80024f0 <TS_IO_Write+0x30>)
 80024e4:	f7ff ffa5 	bl	8002432 <I2Cx_WriteMultiple>
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000398 	.word	0x20000398

080024f4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	4603      	mov	r3, r0
 80024fc:	460a      	mov	r2, r1
 80024fe:	71fb      	strb	r3, [r7, #7]
 8002500:	4613      	mov	r3, r2
 8002502:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002508:	79bb      	ldrb	r3, [r7, #6]
 800250a:	b29a      	uxth	r2, r3
 800250c:	79f9      	ldrb	r1, [r7, #7]
 800250e:	2301      	movs	r3, #1
 8002510:	9301      	str	r3, [sp, #4]
 8002512:	f107 030f 	add.w	r3, r7, #15
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2301      	movs	r3, #1
 800251a:	4804      	ldr	r0, [pc, #16]	; (800252c <TS_IO_Read+0x38>)
 800251c:	f7ff ff5c 	bl	80023d8 <I2Cx_ReadMultiple>

  return read_value;
 8002520:	7bfb      	ldrb	r3, [r7, #15]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000398 	.word	0x20000398

08002530 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f001 fe8f 	bl	800425c <HAL_Delay>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800254c:	4b31      	ldr	r3, [pc, #196]	; (8002614 <BSP_LCD_Init+0xcc>)
 800254e:	2228      	movs	r2, #40	; 0x28
 8002550:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002552:	4b30      	ldr	r3, [pc, #192]	; (8002614 <BSP_LCD_Init+0xcc>)
 8002554:	2209      	movs	r2, #9
 8002556:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002558:	4b2e      	ldr	r3, [pc, #184]	; (8002614 <BSP_LCD_Init+0xcc>)
 800255a:	2235      	movs	r2, #53	; 0x35
 800255c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800255e:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <BSP_LCD_Init+0xcc>)
 8002560:	220b      	movs	r2, #11
 8002562:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002564:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <BSP_LCD_Init+0xcc>)
 8002566:	f240 121b 	movw	r2, #283	; 0x11b
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800256c:	4b29      	ldr	r3, [pc, #164]	; (8002614 <BSP_LCD_Init+0xcc>)
 800256e:	f240 2215 	movw	r2, #533	; 0x215
 8002572:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002574:	4b27      	ldr	r3, [pc, #156]	; (8002614 <BSP_LCD_Init+0xcc>)
 8002576:	f240 121d 	movw	r2, #285	; 0x11d
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800257c:	4b25      	ldr	r3, [pc, #148]	; (8002614 <BSP_LCD_Init+0xcc>)
 800257e:	f240 2235 	movw	r2, #565	; 0x235
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002584:	2100      	movs	r1, #0
 8002586:	4823      	ldr	r0, [pc, #140]	; (8002614 <BSP_LCD_Init+0xcc>)
 8002588:	f000 fd4e 	bl	8003028 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800258c:	4b21      	ldr	r3, [pc, #132]	; (8002614 <BSP_LCD_Init+0xcc>)
 800258e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002592:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002594:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <BSP_LCD_Init+0xcc>)
 8002596:	f44f 7288 	mov.w	r2, #272	; 0x110
 800259a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800259c:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <BSP_LCD_Init+0xcc>)
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <BSP_LCD_Init+0xcc>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <BSP_LCD_Init+0xcc>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80025b4:	4b17      	ldr	r3, [pc, #92]	; (8002614 <BSP_LCD_Init+0xcc>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <BSP_LCD_Init+0xcc>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <BSP_LCD_Init+0xcc>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80025c6:	4b13      	ldr	r3, [pc, #76]	; (8002614 <BSP_LCD_Init+0xcc>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <BSP_LCD_Init+0xcc>)
 80025ce:	4a12      	ldr	r2, [pc, #72]	; (8002618 <BSP_LCD_Init+0xd0>)
 80025d0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80025d2:	4810      	ldr	r0, [pc, #64]	; (8002614 <BSP_LCD_Init+0xcc>)
 80025d4:	f004 fc8a 	bl	8006eec <HAL_LTDC_GetState>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d103      	bne.n	80025e6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80025de:	2100      	movs	r1, #0
 80025e0:	480c      	ldr	r0, [pc, #48]	; (8002614 <BSP_LCD_Init+0xcc>)
 80025e2:	f000 fc47 	bl	8002e74 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80025e6:	480b      	ldr	r0, [pc, #44]	; (8002614 <BSP_LCD_Init+0xcc>)
 80025e8:	f004 fab0 	bl	8006b4c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80025ec:	2201      	movs	r2, #1
 80025ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025f2:	480a      	ldr	r0, [pc, #40]	; (800261c <BSP_LCD_Init+0xd4>)
 80025f4:	f003 fc24 	bl	8005e40 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80025f8:	2201      	movs	r2, #1
 80025fa:	2108      	movs	r1, #8
 80025fc:	4808      	ldr	r0, [pc, #32]	; (8002620 <BSP_LCD_Init+0xd8>)
 80025fe:	f003 fc1f 	bl	8005e40 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002602:	f000 fd79 	bl	80030f8 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002606:	4807      	ldr	r0, [pc, #28]	; (8002624 <BSP_LCD_Init+0xdc>)
 8002608:	f000 f8d8 	bl	80027bc <BSP_LCD_SetFont>
  
  return LCD_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200048bc 	.word	0x200048bc
 8002618:	40016800 	.word	0x40016800
 800261c:	40022000 	.word	0x40022000
 8002620:	40022800 	.word	0x40022800
 8002624:	20000038 	.word	0x20000038

08002628 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <BSP_LCD_GetXSize+0x20>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a06      	ldr	r2, [pc, #24]	; (800264c <BSP_LCD_GetXSize+0x24>)
 8002632:	2134      	movs	r1, #52	; 0x34
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	3360      	adds	r3, #96	; 0x60
 800263c:	681b      	ldr	r3, [r3, #0]
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	20000424 	.word	0x20000424
 800264c:	200048bc 	.word	0x200048bc

08002650 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <BSP_LCD_GetYSize+0x20>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a06      	ldr	r2, [pc, #24]	; (8002674 <BSP_LCD_GetYSize+0x24>)
 800265a:	2134      	movs	r1, #52	; 0x34
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	3364      	adds	r3, #100	; 0x64
 8002664:	681b      	ldr	r3, [r3, #0]
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	20000424 	.word	0x20000424
 8002674:	200048bc 	.word	0x200048bc

08002678 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002678:	b580      	push	{r7, lr}
 800267a:	b090      	sub	sp, #64	; 0x40
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002688:	f7ff ffce 	bl	8002628 <BSP_LCD_GetXSize>
 800268c:	4603      	mov	r3, r0
 800268e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002694:	f7ff ffdc 	bl	8002650 <BSP_LCD_GetYSize>
 8002698:	4603      	mov	r3, r0
 800269a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800269c:	2300      	movs	r3, #0
 800269e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80026a4:	23ff      	movs	r3, #255	; 0xff
 80026a6:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80026be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80026c4:	2307      	movs	r3, #7
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80026c8:	f7ff ffae 	bl	8002628 <BSP_LCD_GetXSize>
 80026cc:	4603      	mov	r3, r0
 80026ce:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80026d0:	f7ff ffbe 	bl	8002650 <BSP_LCD_GetYSize>
 80026d4:	4603      	mov	r3, r0
 80026d6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80026d8:	88fa      	ldrh	r2, [r7, #6]
 80026da:	f107 030c 	add.w	r3, r7, #12
 80026de:	4619      	mov	r1, r3
 80026e0:	4812      	ldr	r0, [pc, #72]	; (800272c <BSP_LCD_LayerDefaultInit+0xb4>)
 80026e2:	f004 fbc5 	bl	8006e70 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80026e6:	88fa      	ldrh	r2, [r7, #6]
 80026e8:	4911      	ldr	r1, [pc, #68]	; (8002730 <BSP_LCD_LayerDefaultInit+0xb8>)
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3304      	adds	r3, #4
 80026f6:	f04f 32ff 	mov.w	r2, #4294967295
 80026fa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80026fc:	88fa      	ldrh	r2, [r7, #6]
 80026fe:	490c      	ldr	r1, [pc, #48]	; (8002730 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	3308      	adds	r3, #8
 800270c:	4a09      	ldr	r2, [pc, #36]	; (8002734 <BSP_LCD_LayerDefaultInit+0xbc>)
 800270e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002710:	88fa      	ldrh	r2, [r7, #6]
 8002712:	4907      	ldr	r1, [pc, #28]	; (8002730 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002722:	601a      	str	r2, [r3, #0]
}
 8002724:	bf00      	nop
 8002726:	3740      	adds	r7, #64	; 0x40
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	200048bc 	.word	0x200048bc
 8002730:	20000428 	.word	0x20000428
 8002734:	20000038 	.word	0x20000038

08002738 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <BSP_LCD_SelectLayer+0x1c>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6013      	str	r3, [r2, #0]
} 
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000424 	.word	0x20000424

08002758 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <BSP_LCD_SetTextColor+0x28>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4907      	ldr	r1, [pc, #28]	; (8002784 <BSP_LCD_SetTextColor+0x2c>)
 8002766:	4613      	mov	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	601a      	str	r2, [r3, #0]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	20000424 	.word	0x20000424
 8002784:	20000428 	.word	0x20000428

08002788 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <BSP_LCD_SetBackColor+0x2c>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4908      	ldr	r1, [pc, #32]	; (80027b8 <BSP_LCD_SetBackColor+0x30>)
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	3304      	adds	r3, #4
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	601a      	str	r2, [r3, #0]
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000424 	.word	0x20000424
 80027b8:	20000428 	.word	0x20000428

080027bc <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <BSP_LCD_SetFont+0x2c>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4908      	ldr	r1, [pc, #32]	; (80027ec <BSP_LCD_SetFont+0x30>)
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	3308      	adds	r3, #8
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	601a      	str	r2, [r3, #0]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000424 	.word	0x20000424
 80027ec:	20000428 	.word	0x20000428

080027f0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80027f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <BSP_LCD_Clear+0x48>)
 80027fa:	681c      	ldr	r4, [r3, #0]
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <BSP_LCD_Clear+0x48>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0e      	ldr	r2, [pc, #56]	; (800283c <BSP_LCD_Clear+0x4c>)
 8002802:	2134      	movs	r1, #52	; 0x34
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	335c      	adds	r3, #92	; 0x5c
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	461e      	mov	r6, r3
 8002810:	f7ff ff0a 	bl	8002628 <BSP_LCD_GetXSize>
 8002814:	4605      	mov	r5, r0
 8002816:	f7ff ff1b 	bl	8002650 <BSP_LCD_GetYSize>
 800281a:	4602      	mov	r2, r0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	2300      	movs	r3, #0
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	4613      	mov	r3, r2
 8002826:	462a      	mov	r2, r5
 8002828:	4631      	mov	r1, r6
 800282a:	4620      	mov	r0, r4
 800282c:	f000 fc18 	bl	8003060 <LL_FillBuffer>
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002838:	20000424 	.word	0x20000424
 800283c:	200048bc 	.word	0x200048bc

08002840 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002840:	b5b0      	push	{r4, r5, r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af02      	add	r7, sp, #8
 8002846:	4603      	mov	r3, r0
 8002848:	80fb      	strh	r3, [r7, #6]
 800284a:	460b      	mov	r3, r1
 800284c:	80bb      	strh	r3, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002856:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <BSP_LCD_DrawHLine+0xb0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a26      	ldr	r2, [pc, #152]	; (80028f4 <BSP_LCD_DrawHLine+0xb4>)
 800285c:	2134      	movs	r1, #52	; 0x34
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4413      	add	r3, r2
 8002864:	3348      	adds	r3, #72	; 0x48
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d114      	bne.n	8002896 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800286c:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <BSP_LCD_DrawHLine+0xb0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a20      	ldr	r2, [pc, #128]	; (80028f4 <BSP_LCD_DrawHLine+0xb4>)
 8002872:	2134      	movs	r1, #52	; 0x34
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	335c      	adds	r3, #92	; 0x5c
 800287c:	681c      	ldr	r4, [r3, #0]
 800287e:	f7ff fed3 	bl	8002628 <BSP_LCD_GetXSize>
 8002882:	4602      	mov	r2, r0
 8002884:	88bb      	ldrh	r3, [r7, #4]
 8002886:	fb03 f202 	mul.w	r2, r3, r2
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	4413      	add	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4423      	add	r3, r4
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e013      	b.n	80028be <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002896:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <BSP_LCD_DrawHLine+0xb0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a16      	ldr	r2, [pc, #88]	; (80028f4 <BSP_LCD_DrawHLine+0xb4>)
 800289c:	2134      	movs	r1, #52	; 0x34
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	335c      	adds	r3, #92	; 0x5c
 80028a6:	681c      	ldr	r4, [r3, #0]
 80028a8:	f7ff febe 	bl	8002628 <BSP_LCD_GetXSize>
 80028ac:	4602      	mov	r2, r0
 80028ae:	88bb      	ldrh	r3, [r7, #4]
 80028b0:	fb03 f202 	mul.w	r2, r3, r2
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4423      	add	r3, r4
 80028bc:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80028be:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <BSP_LCD_DrawHLine+0xb0>)
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	68f9      	ldr	r1, [r7, #12]
 80028c4:	887c      	ldrh	r4, [r7, #2]
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <BSP_LCD_DrawHLine+0xb0>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4d0b      	ldr	r5, [pc, #44]	; (80028f8 <BSP_LCD_DrawHLine+0xb8>)
 80028cc:	4613      	mov	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	442b      	add	r3, r5
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	2300      	movs	r3, #0
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	2301      	movs	r3, #1
 80028e0:	4622      	mov	r2, r4
 80028e2:	f000 fbbd 	bl	8003060 <LL_FillBuffer>
}
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bdb0      	pop	{r4, r5, r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000424 	.word	0x20000424
 80028f4:	200048bc 	.word	0x200048bc
 80028f8:	20000428 	.word	0x20000428

080028fc <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b08b      	sub	sp, #44	; 0x2c
 8002900:	af00      	add	r7, sp, #0
 8002902:	4604      	mov	r4, r0
 8002904:	4608      	mov	r0, r1
 8002906:	4611      	mov	r1, r2
 8002908:	461a      	mov	r2, r3
 800290a:	4623      	mov	r3, r4
 800290c:	80fb      	strh	r3, [r7, #6]
 800290e:	4603      	mov	r3, r0
 8002910:	80bb      	strh	r3, [r7, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	807b      	strh	r3, [r7, #2]
 8002916:	4613      	mov	r3, r2
 8002918:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 800291a:	2300      	movs	r3, #0
 800291c:	823b      	strh	r3, [r7, #16]
 800291e:	2300      	movs	r3, #0
 8002920:	81fb      	strh	r3, [r7, #14]
 8002922:	2300      	movs	r3, #0
 8002924:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002926:	2300      	movs	r3, #0
 8002928:	84bb      	strh	r3, [r7, #36]	; 0x24
 800292a:	2300      	movs	r3, #0
 800292c:	847b      	strh	r3, [r7, #34]	; 0x22
 800292e:	2300      	movs	r3, #0
 8002930:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8002932:	2300      	movs	r3, #0
 8002934:	83fb      	strh	r3, [r7, #30]
 8002936:	2300      	movs	r3, #0
 8002938:	83bb      	strh	r3, [r7, #28]
 800293a:	2300      	movs	r3, #0
 800293c:	837b      	strh	r3, [r7, #26]
 800293e:	2300      	movs	r3, #0
 8002940:	833b      	strh	r3, [r7, #24]
 8002942:	2300      	movs	r3, #0
 8002944:	82fb      	strh	r3, [r7, #22]
 8002946:	2300      	movs	r3, #0
 8002948:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800294e:	887a      	ldrh	r2, [r7, #2]
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	bfb8      	it	lt
 8002958:	425b      	neglt	r3, r3
 800295a:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800295c:	883a      	ldrh	r2, [r7, #0]
 800295e:	88bb      	ldrh	r3, [r7, #4]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	bfb8      	it	lt
 8002966:	425b      	neglt	r3, r3
 8002968:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 800296e:	88bb      	ldrh	r3, [r7, #4]
 8002970:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8002972:	887a      	ldrh	r2, [r7, #2]
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	429a      	cmp	r2, r3
 8002978:	d304      	bcc.n	8002984 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 800297a:	2301      	movs	r3, #1
 800297c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800297e:	2301      	movs	r3, #1
 8002980:	843b      	strh	r3, [r7, #32]
 8002982:	e005      	b.n	8002990 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002988:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 800298a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800298e:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8002990:	883a      	ldrh	r2, [r7, #0]
 8002992:	88bb      	ldrh	r3, [r7, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	d304      	bcc.n	80029a2 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002998:	2301      	movs	r3, #1
 800299a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 800299c:	2301      	movs	r3, #1
 800299e:	83bb      	strh	r3, [r7, #28]
 80029a0:	e005      	b.n	80029ae <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80029a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029a6:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80029a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029ac:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80029ae:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80029b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	db11      	blt.n	80029de <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80029ba:	2300      	movs	r3, #0
 80029bc:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80029be:	2300      	movs	r3, #0
 80029c0:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80029c2:	8a3b      	ldrh	r3, [r7, #16]
 80029c4:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80029c6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	da00      	bge.n	80029d0 <BSP_LCD_DrawLine+0xd4>
 80029ce:	3301      	adds	r3, #1
 80029d0:	105b      	asrs	r3, r3, #1
 80029d2:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 80029d4:	89fb      	ldrh	r3, [r7, #14]
 80029d6:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 80029d8:	8a3b      	ldrh	r3, [r7, #16]
 80029da:	82bb      	strh	r3, [r7, #20]
 80029dc:	e010      	b.n	8002a00 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80029de:	2300      	movs	r3, #0
 80029e0:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80029e2:	2300      	movs	r3, #0
 80029e4:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80029e6:	89fb      	ldrh	r3, [r7, #14]
 80029e8:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80029ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	da00      	bge.n	80029f4 <BSP_LCD_DrawLine+0xf8>
 80029f2:	3301      	adds	r3, #1
 80029f4:	105b      	asrs	r3, r3, #1
 80029f6:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 80029f8:	8a3b      	ldrh	r3, [r7, #16]
 80029fa:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 80029fc:	89fb      	ldrh	r3, [r7, #14]
 80029fe:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002a00:	2300      	movs	r3, #0
 8002a02:	827b      	strh	r3, [r7, #18]
 8002a04:	e037      	b.n	8002a76 <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002a06:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002a08:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <BSP_LCD_DrawLine+0x190>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4c20      	ldr	r4, [pc, #128]	; (8002a90 <BSP_LCD_DrawLine+0x194>)
 8002a10:	4613      	mov	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4423      	add	r3, r4
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	f000 f923 	bl	8002c68 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8002a22:	8b3a      	ldrh	r2, [r7, #24]
 8002a24:	8afb      	ldrh	r3, [r7, #22]
 8002a26:	4413      	add	r3, r2
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002a2c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002a30:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	db0e      	blt.n	8002a56 <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002a38:	8b3a      	ldrh	r2, [r7, #24]
 8002a3a:	8b7b      	ldrh	r3, [r7, #26]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8002a42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002a44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a46:	4413      	add	r3, r2
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002a4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a4e:	8bfb      	ldrh	r3, [r7, #30]
 8002a50:	4413      	add	r3, r2
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8002a56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002a58:	8c3b      	ldrh	r3, [r7, #32]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002a60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a62:	8bbb      	ldrh	r3, [r7, #28]
 8002a64:	4413      	add	r3, r2
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002a6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3301      	adds	r3, #1
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	827b      	strh	r3, [r7, #18]
 8002a76:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002a7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	ddc1      	ble.n	8002a06 <BSP_LCD_DrawLine+0x10a>
  }
}
 8002a82:	bf00      	nop
 8002a84:	bf00      	nop
 8002a86:	372c      	adds	r7, #44	; 0x2c
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd90      	pop	{r4, r7, pc}
 8002a8c:	20000424 	.word	0x20000424
 8002a90:	20000428 	.word	0x20000428

08002a94 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	80fb      	strh	r3, [r7, #6]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	80bb      	strh	r3, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002aa6:	887b      	ldrh	r3, [r7, #2]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	f1c3 0303 	rsb	r3, r3, #3
 8002aae:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002ab4:	887b      	ldrh	r3, [r7, #2]
 8002ab6:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002ab8:	e0c7      	b.n	8002c4a <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	b298      	uxth	r0, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	88ba      	ldrh	r2, [r7, #4]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	b299      	uxth	r1, r3
 8002ace:	4b64      	ldr	r3, [pc, #400]	; (8002c60 <BSP_LCD_DrawCircle+0x1cc>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4c64      	ldr	r4, [pc, #400]	; (8002c64 <BSP_LCD_DrawCircle+0x1d0>)
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4423      	add	r3, r4
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	f000 f8c1 	bl	8002c68 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	88fa      	ldrh	r2, [r7, #6]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	b298      	uxth	r0, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	88ba      	ldrh	r2, [r7, #4]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	b299      	uxth	r1, r3
 8002afa:	4b59      	ldr	r3, [pc, #356]	; (8002c60 <BSP_LCD_DrawCircle+0x1cc>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4c59      	ldr	r4, [pc, #356]	; (8002c64 <BSP_LCD_DrawCircle+0x1d0>)
 8002b00:	4613      	mov	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4423      	add	r3, r4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f000 f8ab 	bl	8002c68 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	4413      	add	r3, r2
 8002b1a:	b298      	uxth	r0, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	88ba      	ldrh	r2, [r7, #4]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	b299      	uxth	r1, r3
 8002b26:	4b4e      	ldr	r3, [pc, #312]	; (8002c60 <BSP_LCD_DrawCircle+0x1cc>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	4c4e      	ldr	r4, [pc, #312]	; (8002c64 <BSP_LCD_DrawCircle+0x1d0>)
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4423      	add	r3, r4
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f000 f895 	bl	8002c68 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	88fa      	ldrh	r2, [r7, #6]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	b298      	uxth	r0, r3
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	88ba      	ldrh	r2, [r7, #4]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	b299      	uxth	r1, r3
 8002b52:	4b43      	ldr	r3, [pc, #268]	; (8002c60 <BSP_LCD_DrawCircle+0x1cc>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4c43      	ldr	r4, [pc, #268]	; (8002c64 <BSP_LCD_DrawCircle+0x1d0>)
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4423      	add	r3, r4
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	f000 f87f 	bl	8002c68 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	4413      	add	r3, r2
 8002b72:	b298      	uxth	r0, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	88bb      	ldrh	r3, [r7, #4]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	b299      	uxth	r1, r3
 8002b7e:	4b38      	ldr	r3, [pc, #224]	; (8002c60 <BSP_LCD_DrawCircle+0x1cc>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4c38      	ldr	r4, [pc, #224]	; (8002c64 <BSP_LCD_DrawCircle+0x1d0>)
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4423      	add	r3, r4
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	f000 f869 	bl	8002c68 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	88fa      	ldrh	r2, [r7, #6]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	b298      	uxth	r0, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	88bb      	ldrh	r3, [r7, #4]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	b299      	uxth	r1, r3
 8002baa:	4b2d      	ldr	r3, [pc, #180]	; (8002c60 <BSP_LCD_DrawCircle+0x1cc>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	4c2d      	ldr	r4, [pc, #180]	; (8002c64 <BSP_LCD_DrawCircle+0x1d0>)
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4423      	add	r3, r4
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	f000 f853 	bl	8002c68 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	4413      	add	r3, r2
 8002bca:	b298      	uxth	r0, r3
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	88bb      	ldrh	r3, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	b299      	uxth	r1, r3
 8002bd6:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <BSP_LCD_DrawCircle+0x1cc>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4c22      	ldr	r4, [pc, #136]	; (8002c64 <BSP_LCD_DrawCircle+0x1d0>)
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4423      	add	r3, r4
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	f000 f83d 	bl	8002c68 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	88fa      	ldrh	r2, [r7, #6]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	b298      	uxth	r0, r3
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	88bb      	ldrh	r3, [r7, #4]
 8002bfe:	4413      	add	r3, r2
 8002c00:	b299      	uxth	r1, r3
 8002c02:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <BSP_LCD_DrawCircle+0x1cc>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	4c17      	ldr	r4, [pc, #92]	; (8002c64 <BSP_LCD_DrawCircle+0x1d0>)
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4423      	add	r3, r4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	f000 f827 	bl	8002c68 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	da06      	bge.n	8002c2e <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	009a      	lsls	r2, r3, #2
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	4413      	add	r3, r2
 8002c28:	3306      	adds	r3, #6
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	e00a      	b.n	8002c44 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	009a      	lsls	r2, r3, #2
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	4413      	add	r3, r2
 8002c3a:	330a      	adds	r3, #10
 8002c3c:	617b      	str	r3, [r7, #20]
      current_y--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	3301      	adds	r3, #1
 8002c48:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	f67f af33 	bls.w	8002aba <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd90      	pop	{r4, r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000424 	.word	0x20000424
 8002c64:	20000428 	.word	0x20000428

08002c68 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002c68:	b5b0      	push	{r4, r5, r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	603a      	str	r2, [r7, #0]
 8002c72:	80fb      	strh	r3, [r7, #6]
 8002c74:	460b      	mov	r3, r1
 8002c76:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002c78:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <BSP_LCD_DrawPixel+0x88>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <BSP_LCD_DrawPixel+0x8c>)
 8002c7e:	2134      	movs	r1, #52	; 0x34
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	3348      	adds	r3, #72	; 0x48
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d116      	bne.n	8002cbc <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002c8e:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <BSP_LCD_DrawPixel+0x88>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a18      	ldr	r2, [pc, #96]	; (8002cf4 <BSP_LCD_DrawPixel+0x8c>)
 8002c94:	2134      	movs	r1, #52	; 0x34
 8002c96:	fb01 f303 	mul.w	r3, r1, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	335c      	adds	r3, #92	; 0x5c
 8002c9e:	681c      	ldr	r4, [r3, #0]
 8002ca0:	88bd      	ldrh	r5, [r7, #4]
 8002ca2:	f7ff fcc1 	bl	8002628 <BSP_LCD_GetXSize>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	fb03 f205 	mul.w	r2, r3, r5
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	4413      	add	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4423      	add	r3, r4
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	b292      	uxth	r2, r2
 8002cb8:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002cba:	e015      	b.n	8002ce8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <BSP_LCD_DrawPixel+0x88>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0c      	ldr	r2, [pc, #48]	; (8002cf4 <BSP_LCD_DrawPixel+0x8c>)
 8002cc2:	2134      	movs	r1, #52	; 0x34
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	335c      	adds	r3, #92	; 0x5c
 8002ccc:	681c      	ldr	r4, [r3, #0]
 8002cce:	88bd      	ldrh	r5, [r7, #4]
 8002cd0:	f7ff fcaa 	bl	8002628 <BSP_LCD_GetXSize>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	fb03 f205 	mul.w	r2, r3, r5
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4423      	add	r3, r4
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	6013      	str	r3, [r2, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf0:	20000424 	.word	0x20000424
 8002cf4:	200048bc 	.word	0x200048bc

08002cf8 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	80fb      	strh	r3, [r7, #6]
 8002d02:	460b      	mov	r3, r1
 8002d04:	80bb      	strh	r3, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002d0a:	887b      	ldrh	r3, [r7, #2]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	f1c3 0303 	rsb	r3, r3, #3
 8002d12:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002d18:	887b      	ldrh	r3, [r7, #2]
 8002d1a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002d1c:	4b44      	ldr	r3, [pc, #272]	; (8002e30 <BSP_LCD_FillCircle+0x138>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4944      	ldr	r1, [pc, #272]	; (8002e34 <BSP_LCD_FillCircle+0x13c>)
 8002d22:	4613      	mov	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fd12 	bl	8002758 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8002d34:	e061      	b.n	8002dfa <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d021      	beq.n	8002d80 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	88fa      	ldrh	r2, [r7, #6]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	b298      	uxth	r0, r3
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	88bb      	ldrh	r3, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	b299      	uxth	r1, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f7ff fd71 	bl	8002840 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	88fa      	ldrh	r2, [r7, #6]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	b298      	uxth	r0, r3
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	88ba      	ldrh	r2, [r7, #4]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	b299      	uxth	r1, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f7ff fd60 	bl	8002840 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d021      	beq.n	8002dca <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	88fa      	ldrh	r2, [r7, #6]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	b298      	uxth	r0, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	88ba      	ldrh	r2, [r7, #4]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	b299      	uxth	r1, r3
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	f7ff fd4c 	bl	8002840 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	88fa      	ldrh	r2, [r7, #6]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	b298      	uxth	r0, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	88bb      	ldrh	r3, [r7, #4]
 8002db8:	4413      	add	r3, r2
 8002dba:	b299      	uxth	r1, r3
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f7ff fd3b 	bl	8002840 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	da06      	bge.n	8002dde <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	009a      	lsls	r2, r3, #2
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3306      	adds	r3, #6
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	e00a      	b.n	8002df4 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	009a      	lsls	r2, r3, #2
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	4413      	add	r3, r2
 8002dea:	330a      	adds	r3, #10
 8002dec:	617b      	str	r3, [r7, #20]
      current_y--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	3301      	adds	r3, #1
 8002df8:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d999      	bls.n	8002d36 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <BSP_LCD_FillCircle+0x138>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	490b      	ldr	r1, [pc, #44]	; (8002e34 <BSP_LCD_FillCircle+0x13c>)
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fc9f 	bl	8002758 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	88b9      	ldrh	r1, [r7, #4]
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fe37 	bl	8002a94 <BSP_LCD_DrawCircle>
}
 8002e26:	bf00      	nop
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000424 	.word	0x20000424
 8002e34:	20000428 	.word	0x20000428

08002e38 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <BSP_LCD_DisplayOn+0x30>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <BSP_LCD_DisplayOn+0x30>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e52:	4806      	ldr	r0, [pc, #24]	; (8002e6c <BSP_LCD_DisplayOn+0x34>)
 8002e54:	f002 fff4 	bl	8005e40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002e58:	2201      	movs	r2, #1
 8002e5a:	2108      	movs	r1, #8
 8002e5c:	4804      	ldr	r0, [pc, #16]	; (8002e70 <BSP_LCD_DisplayOn+0x38>)
 8002e5e:	f002 ffef 	bl	8005e40 <HAL_GPIO_WritePin>
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200048bc 	.word	0x200048bc
 8002e6c:	40022000 	.word	0x40022000
 8002e70:	40022800 	.word	0x40022800

08002e74 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b090      	sub	sp, #64	; 0x40
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002e7e:	4b64      	ldr	r3, [pc, #400]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e82:	4a63      	ldr	r2, [pc, #396]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002e84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e88:	6453      	str	r3, [r2, #68]	; 0x44
 8002e8a:	4b61      	ldr	r3, [pc, #388]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002e96:	4b5e      	ldr	r3, [pc, #376]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4a5d      	ldr	r2, [pc, #372]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002e9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b5b      	ldr	r3, [pc, #364]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eae:	4b58      	ldr	r3, [pc, #352]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	4a57      	ldr	r2, [pc, #348]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002eb4:	f043 0310 	orr.w	r3, r3, #16
 8002eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eba:	4b55      	ldr	r3, [pc, #340]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	623b      	str	r3, [r7, #32]
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ec6:	4b52      	ldr	r3, [pc, #328]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	4a51      	ldr	r2, [pc, #324]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed2:	4b4f      	ldr	r3, [pc, #316]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eda:	61fb      	str	r3, [r7, #28]
 8002edc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ede:	4b4c      	ldr	r3, [pc, #304]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a4b      	ldr	r2, [pc, #300]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b49      	ldr	r3, [pc, #292]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef2:	61bb      	str	r3, [r7, #24]
 8002ef4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ef6:	4b46      	ldr	r3, [pc, #280]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	4a45      	ldr	r2, [pc, #276]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002efc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f00:	6313      	str	r3, [r2, #48]	; 0x30
 8002f02:	4b43      	ldr	r3, [pc, #268]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002f0e:	4b40      	ldr	r3, [pc, #256]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	4a3f      	ldr	r2, [pc, #252]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002f14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f18:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1a:	4b3d      	ldr	r3, [pc, #244]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002f26:	4b3a      	ldr	r3, [pc, #232]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	4a39      	ldr	r2, [pc, #228]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f30:	6313      	str	r3, [r2, #48]	; 0x30
 8002f32:	4b37      	ldr	r3, [pc, #220]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002f3e:	4b34      	ldr	r3, [pc, #208]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	4a33      	ldr	r2, [pc, #204]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002f44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f48:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4a:	4b31      	ldr	r3, [pc, #196]	; (8003010 <BSP_LCD_MspInit+0x19c>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002f56:	2310      	movs	r3, #16
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002f62:	2302      	movs	r3, #2
 8002f64:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002f66:	230e      	movs	r3, #14
 8002f68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4828      	ldr	r0, [pc, #160]	; (8003014 <BSP_LCD_MspInit+0x1a0>)
 8002f72:	f002 fcad 	bl	80058d0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002f80:	2309      	movs	r3, #9
 8002f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4823      	ldr	r0, [pc, #140]	; (8003018 <BSP_LCD_MspInit+0x1a4>)
 8002f8c:	f002 fca0 	bl	80058d0 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002f90:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f96:	2302      	movs	r3, #2
 8002f98:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002f9a:	230e      	movs	r3, #14
 8002f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	481d      	ldr	r0, [pc, #116]	; (800301c <BSP_LCD_MspInit+0x1a8>)
 8002fa6:	f002 fc93 	bl	80058d0 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002faa:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002fb4:	230e      	movs	r3, #14
 8002fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002fb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4818      	ldr	r0, [pc, #96]	; (8003020 <BSP_LCD_MspInit+0x1ac>)
 8002fc0:	f002 fc86 	bl	80058d0 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002fc4:	23f7      	movs	r3, #247	; 0xf7
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002fcc:	230e      	movs	r3, #14
 8002fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002fd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4813      	ldr	r0, [pc, #76]	; (8003024 <BSP_LCD_MspInit+0x1b0>)
 8002fd8:	f002 fc7a 	bl	80058d0 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002fe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fea:	4619      	mov	r1, r3
 8002fec:	480b      	ldr	r0, [pc, #44]	; (800301c <BSP_LCD_MspInit+0x1a8>)
 8002fee:	f002 fc6f 	bl	80058d0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ffe:	4619      	mov	r1, r3
 8003000:	4808      	ldr	r0, [pc, #32]	; (8003024 <BSP_LCD_MspInit+0x1b0>)
 8003002:	f002 fc65 	bl	80058d0 <HAL_GPIO_Init>
}
 8003006:	bf00      	nop
 8003008:	3740      	adds	r7, #64	; 0x40
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800
 8003014:	40021000 	.word	0x40021000
 8003018:	40021800 	.word	0x40021800
 800301c:	40022000 	.word	0x40022000
 8003020:	40022400 	.word	0x40022400
 8003024:	40022800 	.word	0x40022800

08003028 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <BSP_LCD_ClockConfig+0x34>)
 8003034:	2208      	movs	r2, #8
 8003036:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003038:	4b08      	ldr	r3, [pc, #32]	; (800305c <BSP_LCD_ClockConfig+0x34>)
 800303a:	22c0      	movs	r2, #192	; 0xc0
 800303c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800303e:	4b07      	ldr	r3, [pc, #28]	; (800305c <BSP_LCD_ClockConfig+0x34>)
 8003040:	2205      	movs	r2, #5
 8003042:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <BSP_LCD_ClockConfig+0x34>)
 8003046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800304a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800304c:	4803      	ldr	r0, [pc, #12]	; (800305c <BSP_LCD_ClockConfig+0x34>)
 800304e:	f004 fe01 	bl	8007c54 <HAL_RCCEx_PeriphCLKConfig>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000440 	.word	0x20000440

08003060 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800306e:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <LL_FillBuffer+0x88>)
 8003070:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003074:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003076:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <LL_FillBuffer+0x8c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <LL_FillBuffer+0x90>)
 800307c:	2134      	movs	r1, #52	; 0x34
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	4413      	add	r3, r2
 8003084:	3348      	adds	r3, #72	; 0x48
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d103      	bne.n	8003094 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800308c:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <LL_FillBuffer+0x88>)
 800308e:	2202      	movs	r2, #2
 8003090:	609a      	str	r2, [r3, #8]
 8003092:	e002      	b.n	800309a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003094:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <LL_FillBuffer+0x88>)
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800309a:	4a13      	ldr	r2, [pc, #76]	; (80030e8 <LL_FillBuffer+0x88>)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80030a0:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <LL_FillBuffer+0x88>)
 80030a2:	4a14      	ldr	r2, [pc, #80]	; (80030f4 <LL_FillBuffer+0x94>)
 80030a4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80030a6:	4810      	ldr	r0, [pc, #64]	; (80030e8 <LL_FillBuffer+0x88>)
 80030a8:	f002 f876 	bl	8005198 <HAL_DMA2D_Init>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d115      	bne.n	80030de <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80030b2:	68f9      	ldr	r1, [r7, #12]
 80030b4:	480c      	ldr	r0, [pc, #48]	; (80030e8 <LL_FillBuffer+0x88>)
 80030b6:	f002 fadd 	bl	8005674 <HAL_DMA2D_ConfigLayer>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10e      	bne.n	80030de <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69f9      	ldr	r1, [r7, #28]
 80030ca:	4807      	ldr	r0, [pc, #28]	; (80030e8 <LL_FillBuffer+0x88>)
 80030cc:	f002 f8ae 	bl	800522c <HAL_DMA2D_Start>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d103      	bne.n	80030de <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80030d6:	210a      	movs	r1, #10
 80030d8:	4803      	ldr	r0, [pc, #12]	; (80030e8 <LL_FillBuffer+0x88>)
 80030da:	f002 f8d2 	bl	8005282 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80030de:	bf00      	nop
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	200003e4 	.word	0x200003e4
 80030ec:	20000424 	.word	0x20000424
 80030f0:	200048bc 	.word	0x200048bc
 80030f4:	4002b000 	.word	0x4002b000

080030f8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80030fc:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <BSP_SDRAM_Init+0xac>)
 80030fe:	4a2a      	ldr	r2, [pc, #168]	; (80031a8 <BSP_SDRAM_Init+0xb0>)
 8003100:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003102:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <BSP_SDRAM_Init+0xb4>)
 8003104:	2202      	movs	r2, #2
 8003106:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003108:	4b28      	ldr	r3, [pc, #160]	; (80031ac <BSP_SDRAM_Init+0xb4>)
 800310a:	2207      	movs	r2, #7
 800310c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800310e:	4b27      	ldr	r3, [pc, #156]	; (80031ac <BSP_SDRAM_Init+0xb4>)
 8003110:	2204      	movs	r2, #4
 8003112:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003114:	4b25      	ldr	r3, [pc, #148]	; (80031ac <BSP_SDRAM_Init+0xb4>)
 8003116:	2207      	movs	r2, #7
 8003118:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800311a:	4b24      	ldr	r3, [pc, #144]	; (80031ac <BSP_SDRAM_Init+0xb4>)
 800311c:	2202      	movs	r2, #2
 800311e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003120:	4b22      	ldr	r3, [pc, #136]	; (80031ac <BSP_SDRAM_Init+0xb4>)
 8003122:	2202      	movs	r2, #2
 8003124:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003126:	4b21      	ldr	r3, [pc, #132]	; (80031ac <BSP_SDRAM_Init+0xb4>)
 8003128:	2202      	movs	r2, #2
 800312a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <BSP_SDRAM_Init+0xac>)
 800312e:	2200      	movs	r2, #0
 8003130:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003132:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <BSP_SDRAM_Init+0xac>)
 8003134:	2200      	movs	r2, #0
 8003136:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003138:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <BSP_SDRAM_Init+0xac>)
 800313a:	2204      	movs	r2, #4
 800313c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800313e:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <BSP_SDRAM_Init+0xac>)
 8003140:	2210      	movs	r2, #16
 8003142:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003144:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <BSP_SDRAM_Init+0xac>)
 8003146:	2240      	movs	r2, #64	; 0x40
 8003148:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800314a:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <BSP_SDRAM_Init+0xac>)
 800314c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003150:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <BSP_SDRAM_Init+0xac>)
 8003154:	2200      	movs	r2, #0
 8003156:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003158:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <BSP_SDRAM_Init+0xac>)
 800315a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800315e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003160:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <BSP_SDRAM_Init+0xac>)
 8003162:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003166:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003168:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <BSP_SDRAM_Init+0xac>)
 800316a:	2200      	movs	r2, #0
 800316c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800316e:	2100      	movs	r1, #0
 8003170:	480c      	ldr	r0, [pc, #48]	; (80031a4 <BSP_SDRAM_Init+0xac>)
 8003172:	f000 f87f 	bl	8003274 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003176:	490d      	ldr	r1, [pc, #52]	; (80031ac <BSP_SDRAM_Init+0xb4>)
 8003178:	480a      	ldr	r0, [pc, #40]	; (80031a4 <BSP_SDRAM_Init+0xac>)
 800317a:	f005 fd33 	bl	8008be4 <HAL_SDRAM_Init>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003184:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <BSP_SDRAM_Init+0xb8>)
 8003186:	2201      	movs	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e002      	b.n	8003192 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800318c:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <BSP_SDRAM_Init+0xb8>)
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003192:	f240 6003 	movw	r0, #1539	; 0x603
 8003196:	f000 f80d 	bl	80031b4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800319a:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <BSP_SDRAM_Init+0xb8>)
 800319c:	781b      	ldrb	r3, [r3, #0]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20004964 	.word	0x20004964
 80031a8:	a0000140 	.word	0xa0000140
 80031ac:	200004c4 	.word	0x200004c4
 80031b0:	20000048 	.word	0x20000048

080031b4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80031c0:	4b2a      	ldr	r3, [pc, #168]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80031c6:	4b29      	ldr	r3, [pc, #164]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031c8:	2210      	movs	r2, #16
 80031ca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80031cc:	4b27      	ldr	r3, [pc, #156]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80031d2:	4b26      	ldr	r3, [pc, #152]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80031d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031dc:	4923      	ldr	r1, [pc, #140]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031de:	4824      	ldr	r0, [pc, #144]	; (8003270 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80031e0:	f005 fd34 	bl	8008c4c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80031e4:	2001      	movs	r0, #1
 80031e6:	f001 f839 	bl	800425c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031ec:	2202      	movs	r2, #2
 80031ee:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80031f0:	4b1e      	ldr	r3, [pc, #120]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031f2:	2210      	movs	r2, #16
 80031f4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80031f6:	4b1d      	ldr	r3, [pc, #116]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031fe:	2200      	movs	r2, #0
 8003200:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003206:	4919      	ldr	r1, [pc, #100]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003208:	4819      	ldr	r0, [pc, #100]	; (8003270 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800320a:	f005 fd1f 	bl	8008c4c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800320e:	4b17      	ldr	r3, [pc, #92]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003210:	2203      	movs	r2, #3
 8003212:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003214:	4b15      	ldr	r3, [pc, #84]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003216:	2210      	movs	r2, #16
 8003218:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800321a:	4b14      	ldr	r3, [pc, #80]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800321c:	2208      	movs	r2, #8
 800321e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003220:	4b12      	ldr	r3, [pc, #72]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003222:	2200      	movs	r2, #0
 8003224:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800322a:	4910      	ldr	r1, [pc, #64]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800322c:	4810      	ldr	r0, [pc, #64]	; (8003270 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800322e:	f005 fd0d 	bl	8008c4c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003232:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003236:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003238:	4b0c      	ldr	r3, [pc, #48]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800323a:	2204      	movs	r2, #4
 800323c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800323e:	4b0b      	ldr	r3, [pc, #44]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003240:	2210      	movs	r2, #16
 8003242:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003244:	4b09      	ldr	r3, [pc, #36]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003246:	2201      	movs	r2, #1
 8003248:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a07      	ldr	r2, [pc, #28]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800324e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003254:	4905      	ldr	r1, [pc, #20]	; (800326c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003256:	4806      	ldr	r0, [pc, #24]	; (8003270 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003258:	f005 fcf8 	bl	8008c4c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4804      	ldr	r0, [pc, #16]	; (8003270 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003260:	f005 fd29 	bl	8008cb6 <HAL_SDRAM_ProgramRefreshRate>
}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	200004e0 	.word	0x200004e0
 8003270:	20004964 	.word	0x20004964

08003274 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003274:	b580      	push	{r7, lr}
 8003276:	b090      	sub	sp, #64	; 0x40
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800327e:	4b70      	ldr	r3, [pc, #448]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 8003280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003282:	4a6f      	ldr	r2, [pc, #444]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6393      	str	r3, [r2, #56]	; 0x38
 800328a:	4b6d      	ldr	r3, [pc, #436]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	62bb      	str	r3, [r7, #40]	; 0x28
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003296:	4b6a      	ldr	r3, [pc, #424]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	4a69      	ldr	r2, [pc, #420]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 800329c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032a0:	6313      	str	r3, [r2, #48]	; 0x30
 80032a2:	4b67      	ldr	r3, [pc, #412]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ae:	4b64      	ldr	r3, [pc, #400]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	4a63      	ldr	r2, [pc, #396]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 80032b4:	f043 0304 	orr.w	r3, r3, #4
 80032b8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ba:	4b61      	ldr	r3, [pc, #388]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	623b      	str	r3, [r7, #32]
 80032c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032c6:	4b5e      	ldr	r3, [pc, #376]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	4a5d      	ldr	r2, [pc, #372]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 80032cc:	f043 0308 	orr.w	r3, r3, #8
 80032d0:	6313      	str	r3, [r2, #48]	; 0x30
 80032d2:	4b5b      	ldr	r3, [pc, #364]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80032de:	4b58      	ldr	r3, [pc, #352]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	4a57      	ldr	r2, [pc, #348]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 80032e4:	f043 0310 	orr.w	r3, r3, #16
 80032e8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ea:	4b55      	ldr	r3, [pc, #340]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032f6:	4b52      	ldr	r3, [pc, #328]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	4a51      	ldr	r2, [pc, #324]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 80032fc:	f043 0320 	orr.w	r3, r3, #32
 8003300:	6313      	str	r3, [r2, #48]	; 0x30
 8003302:	4b4f      	ldr	r3, [pc, #316]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800330e:	4b4c      	ldr	r3, [pc, #304]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	4a4b      	ldr	r2, [pc, #300]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 8003314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003318:	6313      	str	r3, [r2, #48]	; 0x30
 800331a:	4b49      	ldr	r3, [pc, #292]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003326:	4b46      	ldr	r3, [pc, #280]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	4a45      	ldr	r2, [pc, #276]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 800332c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003330:	6313      	str	r3, [r2, #48]	; 0x30
 8003332:	4b43      	ldr	r3, [pc, #268]	; (8003440 <BSP_SDRAM_MspInit+0x1cc>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800333e:	2302      	movs	r3, #2
 8003340:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003342:	2301      	movs	r3, #1
 8003344:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003346:	2302      	movs	r3, #2
 8003348:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800334a:	230c      	movs	r3, #12
 800334c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800334e:	2308      	movs	r3, #8
 8003350:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003356:	4619      	mov	r1, r3
 8003358:	483a      	ldr	r0, [pc, #232]	; (8003444 <BSP_SDRAM_MspInit+0x1d0>)
 800335a:	f002 fab9 	bl	80058d0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800335e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003362:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003364:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003368:	4619      	mov	r1, r3
 800336a:	4837      	ldr	r0, [pc, #220]	; (8003448 <BSP_SDRAM_MspInit+0x1d4>)
 800336c:	f002 fab0 	bl	80058d0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003370:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800337a:	4619      	mov	r1, r3
 800337c:	4833      	ldr	r0, [pc, #204]	; (800344c <BSP_SDRAM_MspInit+0x1d8>)
 800337e:	f002 faa7 	bl	80058d0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003382:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003388:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800338c:	4619      	mov	r1, r3
 800338e:	4830      	ldr	r0, [pc, #192]	; (8003450 <BSP_SDRAM_MspInit+0x1dc>)
 8003390:	f002 fa9e 	bl	80058d0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003394:	f248 1333 	movw	r3, #33075	; 0x8133
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800339a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800339e:	4619      	mov	r1, r3
 80033a0:	482c      	ldr	r0, [pc, #176]	; (8003454 <BSP_SDRAM_MspInit+0x1e0>)
 80033a2:	f002 fa95 	bl	80058d0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80033a6:	2328      	movs	r3, #40	; 0x28
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80033aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033ae:	4619      	mov	r1, r3
 80033b0:	4829      	ldr	r0, [pc, #164]	; (8003458 <BSP_SDRAM_MspInit+0x1e4>)
 80033b2:	f002 fa8d 	bl	80058d0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80033b6:	4b29      	ldr	r3, [pc, #164]	; (800345c <BSP_SDRAM_MspInit+0x1e8>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80033bc:	4b27      	ldr	r3, [pc, #156]	; (800345c <BSP_SDRAM_MspInit+0x1e8>)
 80033be:	2280      	movs	r2, #128	; 0x80
 80033c0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80033c2:	4b26      	ldr	r3, [pc, #152]	; (800345c <BSP_SDRAM_MspInit+0x1e8>)
 80033c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80033ca:	4b24      	ldr	r3, [pc, #144]	; (800345c <BSP_SDRAM_MspInit+0x1e8>)
 80033cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033d0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033d2:	4b22      	ldr	r3, [pc, #136]	; (800345c <BSP_SDRAM_MspInit+0x1e8>)
 80033d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033d8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80033da:	4b20      	ldr	r3, [pc, #128]	; (800345c <BSP_SDRAM_MspInit+0x1e8>)
 80033dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033e0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80033e2:	4b1e      	ldr	r3, [pc, #120]	; (800345c <BSP_SDRAM_MspInit+0x1e8>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80033e8:	4b1c      	ldr	r3, [pc, #112]	; (800345c <BSP_SDRAM_MspInit+0x1e8>)
 80033ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033ee:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80033f0:	4b1a      	ldr	r3, [pc, #104]	; (800345c <BSP_SDRAM_MspInit+0x1e8>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80033f6:	4b19      	ldr	r3, [pc, #100]	; (800345c <BSP_SDRAM_MspInit+0x1e8>)
 80033f8:	2203      	movs	r2, #3
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80033fc:	4b17      	ldr	r3, [pc, #92]	; (800345c <BSP_SDRAM_MspInit+0x1e8>)
 80033fe:	2200      	movs	r2, #0
 8003400:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003402:	4b16      	ldr	r3, [pc, #88]	; (800345c <BSP_SDRAM_MspInit+0x1e8>)
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003408:	4b14      	ldr	r3, [pc, #80]	; (800345c <BSP_SDRAM_MspInit+0x1e8>)
 800340a:	4a15      	ldr	r2, [pc, #84]	; (8003460 <BSP_SDRAM_MspInit+0x1ec>)
 800340c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a12      	ldr	r2, [pc, #72]	; (800345c <BSP_SDRAM_MspInit+0x1e8>)
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
 8003414:	4a11      	ldr	r2, [pc, #68]	; (800345c <BSP_SDRAM_MspInit+0x1e8>)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800341a:	4810      	ldr	r0, [pc, #64]	; (800345c <BSP_SDRAM_MspInit+0x1e8>)
 800341c:	f001 fdac 	bl	8004f78 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003420:	480e      	ldr	r0, [pc, #56]	; (800345c <BSP_SDRAM_MspInit+0x1e8>)
 8003422:	f001 fcfb 	bl	8004e1c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003426:	2200      	movs	r2, #0
 8003428:	210f      	movs	r1, #15
 800342a:	2038      	movs	r0, #56	; 0x38
 800342c:	f001 fbec 	bl	8004c08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003430:	2038      	movs	r0, #56	; 0x38
 8003432:	f001 fc05 	bl	8004c40 <HAL_NVIC_EnableIRQ>
}
 8003436:	bf00      	nop
 8003438:	3740      	adds	r7, #64	; 0x40
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800
 8003444:	40020800 	.word	0x40020800
 8003448:	40020c00 	.word	0x40020c00
 800344c:	40021000 	.word	0x40021000
 8003450:	40021400 	.word	0x40021400
 8003454:	40021800 	.word	0x40021800
 8003458:	40021c00 	.word	0x40021c00
 800345c:	200004f0 	.word	0x200004f0
 8003460:	40026410 	.word	0x40026410

08003464 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	460a      	mov	r2, r1
 800346e:	80fb      	strh	r3, [r7, #6]
 8003470:	4613      	mov	r3, r2
 8003472:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003478:	4a14      	ldr	r2, [pc, #80]	; (80034cc <BSP_TS_Init+0x68>)
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800347e:	4a14      	ldr	r2, [pc, #80]	; (80034d0 <BSP_TS_Init+0x6c>)
 8003480:	88bb      	ldrh	r3, [r7, #4]
 8003482:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <BSP_TS_Init+0x70>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2070      	movs	r0, #112	; 0x70
 800348a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <BSP_TS_Init+0x70>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2070      	movs	r0, #112	; 0x70
 8003492:	4798      	blx	r3
 8003494:	4603      	mov	r3, r0
 8003496:	2b51      	cmp	r3, #81	; 0x51
 8003498:	d111      	bne.n	80034be <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <BSP_TS_Init+0x74>)
 800349c:	4a0d      	ldr	r2, [pc, #52]	; (80034d4 <BSP_TS_Init+0x70>)
 800349e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80034a0:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <BSP_TS_Init+0x78>)
 80034a2:	2270      	movs	r2, #112	; 0x70
 80034a4:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <BSP_TS_Init+0x7c>)
 80034a8:	2208      	movs	r2, #8
 80034aa:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <BSP_TS_Init+0x74>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <BSP_TS_Init+0x78>)
 80034b4:	7812      	ldrb	r2, [r2, #0]
 80034b6:	b292      	uxth	r2, r2
 80034b8:	4610      	mov	r0, r2
 80034ba:	4798      	blx	r3
 80034bc:	e001      	b.n	80034c2 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80034be:	2303      	movs	r3, #3
 80034c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20000554 	.word	0x20000554
 80034d0:	20000556 	.word	0x20000556
 80034d4:	20000000 	.word	0x20000000
 80034d8:	20000550 	.word	0x20000550
 80034dc:	20000559 	.word	0x20000559
 80034e0:	20000558 	.word	0x20000558

080034e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <HAL_MspInit+0x4c>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	4a10      	ldr	r2, [pc, #64]	; (8003530 <HAL_MspInit+0x4c>)
 80034f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f4:	6413      	str	r3, [r2, #64]	; 0x40
 80034f6:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <HAL_MspInit+0x4c>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fe:	607b      	str	r3, [r7, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003502:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_MspInit+0x4c>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <HAL_MspInit+0x4c>)
 8003508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800350c:	6453      	str	r3, [r2, #68]	; 0x44
 800350e:	4b08      	ldr	r3, [pc, #32]	; (8003530 <HAL_MspInit+0x4c>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800351a:	2200      	movs	r2, #0
 800351c:	210f      	movs	r1, #15
 800351e:	f06f 0001 	mvn.w	r0, #1
 8003522:	f001 fb71 	bl	8004c08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800

08003534 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08c      	sub	sp, #48	; 0x30
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800353c:	f107 031c 	add.w	r3, r7, #28
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a2a      	ldr	r2, [pc, #168]	; (80035fc <HAL_ADC_MspInit+0xc8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d124      	bne.n	80035a0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003556:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <HAL_ADC_MspInit+0xcc>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	4a29      	ldr	r2, [pc, #164]	; (8003600 <HAL_ADC_MspInit+0xcc>)
 800355c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003560:	6453      	str	r3, [r2, #68]	; 0x44
 8003562:	4b27      	ldr	r3, [pc, #156]	; (8003600 <HAL_ADC_MspInit+0xcc>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800356e:	4b24      	ldr	r3, [pc, #144]	; (8003600 <HAL_ADC_MspInit+0xcc>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	4a23      	ldr	r2, [pc, #140]	; (8003600 <HAL_ADC_MspInit+0xcc>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	6313      	str	r3, [r2, #48]	; 0x30
 800357a:	4b21      	ldr	r3, [pc, #132]	; (8003600 <HAL_ADC_MspInit+0xcc>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003586:	2301      	movs	r3, #1
 8003588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800358a:	2303      	movs	r3, #3
 800358c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358e:	2300      	movs	r3, #0
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003592:	f107 031c 	add.w	r3, r7, #28
 8003596:	4619      	mov	r1, r3
 8003598:	481a      	ldr	r0, [pc, #104]	; (8003604 <HAL_ADC_MspInit+0xd0>)
 800359a:	f002 f999 	bl	80058d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800359e:	e029      	b.n	80035f4 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a18      	ldr	r2, [pc, #96]	; (8003608 <HAL_ADC_MspInit+0xd4>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d124      	bne.n	80035f4 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80035aa:	4b15      	ldr	r3, [pc, #84]	; (8003600 <HAL_ADC_MspInit+0xcc>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	4a14      	ldr	r2, [pc, #80]	; (8003600 <HAL_ADC_MspInit+0xcc>)
 80035b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035b4:	6453      	str	r3, [r2, #68]	; 0x44
 80035b6:	4b12      	ldr	r3, [pc, #72]	; (8003600 <HAL_ADC_MspInit+0xcc>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80035c2:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <HAL_ADC_MspInit+0xcc>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	4a0e      	ldr	r2, [pc, #56]	; (8003600 <HAL_ADC_MspInit+0xcc>)
 80035c8:	f043 0320 	orr.w	r3, r3, #32
 80035cc:	6313      	str	r3, [r2, #48]	; 0x30
 80035ce:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <HAL_ADC_MspInit+0xcc>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80035da:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80035de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035e0:	2303      	movs	r3, #3
 80035e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035e8:	f107 031c 	add.w	r3, r7, #28
 80035ec:	4619      	mov	r1, r3
 80035ee:	4807      	ldr	r0, [pc, #28]	; (800360c <HAL_ADC_MspInit+0xd8>)
 80035f0:	f002 f96e 	bl	80058d0 <HAL_GPIO_Init>
}
 80035f4:	bf00      	nop
 80035f6:	3730      	adds	r7, #48	; 0x30
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40012000 	.word	0x40012000
 8003600:	40023800 	.word	0x40023800
 8003604:	40020000 	.word	0x40020000
 8003608:	40012200 	.word	0x40012200
 800360c:	40021400 	.word	0x40021400

08003610 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	; 0x28
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a19      	ldr	r2, [pc, #100]	; (8003694 <HAL_DAC_MspInit+0x84>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d12b      	bne.n	800368a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003632:	4b19      	ldr	r3, [pc, #100]	; (8003698 <HAL_DAC_MspInit+0x88>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	4a18      	ldr	r2, [pc, #96]	; (8003698 <HAL_DAC_MspInit+0x88>)
 8003638:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800363c:	6413      	str	r3, [r2, #64]	; 0x40
 800363e:	4b16      	ldr	r3, [pc, #88]	; (8003698 <HAL_DAC_MspInit+0x88>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800364a:	4b13      	ldr	r3, [pc, #76]	; (8003698 <HAL_DAC_MspInit+0x88>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	4a12      	ldr	r2, [pc, #72]	; (8003698 <HAL_DAC_MspInit+0x88>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6313      	str	r3, [r2, #48]	; 0x30
 8003656:	4b10      	ldr	r3, [pc, #64]	; (8003698 <HAL_DAC_MspInit+0x88>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003662:	2310      	movs	r3, #16
 8003664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003666:	2303      	movs	r3, #3
 8003668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366e:	f107 0314 	add.w	r3, r7, #20
 8003672:	4619      	mov	r1, r3
 8003674:	4809      	ldr	r0, [pc, #36]	; (800369c <HAL_DAC_MspInit+0x8c>)
 8003676:	f002 f92b 	bl	80058d0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800367a:	2200      	movs	r2, #0
 800367c:	210f      	movs	r1, #15
 800367e:	2036      	movs	r0, #54	; 0x36
 8003680:	f001 fac2 	bl	8004c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003684:	2036      	movs	r0, #54	; 0x36
 8003686:	f001 fadb 	bl	8004c40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800368a:	bf00      	nop
 800368c:	3728      	adds	r7, #40	; 0x28
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40007400 	.word	0x40007400
 8003698:	40023800 	.word	0x40023800
 800369c:	40020000 	.word	0x40020000

080036a0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0d      	ldr	r2, [pc, #52]	; (80036e4 <HAL_DMA2D_MspInit+0x44>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d113      	bne.n	80036da <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <HAL_DMA2D_MspInit+0x48>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	4a0c      	ldr	r2, [pc, #48]	; (80036e8 <HAL_DMA2D_MspInit+0x48>)
 80036b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036bc:	6313      	str	r3, [r2, #48]	; 0x30
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_DMA2D_MspInit+0x48>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80036ca:	2200      	movs	r2, #0
 80036cc:	2105      	movs	r1, #5
 80036ce:	205a      	movs	r0, #90	; 0x5a
 80036d0:	f001 fa9a 	bl	8004c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80036d4:	205a      	movs	r0, #90	; 0x5a
 80036d6:	f001 fab3 	bl	8004c40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80036da:	bf00      	nop
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	4002b000 	.word	0x4002b000
 80036e8:	40023800 	.word	0x40023800

080036ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b0ac      	sub	sp, #176	; 0xb0
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	60da      	str	r2, [r3, #12]
 8003702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003704:	f107 0318 	add.w	r3, r7, #24
 8003708:	2284      	movs	r2, #132	; 0x84
 800370a:	2100      	movs	r1, #0
 800370c:	4618      	mov	r0, r3
 800370e:	f009 ffd9 	bl	800d6c4 <memset>
  if(hi2c->Instance==I2C1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a44      	ldr	r2, [pc, #272]	; (8003828 <HAL_I2C_MspInit+0x13c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d13d      	bne.n	8003798 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800371c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003720:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003722:	2300      	movs	r3, #0
 8003724:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003726:	f107 0318 	add.w	r3, r7, #24
 800372a:	4618      	mov	r0, r3
 800372c:	f004 fa92 	bl	8007c54 <HAL_RCCEx_PeriphCLKConfig>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003736:	f7fe fd5d 	bl	80021f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800373a:	4b3c      	ldr	r3, [pc, #240]	; (800382c <HAL_I2C_MspInit+0x140>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	4a3b      	ldr	r2, [pc, #236]	; (800382c <HAL_I2C_MspInit+0x140>)
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	6313      	str	r3, [r2, #48]	; 0x30
 8003746:	4b39      	ldr	r3, [pc, #228]	; (800382c <HAL_I2C_MspInit+0x140>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003752:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003756:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800375a:	2312      	movs	r3, #18
 800375c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003760:	2300      	movs	r3, #0
 8003762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003766:	2303      	movs	r3, #3
 8003768:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800376c:	2304      	movs	r3, #4
 800376e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003772:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003776:	4619      	mov	r1, r3
 8003778:	482d      	ldr	r0, [pc, #180]	; (8003830 <HAL_I2C_MspInit+0x144>)
 800377a:	f002 f8a9 	bl	80058d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800377e:	4b2b      	ldr	r3, [pc, #172]	; (800382c <HAL_I2C_MspInit+0x140>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	4a2a      	ldr	r2, [pc, #168]	; (800382c <HAL_I2C_MspInit+0x140>)
 8003784:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003788:	6413      	str	r3, [r2, #64]	; 0x40
 800378a:	4b28      	ldr	r3, [pc, #160]	; (800382c <HAL_I2C_MspInit+0x140>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003796:	e042      	b.n	800381e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a25      	ldr	r2, [pc, #148]	; (8003834 <HAL_I2C_MspInit+0x148>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d13d      	bne.n	800381e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80037a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037ae:	f107 0318 	add.w	r3, r7, #24
 80037b2:	4618      	mov	r0, r3
 80037b4:	f004 fa4e 	bl	8007c54 <HAL_RCCEx_PeriphCLKConfig>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80037be:	f7fe fd19 	bl	80021f4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80037c2:	4b1a      	ldr	r3, [pc, #104]	; (800382c <HAL_I2C_MspInit+0x140>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	4a19      	ldr	r2, [pc, #100]	; (800382c <HAL_I2C_MspInit+0x140>)
 80037c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037cc:	6313      	str	r3, [r2, #48]	; 0x30
 80037ce:	4b17      	ldr	r3, [pc, #92]	; (800382c <HAL_I2C_MspInit+0x140>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80037da:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80037de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037e2:	2312      	movs	r3, #18
 80037e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ee:	2303      	movs	r3, #3
 80037f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80037f4:	2304      	movs	r3, #4
 80037f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80037fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80037fe:	4619      	mov	r1, r3
 8003800:	480d      	ldr	r0, [pc, #52]	; (8003838 <HAL_I2C_MspInit+0x14c>)
 8003802:	f002 f865 	bl	80058d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003806:	4b09      	ldr	r3, [pc, #36]	; (800382c <HAL_I2C_MspInit+0x140>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	4a08      	ldr	r2, [pc, #32]	; (800382c <HAL_I2C_MspInit+0x140>)
 800380c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003810:	6413      	str	r3, [r2, #64]	; 0x40
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_I2C_MspInit+0x140>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	68bb      	ldr	r3, [r7, #8]
}
 800381e:	bf00      	nop
 8003820:	37b0      	adds	r7, #176	; 0xb0
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40005400 	.word	0x40005400
 800382c:	40023800 	.word	0x40023800
 8003830:	40020400 	.word	0x40020400
 8003834:	40005c00 	.word	0x40005c00
 8003838:	40021c00 	.word	0x40021c00

0800383c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a15      	ldr	r2, [pc, #84]	; (80038a0 <HAL_I2C_MspDeInit+0x64>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d110      	bne.n	8003870 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800384e:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <HAL_I2C_MspDeInit+0x68>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	4a14      	ldr	r2, [pc, #80]	; (80038a4 <HAL_I2C_MspDeInit+0x68>)
 8003854:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003858:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800385a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800385e:	4812      	ldr	r0, [pc, #72]	; (80038a8 <HAL_I2C_MspDeInit+0x6c>)
 8003860:	f002 f9e2 	bl	8005c28 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003868:	480f      	ldr	r0, [pc, #60]	; (80038a8 <HAL_I2C_MspDeInit+0x6c>)
 800386a:	f002 f9dd 	bl	8005c28 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800386e:	e013      	b.n	8003898 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a0d      	ldr	r2, [pc, #52]	; (80038ac <HAL_I2C_MspDeInit+0x70>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d10e      	bne.n	8003898 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800387a:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <HAL_I2C_MspDeInit+0x68>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	4a09      	ldr	r2, [pc, #36]	; (80038a4 <HAL_I2C_MspDeInit+0x68>)
 8003880:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003884:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8003886:	2180      	movs	r1, #128	; 0x80
 8003888:	4809      	ldr	r0, [pc, #36]	; (80038b0 <HAL_I2C_MspDeInit+0x74>)
 800388a:	f002 f9cd 	bl	8005c28 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800388e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003892:	4807      	ldr	r0, [pc, #28]	; (80038b0 <HAL_I2C_MspDeInit+0x74>)
 8003894:	f002 f9c8 	bl	8005c28 <HAL_GPIO_DeInit>
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40005400 	.word	0x40005400
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40020400 	.word	0x40020400
 80038ac:	40005c00 	.word	0x40005c00
 80038b0:	40021c00 	.word	0x40021c00

080038b4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b0ae      	sub	sp, #184	; 0xb8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
 80038c6:	609a      	str	r2, [r3, #8]
 80038c8:	60da      	str	r2, [r3, #12]
 80038ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038cc:	f107 0320 	add.w	r3, r7, #32
 80038d0:	2284      	movs	r2, #132	; 0x84
 80038d2:	2100      	movs	r1, #0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f009 fef5 	bl	800d6c4 <memset>
  if(hltdc->Instance==LTDC)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a6f      	ldr	r2, [pc, #444]	; (8003a9c <HAL_LTDC_MspInit+0x1e8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	f040 80d6 	bne.w	8003a92 <HAL_LTDC_MspInit+0x1de>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80038e6:	2308      	movs	r3, #8
 80038e8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80038ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80038f0:	2305      	movs	r3, #5
 80038f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80038f4:	2302      	movs	r3, #2
 80038f6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80038f8:	2303      	movs	r3, #3
 80038fa:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80038fc:	2301      	movs	r3, #1
 80038fe:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003904:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003906:	f107 0320 	add.w	r3, r7, #32
 800390a:	4618      	mov	r0, r3
 800390c:	f004 f9a2 	bl	8007c54 <HAL_RCCEx_PeriphCLKConfig>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8003916:	f7fe fc6d 	bl	80021f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800391a:	4b61      	ldr	r3, [pc, #388]	; (8003aa0 <HAL_LTDC_MspInit+0x1ec>)
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	4a60      	ldr	r2, [pc, #384]	; (8003aa0 <HAL_LTDC_MspInit+0x1ec>)
 8003920:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003924:	6453      	str	r3, [r2, #68]	; 0x44
 8003926:	4b5e      	ldr	r3, [pc, #376]	; (8003aa0 <HAL_LTDC_MspInit+0x1ec>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003932:	4b5b      	ldr	r3, [pc, #364]	; (8003aa0 <HAL_LTDC_MspInit+0x1ec>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	4a5a      	ldr	r2, [pc, #360]	; (8003aa0 <HAL_LTDC_MspInit+0x1ec>)
 8003938:	f043 0310 	orr.w	r3, r3, #16
 800393c:	6313      	str	r3, [r2, #48]	; 0x30
 800393e:	4b58      	ldr	r3, [pc, #352]	; (8003aa0 <HAL_LTDC_MspInit+0x1ec>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800394a:	4b55      	ldr	r3, [pc, #340]	; (8003aa0 <HAL_LTDC_MspInit+0x1ec>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	4a54      	ldr	r2, [pc, #336]	; (8003aa0 <HAL_LTDC_MspInit+0x1ec>)
 8003950:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003954:	6313      	str	r3, [r2, #48]	; 0x30
 8003956:	4b52      	ldr	r3, [pc, #328]	; (8003aa0 <HAL_LTDC_MspInit+0x1ec>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003962:	4b4f      	ldr	r3, [pc, #316]	; (8003aa0 <HAL_LTDC_MspInit+0x1ec>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	4a4e      	ldr	r2, [pc, #312]	; (8003aa0 <HAL_LTDC_MspInit+0x1ec>)
 8003968:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800396c:	6313      	str	r3, [r2, #48]	; 0x30
 800396e:	4b4c      	ldr	r3, [pc, #304]	; (8003aa0 <HAL_LTDC_MspInit+0x1ec>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800397a:	4b49      	ldr	r3, [pc, #292]	; (8003aa0 <HAL_LTDC_MspInit+0x1ec>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	4a48      	ldr	r2, [pc, #288]	; (8003aa0 <HAL_LTDC_MspInit+0x1ec>)
 8003980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003984:	6313      	str	r3, [r2, #48]	; 0x30
 8003986:	4b46      	ldr	r3, [pc, #280]	; (8003aa0 <HAL_LTDC_MspInit+0x1ec>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003992:	4b43      	ldr	r3, [pc, #268]	; (8003aa0 <HAL_LTDC_MspInit+0x1ec>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	4a42      	ldr	r2, [pc, #264]	; (8003aa0 <HAL_LTDC_MspInit+0x1ec>)
 8003998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399c:	6313      	str	r3, [r2, #48]	; 0x30
 800399e:	4b40      	ldr	r3, [pc, #256]	; (8003aa0 <HAL_LTDC_MspInit+0x1ec>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80039aa:	2310      	movs	r3, #16
 80039ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b0:	2302      	movs	r3, #2
 80039b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039bc:	2300      	movs	r3, #0
 80039be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039c2:	230e      	movs	r3, #14
 80039c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80039c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80039cc:	4619      	mov	r1, r3
 80039ce:	4835      	ldr	r0, [pc, #212]	; (8003aa4 <HAL_LTDC_MspInit+0x1f0>)
 80039d0:	f001 ff7e 	bl	80058d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80039d4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80039d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039dc:	2302      	movs	r3, #2
 80039de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039ee:	230e      	movs	r3, #14
 80039f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80039f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80039f8:	4619      	mov	r1, r3
 80039fa:	482b      	ldr	r0, [pc, #172]	; (8003aa8 <HAL_LTDC_MspInit+0x1f4>)
 80039fc:	f001 ff68 	bl	80058d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003a00:	23f7      	movs	r3, #247	; 0xf7
 8003a02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a06:	2302      	movs	r3, #2
 8003a08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a18:	230e      	movs	r3, #14
 8003a1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003a1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a22:	4619      	mov	r1, r3
 8003a24:	4821      	ldr	r0, [pc, #132]	; (8003aac <HAL_LTDC_MspInit+0x1f8>)
 8003a26:	f001 ff53 	bl	80058d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a32:	2302      	movs	r3, #2
 8003a34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003a44:	2309      	movs	r3, #9
 8003a46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003a4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4817      	ldr	r0, [pc, #92]	; (8003ab0 <HAL_LTDC_MspInit+0x1fc>)
 8003a52:	f001 ff3d 	bl	80058d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003a56:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a70:	230e      	movs	r3, #14
 8003a72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	480d      	ldr	r0, [pc, #52]	; (8003ab4 <HAL_LTDC_MspInit+0x200>)
 8003a7e:	f001 ff27 	bl	80058d0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003a82:	2200      	movs	r2, #0
 8003a84:	2105      	movs	r1, #5
 8003a86:	2058      	movs	r0, #88	; 0x58
 8003a88:	f001 f8be 	bl	8004c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003a8c:	2058      	movs	r0, #88	; 0x58
 8003a8e:	f001 f8d7 	bl	8004c40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003a92:	bf00      	nop
 8003a94:	37b8      	adds	r7, #184	; 0xb8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40016800 	.word	0x40016800
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40022400 	.word	0x40022400
 8003aac:	40022800 	.word	0x40022800
 8003ab0:	40021800 	.word	0x40021800
 8003ab4:	40022000 	.word	0x40022000

08003ab8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b0a4      	sub	sp, #144	; 0x90
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ac0:	f107 030c 	add.w	r3, r7, #12
 8003ac4:	2284      	movs	r2, #132	; 0x84
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f009 fdfb 	bl	800d6c4 <memset>
  if(hrtc->Instance==RTC)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a0e      	ldr	r2, [pc, #56]	; (8003b0c <HAL_RTC_MspInit+0x54>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d114      	bne.n	8003b02 <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003ad8:	2320      	movs	r3, #32
 8003ada:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003adc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ae2:	f107 030c 	add.w	r3, r7, #12
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f004 f8b4 	bl	8007c54 <HAL_RCCEx_PeriphCLKConfig>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003af2:	f7fe fb7f 	bl	80021f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_RTC_MspInit+0x58>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	4a05      	ldr	r2, [pc, #20]	; (8003b10 <HAL_RTC_MspInit+0x58>)
 8003afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b00:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003b02:	bf00      	nop
 8003b04:	3790      	adds	r7, #144	; 0x90
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40002800 	.word	0x40002800
 8003b10:	40023800 	.word	0x40023800

08003b14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08a      	sub	sp, #40	; 0x28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b1c:	f107 0314 	add.w	r3, r7, #20
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	605a      	str	r2, [r3, #4]
 8003b26:	609a      	str	r2, [r3, #8]
 8003b28:	60da      	str	r2, [r3, #12]
 8003b2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a25      	ldr	r2, [pc, #148]	; (8003bc8 <HAL_SPI_MspInit+0xb4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d144      	bne.n	8003bc0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003b36:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <HAL_SPI_MspInit+0xb8>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	4a24      	ldr	r2, [pc, #144]	; (8003bcc <HAL_SPI_MspInit+0xb8>)
 8003b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b40:	6413      	str	r3, [r2, #64]	; 0x40
 8003b42:	4b22      	ldr	r3, [pc, #136]	; (8003bcc <HAL_SPI_MspInit+0xb8>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003b4e:	4b1f      	ldr	r3, [pc, #124]	; (8003bcc <HAL_SPI_MspInit+0xb8>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	4a1e      	ldr	r2, [pc, #120]	; (8003bcc <HAL_SPI_MspInit+0xb8>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b58:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5a:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <HAL_SPI_MspInit+0xb8>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b66:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <HAL_SPI_MspInit+0xb8>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	4a18      	ldr	r2, [pc, #96]	; (8003bcc <HAL_SPI_MspInit+0xb8>)
 8003b6c:	f043 0302 	orr.w	r3, r3, #2
 8003b70:	6313      	str	r3, [r2, #48]	; 0x30
 8003b72:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <HAL_SPI_MspInit+0xb8>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b82:	2302      	movs	r3, #2
 8003b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b8e:	2305      	movs	r3, #5
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003b92:	f107 0314 	add.w	r3, r7, #20
 8003b96:	4619      	mov	r1, r3
 8003b98:	480d      	ldr	r0, [pc, #52]	; (8003bd0 <HAL_SPI_MspInit+0xbc>)
 8003b9a:	f001 fe99 	bl	80058d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003b9e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bac:	2300      	movs	r3, #0
 8003bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003bb0:	2305      	movs	r3, #5
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bb4:	f107 0314 	add.w	r3, r7, #20
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4806      	ldr	r0, [pc, #24]	; (8003bd4 <HAL_SPI_MspInit+0xc0>)
 8003bbc:	f001 fe88 	bl	80058d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003bc0:	bf00      	nop
 8003bc2:	3728      	adds	r7, #40	; 0x28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40003800 	.word	0x40003800
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40022000 	.word	0x40022000
 8003bd4:	40020400 	.word	0x40020400

08003bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08e      	sub	sp, #56	; 0x38
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	60da      	str	r2, [r3, #12]
 8003bee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a3b      	ldr	r2, [pc, #236]	; (8003ce4 <HAL_TIM_Base_MspInit+0x10c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d10c      	bne.n	8003c14 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bfa:	4b3b      	ldr	r3, [pc, #236]	; (8003ce8 <HAL_TIM_Base_MspInit+0x110>)
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	4a3a      	ldr	r2, [pc, #232]	; (8003ce8 <HAL_TIM_Base_MspInit+0x110>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	6453      	str	r3, [r2, #68]	; 0x44
 8003c06:	4b38      	ldr	r3, [pc, #224]	; (8003ce8 <HAL_TIM_Base_MspInit+0x110>)
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	623b      	str	r3, [r7, #32]
 8003c10:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003c12:	e062      	b.n	8003cda <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1c:	d10c      	bne.n	8003c38 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c1e:	4b32      	ldr	r3, [pc, #200]	; (8003ce8 <HAL_TIM_Base_MspInit+0x110>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	4a31      	ldr	r2, [pc, #196]	; (8003ce8 <HAL_TIM_Base_MspInit+0x110>)
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	6413      	str	r3, [r2, #64]	; 0x40
 8003c2a:	4b2f      	ldr	r3, [pc, #188]	; (8003ce8 <HAL_TIM_Base_MspInit+0x110>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	69fb      	ldr	r3, [r7, #28]
}
 8003c36:	e050      	b.n	8003cda <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a2b      	ldr	r2, [pc, #172]	; (8003cec <HAL_TIM_Base_MspInit+0x114>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d10c      	bne.n	8003c5c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c42:	4b29      	ldr	r3, [pc, #164]	; (8003ce8 <HAL_TIM_Base_MspInit+0x110>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	4a28      	ldr	r2, [pc, #160]	; (8003ce8 <HAL_TIM_Base_MspInit+0x110>)
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c4e:	4b26      	ldr	r3, [pc, #152]	; (8003ce8 <HAL_TIM_Base_MspInit+0x110>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	69bb      	ldr	r3, [r7, #24]
}
 8003c5a:	e03e      	b.n	8003cda <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a23      	ldr	r2, [pc, #140]	; (8003cf0 <HAL_TIM_Base_MspInit+0x118>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d10c      	bne.n	8003c80 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c66:	4b20      	ldr	r3, [pc, #128]	; (8003ce8 <HAL_TIM_Base_MspInit+0x110>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	4a1f      	ldr	r2, [pc, #124]	; (8003ce8 <HAL_TIM_Base_MspInit+0x110>)
 8003c6c:	f043 0308 	orr.w	r3, r3, #8
 8003c70:	6413      	str	r3, [r2, #64]	; 0x40
 8003c72:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <HAL_TIM_Base_MspInit+0x110>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	697b      	ldr	r3, [r7, #20]
}
 8003c7e:	e02c      	b.n	8003cda <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1b      	ldr	r2, [pc, #108]	; (8003cf4 <HAL_TIM_Base_MspInit+0x11c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d127      	bne.n	8003cda <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003c8a:	4b17      	ldr	r3, [pc, #92]	; (8003ce8 <HAL_TIM_Base_MspInit+0x110>)
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8e:	4a16      	ldr	r2, [pc, #88]	; (8003ce8 <HAL_TIM_Base_MspInit+0x110>)
 8003c90:	f043 0302 	orr.w	r3, r3, #2
 8003c94:	6453      	str	r3, [r2, #68]	; 0x44
 8003c96:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <HAL_TIM_Base_MspInit+0x110>)
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003ca2:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <HAL_TIM_Base_MspInit+0x110>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	4a10      	ldr	r2, [pc, #64]	; (8003ce8 <HAL_TIM_Base_MspInit+0x110>)
 8003ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cac:	6313      	str	r3, [r2, #48]	; 0x30
 8003cae:	4b0e      	ldr	r3, [pc, #56]	; (8003ce8 <HAL_TIM_Base_MspInit+0x110>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003cba:	2304      	movs	r3, #4
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4808      	ldr	r0, [pc, #32]	; (8003cf8 <HAL_TIM_Base_MspInit+0x120>)
 8003cd6:	f001 fdfb 	bl	80058d0 <HAL_GPIO_Init>
}
 8003cda:	bf00      	nop
 8003cdc:	3738      	adds	r7, #56	; 0x38
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40010000 	.word	0x40010000
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	40000400 	.word	0x40000400
 8003cf0:	40000c00 	.word	0x40000c00
 8003cf4:	40010400 	.word	0x40010400
 8003cf8:	40022000 	.word	0x40022000

08003cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b0b0      	sub	sp, #192	; 0xc0
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d04:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d18:	2284      	movs	r2, #132	; 0x84
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f009 fcd1 	bl	800d6c4 <memset>
  if(huart->Instance==UART7)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a75      	ldr	r2, [pc, #468]	; (8003efc <HAL_UART_MspInit+0x200>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d13d      	bne.n	8003da8 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d30:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8003d32:	2300      	movs	r3, #0
 8003d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f003 ff89 	bl	8007c54 <HAL_RCCEx_PeriphCLKConfig>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003d48:	f7fe fa54 	bl	80021f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003d4c:	4b6c      	ldr	r3, [pc, #432]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	4a6b      	ldr	r2, [pc, #428]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003d52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d56:	6413      	str	r3, [r2, #64]	; 0x40
 8003d58:	4b69      	ldr	r3, [pc, #420]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d64:	4b66      	ldr	r3, [pc, #408]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	4a65      	ldr	r2, [pc, #404]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003d6a:	f043 0320 	orr.w	r3, r3, #32
 8003d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003d70:	4b63      	ldr	r3, [pc, #396]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	623b      	str	r3, [r7, #32]
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003d7c:	23c0      	movs	r3, #192	; 0xc0
 8003d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d82:	2302      	movs	r3, #2
 8003d84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003d94:	2308      	movs	r3, #8
 8003d96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d9a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4858      	ldr	r0, [pc, #352]	; (8003f04 <HAL_UART_MspInit+0x208>)
 8003da2:	f001 fd95 	bl	80058d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003da6:	e0a4      	b.n	8003ef2 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a56      	ldr	r2, [pc, #344]	; (8003f08 <HAL_UART_MspInit+0x20c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d15d      	bne.n	8003e6e <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003db2:	2340      	movs	r3, #64	; 0x40
 8003db4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003db6:	2300      	movs	r3, #0
 8003db8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f003 ff48 	bl	8007c54 <HAL_RCCEx_PeriphCLKConfig>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8003dca:	f7fe fa13 	bl	80021f4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003dce:	4b4c      	ldr	r3, [pc, #304]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	4a4b      	ldr	r2, [pc, #300]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003dd4:	f043 0310 	orr.w	r3, r3, #16
 8003dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dda:	4b49      	ldr	r3, [pc, #292]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	61fb      	str	r3, [r7, #28]
 8003de4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de6:	4b46      	ldr	r3, [pc, #280]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	4a45      	ldr	r2, [pc, #276]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003dec:	f043 0302 	orr.w	r3, r3, #2
 8003df0:	6313      	str	r3, [r2, #48]	; 0x30
 8003df2:	4b43      	ldr	r3, [pc, #268]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	61bb      	str	r3, [r7, #24]
 8003dfc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dfe:	4b40      	ldr	r3, [pc, #256]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	4a3f      	ldr	r2, [pc, #252]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	6313      	str	r3, [r2, #48]	; 0x30
 8003e0a:	4b3d      	ldr	r3, [pc, #244]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003e16:	2380      	movs	r3, #128	; 0x80
 8003e18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e2e:	2307      	movs	r3, #7
 8003e30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003e34:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4834      	ldr	r0, [pc, #208]	; (8003f0c <HAL_UART_MspInit+0x210>)
 8003e3c:	f001 fd48 	bl	80058d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e5a:	2307      	movs	r3, #7
 8003e5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003e60:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003e64:	4619      	mov	r1, r3
 8003e66:	482a      	ldr	r0, [pc, #168]	; (8003f10 <HAL_UART_MspInit+0x214>)
 8003e68:	f001 fd32 	bl	80058d0 <HAL_GPIO_Init>
}
 8003e6c:	e041      	b.n	8003ef2 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART6)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a28      	ldr	r2, [pc, #160]	; (8003f14 <HAL_UART_MspInit+0x218>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d13c      	bne.n	8003ef2 <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003e78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f003 fee3 	bl	8007c54 <HAL_RCCEx_PeriphCLKConfig>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8003e94:	f7fe f9ae 	bl	80021f4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003e98:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9c:	4a18      	ldr	r2, [pc, #96]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003e9e:	f043 0320 	orr.w	r3, r3, #32
 8003ea2:	6453      	str	r3, [r2, #68]	; 0x44
 8003ea4:	4b16      	ldr	r3, [pc, #88]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eb0:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	4a12      	ldr	r2, [pc, #72]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003eb6:	f043 0304 	orr.w	r3, r3, #4
 8003eba:	6313      	str	r3, [r2, #48]	; 0x30
 8003ebc:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <HAL_UART_MspInit+0x204>)
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003ec8:	23c0      	movs	r3, #192	; 0xc0
 8003eca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eda:	2303      	movs	r3, #3
 8003edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003ee0:	2308      	movs	r3, #8
 8003ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ee6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003eea:	4619      	mov	r1, r3
 8003eec:	480a      	ldr	r0, [pc, #40]	; (8003f18 <HAL_UART_MspInit+0x21c>)
 8003eee:	f001 fcef 	bl	80058d0 <HAL_GPIO_Init>
}
 8003ef2:	bf00      	nop
 8003ef4:	37c0      	adds	r7, #192	; 0xc0
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40007800 	.word	0x40007800
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40021400 	.word	0x40021400
 8003f08:	40011000 	.word	0x40011000
 8003f0c:	40020400 	.word	0x40020400
 8003f10:	40020000 	.word	0x40020000
 8003f14:	40011400 	.word	0x40011400
 8003f18:	40020800 	.word	0x40020800

08003f1c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003f22:	1d3b      	adds	r3, r7, #4
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	60da      	str	r2, [r3, #12]
 8003f2e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003f30:	4b3a      	ldr	r3, [pc, #232]	; (800401c <HAL_FMC_MspInit+0x100>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d16d      	bne.n	8004014 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003f38:	4b38      	ldr	r3, [pc, #224]	; (800401c <HAL_FMC_MspInit+0x100>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003f3e:	4b38      	ldr	r3, [pc, #224]	; (8004020 <HAL_FMC_MspInit+0x104>)
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	4a37      	ldr	r2, [pc, #220]	; (8004020 <HAL_FMC_MspInit+0x104>)
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	6393      	str	r3, [r2, #56]	; 0x38
 8003f4a:	4b35      	ldr	r3, [pc, #212]	; (8004020 <HAL_FMC_MspInit+0x104>)
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003f56:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003f5a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f64:	2303      	movs	r3, #3
 8003f66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f68:	230c      	movs	r3, #12
 8003f6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f6c:	1d3b      	adds	r3, r7, #4
 8003f6e:	4619      	mov	r1, r3
 8003f70:	482c      	ldr	r0, [pc, #176]	; (8004024 <HAL_FMC_MspInit+0x108>)
 8003f72:	f001 fcad 	bl	80058d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003f76:	f248 1333 	movw	r3, #33075	; 0x8133
 8003f7a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f84:	2303      	movs	r3, #3
 8003f86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f88:	230c      	movs	r3, #12
 8003f8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f8c:	1d3b      	adds	r3, r7, #4
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4825      	ldr	r0, [pc, #148]	; (8004028 <HAL_FMC_MspInit+0x10c>)
 8003f92:	f001 fc9d 	bl	80058d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003f96:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003f9a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fa8:	230c      	movs	r3, #12
 8003faa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fac:	1d3b      	adds	r3, r7, #4
 8003fae:	4619      	mov	r1, r3
 8003fb0:	481e      	ldr	r0, [pc, #120]	; (800402c <HAL_FMC_MspInit+0x110>)
 8003fb2:	f001 fc8d 	bl	80058d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003fb6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003fba:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fc8:	230c      	movs	r3, #12
 8003fca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003fcc:	1d3b      	adds	r3, r7, #4
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4817      	ldr	r0, [pc, #92]	; (8004030 <HAL_FMC_MspInit+0x114>)
 8003fd2:	f001 fc7d 	bl	80058d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003fd6:	2328      	movs	r3, #40	; 0x28
 8003fd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003fea:	1d3b      	adds	r3, r7, #4
 8003fec:	4619      	mov	r1, r3
 8003fee:	4811      	ldr	r0, [pc, #68]	; (8004034 <HAL_FMC_MspInit+0x118>)
 8003ff0:	f001 fc6e 	bl	80058d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003ff4:	2308      	movs	r3, #8
 8003ff6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004000:	2303      	movs	r3, #3
 8004002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004004:	230c      	movs	r3, #12
 8004006:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004008:	1d3b      	adds	r3, r7, #4
 800400a:	4619      	mov	r1, r3
 800400c:	480a      	ldr	r0, [pc, #40]	; (8004038 <HAL_FMC_MspInit+0x11c>)
 800400e:	f001 fc5f 	bl	80058d0 <HAL_GPIO_Init>
 8004012:	e000      	b.n	8004016 <HAL_FMC_MspInit+0xfa>
    return;
 8004014:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	2000055c 	.word	0x2000055c
 8004020:	40023800 	.word	0x40023800
 8004024:	40021000 	.word	0x40021000
 8004028:	40021800 	.word	0x40021800
 800402c:	40020c00 	.word	0x40020c00
 8004030:	40021400 	.word	0x40021400
 8004034:	40021c00 	.word	0x40021c00
 8004038:	40020800 	.word	0x40020800

0800403c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004044:	f7ff ff6a 	bl	8003f1c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004048:	bf00      	nop
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08c      	sub	sp, #48	; 0x30
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004060:	2200      	movs	r2, #0
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	2036      	movs	r0, #54	; 0x36
 8004066:	f000 fdcf 	bl	8004c08 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800406a:	2036      	movs	r0, #54	; 0x36
 800406c:	f000 fde8 	bl	8004c40 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004070:	4b1f      	ldr	r3, [pc, #124]	; (80040f0 <HAL_InitTick+0xa0>)
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	4a1e      	ldr	r2, [pc, #120]	; (80040f0 <HAL_InitTick+0xa0>)
 8004076:	f043 0310 	orr.w	r3, r3, #16
 800407a:	6413      	str	r3, [r2, #64]	; 0x40
 800407c:	4b1c      	ldr	r3, [pc, #112]	; (80040f0 <HAL_InitTick+0xa0>)
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	f003 0310 	and.w	r3, r3, #16
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004088:	f107 0210 	add.w	r2, r7, #16
 800408c:	f107 0314 	add.w	r3, r7, #20
 8004090:	4611      	mov	r1, r2
 8004092:	4618      	mov	r0, r3
 8004094:	f003 fdac 	bl	8007bf0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004098:	f003 fd82 	bl	8007ba0 <HAL_RCC_GetPCLK1Freq>
 800409c:	4603      	mov	r3, r0
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <HAL_InitTick+0xa4>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	0c9b      	lsrs	r3, r3, #18
 80040ac:	3b01      	subs	r3, #1
 80040ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80040b0:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <HAL_InitTick+0xa8>)
 80040b2:	4a12      	ldr	r2, [pc, #72]	; (80040fc <HAL_InitTick+0xac>)
 80040b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80040b6:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <HAL_InitTick+0xa8>)
 80040b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80040bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80040be:	4a0e      	ldr	r2, [pc, #56]	; (80040f8 <HAL_InitTick+0xa8>)
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <HAL_InitTick+0xa8>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ca:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_InitTick+0xa8>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80040d0:	4809      	ldr	r0, [pc, #36]	; (80040f8 <HAL_InitTick+0xa8>)
 80040d2:	f005 fc0b 	bl	80098ec <HAL_TIM_Base_Init>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d104      	bne.n	80040e6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80040dc:	4806      	ldr	r0, [pc, #24]	; (80040f8 <HAL_InitTick+0xa8>)
 80040de:	f005 fc5d 	bl	800999c <HAL_TIM_Base_Start_IT>
 80040e2:	4603      	mov	r3, r0
 80040e4:	e000      	b.n	80040e8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3730      	adds	r7, #48	; 0x30
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40023800 	.word	0x40023800
 80040f4:	431bde83 	.word	0x431bde83
 80040f8:	20004998 	.word	0x20004998
 80040fc:	40001000 	.word	0x40001000

08004100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004104:	e7fe      	b.n	8004104 <NMI_Handler+0x4>

08004106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004106:	b480      	push	{r7}
 8004108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800410a:	e7fe      	b.n	800410a <HardFault_Handler+0x4>

0800410c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004110:	e7fe      	b.n	8004110 <MemManage_Handler+0x4>

08004112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004112:	b480      	push	{r7}
 8004114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004116:	e7fe      	b.n	8004116 <BusFault_Handler+0x4>

08004118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800411c:	e7fe      	b.n	800411c <UsageFault_Handler+0x4>

0800411e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800411e:	b480      	push	{r7}
 8004120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NC1_Pin);
 8004130:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004134:	f001 feb8 	bl	8005ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004138:	bf00      	nop
 800413a:	bd80      	pop	{r7, pc}

0800413c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8004140:	4b06      	ldr	r3, [pc, #24]	; (800415c <TIM6_DAC_IRQHandler+0x20>)
 8004142:	791b      	ldrb	r3, [r3, #4]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800414a:	4804      	ldr	r0, [pc, #16]	; (800415c <TIM6_DAC_IRQHandler+0x20>)
 800414c:	f000 fda8 	bl	8004ca0 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004150:	4803      	ldr	r0, [pc, #12]	; (8004160 <TIM6_DAC_IRQHandler+0x24>)
 8004152:	f005 fc9b 	bl	8009a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004156:	bf00      	nop
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	200046e8 	.word	0x200046e8
 8004160:	20004998 	.word	0x20004998

08004164 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004168:	4802      	ldr	r0, [pc, #8]	; (8004174 <LTDC_IRQHandler+0x10>)
 800416a:	f002 fdbf 	bl	8006cec <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800416e:	bf00      	nop
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20004524 	.word	0x20004524

08004178 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800417c:	4802      	ldr	r0, [pc, #8]	; (8004188 <DMA2D_IRQHandler+0x10>)
 800417e:	f001 f969 	bl	8005454 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	200047ec 	.word	0x200047ec

0800418c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004190:	4b06      	ldr	r3, [pc, #24]	; (80041ac <SystemInit+0x20>)
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004196:	4a05      	ldr	r2, [pc, #20]	; (80041ac <SystemInit+0x20>)
 8004198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800419c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	e000ed00 	.word	0xe000ed00

080041b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80041b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80041b4:	480d      	ldr	r0, [pc, #52]	; (80041ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80041b6:	490e      	ldr	r1, [pc, #56]	; (80041f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80041b8:	4a0e      	ldr	r2, [pc, #56]	; (80041f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80041ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041bc:	e002      	b.n	80041c4 <LoopCopyDataInit>

080041be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041c2:	3304      	adds	r3, #4

080041c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041c8:	d3f9      	bcc.n	80041be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041ca:	4a0b      	ldr	r2, [pc, #44]	; (80041f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041cc:	4c0b      	ldr	r4, [pc, #44]	; (80041fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80041ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041d0:	e001      	b.n	80041d6 <LoopFillZerobss>

080041d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041d4:	3204      	adds	r2, #4

080041d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041d8:	d3fb      	bcc.n	80041d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80041da:	f7ff ffd7 	bl	800418c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041de:	f009 fa3d 	bl	800d65c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041e2:	f7fc fbab 	bl	800093c <main>
  bx  lr    
 80041e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041e8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80041ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041f0:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 80041f4:	0800f948 	.word	0x0800f948
  ldr r2, =_sbss
 80041f8:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80041fc:	200049f4 	.word	0x200049f4

08004200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004200:	e7fe      	b.n	8004200 <ADC_IRQHandler>

08004202 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004206:	2003      	movs	r0, #3
 8004208:	f000 fcf3 	bl	8004bf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800420c:	200f      	movs	r0, #15
 800420e:	f7ff ff1f 	bl	8004050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004212:	f7ff f967 	bl	80034e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004220:	4b06      	ldr	r3, [pc, #24]	; (800423c <HAL_IncTick+0x20>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	4b06      	ldr	r3, [pc, #24]	; (8004240 <HAL_IncTick+0x24>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4413      	add	r3, r2
 800422c:	4a04      	ldr	r2, [pc, #16]	; (8004240 <HAL_IncTick+0x24>)
 800422e:	6013      	str	r3, [r2, #0]
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000054 	.word	0x20000054
 8004240:	200049e4 	.word	0x200049e4

08004244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return uwTick;
 8004248:	4b03      	ldr	r3, [pc, #12]	; (8004258 <HAL_GetTick+0x14>)
 800424a:	681b      	ldr	r3, [r3, #0]
}
 800424c:	4618      	mov	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	200049e4 	.word	0x200049e4

0800425c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004264:	f7ff ffee 	bl	8004244 <HAL_GetTick>
 8004268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004274:	d005      	beq.n	8004282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004276:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <HAL_Delay+0x44>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004282:	bf00      	nop
 8004284:	f7ff ffde 	bl	8004244 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	429a      	cmp	r2, r3
 8004292:	d8f7      	bhi.n	8004284 <HAL_Delay+0x28>
  {
  }
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000054 	.word	0x20000054

080042a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e031      	b.n	800431e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff f936 	bl	8003534 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f003 0310 	and.w	r3, r3, #16
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d116      	bne.n	8004310 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042e6:	4b10      	ldr	r3, [pc, #64]	; (8004328 <HAL_ADC_Init+0x84>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	f043 0202 	orr.w	r2, r3, #2
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fad6 	bl	80048a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f023 0303 	bic.w	r3, r3, #3
 8004306:	f043 0201 	orr.w	r2, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	641a      	str	r2, [r3, #64]	; 0x40
 800430e:	e001      	b.n	8004314 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800431c:	7bfb      	ldrb	r3, [r7, #15]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	ffffeefd 	.word	0xffffeefd

0800432c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_ADC_Start+0x1a>
 8004342:	2302      	movs	r3, #2
 8004344:	e0ad      	b.n	80044a2 <HAL_ADC_Start+0x176>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b01      	cmp	r3, #1
 800435a:	d018      	beq.n	800438e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800436c:	4b50      	ldr	r3, [pc, #320]	; (80044b0 <HAL_ADC_Start+0x184>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a50      	ldr	r2, [pc, #320]	; (80044b4 <HAL_ADC_Start+0x188>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	0c9a      	lsrs	r2, r3, #18
 8004378:	4613      	mov	r3, r2
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	4413      	add	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004380:	e002      	b.n	8004388 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	3b01      	subs	r3, #1
 8004386:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f9      	bne.n	8004382 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d175      	bne.n	8004488 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043a0:	4b45      	ldr	r3, [pc, #276]	; (80044b8 <HAL_ADC_Start+0x18c>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d6:	d106      	bne.n	80043e6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043dc:	f023 0206 	bic.w	r2, r3, #6
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	645a      	str	r2, [r3, #68]	; 0x44
 80043e4:	e002      	b.n	80043ec <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80043fc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80043fe:	4b2f      	ldr	r3, [pc, #188]	; (80044bc <HAL_ADC_Start+0x190>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10f      	bne.n	800442a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d143      	bne.n	80044a0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004426:	609a      	str	r2, [r3, #8]
 8004428:	e03a      	b.n	80044a0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a24      	ldr	r2, [pc, #144]	; (80044c0 <HAL_ADC_Start+0x194>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d10e      	bne.n	8004452 <HAL_ADC_Start+0x126>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d107      	bne.n	8004452 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004450:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004452:	4b1a      	ldr	r3, [pc, #104]	; (80044bc <HAL_ADC_Start+0x190>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f003 0310 	and.w	r3, r3, #16
 800445a:	2b00      	cmp	r3, #0
 800445c:	d120      	bne.n	80044a0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a18      	ldr	r2, [pc, #96]	; (80044c4 <HAL_ADC_Start+0x198>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d11b      	bne.n	80044a0 <HAL_ADC_Start+0x174>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d114      	bne.n	80044a0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004484:	609a      	str	r2, [r3, #8]
 8004486:	e00b      	b.n	80044a0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	f043 0210 	orr.w	r2, r3, #16
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004498:	f043 0201 	orr.w	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	2000004c 	.word	0x2000004c
 80044b4:	431bde83 	.word	0x431bde83
 80044b8:	fffff8fe 	.word	0xfffff8fe
 80044bc:	40012300 	.word	0x40012300
 80044c0:	40012000 	.word	0x40012000
 80044c4:	40012200 	.word	0x40012200

080044c8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e4:	d113      	bne.n	800450e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f4:	d10b      	bne.n	800450e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f043 0220 	orr.w	r2, r3, #32
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e063      	b.n	80045d6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800450e:	f7ff fe99 	bl	8004244 <HAL_GetTick>
 8004512:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004514:	e021      	b.n	800455a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451c:	d01d      	beq.n	800455a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d007      	beq.n	8004534 <HAL_ADC_PollForConversion+0x6c>
 8004524:	f7ff fe8e 	bl	8004244 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d212      	bcs.n	800455a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b02      	cmp	r3, #2
 8004540:	d00b      	beq.n	800455a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f043 0204 	orr.w	r2, r3, #4
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e03d      	b.n	80045d6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b02      	cmp	r3, #2
 8004566:	d1d6      	bne.n	8004516 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0212 	mvn.w	r2, #18
 8004570:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d123      	bne.n	80045d4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004590:	2b00      	cmp	r3, #0
 8004592:	d11f      	bne.n	80045d4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d006      	beq.n	80045b0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d111      	bne.n	80045d4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f043 0201 	orr.w	r2, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x1c>
 8004610:	2302      	movs	r3, #2
 8004612:	e136      	b.n	8004882 <HAL_ADC_ConfigChannel+0x28a>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b09      	cmp	r3, #9
 8004622:	d93a      	bls.n	800469a <HAL_ADC_ConfigChannel+0xa2>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800462c:	d035      	beq.n	800469a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68d9      	ldr	r1, [r3, #12]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	b29b      	uxth	r3, r3
 800463a:	461a      	mov	r2, r3
 800463c:	4613      	mov	r3, r2
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	4413      	add	r3, r2
 8004642:	3b1e      	subs	r3, #30
 8004644:	2207      	movs	r2, #7
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43da      	mvns	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	400a      	ands	r2, r1
 8004652:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a8d      	ldr	r2, [pc, #564]	; (8004890 <HAL_ADC_ConfigChannel+0x298>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d10a      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68d9      	ldr	r1, [r3, #12]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	061a      	lsls	r2, r3, #24
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004672:	e035      	b.n	80046e0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68d9      	ldr	r1, [r3, #12]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	b29b      	uxth	r3, r3
 8004684:	4618      	mov	r0, r3
 8004686:	4603      	mov	r3, r0
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	4403      	add	r3, r0
 800468c:	3b1e      	subs	r3, #30
 800468e:	409a      	lsls	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004698:	e022      	b.n	80046e0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6919      	ldr	r1, [r3, #16]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	4613      	mov	r3, r2
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	4413      	add	r3, r2
 80046ae:	2207      	movs	r2, #7
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43da      	mvns	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	400a      	ands	r2, r1
 80046bc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6919      	ldr	r1, [r3, #16]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	4618      	mov	r0, r3
 80046d0:	4603      	mov	r3, r0
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4403      	add	r3, r0
 80046d6:	409a      	lsls	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b06      	cmp	r3, #6
 80046e6:	d824      	bhi.n	8004732 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	3b05      	subs	r3, #5
 80046fa:	221f      	movs	r2, #31
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43da      	mvns	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	400a      	ands	r2, r1
 8004708:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	b29b      	uxth	r3, r3
 8004716:	4618      	mov	r0, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	3b05      	subs	r3, #5
 8004724:	fa00 f203 	lsl.w	r2, r0, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	635a      	str	r2, [r3, #52]	; 0x34
 8004730:	e04c      	b.n	80047cc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b0c      	cmp	r3, #12
 8004738:	d824      	bhi.n	8004784 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	3b23      	subs	r3, #35	; 0x23
 800474c:	221f      	movs	r2, #31
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	43da      	mvns	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	400a      	ands	r2, r1
 800475a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	b29b      	uxth	r3, r3
 8004768:	4618      	mov	r0, r3
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	3b23      	subs	r3, #35	; 0x23
 8004776:	fa00 f203 	lsl.w	r2, r0, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	631a      	str	r2, [r3, #48]	; 0x30
 8004782:	e023      	b.n	80047cc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	3b41      	subs	r3, #65	; 0x41
 8004796:	221f      	movs	r2, #31
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	43da      	mvns	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	400a      	ands	r2, r1
 80047a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	4618      	mov	r0, r3
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	3b41      	subs	r3, #65	; 0x41
 80047c0:	fa00 f203 	lsl.w	r2, r0, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a30      	ldr	r2, [pc, #192]	; (8004894 <HAL_ADC_ConfigChannel+0x29c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d10a      	bne.n	80047ec <HAL_ADC_ConfigChannel+0x1f4>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047de:	d105      	bne.n	80047ec <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80047e0:	4b2d      	ldr	r3, [pc, #180]	; (8004898 <HAL_ADC_ConfigChannel+0x2a0>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	4a2c      	ldr	r2, [pc, #176]	; (8004898 <HAL_ADC_ConfigChannel+0x2a0>)
 80047e6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80047ea:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a28      	ldr	r2, [pc, #160]	; (8004894 <HAL_ADC_ConfigChannel+0x29c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d10f      	bne.n	8004816 <HAL_ADC_ConfigChannel+0x21e>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b12      	cmp	r3, #18
 80047fc:	d10b      	bne.n	8004816 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80047fe:	4b26      	ldr	r3, [pc, #152]	; (8004898 <HAL_ADC_ConfigChannel+0x2a0>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4a25      	ldr	r2, [pc, #148]	; (8004898 <HAL_ADC_ConfigChannel+0x2a0>)
 8004804:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004808:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800480a:	4b23      	ldr	r3, [pc, #140]	; (8004898 <HAL_ADC_ConfigChannel+0x2a0>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4a22      	ldr	r2, [pc, #136]	; (8004898 <HAL_ADC_ConfigChannel+0x2a0>)
 8004810:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004814:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1e      	ldr	r2, [pc, #120]	; (8004894 <HAL_ADC_ConfigChannel+0x29c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d12b      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x280>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1a      	ldr	r2, [pc, #104]	; (8004890 <HAL_ADC_ConfigChannel+0x298>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d003      	beq.n	8004832 <HAL_ADC_ConfigChannel+0x23a>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b11      	cmp	r3, #17
 8004830:	d122      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004832:	4b19      	ldr	r3, [pc, #100]	; (8004898 <HAL_ADC_ConfigChannel+0x2a0>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	4a18      	ldr	r2, [pc, #96]	; (8004898 <HAL_ADC_ConfigChannel+0x2a0>)
 8004838:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800483c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800483e:	4b16      	ldr	r3, [pc, #88]	; (8004898 <HAL_ADC_ConfigChannel+0x2a0>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	4a15      	ldr	r2, [pc, #84]	; (8004898 <HAL_ADC_ConfigChannel+0x2a0>)
 8004844:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004848:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a10      	ldr	r2, [pc, #64]	; (8004890 <HAL_ADC_ConfigChannel+0x298>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d111      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004854:	4b11      	ldr	r3, [pc, #68]	; (800489c <HAL_ADC_ConfigChannel+0x2a4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a11      	ldr	r2, [pc, #68]	; (80048a0 <HAL_ADC_ConfigChannel+0x2a8>)
 800485a:	fba2 2303 	umull	r2, r3, r2, r3
 800485e:	0c9a      	lsrs	r2, r3, #18
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800486a:	e002      	b.n	8004872 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3b01      	subs	r3, #1
 8004870:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1f9      	bne.n	800486c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	10000012 	.word	0x10000012
 8004894:	40012000 	.word	0x40012000
 8004898:	40012300 	.word	0x40012300
 800489c:	2000004c 	.word	0x2000004c
 80048a0:	431bde83 	.word	0x431bde83

080048a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80048ac:	4b78      	ldr	r3, [pc, #480]	; (8004a90 <ADC_Init+0x1ec>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	4a77      	ldr	r2, [pc, #476]	; (8004a90 <ADC_Init+0x1ec>)
 80048b2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80048b6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80048b8:	4b75      	ldr	r3, [pc, #468]	; (8004a90 <ADC_Init+0x1ec>)
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	4973      	ldr	r1, [pc, #460]	; (8004a90 <ADC_Init+0x1ec>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6859      	ldr	r1, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	021a      	lsls	r2, r3, #8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80048f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800491a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6899      	ldr	r1, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004932:	4a58      	ldr	r2, [pc, #352]	; (8004a94 <ADC_Init+0x1f0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d022      	beq.n	800497e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004946:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6899      	ldr	r1, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004968:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6899      	ldr	r1, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	609a      	str	r2, [r3, #8]
 800497c:	e00f      	b.n	800499e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800498c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800499c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0202 	bic.w	r2, r2, #2
 80049ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6899      	ldr	r1, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	005a      	lsls	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01b      	beq.n	8004a04 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80049ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6859      	ldr	r1, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	3b01      	subs	r3, #1
 80049f8:	035a      	lsls	r2, r3, #13
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
 8004a02:	e007      	b.n	8004a14 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	051a      	lsls	r2, r3, #20
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6899      	ldr	r1, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a56:	025a      	lsls	r2, r3, #9
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6899      	ldr	r1, [r3, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	029a      	lsls	r2, r3, #10
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	609a      	str	r2, [r3, #8]
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	40012300 	.word	0x40012300
 8004a94:	0f000001 	.word	0x0f000001

08004a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ac0:	4b06      	ldr	r3, [pc, #24]	; (8004adc <__NVIC_SetPriorityGrouping+0x44>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ac6:	4a04      	ldr	r2, [pc, #16]	; (8004ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	60d3      	str	r3, [r2, #12]
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	e000ed00 	.word	0xe000ed00
 8004adc:	05fa0000 	.word	0x05fa0000

08004ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ae4:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	0a1b      	lsrs	r3, r3, #8
 8004aea:	f003 0307 	and.w	r3, r3, #7
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	db0b      	blt.n	8004b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	f003 021f 	and.w	r2, r3, #31
 8004b14:	4907      	ldr	r1, [pc, #28]	; (8004b34 <__NVIC_EnableIRQ+0x38>)
 8004b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	e000e100 	.word	0xe000e100

08004b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	6039      	str	r1, [r7, #0]
 8004b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	db0a      	blt.n	8004b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	490c      	ldr	r1, [pc, #48]	; (8004b84 <__NVIC_SetPriority+0x4c>)
 8004b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b56:	0112      	lsls	r2, r2, #4
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b60:	e00a      	b.n	8004b78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	4908      	ldr	r1, [pc, #32]	; (8004b88 <__NVIC_SetPriority+0x50>)
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	3b04      	subs	r3, #4
 8004b70:	0112      	lsls	r2, r2, #4
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	440b      	add	r3, r1
 8004b76:	761a      	strb	r2, [r3, #24]
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	e000e100 	.word	0xe000e100
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b089      	sub	sp, #36	; 0x24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f1c3 0307 	rsb	r3, r3, #7
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	bf28      	it	cs
 8004baa:	2304      	movcs	r3, #4
 8004bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	2b06      	cmp	r3, #6
 8004bb4:	d902      	bls.n	8004bbc <NVIC_EncodePriority+0x30>
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	3b03      	subs	r3, #3
 8004bba:	e000      	b.n	8004bbe <NVIC_EncodePriority+0x32>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bca:	43da      	mvns	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	401a      	ands	r2, r3
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	fa01 f303 	lsl.w	r3, r1, r3
 8004bde:	43d9      	mvns	r1, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be4:	4313      	orrs	r3, r2
         );
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3724      	adds	r7, #36	; 0x24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b082      	sub	sp, #8
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ff4c 	bl	8004a98 <__NVIC_SetPriorityGrouping>
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c1a:	f7ff ff61 	bl	8004ae0 <__NVIC_GetPriorityGrouping>
 8004c1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	6978      	ldr	r0, [r7, #20]
 8004c26:	f7ff ffb1 	bl	8004b8c <NVIC_EncodePriority>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c30:	4611      	mov	r1, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7ff ff80 	bl	8004b38 <__NVIC_SetPriority>
}
 8004c38:	bf00      	nop
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff ff54 	bl	8004afc <__NVIC_EnableIRQ>
}
 8004c54:	bf00      	nop
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e014      	b.n	8004c98 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	791b      	ldrb	r3, [r3, #4]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d105      	bne.n	8004c84 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fe fcc6 	bl	8003610 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb6:	d120      	bne.n	8004cfa <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc6:	d118      	bne.n	8004cfa <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2204      	movs	r2, #4
 8004ccc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f043 0201 	orr.w	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ce2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cf2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f82d 	bl	8004d54 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d08:	d120      	bne.n	8004d4c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d18:	d118      	bne.n	8004d4c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f043 0202 	orr.w	r2, r3, #2
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004d34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004d44:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f85d 	bl	8004e06 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	795b      	ldrb	r3, [r3, #5]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_DAC_ConfigChannel+0x18>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e03c      	b.n	8004dfa <HAL_DAC_ConfigChannel+0x92>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2201      	movs	r2, #1
 8004d84:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	43db      	mvns	r3, r3
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	4013      	ands	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f003 0310 	and.w	r3, r3, #16
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6819      	ldr	r1, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f003 0310 	and.w	r3, r3, #16
 8004ddc:	22c0      	movs	r2, #192	; 0xc0
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	43da      	mvns	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	400a      	ands	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2201      	movs	r2, #1
 8004df0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e28:	f7ff fa0c 	bl	8004244 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e099      	b.n	8004f6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0201 	bic.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e58:	e00f      	b.n	8004e7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e5a:	f7ff f9f3 	bl	8004244 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b05      	cmp	r3, #5
 8004e66:	d908      	bls.n	8004e7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2203      	movs	r2, #3
 8004e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e078      	b.n	8004f6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e8      	bne.n	8004e5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4b38      	ldr	r3, [pc, #224]	; (8004f74 <HAL_DMA_Init+0x158>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ebe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d107      	bne.n	8004ee4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	4313      	orrs	r3, r2
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f023 0307 	bic.w	r3, r3, #7
 8004efa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d117      	bne.n	8004f3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00e      	beq.n	8004f3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f8bd 	bl	80050a0 <DMA_CheckFifoParam>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d008      	beq.n	8004f3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2240      	movs	r2, #64	; 0x40
 8004f30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e016      	b.n	8004f6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f874 	bl	8005034 <DMA_CalcBaseAndBitshift>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f54:	223f      	movs	r2, #63	; 0x3f
 8004f56:	409a      	lsls	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	f010803f 	.word	0xf010803f

08004f78 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e050      	b.n	800502c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d101      	bne.n	8004f9a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004f96:	2302      	movs	r3, #2
 8004f98:	e048      	b.n	800502c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0201 	bic.w	r2, r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2221      	movs	r2, #33	; 0x21
 8004fd8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f82a 	bl	8005034 <DMA_CalcBaseAndBitshift>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe8:	223f      	movs	r2, #63	; 0x3f
 8004fea:	409a      	lsls	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	3b10      	subs	r3, #16
 8005044:	4a13      	ldr	r2, [pc, #76]	; (8005094 <DMA_CalcBaseAndBitshift+0x60>)
 8005046:	fba2 2303 	umull	r2, r3, r2, r3
 800504a:	091b      	lsrs	r3, r3, #4
 800504c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800504e:	4a12      	ldr	r2, [pc, #72]	; (8005098 <DMA_CalcBaseAndBitshift+0x64>)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4413      	add	r3, r2
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b03      	cmp	r3, #3
 8005060:	d908      	bls.n	8005074 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	4b0c      	ldr	r3, [pc, #48]	; (800509c <DMA_CalcBaseAndBitshift+0x68>)
 800506a:	4013      	ands	r3, r2
 800506c:	1d1a      	adds	r2, r3, #4
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	659a      	str	r2, [r3, #88]	; 0x58
 8005072:	e006      	b.n	8005082 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	4b08      	ldr	r3, [pc, #32]	; (800509c <DMA_CalcBaseAndBitshift+0x68>)
 800507c:	4013      	ands	r3, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	aaaaaaab 	.word	0xaaaaaaab
 8005098:	0800f8d0 	.word	0x0800f8d0
 800509c:	fffffc00 	.word	0xfffffc00

080050a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d11f      	bne.n	80050fa <DMA_CheckFifoParam+0x5a>
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d856      	bhi.n	800516e <DMA_CheckFifoParam+0xce>
 80050c0:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <DMA_CheckFifoParam+0x28>)
 80050c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c6:	bf00      	nop
 80050c8:	080050d9 	.word	0x080050d9
 80050cc:	080050eb 	.word	0x080050eb
 80050d0:	080050d9 	.word	0x080050d9
 80050d4:	0800516f 	.word	0x0800516f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d046      	beq.n	8005172 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050e8:	e043      	b.n	8005172 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050f2:	d140      	bne.n	8005176 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050f8:	e03d      	b.n	8005176 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005102:	d121      	bne.n	8005148 <DMA_CheckFifoParam+0xa8>
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b03      	cmp	r3, #3
 8005108:	d837      	bhi.n	800517a <DMA_CheckFifoParam+0xda>
 800510a:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <DMA_CheckFifoParam+0x70>)
 800510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005110:	08005121 	.word	0x08005121
 8005114:	08005127 	.word	0x08005127
 8005118:	08005121 	.word	0x08005121
 800511c:	08005139 	.word	0x08005139
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	73fb      	strb	r3, [r7, #15]
      break;
 8005124:	e030      	b.n	8005188 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d025      	beq.n	800517e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005136:	e022      	b.n	800517e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005140:	d11f      	bne.n	8005182 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005146:	e01c      	b.n	8005182 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d903      	bls.n	8005156 <DMA_CheckFifoParam+0xb6>
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b03      	cmp	r3, #3
 8005152:	d003      	beq.n	800515c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005154:	e018      	b.n	8005188 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	73fb      	strb	r3, [r7, #15]
      break;
 800515a:	e015      	b.n	8005188 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00e      	beq.n	8005186 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	73fb      	strb	r3, [r7, #15]
      break;
 800516c:	e00b      	b.n	8005186 <DMA_CheckFifoParam+0xe6>
      break;
 800516e:	bf00      	nop
 8005170:	e00a      	b.n	8005188 <DMA_CheckFifoParam+0xe8>
      break;
 8005172:	bf00      	nop
 8005174:	e008      	b.n	8005188 <DMA_CheckFifoParam+0xe8>
      break;
 8005176:	bf00      	nop
 8005178:	e006      	b.n	8005188 <DMA_CheckFifoParam+0xe8>
      break;
 800517a:	bf00      	nop
 800517c:	e004      	b.n	8005188 <DMA_CheckFifoParam+0xe8>
      break;
 800517e:	bf00      	nop
 8005180:	e002      	b.n	8005188 <DMA_CheckFifoParam+0xe8>
      break;   
 8005182:	bf00      	nop
 8005184:	e000      	b.n	8005188 <DMA_CheckFifoParam+0xe8>
      break;
 8005186:	bf00      	nop
    }
  } 
  
  return status; 
 8005188:	7bfb      	ldrb	r3, [r7, #15]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop

08005198 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e039      	b.n	800521e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fe fa6e 	bl	80036a0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e8:	f023 0107 	bic.w	r1, r3, #7
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051fe:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <HAL_DMA2D_Init+0x90>)
 8005200:	4013      	ands	r3, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	68d1      	ldr	r1, [r2, #12]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6812      	ldr	r2, [r2, #0]
 800520a:	430b      	orrs	r3, r1
 800520c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	ffffc000 	.word	0xffffc000

0800522c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_DMA2D_Start+0x1c>
 8005244:	2302      	movs	r3, #2
 8005246:	e018      	b.n	800527a <HAL_DMA2D_Start+0x4e>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 fa98 	bl	8005798 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0201 	orr.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b086      	sub	sp, #24
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d056      	beq.n	800534c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800529e:	f7fe ffd1 	bl	8004244 <HAL_GetTick>
 80052a2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80052a4:	e04b      	b.n	800533e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d023      	beq.n	8005300 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c6:	f043 0202 	orr.w	r2, r3, #2
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d005      	beq.n	80052e4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052dc:	f043 0201 	orr.w	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2221      	movs	r2, #33	; 0x21
 80052ea:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2204      	movs	r2, #4
 80052f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0a5      	b.n	800544c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005306:	d01a      	beq.n	800533e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005308:	f7fe ff9c 	bl	8004244 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d302      	bcc.n	800531e <HAL_DMA2D_PollForTransfer+0x9c>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10f      	bne.n	800533e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005322:	f043 0220 	orr.w	r2, r3, #32
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2203      	movs	r2, #3
 800532e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e086      	b.n	800544c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0ac      	beq.n	80052a6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d061      	beq.n	8005432 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800536e:	f7fe ff69 	bl	8004244 <HAL_GetTick>
 8005372:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005374:	e056      	b.n	8005424 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005384:	2b00      	cmp	r3, #0
 8005386:	d02e      	beq.n	80053e6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d005      	beq.n	800539e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005396:	f043 0204 	orr.w	r2, r3, #4
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ac:	f043 0202 	orr.w	r2, r3, #2
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c2:	f043 0201 	orr.w	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2229      	movs	r2, #41	; 0x29
 80053d0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2204      	movs	r2, #4
 80053d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e032      	b.n	800544c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d01a      	beq.n	8005424 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053ee:	f7fe ff29 	bl	8004244 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d302      	bcc.n	8005404 <HAL_DMA2D_PollForTransfer+0x182>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10f      	bne.n	8005424 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005408:	f043 0220 	orr.w	r2, r3, #32
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2203      	movs	r2, #3
 8005414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e013      	b.n	800544c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f003 0310 	and.w	r3, r3, #16
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0a1      	beq.n	8005376 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2212      	movs	r2, #18
 8005438:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d026      	beq.n	80054c4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547c:	2b00      	cmp	r3, #0
 800547e:	d021      	beq.n	80054c4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800548e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005494:	f043 0201 	orr.w	r2, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2201      	movs	r2, #1
 80054a2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2204      	movs	r2, #4
 80054a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d026      	beq.n	800551c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d021      	beq.n	800551c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054e6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2220      	movs	r2, #32
 80054ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f4:	f043 0202 	orr.w	r2, r3, #2
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2204      	movs	r2, #4
 8005500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d026      	beq.n	8005574 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800552c:	2b00      	cmp	r3, #0
 800552e:	d021      	beq.n	8005574 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800553e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2208      	movs	r2, #8
 8005546:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554c:	f043 0204 	orr.w	r2, r3, #4
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2204      	movs	r2, #4
 8005558:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	2b00      	cmp	r3, #0
 800557c:	d013      	beq.n	80055a6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00e      	beq.n	80055a6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005596:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2204      	movs	r2, #4
 800559e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f853 	bl	800564c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d024      	beq.n	80055fa <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d01f      	beq.n	80055fa <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80055c8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2202      	movs	r2, #2
 80055d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f003 0310 	and.w	r3, r3, #16
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01f      	beq.n	8005644 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01a      	beq.n	8005644 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800561c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2210      	movs	r2, #16
 8005624:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f80e 	bl	8005660 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005644:	bf00      	nop
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_DMA2D_ConfigLayer+0x20>
 8005690:	2302      	movs	r3, #2
 8005692:	e079      	b.n	8005788 <HAL_DMA2D_ConfigLayer+0x114>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	3318      	adds	r3, #24
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	4413      	add	r3, r2
 80056ae:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	041b      	lsls	r3, r3, #16
 80056ba:	4313      	orrs	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80056be:	4b35      	ldr	r3, [pc, #212]	; (8005794 <HAL_DMA2D_ConfigLayer+0x120>)
 80056c0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b0a      	cmp	r3, #10
 80056c8:	d003      	beq.n	80056d2 <HAL_DMA2D_ConfigLayer+0x5e>
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b09      	cmp	r3, #9
 80056d0:	d107      	bne.n	80056e2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	e005      	b.n	80056ee <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	061b      	lsls	r3, r3, #24
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d120      	bne.n	8005736 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	43db      	mvns	r3, r3
 80056fe:	ea02 0103 	and.w	r1, r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	430a      	orrs	r2, r1
 800570a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b0a      	cmp	r3, #10
 800571c:	d003      	beq.n	8005726 <HAL_DMA2D_ConfigLayer+0xb2>
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b09      	cmp	r3, #9
 8005724:	d127      	bne.n	8005776 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005732:	629a      	str	r2, [r3, #40]	; 0x28
 8005734:	e01f      	b.n	8005776 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69da      	ldr	r2, [r3, #28]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	43db      	mvns	r3, r3
 8005740:	ea02 0103 	and.w	r1, r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	430a      	orrs	r2, r1
 800574c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	6812      	ldr	r2, [r2, #0]
 8005756:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2b0a      	cmp	r3, #10
 800575e:	d003      	beq.n	8005768 <HAL_DMA2D_ConfigLayer+0xf4>
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b09      	cmp	r3, #9
 8005766:	d106      	bne.n	8005776 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005774:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	371c      	adds	r7, #28
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	ff03000f 	.word	0xff03000f

08005798 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005798:	b480      	push	{r7}
 800579a:	b08b      	sub	sp, #44	; 0x2c
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ac:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	041a      	lsls	r2, r3, #16
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	431a      	orrs	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057d0:	d174      	bne.n	80058bc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80057d8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057e0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80057e8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d108      	bne.n	800580a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	431a      	orrs	r2, r3
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	4313      	orrs	r3, r2
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
 8005808:	e053      	b.n	80058b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d106      	bne.n	8005820 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	4313      	orrs	r3, r2
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
 800581e:	e048      	b.n	80058b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	2b02      	cmp	r3, #2
 8005826:	d111      	bne.n	800584c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	0cdb      	lsrs	r3, r3, #19
 800582c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	0a9b      	lsrs	r3, r3, #10
 8005832:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	08db      	lsrs	r3, r3, #3
 8005838:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	02db      	lsls	r3, r3, #11
 8005842:	4313      	orrs	r3, r2
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
 800584a:	e032      	b.n	80058b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	2b03      	cmp	r3, #3
 8005852:	d117      	bne.n	8005884 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	0fdb      	lsrs	r3, r3, #31
 8005858:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	0cdb      	lsrs	r3, r3, #19
 800585e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	0adb      	lsrs	r3, r3, #11
 8005864:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	08db      	lsrs	r3, r3, #3
 800586a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	029b      	lsls	r3, r3, #10
 8005874:	431a      	orrs	r2, r3
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	03db      	lsls	r3, r3, #15
 800587a:	4313      	orrs	r3, r2
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
 8005882:	e016      	b.n	80058b2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	0f1b      	lsrs	r3, r3, #28
 8005888:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	0d1b      	lsrs	r3, r3, #20
 800588e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	0b1b      	lsrs	r3, r3, #12
 8005894:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	091b      	lsrs	r3, r3, #4
 800589a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	011a      	lsls	r2, r3, #4
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	021b      	lsls	r3, r3, #8
 80058a4:	431a      	orrs	r2, r3
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	031b      	lsls	r3, r3, #12
 80058aa:	4313      	orrs	r3, r2
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80058ba:	e003      	b.n	80058c4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	60da      	str	r2, [r3, #12]
}
 80058c4:	bf00      	nop
 80058c6:	372c      	adds	r7, #44	; 0x2c
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b089      	sub	sp, #36	; 0x24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80058da:	2300      	movs	r3, #0
 80058dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80058e2:	2300      	movs	r3, #0
 80058e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80058e6:	2300      	movs	r3, #0
 80058e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80058ea:	2300      	movs	r3, #0
 80058ec:	61fb      	str	r3, [r7, #28]
 80058ee:	e175      	b.n	8005bdc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80058f0:	2201      	movs	r2, #1
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	fa02 f303 	lsl.w	r3, r2, r3
 80058f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4013      	ands	r3, r2
 8005902:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	429a      	cmp	r2, r3
 800590a:	f040 8164 	bne.w	8005bd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	2b01      	cmp	r3, #1
 8005918:	d005      	beq.n	8005926 <HAL_GPIO_Init+0x56>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d130      	bne.n	8005988 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	2203      	movs	r2, #3
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	43db      	mvns	r3, r3
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	4013      	ands	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	4313      	orrs	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800595c:	2201      	movs	r2, #1
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	43db      	mvns	r3, r3
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	4013      	ands	r3, r2
 800596a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	091b      	lsrs	r3, r3, #4
 8005972:	f003 0201 	and.w	r2, r3, #1
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	4313      	orrs	r3, r2
 8005980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	2b03      	cmp	r3, #3
 8005992:	d017      	beq.n	80059c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	2203      	movs	r2, #3
 80059a0:	fa02 f303 	lsl.w	r3, r2, r3
 80059a4:	43db      	mvns	r3, r3
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	4013      	ands	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f003 0303 	and.w	r3, r3, #3
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d123      	bne.n	8005a18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	08da      	lsrs	r2, r3, #3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3208      	adds	r2, #8
 80059d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	220f      	movs	r2, #15
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	43db      	mvns	r3, r3
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	4013      	ands	r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	fa02 f303 	lsl.w	r3, r2, r3
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	08da      	lsrs	r2, r3, #3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3208      	adds	r2, #8
 8005a12:	69b9      	ldr	r1, [r7, #24]
 8005a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	2203      	movs	r2, #3
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f003 0203 	and.w	r2, r3, #3
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 80be 	beq.w	8005bd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a5a:	4b66      	ldr	r3, [pc, #408]	; (8005bf4 <HAL_GPIO_Init+0x324>)
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	4a65      	ldr	r2, [pc, #404]	; (8005bf4 <HAL_GPIO_Init+0x324>)
 8005a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a64:	6453      	str	r3, [r2, #68]	; 0x44
 8005a66:	4b63      	ldr	r3, [pc, #396]	; (8005bf4 <HAL_GPIO_Init+0x324>)
 8005a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005a72:	4a61      	ldr	r2, [pc, #388]	; (8005bf8 <HAL_GPIO_Init+0x328>)
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	089b      	lsrs	r3, r3, #2
 8005a78:	3302      	adds	r3, #2
 8005a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	220f      	movs	r2, #15
 8005a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8e:	43db      	mvns	r3, r3
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	4013      	ands	r3, r2
 8005a94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a58      	ldr	r2, [pc, #352]	; (8005bfc <HAL_GPIO_Init+0x32c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d037      	beq.n	8005b0e <HAL_GPIO_Init+0x23e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a57      	ldr	r2, [pc, #348]	; (8005c00 <HAL_GPIO_Init+0x330>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d031      	beq.n	8005b0a <HAL_GPIO_Init+0x23a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a56      	ldr	r2, [pc, #344]	; (8005c04 <HAL_GPIO_Init+0x334>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d02b      	beq.n	8005b06 <HAL_GPIO_Init+0x236>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a55      	ldr	r2, [pc, #340]	; (8005c08 <HAL_GPIO_Init+0x338>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d025      	beq.n	8005b02 <HAL_GPIO_Init+0x232>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a54      	ldr	r2, [pc, #336]	; (8005c0c <HAL_GPIO_Init+0x33c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d01f      	beq.n	8005afe <HAL_GPIO_Init+0x22e>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a53      	ldr	r2, [pc, #332]	; (8005c10 <HAL_GPIO_Init+0x340>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d019      	beq.n	8005afa <HAL_GPIO_Init+0x22a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a52      	ldr	r2, [pc, #328]	; (8005c14 <HAL_GPIO_Init+0x344>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d013      	beq.n	8005af6 <HAL_GPIO_Init+0x226>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a51      	ldr	r2, [pc, #324]	; (8005c18 <HAL_GPIO_Init+0x348>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00d      	beq.n	8005af2 <HAL_GPIO_Init+0x222>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a50      	ldr	r2, [pc, #320]	; (8005c1c <HAL_GPIO_Init+0x34c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d007      	beq.n	8005aee <HAL_GPIO_Init+0x21e>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a4f      	ldr	r2, [pc, #316]	; (8005c20 <HAL_GPIO_Init+0x350>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d101      	bne.n	8005aea <HAL_GPIO_Init+0x21a>
 8005ae6:	2309      	movs	r3, #9
 8005ae8:	e012      	b.n	8005b10 <HAL_GPIO_Init+0x240>
 8005aea:	230a      	movs	r3, #10
 8005aec:	e010      	b.n	8005b10 <HAL_GPIO_Init+0x240>
 8005aee:	2308      	movs	r3, #8
 8005af0:	e00e      	b.n	8005b10 <HAL_GPIO_Init+0x240>
 8005af2:	2307      	movs	r3, #7
 8005af4:	e00c      	b.n	8005b10 <HAL_GPIO_Init+0x240>
 8005af6:	2306      	movs	r3, #6
 8005af8:	e00a      	b.n	8005b10 <HAL_GPIO_Init+0x240>
 8005afa:	2305      	movs	r3, #5
 8005afc:	e008      	b.n	8005b10 <HAL_GPIO_Init+0x240>
 8005afe:	2304      	movs	r3, #4
 8005b00:	e006      	b.n	8005b10 <HAL_GPIO_Init+0x240>
 8005b02:	2303      	movs	r3, #3
 8005b04:	e004      	b.n	8005b10 <HAL_GPIO_Init+0x240>
 8005b06:	2302      	movs	r3, #2
 8005b08:	e002      	b.n	8005b10 <HAL_GPIO_Init+0x240>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e000      	b.n	8005b10 <HAL_GPIO_Init+0x240>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	69fa      	ldr	r2, [r7, #28]
 8005b12:	f002 0203 	and.w	r2, r2, #3
 8005b16:	0092      	lsls	r2, r2, #2
 8005b18:	4093      	lsls	r3, r2
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005b20:	4935      	ldr	r1, [pc, #212]	; (8005bf8 <HAL_GPIO_Init+0x328>)
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	089b      	lsrs	r3, r3, #2
 8005b26:	3302      	adds	r3, #2
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b2e:	4b3d      	ldr	r3, [pc, #244]	; (8005c24 <HAL_GPIO_Init+0x354>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	43db      	mvns	r3, r3
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b52:	4a34      	ldr	r2, [pc, #208]	; (8005c24 <HAL_GPIO_Init+0x354>)
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b58:	4b32      	ldr	r3, [pc, #200]	; (8005c24 <HAL_GPIO_Init+0x354>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	43db      	mvns	r3, r3
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	4013      	ands	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b7c:	4a29      	ldr	r2, [pc, #164]	; (8005c24 <HAL_GPIO_Init+0x354>)
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b82:	4b28      	ldr	r3, [pc, #160]	; (8005c24 <HAL_GPIO_Init+0x354>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	43db      	mvns	r3, r3
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ba6:	4a1f      	ldr	r2, [pc, #124]	; (8005c24 <HAL_GPIO_Init+0x354>)
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bac:	4b1d      	ldr	r3, [pc, #116]	; (8005c24 <HAL_GPIO_Init+0x354>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	43db      	mvns	r3, r3
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d003      	beq.n	8005bd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005bd0:	4a14      	ldr	r2, [pc, #80]	; (8005c24 <HAL_GPIO_Init+0x354>)
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	61fb      	str	r3, [r7, #28]
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	2b0f      	cmp	r3, #15
 8005be0:	f67f ae86 	bls.w	80058f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	3724      	adds	r7, #36	; 0x24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	40013800 	.word	0x40013800
 8005bfc:	40020000 	.word	0x40020000
 8005c00:	40020400 	.word	0x40020400
 8005c04:	40020800 	.word	0x40020800
 8005c08:	40020c00 	.word	0x40020c00
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	40021400 	.word	0x40021400
 8005c14:	40021800 	.word	0x40021800
 8005c18:	40021c00 	.word	0x40021c00
 8005c1c:	40022000 	.word	0x40022000
 8005c20:	40022400 	.word	0x40022400
 8005c24:	40013c00 	.word	0x40013c00

08005c28 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005c32:	2300      	movs	r3, #0
 8005c34:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005c3e:	2300      	movs	r3, #0
 8005c40:	617b      	str	r3, [r7, #20]
 8005c42:	e0d9      	b.n	8005df8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005c44:	2201      	movs	r2, #1
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	4013      	ands	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	f040 80c9 	bne.w	8005df2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005c60:	4a6b      	ldr	r2, [pc, #428]	; (8005e10 <HAL_GPIO_DeInit+0x1e8>)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	089b      	lsrs	r3, r3, #2
 8005c66:	3302      	adds	r3, #2
 8005c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c6c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f003 0303 	and.w	r3, r3, #3
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	220f      	movs	r2, #15
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a63      	ldr	r2, [pc, #396]	; (8005e14 <HAL_GPIO_DeInit+0x1ec>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d037      	beq.n	8005cfa <HAL_GPIO_DeInit+0xd2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a62      	ldr	r2, [pc, #392]	; (8005e18 <HAL_GPIO_DeInit+0x1f0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d031      	beq.n	8005cf6 <HAL_GPIO_DeInit+0xce>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a61      	ldr	r2, [pc, #388]	; (8005e1c <HAL_GPIO_DeInit+0x1f4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d02b      	beq.n	8005cf2 <HAL_GPIO_DeInit+0xca>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a60      	ldr	r2, [pc, #384]	; (8005e20 <HAL_GPIO_DeInit+0x1f8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d025      	beq.n	8005cee <HAL_GPIO_DeInit+0xc6>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a5f      	ldr	r2, [pc, #380]	; (8005e24 <HAL_GPIO_DeInit+0x1fc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d01f      	beq.n	8005cea <HAL_GPIO_DeInit+0xc2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a5e      	ldr	r2, [pc, #376]	; (8005e28 <HAL_GPIO_DeInit+0x200>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d019      	beq.n	8005ce6 <HAL_GPIO_DeInit+0xbe>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a5d      	ldr	r2, [pc, #372]	; (8005e2c <HAL_GPIO_DeInit+0x204>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d013      	beq.n	8005ce2 <HAL_GPIO_DeInit+0xba>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a5c      	ldr	r2, [pc, #368]	; (8005e30 <HAL_GPIO_DeInit+0x208>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00d      	beq.n	8005cde <HAL_GPIO_DeInit+0xb6>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a5b      	ldr	r2, [pc, #364]	; (8005e34 <HAL_GPIO_DeInit+0x20c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d007      	beq.n	8005cda <HAL_GPIO_DeInit+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a5a      	ldr	r2, [pc, #360]	; (8005e38 <HAL_GPIO_DeInit+0x210>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d101      	bne.n	8005cd6 <HAL_GPIO_DeInit+0xae>
 8005cd2:	2309      	movs	r3, #9
 8005cd4:	e012      	b.n	8005cfc <HAL_GPIO_DeInit+0xd4>
 8005cd6:	230a      	movs	r3, #10
 8005cd8:	e010      	b.n	8005cfc <HAL_GPIO_DeInit+0xd4>
 8005cda:	2308      	movs	r3, #8
 8005cdc:	e00e      	b.n	8005cfc <HAL_GPIO_DeInit+0xd4>
 8005cde:	2307      	movs	r3, #7
 8005ce0:	e00c      	b.n	8005cfc <HAL_GPIO_DeInit+0xd4>
 8005ce2:	2306      	movs	r3, #6
 8005ce4:	e00a      	b.n	8005cfc <HAL_GPIO_DeInit+0xd4>
 8005ce6:	2305      	movs	r3, #5
 8005ce8:	e008      	b.n	8005cfc <HAL_GPIO_DeInit+0xd4>
 8005cea:	2304      	movs	r3, #4
 8005cec:	e006      	b.n	8005cfc <HAL_GPIO_DeInit+0xd4>
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e004      	b.n	8005cfc <HAL_GPIO_DeInit+0xd4>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e002      	b.n	8005cfc <HAL_GPIO_DeInit+0xd4>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e000      	b.n	8005cfc <HAL_GPIO_DeInit+0xd4>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	f002 0203 	and.w	r2, r2, #3
 8005d02:	0092      	lsls	r2, r2, #2
 8005d04:	4093      	lsls	r3, r2
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d132      	bne.n	8005d72 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005d0c:	4b4b      	ldr	r3, [pc, #300]	; (8005e3c <HAL_GPIO_DeInit+0x214>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	43db      	mvns	r3, r3
 8005d14:	4949      	ldr	r1, [pc, #292]	; (8005e3c <HAL_GPIO_DeInit+0x214>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005d1a:	4b48      	ldr	r3, [pc, #288]	; (8005e3c <HAL_GPIO_DeInit+0x214>)
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	43db      	mvns	r3, r3
 8005d22:	4946      	ldr	r1, [pc, #280]	; (8005e3c <HAL_GPIO_DeInit+0x214>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005d28:	4b44      	ldr	r3, [pc, #272]	; (8005e3c <HAL_GPIO_DeInit+0x214>)
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	43db      	mvns	r3, r3
 8005d30:	4942      	ldr	r1, [pc, #264]	; (8005e3c <HAL_GPIO_DeInit+0x214>)
 8005d32:	4013      	ands	r3, r2
 8005d34:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005d36:	4b41      	ldr	r3, [pc, #260]	; (8005e3c <HAL_GPIO_DeInit+0x214>)
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	493f      	ldr	r1, [pc, #252]	; (8005e3c <HAL_GPIO_DeInit+0x214>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	220f      	movs	r2, #15
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005d54:	4a2e      	ldr	r2, [pc, #184]	; (8005e10 <HAL_GPIO_DeInit+0x1e8>)
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	089b      	lsrs	r3, r3, #2
 8005d5a:	3302      	adds	r3, #2
 8005d5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	43da      	mvns	r2, r3
 8005d64:	482a      	ldr	r0, [pc, #168]	; (8005e10 <HAL_GPIO_DeInit+0x1e8>)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	089b      	lsrs	r3, r3, #2
 8005d6a:	400a      	ands	r2, r1
 8005d6c:	3302      	adds	r3, #2
 8005d6e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	2103      	movs	r1, #3
 8005d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d80:	43db      	mvns	r3, r3
 8005d82:	401a      	ands	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	08da      	lsrs	r2, r3, #3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3208      	adds	r2, #8
 8005d90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	220f      	movs	r2, #15
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	43db      	mvns	r3, r3
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	08d2      	lsrs	r2, r2, #3
 8005da8:	4019      	ands	r1, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3208      	adds	r2, #8
 8005dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	2103      	movs	r1, #3
 8005dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc0:	43db      	mvns	r3, r3
 8005dc2:	401a      	ands	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	2101      	movs	r1, #1
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd4:	43db      	mvns	r3, r3
 8005dd6:	401a      	ands	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	2103      	movs	r1, #3
 8005de6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dea:	43db      	mvns	r3, r3
 8005dec:	401a      	ands	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	3301      	adds	r3, #1
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2b0f      	cmp	r3, #15
 8005dfc:	f67f af22 	bls.w	8005c44 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005e00:	bf00      	nop
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	40013800 	.word	0x40013800
 8005e14:	40020000 	.word	0x40020000
 8005e18:	40020400 	.word	0x40020400
 8005e1c:	40020800 	.word	0x40020800
 8005e20:	40020c00 	.word	0x40020c00
 8005e24:	40021000 	.word	0x40021000
 8005e28:	40021400 	.word	0x40021400
 8005e2c:	40021800 	.word	0x40021800
 8005e30:	40021c00 	.word	0x40021c00
 8005e34:	40022000 	.word	0x40022000
 8005e38:	40022400 	.word	0x40022400
 8005e3c:	40013c00 	.word	0x40013c00

08005e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	807b      	strh	r3, [r7, #2]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e50:	787b      	ldrb	r3, [r7, #1]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e56:	887a      	ldrh	r2, [r7, #2]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005e5c:	e003      	b.n	8005e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005e5e:	887b      	ldrh	r3, [r7, #2]
 8005e60:	041a      	lsls	r2, r3, #16
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	619a      	str	r2, [r3, #24]
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b085      	sub	sp, #20
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e84:	887a      	ldrh	r2, [r7, #2]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	041a      	lsls	r2, r3, #16
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	43d9      	mvns	r1, r3
 8005e90:	887b      	ldrh	r3, [r7, #2]
 8005e92:	400b      	ands	r3, r1
 8005e94:	431a      	orrs	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	619a      	str	r2, [r3, #24]
}
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
	...

08005ea8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005eb2:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005eb4:	695a      	ldr	r2, [r3, #20]
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d006      	beq.n	8005ecc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ebe:	4a05      	ldr	r2, [pc, #20]	; (8005ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ec0:	88fb      	ldrh	r3, [r7, #6]
 8005ec2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ec4:	88fb      	ldrh	r3, [r7, #6]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fb ff1c 	bl	8001d04 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ecc:	bf00      	nop
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	40013c00 	.word	0x40013c00

08005ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e07f      	b.n	8005fea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d106      	bne.n	8005f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fd fbf4 	bl	80036ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2224      	movs	r2, #36	; 0x24
 8005f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0201 	bic.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d107      	bne.n	8005f52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f4e:	609a      	str	r2, [r3, #8]
 8005f50:	e006      	b.n	8005f60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005f5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d104      	bne.n	8005f72 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6859      	ldr	r1, [r3, #4]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	4b1d      	ldr	r3, [pc, #116]	; (8005ff4 <HAL_I2C_Init+0x11c>)
 8005f7e:	430b      	orrs	r3, r1
 8005f80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691a      	ldr	r2, [r3, #16]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	69d9      	ldr	r1, [r3, #28]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1a      	ldr	r2, [r3, #32]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0201 	orr.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	02008000 	.word	0x02008000

08005ff8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e021      	b.n	800604e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2224      	movs	r2, #36	; 0x24
 800600e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0201 	bic.w	r2, r2, #1
 8006020:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7fd fc0a 	bl	800383c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af02      	add	r7, sp, #8
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	4608      	mov	r0, r1
 8006062:	4611      	mov	r1, r2
 8006064:	461a      	mov	r2, r3
 8006066:	4603      	mov	r3, r0
 8006068:	817b      	strh	r3, [r7, #10]
 800606a:	460b      	mov	r3, r1
 800606c:	813b      	strh	r3, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b20      	cmp	r3, #32
 800607c:	f040 80f9 	bne.w	8006272 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <HAL_I2C_Mem_Write+0x34>
 8006086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006088:	2b00      	cmp	r3, #0
 800608a:	d105      	bne.n	8006098 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006092:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e0ed      	b.n	8006274 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <HAL_I2C_Mem_Write+0x4e>
 80060a2:	2302      	movs	r3, #2
 80060a4:	e0e6      	b.n	8006274 <HAL_I2C_Mem_Write+0x21c>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060ae:	f7fe f8c9 	bl	8004244 <HAL_GetTick>
 80060b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	2319      	movs	r3, #25
 80060ba:	2201      	movs	r2, #1
 80060bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 fad1 	bl	8006668 <I2C_WaitOnFlagUntilTimeout>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e0d1      	b.n	8006274 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2221      	movs	r2, #33	; 0x21
 80060d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2240      	movs	r2, #64	; 0x40
 80060dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6a3a      	ldr	r2, [r7, #32]
 80060ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060f8:	88f8      	ldrh	r0, [r7, #6]
 80060fa:	893a      	ldrh	r2, [r7, #8]
 80060fc:	8979      	ldrh	r1, [r7, #10]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	4603      	mov	r3, r0
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 f9e1 	bl	80064d0 <I2C_RequestMemoryWrite>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e0a9      	b.n	8006274 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006124:	b29b      	uxth	r3, r3
 8006126:	2bff      	cmp	r3, #255	; 0xff
 8006128:	d90e      	bls.n	8006148 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	22ff      	movs	r2, #255	; 0xff
 800612e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006134:	b2da      	uxtb	r2, r3
 8006136:	8979      	ldrh	r1, [r7, #10]
 8006138:	2300      	movs	r3, #0
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 fc39 	bl	80069b8 <I2C_TransferConfig>
 8006146:	e00f      	b.n	8006168 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006156:	b2da      	uxtb	r2, r3
 8006158:	8979      	ldrh	r1, [r7, #10]
 800615a:	2300      	movs	r3, #0
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 fc28 	bl	80069b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 fabb 	bl	80066e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e07b      	b.n	8006274 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	781a      	ldrb	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006196:	b29b      	uxth	r3, r3
 8006198:	3b01      	subs	r3, #1
 800619a:	b29a      	uxth	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a4:	3b01      	subs	r3, #1
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d034      	beq.n	8006220 <HAL_I2C_Mem_Write+0x1c8>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d130      	bne.n	8006220 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	2200      	movs	r2, #0
 80061c6:	2180      	movs	r1, #128	; 0x80
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 fa4d 	bl	8006668 <I2C_WaitOnFlagUntilTimeout>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e04d      	b.n	8006274 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2bff      	cmp	r3, #255	; 0xff
 80061e0:	d90e      	bls.n	8006200 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	22ff      	movs	r2, #255	; 0xff
 80061e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	8979      	ldrh	r1, [r7, #10]
 80061f0:	2300      	movs	r3, #0
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 fbdd 	bl	80069b8 <I2C_TransferConfig>
 80061fe:	e00f      	b.n	8006220 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006204:	b29a      	uxth	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800620e:	b2da      	uxtb	r2, r3
 8006210:	8979      	ldrh	r1, [r7, #10]
 8006212:	2300      	movs	r3, #0
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 fbcc 	bl	80069b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d19e      	bne.n	8006168 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 fa9a 	bl	8006768 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e01a      	b.n	8006274 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2220      	movs	r2, #32
 8006244:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6859      	ldr	r1, [r3, #4]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	4b0a      	ldr	r3, [pc, #40]	; (800627c <HAL_I2C_Mem_Write+0x224>)
 8006252:	400b      	ands	r3, r1
 8006254:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2220      	movs	r2, #32
 800625a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	e000      	b.n	8006274 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006272:	2302      	movs	r3, #2
  }
}
 8006274:	4618      	mov	r0, r3
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	fe00e800 	.word	0xfe00e800

08006280 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	4608      	mov	r0, r1
 800628a:	4611      	mov	r1, r2
 800628c:	461a      	mov	r2, r3
 800628e:	4603      	mov	r3, r0
 8006290:	817b      	strh	r3, [r7, #10]
 8006292:	460b      	mov	r3, r1
 8006294:	813b      	strh	r3, [r7, #8]
 8006296:	4613      	mov	r3, r2
 8006298:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	f040 80fd 	bne.w	80064a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <HAL_I2C_Mem_Read+0x34>
 80062ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d105      	bne.n	80062c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e0f1      	b.n	80064a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d101      	bne.n	80062ce <HAL_I2C_Mem_Read+0x4e>
 80062ca:	2302      	movs	r3, #2
 80062cc:	e0ea      	b.n	80064a4 <HAL_I2C_Mem_Read+0x224>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062d6:	f7fd ffb5 	bl	8004244 <HAL_GetTick>
 80062da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	2319      	movs	r3, #25
 80062e2:	2201      	movs	r2, #1
 80062e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 f9bd 	bl	8006668 <I2C_WaitOnFlagUntilTimeout>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e0d5      	b.n	80064a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2222      	movs	r2, #34	; 0x22
 80062fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2240      	movs	r2, #64	; 0x40
 8006304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a3a      	ldr	r2, [r7, #32]
 8006312:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006318:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006320:	88f8      	ldrh	r0, [r7, #6]
 8006322:	893a      	ldrh	r2, [r7, #8]
 8006324:	8979      	ldrh	r1, [r7, #10]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	9301      	str	r3, [sp, #4]
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	4603      	mov	r3, r0
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 f921 	bl	8006578 <I2C_RequestMemoryRead>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d005      	beq.n	8006348 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e0ad      	b.n	80064a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634c:	b29b      	uxth	r3, r3
 800634e:	2bff      	cmp	r3, #255	; 0xff
 8006350:	d90e      	bls.n	8006370 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	22ff      	movs	r2, #255	; 0xff
 8006356:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800635c:	b2da      	uxtb	r2, r3
 800635e:	8979      	ldrh	r1, [r7, #10]
 8006360:	4b52      	ldr	r3, [pc, #328]	; (80064ac <HAL_I2C_Mem_Read+0x22c>)
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 fb25 	bl	80069b8 <I2C_TransferConfig>
 800636e:	e00f      	b.n	8006390 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006374:	b29a      	uxth	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637e:	b2da      	uxtb	r2, r3
 8006380:	8979      	ldrh	r1, [r7, #10]
 8006382:	4b4a      	ldr	r3, [pc, #296]	; (80064ac <HAL_I2C_Mem_Read+0x22c>)
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fb14 	bl	80069b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006396:	2200      	movs	r2, #0
 8006398:	2104      	movs	r1, #4
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 f964 	bl	8006668 <I2C_WaitOnFlagUntilTimeout>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e07c      	b.n	80064a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	1c5a      	adds	r2, r3, #1
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d034      	beq.n	8006450 <HAL_I2C_Mem_Read+0x1d0>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d130      	bne.n	8006450 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	2200      	movs	r2, #0
 80063f6:	2180      	movs	r1, #128	; 0x80
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 f935 	bl	8006668 <I2C_WaitOnFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e04d      	b.n	80064a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640c:	b29b      	uxth	r3, r3
 800640e:	2bff      	cmp	r3, #255	; 0xff
 8006410:	d90e      	bls.n	8006430 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	22ff      	movs	r2, #255	; 0xff
 8006416:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641c:	b2da      	uxtb	r2, r3
 800641e:	8979      	ldrh	r1, [r7, #10]
 8006420:	2300      	movs	r3, #0
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 fac5 	bl	80069b8 <I2C_TransferConfig>
 800642e:	e00f      	b.n	8006450 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800643e:	b2da      	uxtb	r2, r3
 8006440:	8979      	ldrh	r1, [r7, #10]
 8006442:	2300      	movs	r3, #0
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 fab4 	bl	80069b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d19a      	bne.n	8006390 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 f982 	bl	8006768 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e01a      	b.n	80064a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2220      	movs	r2, #32
 8006474:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6859      	ldr	r1, [r3, #4]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	4b0b      	ldr	r3, [pc, #44]	; (80064b0 <HAL_I2C_Mem_Read+0x230>)
 8006482:	400b      	ands	r3, r1
 8006484:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2220      	movs	r2, #32
 800648a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	e000      	b.n	80064a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80064a2:	2302      	movs	r3, #2
  }
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	80002400 	.word	0x80002400
 80064b0:	fe00e800 	.word	0xfe00e800

080064b4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064c2:	b2db      	uxtb	r3, r3
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	4608      	mov	r0, r1
 80064da:	4611      	mov	r1, r2
 80064dc:	461a      	mov	r2, r3
 80064de:	4603      	mov	r3, r0
 80064e0:	817b      	strh	r3, [r7, #10]
 80064e2:	460b      	mov	r3, r1
 80064e4:	813b      	strh	r3, [r7, #8]
 80064e6:	4613      	mov	r3, r2
 80064e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80064ea:	88fb      	ldrh	r3, [r7, #6]
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	8979      	ldrh	r1, [r7, #10]
 80064f0:	4b20      	ldr	r3, [pc, #128]	; (8006574 <I2C_RequestMemoryWrite+0xa4>)
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 fa5d 	bl	80069b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064fe:	69fa      	ldr	r2, [r7, #28]
 8006500:	69b9      	ldr	r1, [r7, #24]
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 f8f0 	bl	80066e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e02c      	b.n	800656c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d105      	bne.n	8006524 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006518:	893b      	ldrh	r3, [r7, #8]
 800651a:	b2da      	uxtb	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	629a      	str	r2, [r3, #40]	; 0x28
 8006522:	e015      	b.n	8006550 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006524:	893b      	ldrh	r3, [r7, #8]
 8006526:	0a1b      	lsrs	r3, r3, #8
 8006528:	b29b      	uxth	r3, r3
 800652a:	b2da      	uxtb	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006532:	69fa      	ldr	r2, [r7, #28]
 8006534:	69b9      	ldr	r1, [r7, #24]
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 f8d6 	bl	80066e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e012      	b.n	800656c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006546:	893b      	ldrh	r3, [r7, #8]
 8006548:	b2da      	uxtb	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	2200      	movs	r2, #0
 8006558:	2180      	movs	r1, #128	; 0x80
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 f884 	bl	8006668 <I2C_WaitOnFlagUntilTimeout>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	80002000 	.word	0x80002000

08006578 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af02      	add	r7, sp, #8
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	4608      	mov	r0, r1
 8006582:	4611      	mov	r1, r2
 8006584:	461a      	mov	r2, r3
 8006586:	4603      	mov	r3, r0
 8006588:	817b      	strh	r3, [r7, #10]
 800658a:	460b      	mov	r3, r1
 800658c:	813b      	strh	r3, [r7, #8]
 800658e:	4613      	mov	r3, r2
 8006590:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006592:	88fb      	ldrh	r3, [r7, #6]
 8006594:	b2da      	uxtb	r2, r3
 8006596:	8979      	ldrh	r1, [r7, #10]
 8006598:	4b20      	ldr	r3, [pc, #128]	; (800661c <I2C_RequestMemoryRead+0xa4>)
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	2300      	movs	r3, #0
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 fa0a 	bl	80069b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065a4:	69fa      	ldr	r2, [r7, #28]
 80065a6:	69b9      	ldr	r1, [r7, #24]
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f89d 	bl	80066e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e02c      	b.n	8006612 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065b8:	88fb      	ldrh	r3, [r7, #6]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d105      	bne.n	80065ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065be:	893b      	ldrh	r3, [r7, #8]
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	629a      	str	r2, [r3, #40]	; 0x28
 80065c8:	e015      	b.n	80065f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80065ca:	893b      	ldrh	r3, [r7, #8]
 80065cc:	0a1b      	lsrs	r3, r3, #8
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065d8:	69fa      	ldr	r2, [r7, #28]
 80065da:	69b9      	ldr	r1, [r7, #24]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 f883 	bl	80066e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e012      	b.n	8006612 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065ec:	893b      	ldrh	r3, [r7, #8]
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	2200      	movs	r2, #0
 80065fe:	2140      	movs	r1, #64	; 0x40
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 f831 	bl	8006668 <I2C_WaitOnFlagUntilTimeout>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	80002000 	.word	0x80002000

08006620 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b02      	cmp	r3, #2
 8006634:	d103      	bne.n	800663e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2200      	movs	r2, #0
 800663c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b01      	cmp	r3, #1
 800664a:	d007      	beq.n	800665c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f042 0201 	orr.w	r2, r2, #1
 800665a:	619a      	str	r2, [r3, #24]
  }
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	603b      	str	r3, [r7, #0]
 8006674:	4613      	mov	r3, r2
 8006676:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006678:	e022      	b.n	80066c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006680:	d01e      	beq.n	80066c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006682:	f7fd fddf 	bl	8004244 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	429a      	cmp	r2, r3
 8006690:	d302      	bcc.n	8006698 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d113      	bne.n	80066c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669c:	f043 0220 	orr.w	r2, r3, #32
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e00f      	b.n	80066e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699a      	ldr	r2, [r3, #24]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	4013      	ands	r3, r2
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	bf0c      	ite	eq
 80066d0:	2301      	moveq	r3, #1
 80066d2:	2300      	movne	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	461a      	mov	r2, r3
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d0cd      	beq.n	800667a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066f4:	e02c      	b.n	8006750 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	68b9      	ldr	r1, [r7, #8]
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 f870 	bl	80067e0 <I2C_IsErrorOccurred>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e02a      	b.n	8006760 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006710:	d01e      	beq.n	8006750 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006712:	f7fd fd97 	bl	8004244 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	429a      	cmp	r2, r3
 8006720:	d302      	bcc.n	8006728 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d113      	bne.n	8006750 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672c:	f043 0220 	orr.w	r2, r3, #32
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2220      	movs	r2, #32
 8006738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e007      	b.n	8006760 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b02      	cmp	r3, #2
 800675c:	d1cb      	bne.n	80066f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006774:	e028      	b.n	80067c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 f830 	bl	80067e0 <I2C_IsErrorOccurred>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e026      	b.n	80067d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800678a:	f7fd fd5b 	bl	8004244 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	429a      	cmp	r2, r3
 8006798:	d302      	bcc.n	80067a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d113      	bne.n	80067c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a4:	f043 0220 	orr.w	r2, r3, #32
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e007      	b.n	80067d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	2b20      	cmp	r3, #32
 80067d4:	d1cf      	bne.n	8006776 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b08a      	sub	sp, #40	; 0x28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	f003 0310 	and.w	r3, r3, #16
 8006808:	2b00      	cmp	r3, #0
 800680a:	d075      	beq.n	80068f8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2210      	movs	r2, #16
 8006812:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006814:	e056      	b.n	80068c4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d052      	beq.n	80068c4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800681e:	f7fd fd11 	bl	8004244 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	429a      	cmp	r2, r3
 800682c:	d302      	bcc.n	8006834 <I2C_IsErrorOccurred+0x54>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d147      	bne.n	80068c4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800683e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006846:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006856:	d12e      	bne.n	80068b6 <I2C_IsErrorOccurred+0xd6>
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800685e:	d02a      	beq.n	80068b6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006860:	7cfb      	ldrb	r3, [r7, #19]
 8006862:	2b20      	cmp	r3, #32
 8006864:	d027      	beq.n	80068b6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006874:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006876:	f7fd fce5 	bl	8004244 <HAL_GetTick>
 800687a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800687c:	e01b      	b.n	80068b6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800687e:	f7fd fce1 	bl	8004244 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	2b19      	cmp	r3, #25
 800688a:	d914      	bls.n	80068b6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006890:	f043 0220 	orr.w	r2, r3, #32
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	f003 0320 	and.w	r3, r3, #32
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	d1dc      	bne.n	800687e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	f003 0320 	and.w	r3, r3, #32
 80068ce:	2b20      	cmp	r3, #32
 80068d0:	d003      	beq.n	80068da <I2C_IsErrorOccurred+0xfa>
 80068d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d09d      	beq.n	8006816 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80068da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d103      	bne.n	80068ea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2220      	movs	r2, #32
 80068e8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	f043 0304 	orr.w	r3, r3, #4
 80068f0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00b      	beq.n	8006922 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	f043 0301 	orr.w	r3, r3, #1
 8006910:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800691a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00b      	beq.n	8006944 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	f043 0308 	orr.w	r3, r3, #8
 8006932:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800693c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00b      	beq.n	8006966 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	f043 0302 	orr.w	r3, r3, #2
 8006954:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800695e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800696a:	2b00      	cmp	r3, #0
 800696c:	d01c      	beq.n	80069a8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f7ff fe56 	bl	8006620 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6859      	ldr	r1, [r3, #4]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4b0d      	ldr	r3, [pc, #52]	; (80069b4 <I2C_IsErrorOccurred+0x1d4>)
 8006980:	400b      	ands	r3, r1
 8006982:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	431a      	orrs	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2220      	movs	r2, #32
 8006994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80069a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3728      	adds	r7, #40	; 0x28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	fe00e800 	.word	0xfe00e800

080069b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	607b      	str	r3, [r7, #4]
 80069c2:	460b      	mov	r3, r1
 80069c4:	817b      	strh	r3, [r7, #10]
 80069c6:	4613      	mov	r3, r2
 80069c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069ca:	897b      	ldrh	r3, [r7, #10]
 80069cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80069d0:	7a7b      	ldrb	r3, [r7, #9]
 80069d2:	041b      	lsls	r3, r3, #16
 80069d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069d8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069e6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	0d5b      	lsrs	r3, r3, #21
 80069f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80069f6:	4b08      	ldr	r3, [pc, #32]	; (8006a18 <I2C_TransferConfig+0x60>)
 80069f8:	430b      	orrs	r3, r1
 80069fa:	43db      	mvns	r3, r3
 80069fc:	ea02 0103 	and.w	r1, r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a0a:	bf00      	nop
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	03ff63ff 	.word	0x03ff63ff

08006a1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	d138      	bne.n	8006aa4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e032      	b.n	8006aa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2224      	movs	r2, #36	; 0x24
 8006a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0201 	bic.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6819      	ldr	r1, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0201 	orr.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	e000      	b.n	8006aa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006aa4:	2302      	movs	r3, #2
  }
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b20      	cmp	r3, #32
 8006ac6:	d139      	bne.n	8006b3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d101      	bne.n	8006ad6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	e033      	b.n	8006b3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2224      	movs	r2, #36	; 0x24
 8006ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0201 	bic.w	r2, r2, #1
 8006af4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	021b      	lsls	r3, r3, #8
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0201 	orr.w	r2, r2, #1
 8006b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	e000      	b.n	8006b3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b3c:	2302      	movs	r3, #2
  }
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
	...

08006b4c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e0bf      	b.n	8006cde <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d106      	bne.n	8006b78 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7fc fe9e 	bl	80038b4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	699a      	ldr	r2, [r3, #24]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006b8e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6999      	ldr	r1, [r3, #24]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006ba4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6899      	ldr	r1, [r3, #8]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	4b4a      	ldr	r3, [pc, #296]	; (8006ce8 <HAL_LTDC_Init+0x19c>)
 8006bc0:	400b      	ands	r3, r1
 8006bc2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	041b      	lsls	r3, r3, #16
 8006bca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6899      	ldr	r1, [r3, #8]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68d9      	ldr	r1, [r3, #12]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	4b3e      	ldr	r3, [pc, #248]	; (8006ce8 <HAL_LTDC_Init+0x19c>)
 8006bee:	400b      	ands	r3, r1
 8006bf0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	041b      	lsls	r3, r3, #16
 8006bf8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68d9      	ldr	r1, [r3, #12]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a1a      	ldr	r2, [r3, #32]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6919      	ldr	r1, [r3, #16]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	4b33      	ldr	r3, [pc, #204]	; (8006ce8 <HAL_LTDC_Init+0x19c>)
 8006c1c:	400b      	ands	r3, r1
 8006c1e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	041b      	lsls	r3, r3, #16
 8006c26:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6919      	ldr	r1, [r3, #16]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	431a      	orrs	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6959      	ldr	r1, [r3, #20]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	4b27      	ldr	r3, [pc, #156]	; (8006ce8 <HAL_LTDC_Init+0x19c>)
 8006c4a:	400b      	ands	r3, r1
 8006c4c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c52:	041b      	lsls	r3, r3, #16
 8006c54:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6959      	ldr	r1, [r3, #20]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c72:	021b      	lsls	r3, r3, #8
 8006c74:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006c7c:	041b      	lsls	r3, r3, #16
 8006c7e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 0206 	orr.w	r2, r2, #6
 8006cba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	699a      	ldr	r2, [r3, #24]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0201 	orr.w	r2, r2, #1
 8006cca:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	f000f800 	.word	0xf000f800

08006cec <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d02:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f003 0304 	and.w	r3, r3, #4
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d023      	beq.n	8006d56 <HAL_LTDC_IRQHandler+0x6a>
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01e      	beq.n	8006d56 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 0204 	bic.w	r2, r2, #4
 8006d26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2204      	movs	r2, #4
 8006d2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d36:	f043 0201 	orr.w	r2, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2204      	movs	r2, #4
 8006d44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f86f 	bl	8006e34 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d023      	beq.n	8006da8 <HAL_LTDC_IRQHandler+0xbc>
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01e      	beq.n	8006da8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 0202 	bic.w	r2, r2, #2
 8006d78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d88:	f043 0202 	orr.w	r2, r3, #2
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2204      	movs	r2, #4
 8006d96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f846 	bl	8006e34 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d01b      	beq.n	8006dea <HAL_LTDC_IRQHandler+0xfe>
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d016      	beq.n	8006dea <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 0201 	bic.w	r2, r2, #1
 8006dca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f82f 	bl	8006e48 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f003 0308 	and.w	r3, r3, #8
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d01b      	beq.n	8006e2c <HAL_LTDC_IRQHandler+0x140>
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f003 0308 	and.w	r3, r3, #8
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d016      	beq.n	8006e2c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 0208 	bic.w	r2, r2, #8
 8006e0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2208      	movs	r2, #8
 8006e14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f818 	bl	8006e5c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006e2c:	bf00      	nop
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006e70:	b5b0      	push	{r4, r5, r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d101      	bne.n	8006e8a <HAL_LTDC_ConfigLayer+0x1a>
 8006e86:	2302      	movs	r3, #2
 8006e88:	e02c      	b.n	8006ee4 <HAL_LTDC_ConfigLayer+0x74>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2202      	movs	r2, #2
 8006e96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2134      	movs	r1, #52	; 0x34
 8006ea0:	fb01 f303 	mul.w	r3, r1, r3
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	4614      	mov	r4, r2
 8006eae:	461d      	mov	r5, r3
 8006eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ebc:	682b      	ldr	r3, [r5, #0]
 8006ebe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	68b9      	ldr	r1, [r7, #8]
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 f81f 	bl	8006f08 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bdb0      	pop	{r4, r5, r7, pc}

08006eec <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006efa:	b2db      	uxtb	r3, r3
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b089      	sub	sp, #36	; 0x24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	0c1b      	lsrs	r3, r3, #16
 8006f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f24:	4413      	add	r3, r2
 8006f26:	041b      	lsls	r3, r3, #16
 8006f28:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	01db      	lsls	r3, r3, #7
 8006f34:	4413      	add	r3, r2
 8006f36:	3384      	adds	r3, #132	; 0x84
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	6812      	ldr	r2, [r2, #0]
 8006f3e:	4611      	mov	r1, r2
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	01d2      	lsls	r2, r2, #7
 8006f44:	440a      	add	r2, r1
 8006f46:	3284      	adds	r2, #132	; 0x84
 8006f48:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006f4c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	0c1b      	lsrs	r3, r3, #16
 8006f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f5e:	4413      	add	r3, r2
 8006f60:	1c5a      	adds	r2, r3, #1
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4619      	mov	r1, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	01db      	lsls	r3, r3, #7
 8006f6c:	440b      	add	r3, r1
 8006f6e:	3384      	adds	r3, #132	; 0x84
 8006f70:	4619      	mov	r1, r3
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f86:	4413      	add	r3, r2
 8006f88:	041b      	lsls	r3, r3, #16
 8006f8a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	461a      	mov	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	01db      	lsls	r3, r3, #7
 8006f96:	4413      	add	r3, r2
 8006f98:	3384      	adds	r3, #132	; 0x84
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	6812      	ldr	r2, [r2, #0]
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	01d2      	lsls	r2, r2, #7
 8006fa6:	440a      	add	r2, r1
 8006fa8:	3284      	adds	r2, #132	; 0x84
 8006faa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006fae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fbe:	4413      	add	r3, r2
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	01db      	lsls	r3, r3, #7
 8006fcc:	440b      	add	r3, r1
 8006fce:	3384      	adds	r3, #132	; 0x84
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	01db      	lsls	r3, r3, #7
 8006fe2:	4413      	add	r3, r2
 8006fe4:	3384      	adds	r3, #132	; 0x84
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	6812      	ldr	r2, [r2, #0]
 8006fec:	4611      	mov	r1, r2
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	01d2      	lsls	r2, r2, #7
 8006ff2:	440a      	add	r2, r1
 8006ff4:	3284      	adds	r2, #132	; 0x84
 8006ff6:	f023 0307 	bic.w	r3, r3, #7
 8006ffa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	461a      	mov	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	01db      	lsls	r3, r3, #7
 8007006:	4413      	add	r3, r2
 8007008:	3384      	adds	r3, #132	; 0x84
 800700a:	461a      	mov	r2, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007018:	021b      	lsls	r3, r3, #8
 800701a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007022:	041b      	lsls	r3, r3, #16
 8007024:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	061b      	lsls	r3, r3, #24
 800702c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	01db      	lsls	r3, r3, #7
 8007038:	4413      	add	r3, r2
 800703a:	3384      	adds	r3, #132	; 0x84
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	461a      	mov	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	01db      	lsls	r3, r3, #7
 8007048:	4413      	add	r3, r2
 800704a:	3384      	adds	r3, #132	; 0x84
 800704c:	461a      	mov	r2, r3
 800704e:	2300      	movs	r3, #0
 8007050:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007058:	461a      	mov	r2, r3
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	431a      	orrs	r2, r3
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	431a      	orrs	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4619      	mov	r1, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	01db      	lsls	r3, r3, #7
 800706c:	440b      	add	r3, r1
 800706e:	3384      	adds	r3, #132	; 0x84
 8007070:	4619      	mov	r1, r3
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	4313      	orrs	r3, r2
 8007076:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	461a      	mov	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	01db      	lsls	r3, r3, #7
 8007082:	4413      	add	r3, r2
 8007084:	3384      	adds	r3, #132	; 0x84
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	6812      	ldr	r2, [r2, #0]
 800708c:	4611      	mov	r1, r2
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	01d2      	lsls	r2, r2, #7
 8007092:	440a      	add	r2, r1
 8007094:	3284      	adds	r2, #132	; 0x84
 8007096:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800709a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	01db      	lsls	r3, r3, #7
 80070a6:	4413      	add	r3, r2
 80070a8:	3384      	adds	r3, #132	; 0x84
 80070aa:	461a      	mov	r2, r3
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	01db      	lsls	r3, r3, #7
 80070bc:	4413      	add	r3, r2
 80070be:	3384      	adds	r3, #132	; 0x84
 80070c0:	69da      	ldr	r2, [r3, #28]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4619      	mov	r1, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	01db      	lsls	r3, r3, #7
 80070cc:	440b      	add	r3, r1
 80070ce:	3384      	adds	r3, #132	; 0x84
 80070d0:	4619      	mov	r1, r3
 80070d2:	4b58      	ldr	r3, [pc, #352]	; (8007234 <LTDC_SetConfig+0x32c>)
 80070d4:	4013      	ands	r3, r2
 80070d6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	69da      	ldr	r2, [r3, #28]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	68f9      	ldr	r1, [r7, #12]
 80070e2:	6809      	ldr	r1, [r1, #0]
 80070e4:	4608      	mov	r0, r1
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	01c9      	lsls	r1, r1, #7
 80070ea:	4401      	add	r1, r0
 80070ec:	3184      	adds	r1, #132	; 0x84
 80070ee:	4313      	orrs	r3, r2
 80070f0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	01db      	lsls	r3, r3, #7
 80070fc:	4413      	add	r3, r2
 80070fe:	3384      	adds	r3, #132	; 0x84
 8007100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	01db      	lsls	r3, r3, #7
 800710c:	4413      	add	r3, r2
 800710e:	3384      	adds	r3, #132	; 0x84
 8007110:	461a      	mov	r2, r3
 8007112:	2300      	movs	r3, #0
 8007114:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	01db      	lsls	r3, r3, #7
 8007120:	4413      	add	r3, r2
 8007122:	3384      	adds	r3, #132	; 0x84
 8007124:	461a      	mov	r2, r3
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d102      	bne.n	800713a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007134:	2304      	movs	r3, #4
 8007136:	61fb      	str	r3, [r7, #28]
 8007138:	e01b      	b.n	8007172 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d102      	bne.n	8007148 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007142:	2303      	movs	r3, #3
 8007144:	61fb      	str	r3, [r7, #28]
 8007146:	e014      	b.n	8007172 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	2b04      	cmp	r3, #4
 800714e:	d00b      	beq.n	8007168 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007154:	2b02      	cmp	r3, #2
 8007156:	d007      	beq.n	8007168 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800715c:	2b03      	cmp	r3, #3
 800715e:	d003      	beq.n	8007168 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007164:	2b07      	cmp	r3, #7
 8007166:	d102      	bne.n	800716e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007168:	2302      	movs	r3, #2
 800716a:	61fb      	str	r3, [r7, #28]
 800716c:	e001      	b.n	8007172 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800716e:	2301      	movs	r3, #1
 8007170:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	01db      	lsls	r3, r3, #7
 800717c:	4413      	add	r3, r2
 800717e:	3384      	adds	r3, #132	; 0x84
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	6812      	ldr	r2, [r2, #0]
 8007186:	4611      	mov	r1, r2
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	01d2      	lsls	r2, r2, #7
 800718c:	440a      	add	r2, r1
 800718e:	3284      	adds	r2, #132	; 0x84
 8007190:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007194:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719a:	69fa      	ldr	r2, [r7, #28]
 800719c:	fb02 f303 	mul.w	r3, r2, r3
 80071a0:	041a      	lsls	r2, r3, #16
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	6859      	ldr	r1, [r3, #4]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	1acb      	subs	r3, r1, r3
 80071ac:	69f9      	ldr	r1, [r7, #28]
 80071ae:	fb01 f303 	mul.w	r3, r1, r3
 80071b2:	3303      	adds	r3, #3
 80071b4:	68f9      	ldr	r1, [r7, #12]
 80071b6:	6809      	ldr	r1, [r1, #0]
 80071b8:	4608      	mov	r0, r1
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	01c9      	lsls	r1, r1, #7
 80071be:	4401      	add	r1, r0
 80071c0:	3184      	adds	r1, #132	; 0x84
 80071c2:	4313      	orrs	r3, r2
 80071c4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	01db      	lsls	r3, r3, #7
 80071d0:	4413      	add	r3, r2
 80071d2:	3384      	adds	r3, #132	; 0x84
 80071d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4619      	mov	r1, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	01db      	lsls	r3, r3, #7
 80071e0:	440b      	add	r3, r1
 80071e2:	3384      	adds	r3, #132	; 0x84
 80071e4:	4619      	mov	r1, r3
 80071e6:	4b14      	ldr	r3, [pc, #80]	; (8007238 <LTDC_SetConfig+0x330>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	461a      	mov	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	01db      	lsls	r3, r3, #7
 80071f6:	4413      	add	r3, r2
 80071f8:	3384      	adds	r3, #132	; 0x84
 80071fa:	461a      	mov	r2, r3
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	01db      	lsls	r3, r3, #7
 800720c:	4413      	add	r3, r2
 800720e:	3384      	adds	r3, #132	; 0x84
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	6812      	ldr	r2, [r2, #0]
 8007216:	4611      	mov	r1, r2
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	01d2      	lsls	r2, r2, #7
 800721c:	440a      	add	r2, r1
 800721e:	3284      	adds	r2, #132	; 0x84
 8007220:	f043 0301 	orr.w	r3, r3, #1
 8007224:	6013      	str	r3, [r2, #0]
}
 8007226:	bf00      	nop
 8007228:	3724      	adds	r7, #36	; 0x24
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	fffff8f8 	.word	0xfffff8f8
 8007238:	fffff800 	.word	0xfffff800

0800723c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007240:	4b05      	ldr	r3, [pc, #20]	; (8007258 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a04      	ldr	r2, [pc, #16]	; (8007258 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800724a:	6013      	str	r3, [r2, #0]
}
 800724c:	bf00      	nop
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	40007000 	.word	0x40007000

0800725c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007266:	4b23      	ldr	r3, [pc, #140]	; (80072f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	4a22      	ldr	r2, [pc, #136]	; (80072f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800726c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007270:	6413      	str	r3, [r2, #64]	; 0x40
 8007272:	4b20      	ldr	r3, [pc, #128]	; (80072f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800727e:	4b1e      	ldr	r3, [pc, #120]	; (80072f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a1d      	ldr	r2, [pc, #116]	; (80072f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007288:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800728a:	f7fc ffdb 	bl	8004244 <HAL_GetTick>
 800728e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007290:	e009      	b.n	80072a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007292:	f7fc ffd7 	bl	8004244 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072a0:	d901      	bls.n	80072a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e022      	b.n	80072ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80072a6:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072b2:	d1ee      	bne.n	8007292 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80072b4:	4b10      	ldr	r3, [pc, #64]	; (80072f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a0f      	ldr	r2, [pc, #60]	; (80072f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80072ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80072c0:	f7fc ffc0 	bl	8004244 <HAL_GetTick>
 80072c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80072c6:	e009      	b.n	80072dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80072c8:	f7fc ffbc 	bl	8004244 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072d6:	d901      	bls.n	80072dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e007      	b.n	80072ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80072dc:	4b06      	ldr	r3, [pc, #24]	; (80072f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072e8:	d1ee      	bne.n	80072c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	40023800 	.word	0x40023800
 80072f8:	40007000 	.word	0x40007000

080072fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007304:	2300      	movs	r3, #0
 8007306:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e291      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 8087 	beq.w	800742e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007320:	4b96      	ldr	r3, [pc, #600]	; (800757c <HAL_RCC_OscConfig+0x280>)
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f003 030c 	and.w	r3, r3, #12
 8007328:	2b04      	cmp	r3, #4
 800732a:	d00c      	beq.n	8007346 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800732c:	4b93      	ldr	r3, [pc, #588]	; (800757c <HAL_RCC_OscConfig+0x280>)
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f003 030c 	and.w	r3, r3, #12
 8007334:	2b08      	cmp	r3, #8
 8007336:	d112      	bne.n	800735e <HAL_RCC_OscConfig+0x62>
 8007338:	4b90      	ldr	r3, [pc, #576]	; (800757c <HAL_RCC_OscConfig+0x280>)
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007344:	d10b      	bne.n	800735e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007346:	4b8d      	ldr	r3, [pc, #564]	; (800757c <HAL_RCC_OscConfig+0x280>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d06c      	beq.n	800742c <HAL_RCC_OscConfig+0x130>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d168      	bne.n	800742c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e26b      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007366:	d106      	bne.n	8007376 <HAL_RCC_OscConfig+0x7a>
 8007368:	4b84      	ldr	r3, [pc, #528]	; (800757c <HAL_RCC_OscConfig+0x280>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a83      	ldr	r2, [pc, #524]	; (800757c <HAL_RCC_OscConfig+0x280>)
 800736e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	e02e      	b.n	80073d4 <HAL_RCC_OscConfig+0xd8>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10c      	bne.n	8007398 <HAL_RCC_OscConfig+0x9c>
 800737e:	4b7f      	ldr	r3, [pc, #508]	; (800757c <HAL_RCC_OscConfig+0x280>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a7e      	ldr	r2, [pc, #504]	; (800757c <HAL_RCC_OscConfig+0x280>)
 8007384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	4b7c      	ldr	r3, [pc, #496]	; (800757c <HAL_RCC_OscConfig+0x280>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a7b      	ldr	r2, [pc, #492]	; (800757c <HAL_RCC_OscConfig+0x280>)
 8007390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007394:	6013      	str	r3, [r2, #0]
 8007396:	e01d      	b.n	80073d4 <HAL_RCC_OscConfig+0xd8>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073a0:	d10c      	bne.n	80073bc <HAL_RCC_OscConfig+0xc0>
 80073a2:	4b76      	ldr	r3, [pc, #472]	; (800757c <HAL_RCC_OscConfig+0x280>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a75      	ldr	r2, [pc, #468]	; (800757c <HAL_RCC_OscConfig+0x280>)
 80073a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073ac:	6013      	str	r3, [r2, #0]
 80073ae:	4b73      	ldr	r3, [pc, #460]	; (800757c <HAL_RCC_OscConfig+0x280>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a72      	ldr	r2, [pc, #456]	; (800757c <HAL_RCC_OscConfig+0x280>)
 80073b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073b8:	6013      	str	r3, [r2, #0]
 80073ba:	e00b      	b.n	80073d4 <HAL_RCC_OscConfig+0xd8>
 80073bc:	4b6f      	ldr	r3, [pc, #444]	; (800757c <HAL_RCC_OscConfig+0x280>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a6e      	ldr	r2, [pc, #440]	; (800757c <HAL_RCC_OscConfig+0x280>)
 80073c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073c6:	6013      	str	r3, [r2, #0]
 80073c8:	4b6c      	ldr	r3, [pc, #432]	; (800757c <HAL_RCC_OscConfig+0x280>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a6b      	ldr	r2, [pc, #428]	; (800757c <HAL_RCC_OscConfig+0x280>)
 80073ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d013      	beq.n	8007404 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073dc:	f7fc ff32 	bl	8004244 <HAL_GetTick>
 80073e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073e2:	e008      	b.n	80073f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073e4:	f7fc ff2e 	bl	8004244 <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	2b64      	cmp	r3, #100	; 0x64
 80073f0:	d901      	bls.n	80073f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e21f      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073f6:	4b61      	ldr	r3, [pc, #388]	; (800757c <HAL_RCC_OscConfig+0x280>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0f0      	beq.n	80073e4 <HAL_RCC_OscConfig+0xe8>
 8007402:	e014      	b.n	800742e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007404:	f7fc ff1e 	bl	8004244 <HAL_GetTick>
 8007408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800740a:	e008      	b.n	800741e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800740c:	f7fc ff1a 	bl	8004244 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	2b64      	cmp	r3, #100	; 0x64
 8007418:	d901      	bls.n	800741e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e20b      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800741e:	4b57      	ldr	r3, [pc, #348]	; (800757c <HAL_RCC_OscConfig+0x280>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1f0      	bne.n	800740c <HAL_RCC_OscConfig+0x110>
 800742a:	e000      	b.n	800742e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800742c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0302 	and.w	r3, r3, #2
 8007436:	2b00      	cmp	r3, #0
 8007438:	d069      	beq.n	800750e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800743a:	4b50      	ldr	r3, [pc, #320]	; (800757c <HAL_RCC_OscConfig+0x280>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f003 030c 	and.w	r3, r3, #12
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00b      	beq.n	800745e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007446:	4b4d      	ldr	r3, [pc, #308]	; (800757c <HAL_RCC_OscConfig+0x280>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f003 030c 	and.w	r3, r3, #12
 800744e:	2b08      	cmp	r3, #8
 8007450:	d11c      	bne.n	800748c <HAL_RCC_OscConfig+0x190>
 8007452:	4b4a      	ldr	r3, [pc, #296]	; (800757c <HAL_RCC_OscConfig+0x280>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d116      	bne.n	800748c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800745e:	4b47      	ldr	r3, [pc, #284]	; (800757c <HAL_RCC_OscConfig+0x280>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d005      	beq.n	8007476 <HAL_RCC_OscConfig+0x17a>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d001      	beq.n	8007476 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e1df      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007476:	4b41      	ldr	r3, [pc, #260]	; (800757c <HAL_RCC_OscConfig+0x280>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	493d      	ldr	r1, [pc, #244]	; (800757c <HAL_RCC_OscConfig+0x280>)
 8007486:	4313      	orrs	r3, r2
 8007488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800748a:	e040      	b.n	800750e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d023      	beq.n	80074dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007494:	4b39      	ldr	r3, [pc, #228]	; (800757c <HAL_RCC_OscConfig+0x280>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a38      	ldr	r2, [pc, #224]	; (800757c <HAL_RCC_OscConfig+0x280>)
 800749a:	f043 0301 	orr.w	r3, r3, #1
 800749e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a0:	f7fc fed0 	bl	8004244 <HAL_GetTick>
 80074a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074a6:	e008      	b.n	80074ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074a8:	f7fc fecc 	bl	8004244 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e1bd      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074ba:	4b30      	ldr	r3, [pc, #192]	; (800757c <HAL_RCC_OscConfig+0x280>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0f0      	beq.n	80074a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074c6:	4b2d      	ldr	r3, [pc, #180]	; (800757c <HAL_RCC_OscConfig+0x280>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	00db      	lsls	r3, r3, #3
 80074d4:	4929      	ldr	r1, [pc, #164]	; (800757c <HAL_RCC_OscConfig+0x280>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	600b      	str	r3, [r1, #0]
 80074da:	e018      	b.n	800750e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074dc:	4b27      	ldr	r3, [pc, #156]	; (800757c <HAL_RCC_OscConfig+0x280>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a26      	ldr	r2, [pc, #152]	; (800757c <HAL_RCC_OscConfig+0x280>)
 80074e2:	f023 0301 	bic.w	r3, r3, #1
 80074e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e8:	f7fc feac 	bl	8004244 <HAL_GetTick>
 80074ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074ee:	e008      	b.n	8007502 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074f0:	f7fc fea8 	bl	8004244 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e199      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007502:	4b1e      	ldr	r3, [pc, #120]	; (800757c <HAL_RCC_OscConfig+0x280>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0302 	and.w	r3, r3, #2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1f0      	bne.n	80074f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0308 	and.w	r3, r3, #8
 8007516:	2b00      	cmp	r3, #0
 8007518:	d038      	beq.n	800758c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d019      	beq.n	8007556 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007522:	4b16      	ldr	r3, [pc, #88]	; (800757c <HAL_RCC_OscConfig+0x280>)
 8007524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007526:	4a15      	ldr	r2, [pc, #84]	; (800757c <HAL_RCC_OscConfig+0x280>)
 8007528:	f043 0301 	orr.w	r3, r3, #1
 800752c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800752e:	f7fc fe89 	bl	8004244 <HAL_GetTick>
 8007532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007534:	e008      	b.n	8007548 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007536:	f7fc fe85 	bl	8004244 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	2b02      	cmp	r3, #2
 8007542:	d901      	bls.n	8007548 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e176      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007548:	4b0c      	ldr	r3, [pc, #48]	; (800757c <HAL_RCC_OscConfig+0x280>)
 800754a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	2b00      	cmp	r3, #0
 8007552:	d0f0      	beq.n	8007536 <HAL_RCC_OscConfig+0x23a>
 8007554:	e01a      	b.n	800758c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007556:	4b09      	ldr	r3, [pc, #36]	; (800757c <HAL_RCC_OscConfig+0x280>)
 8007558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800755a:	4a08      	ldr	r2, [pc, #32]	; (800757c <HAL_RCC_OscConfig+0x280>)
 800755c:	f023 0301 	bic.w	r3, r3, #1
 8007560:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007562:	f7fc fe6f 	bl	8004244 <HAL_GetTick>
 8007566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007568:	e00a      	b.n	8007580 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800756a:	f7fc fe6b 	bl	8004244 <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	2b02      	cmp	r3, #2
 8007576:	d903      	bls.n	8007580 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e15c      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
 800757c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007580:	4b91      	ldr	r3, [pc, #580]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007584:	f003 0302 	and.w	r3, r3, #2
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1ee      	bne.n	800756a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0304 	and.w	r3, r3, #4
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 80a4 	beq.w	80076e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800759a:	4b8b      	ldr	r3, [pc, #556]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10d      	bne.n	80075c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80075a6:	4b88      	ldr	r3, [pc, #544]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	4a87      	ldr	r2, [pc, #540]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 80075ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075b0:	6413      	str	r3, [r2, #64]	; 0x40
 80075b2:	4b85      	ldr	r3, [pc, #532]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ba:	60bb      	str	r3, [r7, #8]
 80075bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075be:	2301      	movs	r3, #1
 80075c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075c2:	4b82      	ldr	r3, [pc, #520]	; (80077cc <HAL_RCC_OscConfig+0x4d0>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d118      	bne.n	8007600 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80075ce:	4b7f      	ldr	r3, [pc, #508]	; (80077cc <HAL_RCC_OscConfig+0x4d0>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a7e      	ldr	r2, [pc, #504]	; (80077cc <HAL_RCC_OscConfig+0x4d0>)
 80075d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075da:	f7fc fe33 	bl	8004244 <HAL_GetTick>
 80075de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075e0:	e008      	b.n	80075f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075e2:	f7fc fe2f 	bl	8004244 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	2b64      	cmp	r3, #100	; 0x64
 80075ee:	d901      	bls.n	80075f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e120      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075f4:	4b75      	ldr	r3, [pc, #468]	; (80077cc <HAL_RCC_OscConfig+0x4d0>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d0f0      	beq.n	80075e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d106      	bne.n	8007616 <HAL_RCC_OscConfig+0x31a>
 8007608:	4b6f      	ldr	r3, [pc, #444]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800760a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800760c:	4a6e      	ldr	r2, [pc, #440]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800760e:	f043 0301 	orr.w	r3, r3, #1
 8007612:	6713      	str	r3, [r2, #112]	; 0x70
 8007614:	e02d      	b.n	8007672 <HAL_RCC_OscConfig+0x376>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10c      	bne.n	8007638 <HAL_RCC_OscConfig+0x33c>
 800761e:	4b6a      	ldr	r3, [pc, #424]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007622:	4a69      	ldr	r2, [pc, #420]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007624:	f023 0301 	bic.w	r3, r3, #1
 8007628:	6713      	str	r3, [r2, #112]	; 0x70
 800762a:	4b67      	ldr	r3, [pc, #412]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800762c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800762e:	4a66      	ldr	r2, [pc, #408]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007630:	f023 0304 	bic.w	r3, r3, #4
 8007634:	6713      	str	r3, [r2, #112]	; 0x70
 8007636:	e01c      	b.n	8007672 <HAL_RCC_OscConfig+0x376>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	2b05      	cmp	r3, #5
 800763e:	d10c      	bne.n	800765a <HAL_RCC_OscConfig+0x35e>
 8007640:	4b61      	ldr	r3, [pc, #388]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007644:	4a60      	ldr	r2, [pc, #384]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007646:	f043 0304 	orr.w	r3, r3, #4
 800764a:	6713      	str	r3, [r2, #112]	; 0x70
 800764c:	4b5e      	ldr	r3, [pc, #376]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800764e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007650:	4a5d      	ldr	r2, [pc, #372]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007652:	f043 0301 	orr.w	r3, r3, #1
 8007656:	6713      	str	r3, [r2, #112]	; 0x70
 8007658:	e00b      	b.n	8007672 <HAL_RCC_OscConfig+0x376>
 800765a:	4b5b      	ldr	r3, [pc, #364]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800765c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800765e:	4a5a      	ldr	r2, [pc, #360]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007660:	f023 0301 	bic.w	r3, r3, #1
 8007664:	6713      	str	r3, [r2, #112]	; 0x70
 8007666:	4b58      	ldr	r3, [pc, #352]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800766a:	4a57      	ldr	r2, [pc, #348]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800766c:	f023 0304 	bic.w	r3, r3, #4
 8007670:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d015      	beq.n	80076a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800767a:	f7fc fde3 	bl	8004244 <HAL_GetTick>
 800767e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007680:	e00a      	b.n	8007698 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007682:	f7fc fddf 	bl	8004244 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007690:	4293      	cmp	r3, r2
 8007692:	d901      	bls.n	8007698 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e0ce      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007698:	4b4b      	ldr	r3, [pc, #300]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800769a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d0ee      	beq.n	8007682 <HAL_RCC_OscConfig+0x386>
 80076a4:	e014      	b.n	80076d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076a6:	f7fc fdcd 	bl	8004244 <HAL_GetTick>
 80076aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076ac:	e00a      	b.n	80076c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076ae:	f7fc fdc9 	bl	8004244 <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80076bc:	4293      	cmp	r3, r2
 80076be:	d901      	bls.n	80076c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e0b8      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076c4:	4b40      	ldr	r3, [pc, #256]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 80076c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1ee      	bne.n	80076ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d105      	bne.n	80076e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076d6:	4b3c      	ldr	r3, [pc, #240]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	4a3b      	ldr	r2, [pc, #236]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 80076dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 80a4 	beq.w	8007834 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80076ec:	4b36      	ldr	r3, [pc, #216]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f003 030c 	and.w	r3, r3, #12
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	d06b      	beq.n	80077d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d149      	bne.n	8007794 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007700:	4b31      	ldr	r3, [pc, #196]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a30      	ldr	r2, [pc, #192]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800770a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800770c:	f7fc fd9a 	bl	8004244 <HAL_GetTick>
 8007710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007712:	e008      	b.n	8007726 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007714:	f7fc fd96 	bl	8004244 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e087      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007726:	4b28      	ldr	r3, [pc, #160]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f0      	bne.n	8007714 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	69da      	ldr	r2, [r3, #28]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	431a      	orrs	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	019b      	lsls	r3, r3, #6
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007748:	085b      	lsrs	r3, r3, #1
 800774a:	3b01      	subs	r3, #1
 800774c:	041b      	lsls	r3, r3, #16
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	061b      	lsls	r3, r3, #24
 8007756:	4313      	orrs	r3, r2
 8007758:	4a1b      	ldr	r2, [pc, #108]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800775a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800775e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007760:	4b19      	ldr	r3, [pc, #100]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a18      	ldr	r2, [pc, #96]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800776a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800776c:	f7fc fd6a 	bl	8004244 <HAL_GetTick>
 8007770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007772:	e008      	b.n	8007786 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007774:	f7fc fd66 	bl	8004244 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	2b02      	cmp	r3, #2
 8007780:	d901      	bls.n	8007786 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e057      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007786:	4b10      	ldr	r3, [pc, #64]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0f0      	beq.n	8007774 <HAL_RCC_OscConfig+0x478>
 8007792:	e04f      	b.n	8007834 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007794:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a0b      	ldr	r2, [pc, #44]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800779a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800779e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a0:	f7fc fd50 	bl	8004244 <HAL_GetTick>
 80077a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077a6:	e008      	b.n	80077ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077a8:	f7fc fd4c 	bl	8004244 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d901      	bls.n	80077ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e03d      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077ba:	4b03      	ldr	r3, [pc, #12]	; (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1f0      	bne.n	80077a8 <HAL_RCC_OscConfig+0x4ac>
 80077c6:	e035      	b.n	8007834 <HAL_RCC_OscConfig+0x538>
 80077c8:	40023800 	.word	0x40023800
 80077cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80077d0:	4b1b      	ldr	r3, [pc, #108]	; (8007840 <HAL_RCC_OscConfig+0x544>)
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d028      	beq.n	8007830 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d121      	bne.n	8007830 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d11a      	bne.n	8007830 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007800:	4013      	ands	r3, r2
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007806:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007808:	4293      	cmp	r3, r2
 800780a:	d111      	bne.n	8007830 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007816:	085b      	lsrs	r3, r3, #1
 8007818:	3b01      	subs	r3, #1
 800781a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800781c:	429a      	cmp	r2, r3
 800781e:	d107      	bne.n	8007830 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800782c:	429a      	cmp	r2, r3
 800782e:	d001      	beq.n	8007834 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	40023800 	.word	0x40023800

08007844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e0d0      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800785c:	4b6a      	ldr	r3, [pc, #424]	; (8007a08 <HAL_RCC_ClockConfig+0x1c4>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 030f 	and.w	r3, r3, #15
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	429a      	cmp	r2, r3
 8007868:	d910      	bls.n	800788c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800786a:	4b67      	ldr	r3, [pc, #412]	; (8007a08 <HAL_RCC_ClockConfig+0x1c4>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f023 020f 	bic.w	r2, r3, #15
 8007872:	4965      	ldr	r1, [pc, #404]	; (8007a08 <HAL_RCC_ClockConfig+0x1c4>)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	4313      	orrs	r3, r2
 8007878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800787a:	4b63      	ldr	r3, [pc, #396]	; (8007a08 <HAL_RCC_ClockConfig+0x1c4>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 030f 	and.w	r3, r3, #15
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	429a      	cmp	r2, r3
 8007886:	d001      	beq.n	800788c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e0b8      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0302 	and.w	r3, r3, #2
 8007894:	2b00      	cmp	r3, #0
 8007896:	d020      	beq.n	80078da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0304 	and.w	r3, r3, #4
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d005      	beq.n	80078b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078a4:	4b59      	ldr	r3, [pc, #356]	; (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	4a58      	ldr	r2, [pc, #352]	; (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80078aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80078ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0308 	and.w	r3, r3, #8
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d005      	beq.n	80078c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078bc:	4b53      	ldr	r3, [pc, #332]	; (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	4a52      	ldr	r2, [pc, #328]	; (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80078c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80078c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078c8:	4b50      	ldr	r3, [pc, #320]	; (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	494d      	ldr	r1, [pc, #308]	; (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d040      	beq.n	8007968 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d107      	bne.n	80078fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078ee:	4b47      	ldr	r3, [pc, #284]	; (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d115      	bne.n	8007926 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e07f      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	2b02      	cmp	r3, #2
 8007904:	d107      	bne.n	8007916 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007906:	4b41      	ldr	r3, [pc, #260]	; (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d109      	bne.n	8007926 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e073      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007916:	4b3d      	ldr	r3, [pc, #244]	; (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e06b      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007926:	4b39      	ldr	r3, [pc, #228]	; (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f023 0203 	bic.w	r2, r3, #3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	4936      	ldr	r1, [pc, #216]	; (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 8007934:	4313      	orrs	r3, r2
 8007936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007938:	f7fc fc84 	bl	8004244 <HAL_GetTick>
 800793c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800793e:	e00a      	b.n	8007956 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007940:	f7fc fc80 	bl	8004244 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	f241 3288 	movw	r2, #5000	; 0x1388
 800794e:	4293      	cmp	r3, r2
 8007950:	d901      	bls.n	8007956 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e053      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007956:	4b2d      	ldr	r3, [pc, #180]	; (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f003 020c 	and.w	r2, r3, #12
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	429a      	cmp	r2, r3
 8007966:	d1eb      	bne.n	8007940 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007968:	4b27      	ldr	r3, [pc, #156]	; (8007a08 <HAL_RCC_ClockConfig+0x1c4>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 030f 	and.w	r3, r3, #15
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	429a      	cmp	r2, r3
 8007974:	d210      	bcs.n	8007998 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007976:	4b24      	ldr	r3, [pc, #144]	; (8007a08 <HAL_RCC_ClockConfig+0x1c4>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f023 020f 	bic.w	r2, r3, #15
 800797e:	4922      	ldr	r1, [pc, #136]	; (8007a08 <HAL_RCC_ClockConfig+0x1c4>)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	4313      	orrs	r3, r2
 8007984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007986:	4b20      	ldr	r3, [pc, #128]	; (8007a08 <HAL_RCC_ClockConfig+0x1c4>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 030f 	and.w	r3, r3, #15
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	429a      	cmp	r2, r3
 8007992:	d001      	beq.n	8007998 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e032      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d008      	beq.n	80079b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079a4:	4b19      	ldr	r3, [pc, #100]	; (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	4916      	ldr	r1, [pc, #88]	; (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0308 	and.w	r3, r3, #8
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d009      	beq.n	80079d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80079c2:	4b12      	ldr	r3, [pc, #72]	; (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	490e      	ldr	r1, [pc, #56]	; (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80079d6:	f000 f821 	bl	8007a1c <HAL_RCC_GetSysClockFreq>
 80079da:	4602      	mov	r2, r0
 80079dc:	4b0b      	ldr	r3, [pc, #44]	; (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	091b      	lsrs	r3, r3, #4
 80079e2:	f003 030f 	and.w	r3, r3, #15
 80079e6:	490a      	ldr	r1, [pc, #40]	; (8007a10 <HAL_RCC_ClockConfig+0x1cc>)
 80079e8:	5ccb      	ldrb	r3, [r1, r3]
 80079ea:	fa22 f303 	lsr.w	r3, r2, r3
 80079ee:	4a09      	ldr	r2, [pc, #36]	; (8007a14 <HAL_RCC_ClockConfig+0x1d0>)
 80079f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80079f2:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <HAL_RCC_ClockConfig+0x1d4>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fc fb2a 	bl	8004050 <HAL_InitTick>

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	40023c00 	.word	0x40023c00
 8007a0c:	40023800 	.word	0x40023800
 8007a10:	0800f8b8 	.word	0x0800f8b8
 8007a14:	2000004c 	.word	0x2000004c
 8007a18:	20000050 	.word	0x20000050

08007a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a1c:	b5b0      	push	{r4, r5, r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007a22:	2100      	movs	r1, #0
 8007a24:	6079      	str	r1, [r7, #4]
 8007a26:	2100      	movs	r1, #0
 8007a28:	60f9      	str	r1, [r7, #12]
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007a2e:	2100      	movs	r1, #0
 8007a30:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a32:	4952      	ldr	r1, [pc, #328]	; (8007b7c <HAL_RCC_GetSysClockFreq+0x160>)
 8007a34:	6889      	ldr	r1, [r1, #8]
 8007a36:	f001 010c 	and.w	r1, r1, #12
 8007a3a:	2908      	cmp	r1, #8
 8007a3c:	d00d      	beq.n	8007a5a <HAL_RCC_GetSysClockFreq+0x3e>
 8007a3e:	2908      	cmp	r1, #8
 8007a40:	f200 8094 	bhi.w	8007b6c <HAL_RCC_GetSysClockFreq+0x150>
 8007a44:	2900      	cmp	r1, #0
 8007a46:	d002      	beq.n	8007a4e <HAL_RCC_GetSysClockFreq+0x32>
 8007a48:	2904      	cmp	r1, #4
 8007a4a:	d003      	beq.n	8007a54 <HAL_RCC_GetSysClockFreq+0x38>
 8007a4c:	e08e      	b.n	8007b6c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a4e:	4b4c      	ldr	r3, [pc, #304]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x164>)
 8007a50:	60bb      	str	r3, [r7, #8]
      break;
 8007a52:	e08e      	b.n	8007b72 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a54:	4b4b      	ldr	r3, [pc, #300]	; (8007b84 <HAL_RCC_GetSysClockFreq+0x168>)
 8007a56:	60bb      	str	r3, [r7, #8]
      break;
 8007a58:	e08b      	b.n	8007b72 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a5a:	4948      	ldr	r1, [pc, #288]	; (8007b7c <HAL_RCC_GetSysClockFreq+0x160>)
 8007a5c:	6849      	ldr	r1, [r1, #4]
 8007a5e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007a62:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007a64:	4945      	ldr	r1, [pc, #276]	; (8007b7c <HAL_RCC_GetSysClockFreq+0x160>)
 8007a66:	6849      	ldr	r1, [r1, #4]
 8007a68:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007a6c:	2900      	cmp	r1, #0
 8007a6e:	d024      	beq.n	8007aba <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a70:	4942      	ldr	r1, [pc, #264]	; (8007b7c <HAL_RCC_GetSysClockFreq+0x160>)
 8007a72:	6849      	ldr	r1, [r1, #4]
 8007a74:	0989      	lsrs	r1, r1, #6
 8007a76:	4608      	mov	r0, r1
 8007a78:	f04f 0100 	mov.w	r1, #0
 8007a7c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007a80:	f04f 0500 	mov.w	r5, #0
 8007a84:	ea00 0204 	and.w	r2, r0, r4
 8007a88:	ea01 0305 	and.w	r3, r1, r5
 8007a8c:	493d      	ldr	r1, [pc, #244]	; (8007b84 <HAL_RCC_GetSysClockFreq+0x168>)
 8007a8e:	fb01 f003 	mul.w	r0, r1, r3
 8007a92:	2100      	movs	r1, #0
 8007a94:	fb01 f102 	mul.w	r1, r1, r2
 8007a98:	1844      	adds	r4, r0, r1
 8007a9a:	493a      	ldr	r1, [pc, #232]	; (8007b84 <HAL_RCC_GetSysClockFreq+0x168>)
 8007a9c:	fba2 0101 	umull	r0, r1, r2, r1
 8007aa0:	1863      	adds	r3, r4, r1
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f04f 0300 	mov.w	r3, #0
 8007aac:	f7f8 fbb0 	bl	8000210 <__aeabi_uldivmod>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	e04a      	b.n	8007b50 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007aba:	4b30      	ldr	r3, [pc, #192]	; (8007b7c <HAL_RCC_GetSysClockFreq+0x160>)
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	099b      	lsrs	r3, r3, #6
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	f04f 0300 	mov.w	r3, #0
 8007ac6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007aca:	f04f 0100 	mov.w	r1, #0
 8007ace:	ea02 0400 	and.w	r4, r2, r0
 8007ad2:	ea03 0501 	and.w	r5, r3, r1
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	4629      	mov	r1, r5
 8007ada:	f04f 0200 	mov.w	r2, #0
 8007ade:	f04f 0300 	mov.w	r3, #0
 8007ae2:	014b      	lsls	r3, r1, #5
 8007ae4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007ae8:	0142      	lsls	r2, r0, #5
 8007aea:	4610      	mov	r0, r2
 8007aec:	4619      	mov	r1, r3
 8007aee:	1b00      	subs	r0, r0, r4
 8007af0:	eb61 0105 	sbc.w	r1, r1, r5
 8007af4:	f04f 0200 	mov.w	r2, #0
 8007af8:	f04f 0300 	mov.w	r3, #0
 8007afc:	018b      	lsls	r3, r1, #6
 8007afe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007b02:	0182      	lsls	r2, r0, #6
 8007b04:	1a12      	subs	r2, r2, r0
 8007b06:	eb63 0301 	sbc.w	r3, r3, r1
 8007b0a:	f04f 0000 	mov.w	r0, #0
 8007b0e:	f04f 0100 	mov.w	r1, #0
 8007b12:	00d9      	lsls	r1, r3, #3
 8007b14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b18:	00d0      	lsls	r0, r2, #3
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	1912      	adds	r2, r2, r4
 8007b20:	eb45 0303 	adc.w	r3, r5, r3
 8007b24:	f04f 0000 	mov.w	r0, #0
 8007b28:	f04f 0100 	mov.w	r1, #0
 8007b2c:	0299      	lsls	r1, r3, #10
 8007b2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007b32:	0290      	lsls	r0, r2, #10
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	4610      	mov	r0, r2
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	f04f 0300 	mov.w	r3, #0
 8007b44:	f7f8 fb64 	bl	8000210 <__aeabi_uldivmod>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007b50:	4b0a      	ldr	r3, [pc, #40]	; (8007b7c <HAL_RCC_GetSysClockFreq+0x160>)
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	0c1b      	lsrs	r3, r3, #16
 8007b56:	f003 0303 	and.w	r3, r3, #3
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	005b      	lsls	r3, r3, #1
 8007b5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b68:	60bb      	str	r3, [r7, #8]
      break;
 8007b6a:	e002      	b.n	8007b72 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b6c:	4b04      	ldr	r3, [pc, #16]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x164>)
 8007b6e:	60bb      	str	r3, [r7, #8]
      break;
 8007b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b72:	68bb      	ldr	r3, [r7, #8]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8007b7c:	40023800 	.word	0x40023800
 8007b80:	00f42400 	.word	0x00f42400
 8007b84:	017d7840 	.word	0x017d7840

08007b88 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b8c:	4b03      	ldr	r3, [pc, #12]	; (8007b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	2000004c 	.word	0x2000004c

08007ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ba4:	f7ff fff0 	bl	8007b88 <HAL_RCC_GetHCLKFreq>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	4b05      	ldr	r3, [pc, #20]	; (8007bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	0a9b      	lsrs	r3, r3, #10
 8007bb0:	f003 0307 	and.w	r3, r3, #7
 8007bb4:	4903      	ldr	r1, [pc, #12]	; (8007bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bb6:	5ccb      	ldrb	r3, [r1, r3]
 8007bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	40023800 	.word	0x40023800
 8007bc4:	0800f8c8 	.word	0x0800f8c8

08007bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007bcc:	f7ff ffdc 	bl	8007b88 <HAL_RCC_GetHCLKFreq>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	4b05      	ldr	r3, [pc, #20]	; (8007be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	0b5b      	lsrs	r3, r3, #13
 8007bd8:	f003 0307 	and.w	r3, r3, #7
 8007bdc:	4903      	ldr	r1, [pc, #12]	; (8007bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bde:	5ccb      	ldrb	r3, [r1, r3]
 8007be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	40023800 	.word	0x40023800
 8007bec:	0800f8c8 	.word	0x0800f8c8

08007bf0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	220f      	movs	r2, #15
 8007bfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007c00:	4b12      	ldr	r3, [pc, #72]	; (8007c4c <HAL_RCC_GetClockConfig+0x5c>)
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f003 0203 	and.w	r2, r3, #3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007c0c:	4b0f      	ldr	r3, [pc, #60]	; (8007c4c <HAL_RCC_GetClockConfig+0x5c>)
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007c18:	4b0c      	ldr	r3, [pc, #48]	; (8007c4c <HAL_RCC_GetClockConfig+0x5c>)
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007c24:	4b09      	ldr	r3, [pc, #36]	; (8007c4c <HAL_RCC_GetClockConfig+0x5c>)
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	08db      	lsrs	r3, r3, #3
 8007c2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c32:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <HAL_RCC_GetClockConfig+0x60>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 020f 	and.w	r2, r3, #15
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	601a      	str	r2, [r3, #0]
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	40023800 	.word	0x40023800
 8007c50:	40023c00 	.word	0x40023c00

08007c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b088      	sub	sp, #32
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007c60:	2300      	movs	r3, #0
 8007c62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d012      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c7c:	4b69      	ldr	r3, [pc, #420]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	4a68      	ldr	r2, [pc, #416]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c86:	6093      	str	r3, [r2, #8]
 8007c88:	4b66      	ldr	r3, [pc, #408]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c90:	4964      	ldr	r1, [pc, #400]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d017      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007cae:	4b5d      	ldr	r3, [pc, #372]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cbc:	4959      	ldr	r1, [pc, #356]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ccc:	d101      	bne.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d017      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007cea:	4b4e      	ldr	r3, [pc, #312]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cf0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf8:	494a      	ldr	r1, [pc, #296]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d08:	d101      	bne.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007d16:	2301      	movs	r3, #1
 8007d18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007d26:	2301      	movs	r3, #1
 8007d28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0320 	and.w	r3, r3, #32
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 808b 	beq.w	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d38:	4b3a      	ldr	r3, [pc, #232]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3c:	4a39      	ldr	r2, [pc, #228]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d42:	6413      	str	r3, [r2, #64]	; 0x40
 8007d44:	4b37      	ldr	r3, [pc, #220]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d4c:	60bb      	str	r3, [r7, #8]
 8007d4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007d50:	4b35      	ldr	r3, [pc, #212]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a34      	ldr	r2, [pc, #208]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d5c:	f7fc fa72 	bl	8004244 <HAL_GetTick>
 8007d60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d62:	e008      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d64:	f7fc fa6e 	bl	8004244 <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	2b64      	cmp	r3, #100	; 0x64
 8007d70:	d901      	bls.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e357      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d76:	4b2c      	ldr	r3, [pc, #176]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d0f0      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d82:	4b28      	ldr	r3, [pc, #160]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d035      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d02e      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007da0:	4b20      	ldr	r3, [pc, #128]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007da8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007daa:	4b1e      	ldr	r3, [pc, #120]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dae:	4a1d      	ldr	r2, [pc, #116]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007db4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007db6:	4b1b      	ldr	r3, [pc, #108]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dba:	4a1a      	ldr	r2, [pc, #104]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007dc2:	4a18      	ldr	r2, [pc, #96]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007dc8:	4b16      	ldr	r3, [pc, #88]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d114      	bne.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd4:	f7fc fa36 	bl	8004244 <HAL_GetTick>
 8007dd8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dda:	e00a      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ddc:	f7fc fa32 	bl	8004244 <HAL_GetTick>
 8007de0:	4602      	mov	r2, r0
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d901      	bls.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e319      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007df2:	4b0c      	ldr	r3, [pc, #48]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df6:	f003 0302 	and.w	r3, r3, #2
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d0ee      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e0a:	d111      	bne.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007e0c:	4b05      	ldr	r3, [pc, #20]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007e18:	4b04      	ldr	r3, [pc, #16]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007e1a:	400b      	ands	r3, r1
 8007e1c:	4901      	ldr	r1, [pc, #4]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	608b      	str	r3, [r1, #8]
 8007e22:	e00b      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007e24:	40023800 	.word	0x40023800
 8007e28:	40007000 	.word	0x40007000
 8007e2c:	0ffffcff 	.word	0x0ffffcff
 8007e30:	4bb1      	ldr	r3, [pc, #708]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	4ab0      	ldr	r2, [pc, #704]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007e3a:	6093      	str	r3, [r2, #8]
 8007e3c:	4bae      	ldr	r3, [pc, #696]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e48:	49ab      	ldr	r1, [pc, #684]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0310 	and.w	r3, r3, #16
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d010      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e5a:	4ba7      	ldr	r3, [pc, #668]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e60:	4aa5      	ldr	r2, [pc, #660]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007e6a:	4ba3      	ldr	r3, [pc, #652]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e74:	49a0      	ldr	r1, [pc, #640]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00a      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e88:	4b9b      	ldr	r3, [pc, #620]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e96:	4998      	ldr	r1, [pc, #608]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00a      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007eaa:	4b93      	ldr	r3, [pc, #588]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eb8:	498f      	ldr	r1, [pc, #572]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00a      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ecc:	4b8a      	ldr	r3, [pc, #552]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eda:	4987      	ldr	r1, [pc, #540]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00a      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007eee:	4b82      	ldr	r3, [pc, #520]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007efc:	497e      	ldr	r1, [pc, #504]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007efe:	4313      	orrs	r3, r2
 8007f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00a      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f10:	4b79      	ldr	r3, [pc, #484]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f16:	f023 0203 	bic.w	r2, r3, #3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1e:	4976      	ldr	r1, [pc, #472]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007f20:	4313      	orrs	r3, r2
 8007f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00a      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f32:	4b71      	ldr	r3, [pc, #452]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f38:	f023 020c 	bic.w	r2, r3, #12
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f40:	496d      	ldr	r1, [pc, #436]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00a      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f54:	4b68      	ldr	r3, [pc, #416]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f62:	4965      	ldr	r1, [pc, #404]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00a      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007f76:	4b60      	ldr	r3, [pc, #384]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f84:	495c      	ldr	r1, [pc, #368]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00a      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f98:	4b57      	ldr	r3, [pc, #348]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa6:	4954      	ldr	r1, [pc, #336]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00a      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007fba:	4b4f      	ldr	r3, [pc, #316]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fc8:	494b      	ldr	r1, [pc, #300]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00a      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007fdc:	4b46      	ldr	r3, [pc, #280]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fea:	4943      	ldr	r1, [pc, #268]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00a      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007ffe:	4b3e      	ldr	r3, [pc, #248]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008004:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800800c:	493a      	ldr	r1, [pc, #232]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800800e:	4313      	orrs	r3, r2
 8008010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00a      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008020:	4b35      	ldr	r3, [pc, #212]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008026:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800802e:	4932      	ldr	r1, [pc, #200]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008030:	4313      	orrs	r3, r2
 8008032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d011      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008042:	4b2d      	ldr	r3, [pc, #180]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008048:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008050:	4929      	ldr	r1, [pc, #164]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008052:	4313      	orrs	r3, r2
 8008054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800805c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008060:	d101      	bne.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008062:	2301      	movs	r3, #1
 8008064:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0308 	and.w	r3, r3, #8
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008072:	2301      	movs	r3, #1
 8008074:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00a      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008082:	4b1d      	ldr	r3, [pc, #116]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008088:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008090:	4919      	ldr	r1, [pc, #100]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008092:	4313      	orrs	r3, r2
 8008094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00b      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80080a4:	4b14      	ldr	r3, [pc, #80]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80080a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080b4:	4910      	ldr	r1, [pc, #64]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d006      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 80d9 	beq.w	8008282 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80080d0:	4b09      	ldr	r3, [pc, #36]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a08      	ldr	r2, [pc, #32]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80080d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80080da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080dc:	f7fc f8b2 	bl	8004244 <HAL_GetTick>
 80080e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080e2:	e00b      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80080e4:	f7fc f8ae 	bl	8004244 <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	2b64      	cmp	r3, #100	; 0x64
 80080f0:	d904      	bls.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e197      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80080f6:	bf00      	nop
 80080f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080fc:	4b6c      	ldr	r3, [pc, #432]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1ed      	bne.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	d021      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008118:	2b00      	cmp	r3, #0
 800811a:	d11d      	bne.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800811c:	4b64      	ldr	r3, [pc, #400]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800811e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008122:	0c1b      	lsrs	r3, r3, #16
 8008124:	f003 0303 	and.w	r3, r3, #3
 8008128:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800812a:	4b61      	ldr	r3, [pc, #388]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800812c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008130:	0e1b      	lsrs	r3, r3, #24
 8008132:	f003 030f 	and.w	r3, r3, #15
 8008136:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	019a      	lsls	r2, r3, #6
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	041b      	lsls	r3, r3, #16
 8008142:	431a      	orrs	r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	061b      	lsls	r3, r3, #24
 8008148:	431a      	orrs	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	071b      	lsls	r3, r3, #28
 8008150:	4957      	ldr	r1, [pc, #348]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008152:	4313      	orrs	r3, r2
 8008154:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d004      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800816c:	d00a      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008176:	2b00      	cmp	r3, #0
 8008178:	d02e      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008182:	d129      	bne.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008184:	4b4a      	ldr	r3, [pc, #296]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800818a:	0c1b      	lsrs	r3, r3, #16
 800818c:	f003 0303 	and.w	r3, r3, #3
 8008190:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008192:	4b47      	ldr	r3, [pc, #284]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008198:	0f1b      	lsrs	r3, r3, #28
 800819a:	f003 0307 	and.w	r3, r3, #7
 800819e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	019a      	lsls	r2, r3, #6
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	041b      	lsls	r3, r3, #16
 80081aa:	431a      	orrs	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	061b      	lsls	r3, r3, #24
 80081b2:	431a      	orrs	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	071b      	lsls	r3, r3, #28
 80081b8:	493d      	ldr	r1, [pc, #244]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80081c0:	4b3b      	ldr	r3, [pc, #236]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081c6:	f023 021f 	bic.w	r2, r3, #31
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	3b01      	subs	r3, #1
 80081d0:	4937      	ldr	r1, [pc, #220]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d01d      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80081e4:	4b32      	ldr	r3, [pc, #200]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ea:	0e1b      	lsrs	r3, r3, #24
 80081ec:	f003 030f 	and.w	r3, r3, #15
 80081f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80081f2:	4b2f      	ldr	r3, [pc, #188]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081f8:	0f1b      	lsrs	r3, r3, #28
 80081fa:	f003 0307 	and.w	r3, r3, #7
 80081fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	019a      	lsls	r2, r3, #6
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	041b      	lsls	r3, r3, #16
 800820c:	431a      	orrs	r2, r3
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	061b      	lsls	r3, r3, #24
 8008212:	431a      	orrs	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	071b      	lsls	r3, r3, #28
 8008218:	4925      	ldr	r1, [pc, #148]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800821a:	4313      	orrs	r3, r2
 800821c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d011      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	019a      	lsls	r2, r3, #6
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	041b      	lsls	r3, r3, #16
 8008238:	431a      	orrs	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	061b      	lsls	r3, r3, #24
 8008240:	431a      	orrs	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	071b      	lsls	r3, r3, #28
 8008248:	4919      	ldr	r1, [pc, #100]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800824a:	4313      	orrs	r3, r2
 800824c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008250:	4b17      	ldr	r3, [pc, #92]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a16      	ldr	r2, [pc, #88]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008256:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800825a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800825c:	f7fb fff2 	bl	8004244 <HAL_GetTick>
 8008260:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008262:	e008      	b.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008264:	f7fb ffee 	bl	8004244 <HAL_GetTick>
 8008268:	4602      	mov	r2, r0
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	2b64      	cmp	r3, #100	; 0x64
 8008270:	d901      	bls.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	e0d7      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008276:	4b0e      	ldr	r3, [pc, #56]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d0f0      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	2b01      	cmp	r3, #1
 8008286:	f040 80cd 	bne.w	8008424 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800828a:	4b09      	ldr	r3, [pc, #36]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a08      	ldr	r2, [pc, #32]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008296:	f7fb ffd5 	bl	8004244 <HAL_GetTick>
 800829a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800829c:	e00a      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800829e:	f7fb ffd1 	bl	8004244 <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	2b64      	cmp	r3, #100	; 0x64
 80082aa:	d903      	bls.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e0ba      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80082b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80082b4:	4b5e      	ldr	r3, [pc, #376]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082c0:	d0ed      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d009      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d02e      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d12a      	bne.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80082ea:	4b51      	ldr	r3, [pc, #324]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082f0:	0c1b      	lsrs	r3, r3, #16
 80082f2:	f003 0303 	and.w	r3, r3, #3
 80082f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80082f8:	4b4d      	ldr	r3, [pc, #308]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082fe:	0f1b      	lsrs	r3, r3, #28
 8008300:	f003 0307 	and.w	r3, r3, #7
 8008304:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	019a      	lsls	r2, r3, #6
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	041b      	lsls	r3, r3, #16
 8008310:	431a      	orrs	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	061b      	lsls	r3, r3, #24
 8008318:	431a      	orrs	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	071b      	lsls	r3, r3, #28
 800831e:	4944      	ldr	r1, [pc, #272]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008320:	4313      	orrs	r3, r2
 8008322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008326:	4b42      	ldr	r3, [pc, #264]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800832c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008334:	3b01      	subs	r3, #1
 8008336:	021b      	lsls	r3, r3, #8
 8008338:	493d      	ldr	r1, [pc, #244]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800833a:	4313      	orrs	r3, r2
 800833c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d022      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008354:	d11d      	bne.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008356:	4b36      	ldr	r3, [pc, #216]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800835c:	0e1b      	lsrs	r3, r3, #24
 800835e:	f003 030f 	and.w	r3, r3, #15
 8008362:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008364:	4b32      	ldr	r3, [pc, #200]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800836a:	0f1b      	lsrs	r3, r3, #28
 800836c:	f003 0307 	and.w	r3, r3, #7
 8008370:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	019a      	lsls	r2, r3, #6
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	041b      	lsls	r3, r3, #16
 800837e:	431a      	orrs	r2, r3
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	061b      	lsls	r3, r3, #24
 8008384:	431a      	orrs	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	071b      	lsls	r3, r3, #28
 800838a:	4929      	ldr	r1, [pc, #164]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800838c:	4313      	orrs	r3, r2
 800838e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0308 	and.w	r3, r3, #8
 800839a:	2b00      	cmp	r3, #0
 800839c:	d028      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800839e:	4b24      	ldr	r3, [pc, #144]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a4:	0e1b      	lsrs	r3, r3, #24
 80083a6:	f003 030f 	and.w	r3, r3, #15
 80083aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80083ac:	4b20      	ldr	r3, [pc, #128]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083b2:	0c1b      	lsrs	r3, r3, #16
 80083b4:	f003 0303 	and.w	r3, r3, #3
 80083b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	019a      	lsls	r2, r3, #6
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	041b      	lsls	r3, r3, #16
 80083c4:	431a      	orrs	r2, r3
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	061b      	lsls	r3, r3, #24
 80083ca:	431a      	orrs	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	071b      	lsls	r3, r3, #28
 80083d2:	4917      	ldr	r1, [pc, #92]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80083da:	4b15      	ldr	r3, [pc, #84]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e8:	4911      	ldr	r1, [pc, #68]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80083f0:	4b0f      	ldr	r3, [pc, #60]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a0e      	ldr	r2, [pc, #56]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083fc:	f7fb ff22 	bl	8004244 <HAL_GetTick>
 8008400:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008402:	e008      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008404:	f7fb ff1e 	bl	8004244 <HAL_GetTick>
 8008408:	4602      	mov	r2, r0
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	2b64      	cmp	r3, #100	; 0x64
 8008410:	d901      	bls.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e007      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008416:	4b06      	ldr	r3, [pc, #24]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800841e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008422:	d1ef      	bne.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3720      	adds	r7, #32
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	40023800 	.word	0x40023800

08008434 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e081      	b.n	800854a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	7f5b      	ldrb	r3, [r3, #29]
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b00      	cmp	r3, #0
 800844e:	d105      	bne.n	800845c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7fb fb2e 	bl	8003ab8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2202      	movs	r2, #2
 8008460:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	22ca      	movs	r2, #202	; 0xca
 8008468:	625a      	str	r2, [r3, #36]	; 0x24
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2253      	movs	r2, #83	; 0x53
 8008470:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fb16 	bl	8008aa4 <RTC_EnterInitMode>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d008      	beq.n	8008490 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	22ff      	movs	r2, #255	; 0xff
 8008484:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2204      	movs	r2, #4
 800848a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e05c      	b.n	800854a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6899      	ldr	r1, [r3, #8]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	4b2e      	ldr	r3, [pc, #184]	; (8008554 <HAL_RTC_Init+0x120>)
 800849c:	400b      	ands	r3, r1
 800849e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6899      	ldr	r1, [r3, #8]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685a      	ldr	r2, [r3, #4]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	431a      	orrs	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	431a      	orrs	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	68d2      	ldr	r2, [r2, #12]
 80084c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6919      	ldr	r1, [r3, #16]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	041a      	lsls	r2, r3, #16
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	430a      	orrs	r2, r1
 80084da:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68da      	ldr	r2, [r3, #12]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084ea:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f003 0320 	and.w	r3, r3, #32
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10e      	bne.n	8008518 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 faaa 	bl	8008a54 <HAL_RTC_WaitForSynchro>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d008      	beq.n	8008518 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	22ff      	movs	r2, #255	; 0xff
 800850c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2204      	movs	r2, #4
 8008512:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e018      	b.n	800854a <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f022 0208 	bic.w	r2, r2, #8
 8008526:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	699a      	ldr	r2, [r3, #24]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	430a      	orrs	r2, r1
 8008538:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	22ff      	movs	r2, #255	; 0xff
 8008540:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008548:	2300      	movs	r3, #0
  }
}
 800854a:	4618      	mov	r0, r3
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	ff8fffbf 	.word	0xff8fffbf

08008558 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008558:	b590      	push	{r4, r7, lr}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	7f1b      	ldrb	r3, [r3, #28]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d101      	bne.n	8008574 <HAL_RTC_SetTime+0x1c>
 8008570:	2302      	movs	r3, #2
 8008572:	e0a8      	b.n	80086c6 <HAL_RTC_SetTime+0x16e>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2201      	movs	r2, #1
 8008578:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2202      	movs	r2, #2
 800857e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d126      	bne.n	80085d4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008590:	2b00      	cmp	r3, #0
 8008592:	d102      	bne.n	800859a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2200      	movs	r2, #0
 8008598:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 faac 	bl	8008afc <RTC_ByteToBcd2>
 80085a4:	4603      	mov	r3, r0
 80085a6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	785b      	ldrb	r3, [r3, #1]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 faa5 	bl	8008afc <RTC_ByteToBcd2>
 80085b2:	4603      	mov	r3, r0
 80085b4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80085b6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	789b      	ldrb	r3, [r3, #2]
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 fa9d 	bl	8008afc <RTC_ByteToBcd2>
 80085c2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80085c4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	7b1b      	ldrb	r3, [r3, #12]
 80085cc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]
 80085d2:	e018      	b.n	8008606 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d102      	bne.n	80085e8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2200      	movs	r2, #0
 80085e6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	785b      	ldrb	r3, [r3, #1]
 80085f2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80085f4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80085fa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	7b1b      	ldrb	r3, [r3, #12]
 8008600:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008602:	4313      	orrs	r3, r2
 8008604:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	22ca      	movs	r2, #202	; 0xca
 800860c:	625a      	str	r2, [r3, #36]	; 0x24
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2253      	movs	r2, #83	; 0x53
 8008614:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f000 fa44 	bl	8008aa4 <RTC_EnterInitMode>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00b      	beq.n	800863a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	22ff      	movs	r2, #255	; 0xff
 8008628:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2204      	movs	r2, #4
 800862e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e045      	b.n	80086c6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	6979      	ldr	r1, [r7, #20]
 8008640:	4b23      	ldr	r3, [pc, #140]	; (80086d0 <HAL_RTC_SetTime+0x178>)
 8008642:	400b      	ands	r3, r1
 8008644:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689a      	ldr	r2, [r3, #8]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008654:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	6899      	ldr	r1, [r3, #8]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	691a      	ldr	r2, [r3, #16]
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	695b      	ldr	r3, [r3, #20]
 8008664:	431a      	orrs	r2, r3
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	430a      	orrs	r2, r1
 800866c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800867c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f003 0320 	and.w	r3, r3, #32
 8008688:	2b00      	cmp	r3, #0
 800868a:	d111      	bne.n	80086b0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f000 f9e1 	bl	8008a54 <HAL_RTC_WaitForSynchro>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00b      	beq.n	80086b0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	22ff      	movs	r2, #255	; 0xff
 800869e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2204      	movs	r2, #4
 80086a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e00a      	b.n	80086c6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	22ff      	movs	r2, #255	; 0xff
 80086b6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2201      	movs	r2, #1
 80086bc:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80086c4:	2300      	movs	r3, #0
  }
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	371c      	adds	r7, #28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd90      	pop	{r4, r7, pc}
 80086ce:	bf00      	nop
 80086d0:	007f7f7f 	.word	0x007f7f7f

080086d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80086d4:	b590      	push	{r4, r7, lr}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80086e0:	2300      	movs	r3, #0
 80086e2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	7f1b      	ldrb	r3, [r3, #28]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d101      	bne.n	80086f0 <HAL_RTC_SetDate+0x1c>
 80086ec:	2302      	movs	r3, #2
 80086ee:	e092      	b.n	8008816 <HAL_RTC_SetDate+0x142>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2201      	movs	r2, #1
 80086f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2202      	movs	r2, #2
 80086fa:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10e      	bne.n	8008720 <HAL_RTC_SetDate+0x4c>
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	785b      	ldrb	r3, [r3, #1]
 8008706:	f003 0310 	and.w	r3, r3, #16
 800870a:	2b00      	cmp	r3, #0
 800870c:	d008      	beq.n	8008720 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	785b      	ldrb	r3, [r3, #1]
 8008712:	f023 0310 	bic.w	r3, r3, #16
 8008716:	b2db      	uxtb	r3, r3
 8008718:	330a      	adds	r3, #10
 800871a:	b2da      	uxtb	r2, r3
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d11c      	bne.n	8008760 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	78db      	ldrb	r3, [r3, #3]
 800872a:	4618      	mov	r0, r3
 800872c:	f000 f9e6 	bl	8008afc <RTC_ByteToBcd2>
 8008730:	4603      	mov	r3, r0
 8008732:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	785b      	ldrb	r3, [r3, #1]
 8008738:	4618      	mov	r0, r3
 800873a:	f000 f9df 	bl	8008afc <RTC_ByteToBcd2>
 800873e:	4603      	mov	r3, r0
 8008740:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008742:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	789b      	ldrb	r3, [r3, #2]
 8008748:	4618      	mov	r0, r3
 800874a:	f000 f9d7 	bl	8008afc <RTC_ByteToBcd2>
 800874e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008750:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800875a:	4313      	orrs	r3, r2
 800875c:	617b      	str	r3, [r7, #20]
 800875e:	e00e      	b.n	800877e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	78db      	ldrb	r3, [r3, #3]
 8008764:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	785b      	ldrb	r3, [r3, #1]
 800876a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800876c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008772:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800877a:	4313      	orrs	r3, r2
 800877c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	22ca      	movs	r2, #202	; 0xca
 8008784:	625a      	str	r2, [r3, #36]	; 0x24
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2253      	movs	r2, #83	; 0x53
 800878c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f000 f988 	bl	8008aa4 <RTC_EnterInitMode>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00b      	beq.n	80087b2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	22ff      	movs	r2, #255	; 0xff
 80087a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2204      	movs	r2, #4
 80087a6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e031      	b.n	8008816 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	6979      	ldr	r1, [r7, #20]
 80087b8:	4b19      	ldr	r3, [pc, #100]	; (8008820 <HAL_RTC_SetDate+0x14c>)
 80087ba:	400b      	ands	r3, r1
 80087bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68da      	ldr	r2, [r3, #12]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087cc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f003 0320 	and.w	r3, r3, #32
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d111      	bne.n	8008800 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f000 f939 	bl	8008a54 <HAL_RTC_WaitForSynchro>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00b      	beq.n	8008800 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	22ff      	movs	r2, #255	; 0xff
 80087ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2204      	movs	r2, #4
 80087f4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e00a      	b.n	8008816 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	22ff      	movs	r2, #255	; 0xff
 8008806:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2201      	movs	r2, #1
 800880c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008814:	2300      	movs	r3, #0
  }
}
 8008816:	4618      	mov	r0, r3
 8008818:	371c      	adds	r7, #28
 800881a:	46bd      	mov	sp, r7
 800881c:	bd90      	pop	{r4, r7, pc}
 800881e:	bf00      	nop
 8008820:	00ffff3f 	.word	0x00ffff3f

08008824 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008824:	b590      	push	{r4, r7, lr}
 8008826:	b089      	sub	sp, #36	; 0x24
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008830:	2300      	movs	r3, #0
 8008832:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008834:	2300      	movs	r3, #0
 8008836:	61fb      	str	r3, [r7, #28]
 8008838:	2300      	movs	r3, #0
 800883a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	7f1b      	ldrb	r3, [r3, #28]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d101      	bne.n	8008848 <HAL_RTC_SetAlarm+0x24>
 8008844:	2302      	movs	r3, #2
 8008846:	e101      	b.n	8008a4c <HAL_RTC_SetAlarm+0x228>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2201      	movs	r2, #1
 800884c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2202      	movs	r2, #2
 8008852:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d137      	bne.n	80088ca <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008864:	2b00      	cmp	r3, #0
 8008866:	d102      	bne.n	800886e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	2200      	movs	r2, #0
 800886c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	4618      	mov	r0, r3
 8008874:	f000 f942 	bl	8008afc <RTC_ByteToBcd2>
 8008878:	4603      	mov	r3, r0
 800887a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	785b      	ldrb	r3, [r3, #1]
 8008880:	4618      	mov	r0, r3
 8008882:	f000 f93b 	bl	8008afc <RTC_ByteToBcd2>
 8008886:	4603      	mov	r3, r0
 8008888:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800888a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	789b      	ldrb	r3, [r3, #2]
 8008890:	4618      	mov	r0, r3
 8008892:	f000 f933 	bl	8008afc <RTC_ByteToBcd2>
 8008896:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008898:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	7b1b      	ldrb	r3, [r3, #12]
 80088a0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80088a2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 f925 	bl	8008afc <RTC_ByteToBcd2>
 80088b2:	4603      	mov	r3, r0
 80088b4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80088b6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80088be:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80088c4:	4313      	orrs	r3, r2
 80088c6:	61fb      	str	r3, [r7, #28]
 80088c8:	e023      	b.n	8008912 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d102      	bne.n	80088de <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	2200      	movs	r2, #0
 80088dc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	785b      	ldrb	r3, [r3, #1]
 80088e8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80088ea:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80088f0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	7b1b      	ldrb	r3, [r3, #12]
 80088f6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80088f8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008900:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008902:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008908:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800890e:	4313      	orrs	r3, r2
 8008910:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	69db      	ldr	r3, [r3, #28]
 800891a:	4313      	orrs	r3, r2
 800891c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	22ca      	movs	r2, #202	; 0xca
 8008924:	625a      	str	r2, [r3, #36]	; 0x24
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2253      	movs	r2, #83	; 0x53
 800892c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008936:	d13f      	bne.n	80089b8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	689a      	ldr	r2, [r3, #8]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008946:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689a      	ldr	r2, [r3, #8]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008956:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008958:	f7fb fc74 	bl	8004244 <HAL_GetTick>
 800895c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800895e:	e013      	b.n	8008988 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008960:	f7fb fc70 	bl	8004244 <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800896e:	d90b      	bls.n	8008988 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	22ff      	movs	r2, #255	; 0xff
 8008976:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2203      	movs	r2, #3
 800897c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e061      	b.n	8008a4c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0e4      	beq.n	8008960 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	69fa      	ldr	r2, [r7, #28]
 800899c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	697a      	ldr	r2, [r7, #20]
 80089a4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089b4:	609a      	str	r2, [r3, #8]
 80089b6:	e03e      	b.n	8008a36 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	689a      	ldr	r2, [r3, #8]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80089c6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	689a      	ldr	r2, [r3, #8]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089d6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80089d8:	f7fb fc34 	bl	8004244 <HAL_GetTick>
 80089dc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80089de:	e013      	b.n	8008a08 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80089e0:	f7fb fc30 	bl	8004244 <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089ee:	d90b      	bls.n	8008a08 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	22ff      	movs	r2, #255	; 0xff
 80089f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2203      	movs	r2, #3
 80089fc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e021      	b.n	8008a4c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d0e4      	beq.n	80089e0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	69fa      	ldr	r2, [r7, #28]
 8008a1c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	689a      	ldr	r2, [r3, #8]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a34:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	22ff      	movs	r2, #255	; 0xff
 8008a3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2201      	movs	r2, #1
 8008a42:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3724      	adds	r7, #36	; 0x24
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd90      	pop	{r4, r7, pc}

08008a54 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68da      	ldr	r2, [r3, #12]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008a6e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a70:	f7fb fbe8 	bl	8004244 <HAL_GetTick>
 8008a74:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008a76:	e009      	b.n	8008a8c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008a78:	f7fb fbe4 	bl	8004244 <HAL_GetTick>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a86:	d901      	bls.n	8008a8c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	e007      	b.n	8008a9c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	f003 0320 	and.w	r3, r3, #32
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d0ee      	beq.n	8008a78 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d119      	bne.n	8008af2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ac8:	f7fb fbbc 	bl	8004244 <HAL_GetTick>
 8008acc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ace:	e009      	b.n	8008ae4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008ad0:	f7fb fbb8 	bl	8004244 <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ade:	d901      	bls.n	8008ae4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e007      	b.n	8008af4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d0ee      	beq.n	8008ad0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008b0a:	e005      	b.n	8008b18 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008b12:	79fb      	ldrb	r3, [r7, #7]
 8008b14:	3b0a      	subs	r3, #10
 8008b16:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008b18:	79fb      	ldrb	r3, [r7, #7]
 8008b1a:	2b09      	cmp	r3, #9
 8008b1c:	d8f6      	bhi.n	8008b0c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	011b      	lsls	r3, r3, #4
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	79fb      	ldrb	r3, [r7, #7]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	b2db      	uxtb	r3, r3
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008b44:	2300      	movs	r3, #0
 8008b46:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	7f1b      	ldrb	r3, [r3, #28]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d101      	bne.n	8008b54 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008b50:	2302      	movs	r3, #2
 8008b52:	e03e      	b.n	8008bd2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2201      	movs	r2, #1
 8008b58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	689a      	ldr	r2, [r3, #8]
 8008b66:	4b1e      	ldr	r3, [pc, #120]	; (8008be0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008b68:	4013      	ands	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	22ca      	movs	r2, #202	; 0xca
 8008b7a:	625a      	str	r2, [r3, #36]	; 0x24
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2253      	movs	r2, #83	; 0x53
 8008b82:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f022 0206 	bic.w	r2, r2, #6
 8008b92:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	697a      	ldr	r2, [r7, #20]
 8008baa:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689a      	ldr	r2, [r3, #8]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bba:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	22ff      	movs	r2, #255	; 0xff
 8008bc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	371c      	adds	r7, #28
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	fffff7f7 	.word	0xfffff7f7

08008be4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e025      	b.n	8008c44 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d106      	bne.n	8008c12 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7fb fa15 	bl	800403c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2202      	movs	r2, #2
 8008c16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	3304      	adds	r3, #4
 8008c22:	4619      	mov	r1, r3
 8008c24:	4610      	mov	r0, r2
 8008c26:	f001 ff73 	bl	800ab10 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6818      	ldr	r0, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	461a      	mov	r2, r3
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	f001 ffc7 	bl	800abc8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c5e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008c60:	7dfb      	ldrb	r3, [r7, #23]
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d101      	bne.n	8008c6a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008c66:	2302      	movs	r3, #2
 8008c68:	e021      	b.n	8008cae <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008c6a:	7dfb      	ldrb	r3, [r7, #23]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d002      	beq.n	8008c76 <HAL_SDRAM_SendCommand+0x2a>
 8008c70:	7dfb      	ldrb	r3, [r7, #23]
 8008c72:	2b05      	cmp	r3, #5
 8008c74:	d118      	bne.n	8008ca8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2202      	movs	r2, #2
 8008c7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	68b9      	ldr	r1, [r7, #8]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f002 f808 	bl	800ac9c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d104      	bne.n	8008c9e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2205      	movs	r2, #5
 8008c98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008c9c:	e006      	b.n	8008cac <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008ca6:	e001      	b.n	8008cac <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e000      	b.n	8008cae <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3718      	adds	r7, #24
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b082      	sub	sp, #8
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d101      	bne.n	8008cd0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008ccc:	2302      	movs	r3, #2
 8008cce:	e016      	b.n	8008cfe <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d10f      	bne.n	8008cfc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6839      	ldr	r1, [r7, #0]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f001 fffa 	bl	800ace4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	e000      	b.n	8008cfe <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d101      	bne.n	8008d18 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e09d      	b.n	8008e54 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d108      	bne.n	8008d32 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d28:	d009      	beq.n	8008d3e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	61da      	str	r2, [r3, #28]
 8008d30:	e005      	b.n	8008d3e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d106      	bne.n	8008d5e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7fa fedb 	bl	8003b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2202      	movs	r2, #2
 8008d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d74:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d7e:	d902      	bls.n	8008d86 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008d80:	2300      	movs	r3, #0
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	e002      	b.n	8008d8c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008d94:	d007      	beq.n	8008da6 <HAL_SPI_Init+0xa0>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d9e:	d002      	beq.n	8008da6 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008db6:	431a      	orrs	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	f003 0302 	and.w	r3, r3, #2
 8008dc0:	431a      	orrs	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dde:	431a      	orrs	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de8:	ea42 0103 	orr.w	r1, r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	0c1b      	lsrs	r3, r3, #16
 8008e02:	f003 0204 	and.w	r2, r3, #4
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0a:	f003 0310 	and.w	r3, r3, #16
 8008e0e:	431a      	orrs	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e14:	f003 0308 	and.w	r3, r3, #8
 8008e18:	431a      	orrs	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008e22:	ea42 0103 	orr.w	r1, r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	430a      	orrs	r2, r1
 8008e32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	69da      	ldr	r2, [r3, #28]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b088      	sub	sp, #32
 8008e60:	af02      	add	r7, sp, #8
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	603b      	str	r3, [r7, #0]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e78:	d112      	bne.n	8008ea0 <HAL_SPI_Receive+0x44>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10e      	bne.n	8008ea0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2204      	movs	r2, #4
 8008e86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008e8a:	88fa      	ldrh	r2, [r7, #6]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	4613      	mov	r3, r2
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	68b9      	ldr	r1, [r7, #8]
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f000 f910 	bl	80090bc <HAL_SPI_TransmitReceive>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	e109      	b.n	80090b4 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d101      	bne.n	8008eae <HAL_SPI_Receive+0x52>
 8008eaa:	2302      	movs	r3, #2
 8008eac:	e102      	b.n	80090b4 <HAL_SPI_Receive+0x258>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008eb6:	f7fb f9c5 	bl	8004244 <HAL_GetTick>
 8008eba:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d002      	beq.n	8008ece <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008ec8:	2302      	movs	r3, #2
 8008eca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008ecc:	e0e9      	b.n	80090a2 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d002      	beq.n	8008eda <HAL_SPI_Receive+0x7e>
 8008ed4:	88fb      	ldrh	r3, [r7, #6]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d102      	bne.n	8008ee0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008ede:	e0e0      	b.n	80090a2 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2204      	movs	r2, #4
 8008ee4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	88fa      	ldrh	r2, [r7, #6]
 8008ef8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	88fa      	ldrh	r2, [r7, #6]
 8008f00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f2a:	d908      	bls.n	8008f3e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f3a:	605a      	str	r2, [r3, #4]
 8008f3c:	e007      	b.n	8008f4e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	685a      	ldr	r2, [r3, #4]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f4c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f56:	d10f      	bne.n	8008f78 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008f76:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f82:	2b40      	cmp	r3, #64	; 0x40
 8008f84:	d007      	beq.n	8008f96 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f94:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f9e:	d867      	bhi.n	8009070 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008fa0:	e030      	b.n	8009004 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	f003 0301 	and.w	r3, r3, #1
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d117      	bne.n	8008fe0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f103 020c 	add.w	r2, r3, #12
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fbc:	7812      	ldrb	r2, [r2, #0]
 8008fbe:	b2d2      	uxtb	r2, r2
 8008fc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc6:	1c5a      	adds	r2, r3, #1
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008fde:	e011      	b.n	8009004 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fe0:	f7fb f930 	bl	8004244 <HAL_GetTick>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d803      	bhi.n	8008ff8 <HAL_SPI_Receive+0x19c>
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff6:	d102      	bne.n	8008ffe <HAL_SPI_Receive+0x1a2>
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d102      	bne.n	8009004 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008ffe:	2303      	movs	r3, #3
 8009000:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009002:	e04e      	b.n	80090a2 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800900a:	b29b      	uxth	r3, r3
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1c8      	bne.n	8008fa2 <HAL_SPI_Receive+0x146>
 8009010:	e034      	b.n	800907c <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	2b01      	cmp	r3, #1
 800901e:	d115      	bne.n	800904c <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68da      	ldr	r2, [r3, #12]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902a:	b292      	uxth	r2, r2
 800902c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009032:	1c9a      	adds	r2, r3, #2
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800903e:	b29b      	uxth	r3, r3
 8009040:	3b01      	subs	r3, #1
 8009042:	b29a      	uxth	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800904a:	e011      	b.n	8009070 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800904c:	f7fb f8fa 	bl	8004244 <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	429a      	cmp	r2, r3
 800905a:	d803      	bhi.n	8009064 <HAL_SPI_Receive+0x208>
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009062:	d102      	bne.n	800906a <HAL_SPI_Receive+0x20e>
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d102      	bne.n	8009070 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800906e:	e018      	b.n	80090a2 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009076:	b29b      	uxth	r3, r3
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1ca      	bne.n	8009012 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 fb4d 	bl	8009720 <SPI_EndRxTransaction>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d002      	beq.n	8009092 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2220      	movs	r2, #32
 8009090:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009096:	2b00      	cmp	r3, #0
 8009098:	d002      	beq.n	80090a0 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	75fb      	strb	r3, [r7, #23]
 800909e:	e000      	b.n	80090a2 <HAL_SPI_Receive+0x246>
  }

error :
 80090a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3718      	adds	r7, #24
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08a      	sub	sp, #40	; 0x28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
 80090c8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80090ca:	2301      	movs	r3, #1
 80090cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d101      	bne.n	80090e2 <HAL_SPI_TransmitReceive+0x26>
 80090de:	2302      	movs	r3, #2
 80090e0:	e1fb      	b.n	80094da <HAL_SPI_TransmitReceive+0x41e>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090ea:	f7fb f8ab 	bl	8004244 <HAL_GetTick>
 80090ee:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80090f6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80090fe:	887b      	ldrh	r3, [r7, #2]
 8009100:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009102:	887b      	ldrh	r3, [r7, #2]
 8009104:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009106:	7efb      	ldrb	r3, [r7, #27]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d00e      	beq.n	800912a <HAL_SPI_TransmitReceive+0x6e>
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009112:	d106      	bne.n	8009122 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d102      	bne.n	8009122 <HAL_SPI_TransmitReceive+0x66>
 800911c:	7efb      	ldrb	r3, [r7, #27]
 800911e:	2b04      	cmp	r3, #4
 8009120:	d003      	beq.n	800912a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009122:	2302      	movs	r3, #2
 8009124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009128:	e1cd      	b.n	80094c6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d005      	beq.n	800913c <HAL_SPI_TransmitReceive+0x80>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <HAL_SPI_TransmitReceive+0x80>
 8009136:	887b      	ldrh	r3, [r7, #2]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d103      	bne.n	8009144 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009142:	e1c0      	b.n	80094c6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b04      	cmp	r3, #4
 800914e:	d003      	beq.n	8009158 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2205      	movs	r2, #5
 8009154:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	887a      	ldrh	r2, [r7, #2]
 8009168:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	887a      	ldrh	r2, [r7, #2]
 8009170:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	887a      	ldrh	r2, [r7, #2]
 800917e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	887a      	ldrh	r2, [r7, #2]
 8009184:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800919a:	d802      	bhi.n	80091a2 <HAL_SPI_TransmitReceive+0xe6>
 800919c:	8a3b      	ldrh	r3, [r7, #16]
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d908      	bls.n	80091b4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	685a      	ldr	r2, [r3, #4]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80091b0:	605a      	str	r2, [r3, #4]
 80091b2:	e007      	b.n	80091c4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	685a      	ldr	r2, [r3, #4]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80091c2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ce:	2b40      	cmp	r3, #64	; 0x40
 80091d0:	d007      	beq.n	80091e2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091ea:	d97c      	bls.n	80092e6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <HAL_SPI_TransmitReceive+0x13e>
 80091f4:	8a7b      	ldrh	r3, [r7, #18]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d169      	bne.n	80092ce <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fe:	881a      	ldrh	r2, [r3, #0]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920a:	1c9a      	adds	r2, r3, #2
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009214:	b29b      	uxth	r3, r3
 8009216:	3b01      	subs	r3, #1
 8009218:	b29a      	uxth	r2, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800921e:	e056      	b.n	80092ce <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f003 0302 	and.w	r3, r3, #2
 800922a:	2b02      	cmp	r3, #2
 800922c:	d11b      	bne.n	8009266 <HAL_SPI_TransmitReceive+0x1aa>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009232:	b29b      	uxth	r3, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	d016      	beq.n	8009266 <HAL_SPI_TransmitReceive+0x1aa>
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	2b01      	cmp	r3, #1
 800923c:	d113      	bne.n	8009266 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009242:	881a      	ldrh	r2, [r3, #0]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924e:	1c9a      	adds	r2, r3, #2
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009258:	b29b      	uxth	r3, r3
 800925a:	3b01      	subs	r3, #1
 800925c:	b29a      	uxth	r2, r3
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f003 0301 	and.w	r3, r3, #1
 8009270:	2b01      	cmp	r3, #1
 8009272:	d11c      	bne.n	80092ae <HAL_SPI_TransmitReceive+0x1f2>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800927a:	b29b      	uxth	r3, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	d016      	beq.n	80092ae <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68da      	ldr	r2, [r3, #12]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928a:	b292      	uxth	r2, r2
 800928c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009292:	1c9a      	adds	r2, r3, #2
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800929e:	b29b      	uxth	r3, r3
 80092a0:	3b01      	subs	r3, #1
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80092aa:	2301      	movs	r3, #1
 80092ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80092ae:	f7fa ffc9 	bl	8004244 <HAL_GetTick>
 80092b2:	4602      	mov	r2, r0
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d807      	bhi.n	80092ce <HAL_SPI_TransmitReceive+0x212>
 80092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c4:	d003      	beq.n	80092ce <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80092cc:	e0fb      	b.n	80094c6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1a3      	bne.n	8009220 <HAL_SPI_TransmitReceive+0x164>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80092de:	b29b      	uxth	r3, r3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d19d      	bne.n	8009220 <HAL_SPI_TransmitReceive+0x164>
 80092e4:	e0df      	b.n	80094a6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <HAL_SPI_TransmitReceive+0x23a>
 80092ee:	8a7b      	ldrh	r3, [r7, #18]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	f040 80cb 	bne.w	800948c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d912      	bls.n	8009326 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009304:	881a      	ldrh	r2, [r3, #0]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009310:	1c9a      	adds	r2, r3, #2
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800931a:	b29b      	uxth	r3, r3
 800931c:	3b02      	subs	r3, #2
 800931e:	b29a      	uxth	r2, r3
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009324:	e0b2      	b.n	800948c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	330c      	adds	r3, #12
 8009330:	7812      	ldrb	r2, [r2, #0]
 8009332:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009338:	1c5a      	adds	r2, r3, #1
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009342:	b29b      	uxth	r3, r3
 8009344:	3b01      	subs	r3, #1
 8009346:	b29a      	uxth	r2, r3
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800934c:	e09e      	b.n	800948c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	f003 0302 	and.w	r3, r3, #2
 8009358:	2b02      	cmp	r3, #2
 800935a:	d134      	bne.n	80093c6 <HAL_SPI_TransmitReceive+0x30a>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009360:	b29b      	uxth	r3, r3
 8009362:	2b00      	cmp	r3, #0
 8009364:	d02f      	beq.n	80093c6 <HAL_SPI_TransmitReceive+0x30a>
 8009366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009368:	2b01      	cmp	r3, #1
 800936a:	d12c      	bne.n	80093c6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009370:	b29b      	uxth	r3, r3
 8009372:	2b01      	cmp	r3, #1
 8009374:	d912      	bls.n	800939c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937a:	881a      	ldrh	r2, [r3, #0]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009386:	1c9a      	adds	r2, r3, #2
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009390:	b29b      	uxth	r3, r3
 8009392:	3b02      	subs	r3, #2
 8009394:	b29a      	uxth	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	87da      	strh	r2, [r3, #62]	; 0x3e
 800939a:	e012      	b.n	80093c2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	330c      	adds	r3, #12
 80093a6:	7812      	ldrb	r2, [r2, #0]
 80093a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ae:	1c5a      	adds	r2, r3, #1
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	3b01      	subs	r3, #1
 80093bc:	b29a      	uxth	r2, r3
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80093c2:	2300      	movs	r3, #0
 80093c4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d148      	bne.n	8009466 <HAL_SPI_TransmitReceive+0x3aa>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093da:	b29b      	uxth	r3, r3
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d042      	beq.n	8009466 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d923      	bls.n	8009434 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68da      	ldr	r2, [r3, #12]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f6:	b292      	uxth	r2, r2
 80093f8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fe:	1c9a      	adds	r2, r3, #2
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800940a:	b29b      	uxth	r3, r3
 800940c:	3b02      	subs	r3, #2
 800940e:	b29a      	uxth	r2, r3
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800941c:	b29b      	uxth	r3, r3
 800941e:	2b01      	cmp	r3, #1
 8009420:	d81f      	bhi.n	8009462 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	685a      	ldr	r2, [r3, #4]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009430:	605a      	str	r2, [r3, #4]
 8009432:	e016      	b.n	8009462 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f103 020c 	add.w	r2, r3, #12
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009440:	7812      	ldrb	r2, [r2, #0]
 8009442:	b2d2      	uxtb	r2, r2
 8009444:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944a:	1c5a      	adds	r2, r3, #1
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009456:	b29b      	uxth	r3, r3
 8009458:	3b01      	subs	r3, #1
 800945a:	b29a      	uxth	r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009462:	2301      	movs	r3, #1
 8009464:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009466:	f7fa feed 	bl	8004244 <HAL_GetTick>
 800946a:	4602      	mov	r2, r0
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009472:	429a      	cmp	r2, r3
 8009474:	d803      	bhi.n	800947e <HAL_SPI_TransmitReceive+0x3c2>
 8009476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947c:	d102      	bne.n	8009484 <HAL_SPI_TransmitReceive+0x3c8>
 800947e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009480:	2b00      	cmp	r3, #0
 8009482:	d103      	bne.n	800948c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009484:	2303      	movs	r3, #3
 8009486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800948a:	e01c      	b.n	80094c6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009490:	b29b      	uxth	r3, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	f47f af5b 	bne.w	800934e <HAL_SPI_TransmitReceive+0x292>
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800949e:	b29b      	uxth	r3, r3
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f47f af54 	bne.w	800934e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094a6:	69fa      	ldr	r2, [r7, #28]
 80094a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f000 f9b4 	bl	8009818 <SPI_EndRxTxTransaction>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d006      	beq.n	80094c4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2220      	movs	r2, #32
 80094c0:	661a      	str	r2, [r3, #96]	; 0x60
 80094c2:	e000      	b.n	80094c6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80094c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80094d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3728      	adds	r7, #40	; 0x28
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
	...

080094e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b088      	sub	sp, #32
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	603b      	str	r3, [r7, #0]
 80094f0:	4613      	mov	r3, r2
 80094f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80094f4:	f7fa fea6 	bl	8004244 <HAL_GetTick>
 80094f8:	4602      	mov	r2, r0
 80094fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fc:	1a9b      	subs	r3, r3, r2
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	4413      	add	r3, r2
 8009502:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009504:	f7fa fe9e 	bl	8004244 <HAL_GetTick>
 8009508:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800950a:	4b39      	ldr	r3, [pc, #228]	; (80095f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	015b      	lsls	r3, r3, #5
 8009510:	0d1b      	lsrs	r3, r3, #20
 8009512:	69fa      	ldr	r2, [r7, #28]
 8009514:	fb02 f303 	mul.w	r3, r2, r3
 8009518:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800951a:	e054      	b.n	80095c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009522:	d050      	beq.n	80095c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009524:	f7fa fe8e 	bl	8004244 <HAL_GetTick>
 8009528:	4602      	mov	r2, r0
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	69fa      	ldr	r2, [r7, #28]
 8009530:	429a      	cmp	r2, r3
 8009532:	d902      	bls.n	800953a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d13d      	bne.n	80095b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009548:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009552:	d111      	bne.n	8009578 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800955c:	d004      	beq.n	8009568 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009566:	d107      	bne.n	8009578 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009576:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009580:	d10f      	bne.n	80095a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009590:	601a      	str	r2, [r3, #0]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80095b2:	2303      	movs	r3, #3
 80095b4:	e017      	b.n	80095e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	3b01      	subs	r3, #1
 80095c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	689a      	ldr	r2, [r3, #8]
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	4013      	ands	r3, r2
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	bf0c      	ite	eq
 80095d6:	2301      	moveq	r3, #1
 80095d8:	2300      	movne	r3, #0
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	461a      	mov	r2, r3
 80095de:	79fb      	ldrb	r3, [r7, #7]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d19b      	bne.n	800951c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3720      	adds	r7, #32
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	2000004c 	.word	0x2000004c

080095f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b08a      	sub	sp, #40	; 0x28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009602:	2300      	movs	r3, #0
 8009604:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009606:	f7fa fe1d 	bl	8004244 <HAL_GetTick>
 800960a:	4602      	mov	r2, r0
 800960c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960e:	1a9b      	subs	r3, r3, r2
 8009610:	683a      	ldr	r2, [r7, #0]
 8009612:	4413      	add	r3, r2
 8009614:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009616:	f7fa fe15 	bl	8004244 <HAL_GetTick>
 800961a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	330c      	adds	r3, #12
 8009622:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009624:	4b3d      	ldr	r3, [pc, #244]	; (800971c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	4613      	mov	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4413      	add	r3, r2
 800962e:	00da      	lsls	r2, r3, #3
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	0d1b      	lsrs	r3, r3, #20
 8009634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009636:	fb02 f303 	mul.w	r3, r2, r3
 800963a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800963c:	e060      	b.n	8009700 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009644:	d107      	bne.n	8009656 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d104      	bne.n	8009656 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	b2db      	uxtb	r3, r3
 8009652:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009654:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800965c:	d050      	beq.n	8009700 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800965e:	f7fa fdf1 	bl	8004244 <HAL_GetTick>
 8009662:	4602      	mov	r2, r0
 8009664:	6a3b      	ldr	r3, [r7, #32]
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800966a:	429a      	cmp	r2, r3
 800966c:	d902      	bls.n	8009674 <SPI_WaitFifoStateUntilTimeout+0x80>
 800966e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009670:	2b00      	cmp	r3, #0
 8009672:	d13d      	bne.n	80096f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	685a      	ldr	r2, [r3, #4]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009682:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800968c:	d111      	bne.n	80096b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009696:	d004      	beq.n	80096a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096a0:	d107      	bne.n	80096b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096ba:	d10f      	bne.n	80096dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096ca:	601a      	str	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e010      	b.n	8009712 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80096f6:	2300      	movs	r3, #0
 80096f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	3b01      	subs	r3, #1
 80096fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	689a      	ldr	r2, [r3, #8]
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	4013      	ands	r3, r2
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	429a      	cmp	r2, r3
 800970e:	d196      	bne.n	800963e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3728      	adds	r7, #40	; 0x28
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	2000004c 	.word	0x2000004c

08009720 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b088      	sub	sp, #32
 8009724:	af02      	add	r7, sp, #8
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009734:	d111      	bne.n	800975a <SPI_EndRxTransaction+0x3a>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800973e:	d004      	beq.n	800974a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009748:	d107      	bne.n	800975a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009758:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009762:	d112      	bne.n	800978a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	2200      	movs	r2, #0
 800976c:	2180      	movs	r1, #128	; 0x80
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f7ff feb8 	bl	80094e4 <SPI_WaitFlagStateUntilTimeout>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d021      	beq.n	80097be <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800977e:	f043 0220 	orr.w	r2, r3, #32
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009786:	2303      	movs	r3, #3
 8009788:	e03d      	b.n	8009806 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800978a:	4b21      	ldr	r3, [pc, #132]	; (8009810 <SPI_EndRxTransaction+0xf0>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a21      	ldr	r2, [pc, #132]	; (8009814 <SPI_EndRxTransaction+0xf4>)
 8009790:	fba2 2303 	umull	r2, r3, r2, r3
 8009794:	0d5b      	lsrs	r3, r3, #21
 8009796:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800979a:	fb02 f303 	mul.w	r3, r2, r3
 800979e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00a      	beq.n	80097bc <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097b6:	2b80      	cmp	r3, #128	; 0x80
 80097b8:	d0f2      	beq.n	80097a0 <SPI_EndRxTransaction+0x80>
 80097ba:	e000      	b.n	80097be <SPI_EndRxTransaction+0x9e>
        break;
 80097bc:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097c6:	d11d      	bne.n	8009804 <SPI_EndRxTransaction+0xe4>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097d0:	d004      	beq.n	80097dc <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097da:	d113      	bne.n	8009804 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f7ff ff03 	bl	80095f4 <SPI_WaitFifoStateUntilTimeout>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d007      	beq.n	8009804 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097f8:	f043 0220 	orr.w	r2, r3, #32
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009800:	2303      	movs	r3, #3
 8009802:	e000      	b.n	8009806 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	2000004c 	.word	0x2000004c
 8009814:	165e9f81 	.word	0x165e9f81

08009818 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b088      	sub	sp, #32
 800981c:	af02      	add	r7, sp, #8
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	2200      	movs	r2, #0
 800982c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f7ff fedf 	bl	80095f4 <SPI_WaitFifoStateUntilTimeout>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d007      	beq.n	800984c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009840:	f043 0220 	orr.w	r2, r3, #32
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009848:	2303      	movs	r3, #3
 800984a:	e046      	b.n	80098da <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800984c:	4b25      	ldr	r3, [pc, #148]	; (80098e4 <SPI_EndRxTxTransaction+0xcc>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a25      	ldr	r2, [pc, #148]	; (80098e8 <SPI_EndRxTxTransaction+0xd0>)
 8009852:	fba2 2303 	umull	r2, r3, r2, r3
 8009856:	0d5b      	lsrs	r3, r3, #21
 8009858:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800985c:	fb02 f303 	mul.w	r3, r2, r3
 8009860:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800986a:	d112      	bne.n	8009892 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	2200      	movs	r2, #0
 8009874:	2180      	movs	r1, #128	; 0x80
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f7ff fe34 	bl	80094e4 <SPI_WaitFlagStateUntilTimeout>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d016      	beq.n	80098b0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009886:	f043 0220 	orr.w	r2, r3, #32
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e023      	b.n	80098da <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00a      	beq.n	80098ae <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	3b01      	subs	r3, #1
 800989c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098a8:	2b80      	cmp	r3, #128	; 0x80
 80098aa:	d0f2      	beq.n	8009892 <SPI_EndRxTxTransaction+0x7a>
 80098ac:	e000      	b.n	80098b0 <SPI_EndRxTxTransaction+0x98>
        break;
 80098ae:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f7ff fe99 	bl	80095f4 <SPI_WaitFifoStateUntilTimeout>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d007      	beq.n	80098d8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098cc:	f043 0220 	orr.w	r2, r3, #32
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098d4:	2303      	movs	r3, #3
 80098d6:	e000      	b.n	80098da <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3718      	adds	r7, #24
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	2000004c 	.word	0x2000004c
 80098e8:	165e9f81 	.word	0x165e9f81

080098ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e049      	b.n	8009992 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009904:	b2db      	uxtb	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d106      	bne.n	8009918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7fa f960 	bl	8003bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3304      	adds	r3, #4
 8009928:	4619      	mov	r1, r3
 800992a:	4610      	mov	r0, r2
 800992c:	f000 fac0 	bl	8009eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d001      	beq.n	80099b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e054      	b.n	8009a5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2202      	movs	r2, #2
 80099b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68da      	ldr	r2, [r3, #12]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f042 0201 	orr.w	r2, r2, #1
 80099ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a26      	ldr	r2, [pc, #152]	; (8009a6c <HAL_TIM_Base_Start_IT+0xd0>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d022      	beq.n	8009a1c <HAL_TIM_Base_Start_IT+0x80>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099de:	d01d      	beq.n	8009a1c <HAL_TIM_Base_Start_IT+0x80>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a22      	ldr	r2, [pc, #136]	; (8009a70 <HAL_TIM_Base_Start_IT+0xd4>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d018      	beq.n	8009a1c <HAL_TIM_Base_Start_IT+0x80>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a21      	ldr	r2, [pc, #132]	; (8009a74 <HAL_TIM_Base_Start_IT+0xd8>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d013      	beq.n	8009a1c <HAL_TIM_Base_Start_IT+0x80>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a1f      	ldr	r2, [pc, #124]	; (8009a78 <HAL_TIM_Base_Start_IT+0xdc>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d00e      	beq.n	8009a1c <HAL_TIM_Base_Start_IT+0x80>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a1e      	ldr	r2, [pc, #120]	; (8009a7c <HAL_TIM_Base_Start_IT+0xe0>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d009      	beq.n	8009a1c <HAL_TIM_Base_Start_IT+0x80>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a1c      	ldr	r2, [pc, #112]	; (8009a80 <HAL_TIM_Base_Start_IT+0xe4>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d004      	beq.n	8009a1c <HAL_TIM_Base_Start_IT+0x80>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a1b      	ldr	r2, [pc, #108]	; (8009a84 <HAL_TIM_Base_Start_IT+0xe8>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d115      	bne.n	8009a48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	689a      	ldr	r2, [r3, #8]
 8009a22:	4b19      	ldr	r3, [pc, #100]	; (8009a88 <HAL_TIM_Base_Start_IT+0xec>)
 8009a24:	4013      	ands	r3, r2
 8009a26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b06      	cmp	r3, #6
 8009a2c:	d015      	beq.n	8009a5a <HAL_TIM_Base_Start_IT+0xbe>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a34:	d011      	beq.n	8009a5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f042 0201 	orr.w	r2, r2, #1
 8009a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a46:	e008      	b.n	8009a5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f042 0201 	orr.w	r2, r2, #1
 8009a56:	601a      	str	r2, [r3, #0]
 8009a58:	e000      	b.n	8009a5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	40010000 	.word	0x40010000
 8009a70:	40000400 	.word	0x40000400
 8009a74:	40000800 	.word	0x40000800
 8009a78:	40000c00 	.word	0x40000c00
 8009a7c:	40010400 	.word	0x40010400
 8009a80:	40014000 	.word	0x40014000
 8009a84:	40001800 	.word	0x40001800
 8009a88:	00010007 	.word	0x00010007

08009a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	f003 0302 	and.w	r3, r3, #2
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d122      	bne.n	8009ae8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	f003 0302 	and.w	r3, r3, #2
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d11b      	bne.n	8009ae8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f06f 0202 	mvn.w	r2, #2
 8009ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	f003 0303 	and.w	r3, r3, #3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d003      	beq.n	8009ad6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f9d0 	bl	8009e74 <HAL_TIM_IC_CaptureCallback>
 8009ad4:	e005      	b.n	8009ae2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f9c2 	bl	8009e60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f9d3 	bl	8009e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	f003 0304 	and.w	r3, r3, #4
 8009af2:	2b04      	cmp	r3, #4
 8009af4:	d122      	bne.n	8009b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	f003 0304 	and.w	r3, r3, #4
 8009b00:	2b04      	cmp	r3, #4
 8009b02:	d11b      	bne.n	8009b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f06f 0204 	mvn.w	r2, #4
 8009b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2202      	movs	r2, #2
 8009b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d003      	beq.n	8009b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 f9a6 	bl	8009e74 <HAL_TIM_IC_CaptureCallback>
 8009b28:	e005      	b.n	8009b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f998 	bl	8009e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f9a9 	bl	8009e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	f003 0308 	and.w	r3, r3, #8
 8009b46:	2b08      	cmp	r3, #8
 8009b48:	d122      	bne.n	8009b90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	f003 0308 	and.w	r3, r3, #8
 8009b54:	2b08      	cmp	r3, #8
 8009b56:	d11b      	bne.n	8009b90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f06f 0208 	mvn.w	r2, #8
 8009b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2204      	movs	r2, #4
 8009b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	69db      	ldr	r3, [r3, #28]
 8009b6e:	f003 0303 	and.w	r3, r3, #3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d003      	beq.n	8009b7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f97c 	bl	8009e74 <HAL_TIM_IC_CaptureCallback>
 8009b7c:	e005      	b.n	8009b8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f96e 	bl	8009e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f97f 	bl	8009e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	f003 0310 	and.w	r3, r3, #16
 8009b9a:	2b10      	cmp	r3, #16
 8009b9c:	d122      	bne.n	8009be4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	f003 0310 	and.w	r3, r3, #16
 8009ba8:	2b10      	cmp	r3, #16
 8009baa:	d11b      	bne.n	8009be4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f06f 0210 	mvn.w	r2, #16
 8009bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2208      	movs	r2, #8
 8009bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	69db      	ldr	r3, [r3, #28]
 8009bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f952 	bl	8009e74 <HAL_TIM_IC_CaptureCallback>
 8009bd0:	e005      	b.n	8009bde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f944 	bl	8009e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f955 	bl	8009e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d10e      	bne.n	8009c10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	f003 0301 	and.w	r3, r3, #1
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d107      	bne.n	8009c10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f06f 0201 	mvn.w	r2, #1
 8009c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7f8 fae0 	bl	80021d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c1a:	2b80      	cmp	r3, #128	; 0x80
 8009c1c:	d10e      	bne.n	8009c3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c28:	2b80      	cmp	r3, #128	; 0x80
 8009c2a:	d107      	bne.n	8009c3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fb0c 	bl	800a254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c4a:	d10e      	bne.n	8009c6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c56:	2b80      	cmp	r3, #128	; 0x80
 8009c58:	d107      	bne.n	8009c6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 faff 	bl	800a268 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c74:	2b40      	cmp	r3, #64	; 0x40
 8009c76:	d10e      	bne.n	8009c96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c82:	2b40      	cmp	r3, #64	; 0x40
 8009c84:	d107      	bne.n	8009c96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 f903 	bl	8009e9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	f003 0320 	and.w	r3, r3, #32
 8009ca0:	2b20      	cmp	r3, #32
 8009ca2:	d10e      	bne.n	8009cc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	f003 0320 	and.w	r3, r3, #32
 8009cae:	2b20      	cmp	r3, #32
 8009cb0:	d107      	bne.n	8009cc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f06f 0220 	mvn.w	r2, #32
 8009cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fabf 	bl	800a240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cc2:	bf00      	nop
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
	...

08009ccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d101      	bne.n	8009ce8 <HAL_TIM_ConfigClockSource+0x1c>
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	e0b4      	b.n	8009e52 <HAL_TIM_ConfigClockSource+0x186>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	4b56      	ldr	r3, [pc, #344]	; (8009e5c <HAL_TIM_ConfigClockSource+0x190>)
 8009d04:	4013      	ands	r3, r2
 8009d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d20:	d03e      	beq.n	8009da0 <HAL_TIM_ConfigClockSource+0xd4>
 8009d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d26:	f200 8087 	bhi.w	8009e38 <HAL_TIM_ConfigClockSource+0x16c>
 8009d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d2e:	f000 8086 	beq.w	8009e3e <HAL_TIM_ConfigClockSource+0x172>
 8009d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d36:	d87f      	bhi.n	8009e38 <HAL_TIM_ConfigClockSource+0x16c>
 8009d38:	2b70      	cmp	r3, #112	; 0x70
 8009d3a:	d01a      	beq.n	8009d72 <HAL_TIM_ConfigClockSource+0xa6>
 8009d3c:	2b70      	cmp	r3, #112	; 0x70
 8009d3e:	d87b      	bhi.n	8009e38 <HAL_TIM_ConfigClockSource+0x16c>
 8009d40:	2b60      	cmp	r3, #96	; 0x60
 8009d42:	d050      	beq.n	8009de6 <HAL_TIM_ConfigClockSource+0x11a>
 8009d44:	2b60      	cmp	r3, #96	; 0x60
 8009d46:	d877      	bhi.n	8009e38 <HAL_TIM_ConfigClockSource+0x16c>
 8009d48:	2b50      	cmp	r3, #80	; 0x50
 8009d4a:	d03c      	beq.n	8009dc6 <HAL_TIM_ConfigClockSource+0xfa>
 8009d4c:	2b50      	cmp	r3, #80	; 0x50
 8009d4e:	d873      	bhi.n	8009e38 <HAL_TIM_ConfigClockSource+0x16c>
 8009d50:	2b40      	cmp	r3, #64	; 0x40
 8009d52:	d058      	beq.n	8009e06 <HAL_TIM_ConfigClockSource+0x13a>
 8009d54:	2b40      	cmp	r3, #64	; 0x40
 8009d56:	d86f      	bhi.n	8009e38 <HAL_TIM_ConfigClockSource+0x16c>
 8009d58:	2b30      	cmp	r3, #48	; 0x30
 8009d5a:	d064      	beq.n	8009e26 <HAL_TIM_ConfigClockSource+0x15a>
 8009d5c:	2b30      	cmp	r3, #48	; 0x30
 8009d5e:	d86b      	bhi.n	8009e38 <HAL_TIM_ConfigClockSource+0x16c>
 8009d60:	2b20      	cmp	r3, #32
 8009d62:	d060      	beq.n	8009e26 <HAL_TIM_ConfigClockSource+0x15a>
 8009d64:	2b20      	cmp	r3, #32
 8009d66:	d867      	bhi.n	8009e38 <HAL_TIM_ConfigClockSource+0x16c>
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d05c      	beq.n	8009e26 <HAL_TIM_ConfigClockSource+0x15a>
 8009d6c:	2b10      	cmp	r3, #16
 8009d6e:	d05a      	beq.n	8009e26 <HAL_TIM_ConfigClockSource+0x15a>
 8009d70:	e062      	b.n	8009e38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6818      	ldr	r0, [r3, #0]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	6899      	ldr	r1, [r3, #8]
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	685a      	ldr	r2, [r3, #4]
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	f000 f9af 	bl	800a0e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009d94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	609a      	str	r2, [r3, #8]
      break;
 8009d9e:	e04f      	b.n	8009e40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6818      	ldr	r0, [r3, #0]
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	6899      	ldr	r1, [r3, #8]
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	685a      	ldr	r2, [r3, #4]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	f000 f998 	bl	800a0e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	689a      	ldr	r2, [r3, #8]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009dc2:	609a      	str	r2, [r3, #8]
      break;
 8009dc4:	e03c      	b.n	8009e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6818      	ldr	r0, [r3, #0]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	6859      	ldr	r1, [r3, #4]
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	f000 f90c 	bl	8009ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2150      	movs	r1, #80	; 0x50
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 f965 	bl	800a0ae <TIM_ITRx_SetConfig>
      break;
 8009de4:	e02c      	b.n	8009e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6818      	ldr	r0, [r3, #0]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	6859      	ldr	r1, [r3, #4]
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	461a      	mov	r2, r3
 8009df4:	f000 f92b 	bl	800a04e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2160      	movs	r1, #96	; 0x60
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 f955 	bl	800a0ae <TIM_ITRx_SetConfig>
      break;
 8009e04:	e01c      	b.n	8009e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6818      	ldr	r0, [r3, #0]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	6859      	ldr	r1, [r3, #4]
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	461a      	mov	r2, r3
 8009e14:	f000 f8ec 	bl	8009ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2140      	movs	r1, #64	; 0x40
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 f945 	bl	800a0ae <TIM_ITRx_SetConfig>
      break;
 8009e24:	e00c      	b.n	8009e40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4619      	mov	r1, r3
 8009e30:	4610      	mov	r0, r2
 8009e32:	f000 f93c 	bl	800a0ae <TIM_ITRx_SetConfig>
      break;
 8009e36:	e003      	b.n	8009e40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e3c:	e000      	b.n	8009e40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009e3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	fffeff88 	.word	0xfffeff88

08009e60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a40      	ldr	r2, [pc, #256]	; (8009fc4 <TIM_Base_SetConfig+0x114>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d013      	beq.n	8009ef0 <TIM_Base_SetConfig+0x40>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ece:	d00f      	beq.n	8009ef0 <TIM_Base_SetConfig+0x40>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a3d      	ldr	r2, [pc, #244]	; (8009fc8 <TIM_Base_SetConfig+0x118>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d00b      	beq.n	8009ef0 <TIM_Base_SetConfig+0x40>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a3c      	ldr	r2, [pc, #240]	; (8009fcc <TIM_Base_SetConfig+0x11c>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d007      	beq.n	8009ef0 <TIM_Base_SetConfig+0x40>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a3b      	ldr	r2, [pc, #236]	; (8009fd0 <TIM_Base_SetConfig+0x120>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d003      	beq.n	8009ef0 <TIM_Base_SetConfig+0x40>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a3a      	ldr	r2, [pc, #232]	; (8009fd4 <TIM_Base_SetConfig+0x124>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d108      	bne.n	8009f02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a2f      	ldr	r2, [pc, #188]	; (8009fc4 <TIM_Base_SetConfig+0x114>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d02b      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f10:	d027      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a2c      	ldr	r2, [pc, #176]	; (8009fc8 <TIM_Base_SetConfig+0x118>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d023      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a2b      	ldr	r2, [pc, #172]	; (8009fcc <TIM_Base_SetConfig+0x11c>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d01f      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a2a      	ldr	r2, [pc, #168]	; (8009fd0 <TIM_Base_SetConfig+0x120>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d01b      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a29      	ldr	r2, [pc, #164]	; (8009fd4 <TIM_Base_SetConfig+0x124>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d017      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a28      	ldr	r2, [pc, #160]	; (8009fd8 <TIM_Base_SetConfig+0x128>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d013      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a27      	ldr	r2, [pc, #156]	; (8009fdc <TIM_Base_SetConfig+0x12c>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d00f      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a26      	ldr	r2, [pc, #152]	; (8009fe0 <TIM_Base_SetConfig+0x130>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d00b      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a25      	ldr	r2, [pc, #148]	; (8009fe4 <TIM_Base_SetConfig+0x134>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d007      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a24      	ldr	r2, [pc, #144]	; (8009fe8 <TIM_Base_SetConfig+0x138>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d003      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a23      	ldr	r2, [pc, #140]	; (8009fec <TIM_Base_SetConfig+0x13c>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d108      	bne.n	8009f74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	695b      	ldr	r3, [r3, #20]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	689a      	ldr	r2, [r3, #8]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a0a      	ldr	r2, [pc, #40]	; (8009fc4 <TIM_Base_SetConfig+0x114>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d003      	beq.n	8009fa8 <TIM_Base_SetConfig+0xf8>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a0c      	ldr	r2, [pc, #48]	; (8009fd4 <TIM_Base_SetConfig+0x124>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d103      	bne.n	8009fb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	691a      	ldr	r2, [r3, #16]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	615a      	str	r2, [r3, #20]
}
 8009fb6:	bf00      	nop
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	40010000 	.word	0x40010000
 8009fc8:	40000400 	.word	0x40000400
 8009fcc:	40000800 	.word	0x40000800
 8009fd0:	40000c00 	.word	0x40000c00
 8009fd4:	40010400 	.word	0x40010400
 8009fd8:	40014000 	.word	0x40014000
 8009fdc:	40014400 	.word	0x40014400
 8009fe0:	40014800 	.word	0x40014800
 8009fe4:	40001800 	.word	0x40001800
 8009fe8:	40001c00 	.word	0x40001c00
 8009fec:	40002000 	.word	0x40002000

08009ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6a1b      	ldr	r3, [r3, #32]
 800a000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	f023 0201 	bic.w	r2, r3, #1
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a01a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	011b      	lsls	r3, r3, #4
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	4313      	orrs	r3, r2
 800a024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	f023 030a 	bic.w	r3, r3, #10
 800a02c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a02e:	697a      	ldr	r2, [r7, #20]
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	4313      	orrs	r3, r2
 800a034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	621a      	str	r2, [r3, #32]
}
 800a042:	bf00      	nop
 800a044:	371c      	adds	r7, #28
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a04e:	b480      	push	{r7}
 800a050:	b087      	sub	sp, #28
 800a052:	af00      	add	r7, sp, #0
 800a054:	60f8      	str	r0, [r7, #12]
 800a056:	60b9      	str	r1, [r7, #8]
 800a058:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	f023 0210 	bic.w	r2, r3, #16
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6a1b      	ldr	r3, [r3, #32]
 800a070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a078:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	031b      	lsls	r3, r3, #12
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	4313      	orrs	r3, r2
 800a082:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a08a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	011b      	lsls	r3, r3, #4
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	4313      	orrs	r3, r2
 800a094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	697a      	ldr	r2, [r7, #20]
 800a09a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	621a      	str	r2, [r3, #32]
}
 800a0a2:	bf00      	nop
 800a0a4:	371c      	adds	r7, #28
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b085      	sub	sp, #20
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	f043 0307 	orr.w	r3, r3, #7
 800a0d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	609a      	str	r2, [r3, #8]
}
 800a0d8:	bf00      	nop
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b087      	sub	sp, #28
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
 800a0f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	021a      	lsls	r2, r3, #8
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	431a      	orrs	r2, r3
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	697a      	ldr	r2, [r7, #20]
 800a10e:	4313      	orrs	r3, r2
 800a110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	609a      	str	r2, [r3, #8]
}
 800a118:	bf00      	nop
 800a11a:	371c      	adds	r7, #28
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a134:	2b01      	cmp	r3, #1
 800a136:	d101      	bne.n	800a13c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a138:	2302      	movs	r3, #2
 800a13a:	e06d      	b.n	800a218 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2202      	movs	r2, #2
 800a148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a30      	ldr	r2, [pc, #192]	; (800a224 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d004      	beq.n	800a170 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a2f      	ldr	r2, [pc, #188]	; (800a228 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d108      	bne.n	800a182 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a176:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	4313      	orrs	r3, r2
 800a180:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a188:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	4313      	orrs	r3, r2
 800a192:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a20      	ldr	r2, [pc, #128]	; (800a224 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d022      	beq.n	800a1ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ae:	d01d      	beq.n	800a1ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a1d      	ldr	r2, [pc, #116]	; (800a22c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d018      	beq.n	800a1ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a1c      	ldr	r2, [pc, #112]	; (800a230 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d013      	beq.n	800a1ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a1a      	ldr	r2, [pc, #104]	; (800a234 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d00e      	beq.n	800a1ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a15      	ldr	r2, [pc, #84]	; (800a228 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d009      	beq.n	800a1ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a16      	ldr	r2, [pc, #88]	; (800a238 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d004      	beq.n	800a1ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a15      	ldr	r2, [pc, #84]	; (800a23c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d10c      	bne.n	800a206 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr
 800a224:	40010000 	.word	0x40010000
 800a228:	40010400 	.word	0x40010400
 800a22c:	40000400 	.word	0x40000400
 800a230:	40000800 	.word	0x40000800
 800a234:	40000c00 	.word	0x40000c00
 800a238:	40014000 	.word	0x40014000
 800a23c:	40001800 	.word	0x40001800

0800a240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e040      	b.n	800a310 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a292:	2b00      	cmp	r3, #0
 800a294:	d106      	bne.n	800a2a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7f9 fd2c 	bl	8003cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2224      	movs	r2, #36	; 0x24
 800a2a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f022 0201 	bic.w	r2, r2, #1
 800a2b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f82c 	bl	800a318 <UART_SetConfig>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d101      	bne.n	800a2ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e022      	b.n	800a310 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d002      	beq.n	800a2d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fa82 	bl	800a7dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	685a      	ldr	r2, [r3, #4]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a2e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	689a      	ldr	r2, [r3, #8]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a2f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f042 0201 	orr.w	r2, r2, #1
 800a306:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 fb09 	bl	800a920 <UART_CheckIdleState>
 800a30e:	4603      	mov	r3, r0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b088      	sub	sp, #32
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	689a      	ldr	r2, [r3, #8]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	431a      	orrs	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	431a      	orrs	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	69db      	ldr	r3, [r3, #28]
 800a338:	4313      	orrs	r3, r2
 800a33a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	4ba7      	ldr	r3, [pc, #668]	; (800a5e0 <UART_SetConfig+0x2c8>)
 800a344:	4013      	ands	r3, r2
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	6812      	ldr	r2, [r2, #0]
 800a34a:	6979      	ldr	r1, [r7, #20]
 800a34c:	430b      	orrs	r3, r1
 800a34e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68da      	ldr	r2, [r3, #12]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	430a      	orrs	r2, r1
 800a364:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	699b      	ldr	r3, [r3, #24]
 800a36a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6a1b      	ldr	r3, [r3, #32]
 800a370:	697a      	ldr	r2, [r7, #20]
 800a372:	4313      	orrs	r3, r2
 800a374:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	430a      	orrs	r2, r1
 800a388:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a95      	ldr	r2, [pc, #596]	; (800a5e4 <UART_SetConfig+0x2cc>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d120      	bne.n	800a3d6 <UART_SetConfig+0xbe>
 800a394:	4b94      	ldr	r3, [pc, #592]	; (800a5e8 <UART_SetConfig+0x2d0>)
 800a396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a39a:	f003 0303 	and.w	r3, r3, #3
 800a39e:	2b03      	cmp	r3, #3
 800a3a0:	d816      	bhi.n	800a3d0 <UART_SetConfig+0xb8>
 800a3a2:	a201      	add	r2, pc, #4	; (adr r2, 800a3a8 <UART_SetConfig+0x90>)
 800a3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a8:	0800a3b9 	.word	0x0800a3b9
 800a3ac:	0800a3c5 	.word	0x0800a3c5
 800a3b0:	0800a3bf 	.word	0x0800a3bf
 800a3b4:	0800a3cb 	.word	0x0800a3cb
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	77fb      	strb	r3, [r7, #31]
 800a3bc:	e14f      	b.n	800a65e <UART_SetConfig+0x346>
 800a3be:	2302      	movs	r3, #2
 800a3c0:	77fb      	strb	r3, [r7, #31]
 800a3c2:	e14c      	b.n	800a65e <UART_SetConfig+0x346>
 800a3c4:	2304      	movs	r3, #4
 800a3c6:	77fb      	strb	r3, [r7, #31]
 800a3c8:	e149      	b.n	800a65e <UART_SetConfig+0x346>
 800a3ca:	2308      	movs	r3, #8
 800a3cc:	77fb      	strb	r3, [r7, #31]
 800a3ce:	e146      	b.n	800a65e <UART_SetConfig+0x346>
 800a3d0:	2310      	movs	r3, #16
 800a3d2:	77fb      	strb	r3, [r7, #31]
 800a3d4:	e143      	b.n	800a65e <UART_SetConfig+0x346>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a84      	ldr	r2, [pc, #528]	; (800a5ec <UART_SetConfig+0x2d4>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d132      	bne.n	800a446 <UART_SetConfig+0x12e>
 800a3e0:	4b81      	ldr	r3, [pc, #516]	; (800a5e8 <UART_SetConfig+0x2d0>)
 800a3e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3e6:	f003 030c 	and.w	r3, r3, #12
 800a3ea:	2b0c      	cmp	r3, #12
 800a3ec:	d828      	bhi.n	800a440 <UART_SetConfig+0x128>
 800a3ee:	a201      	add	r2, pc, #4	; (adr r2, 800a3f4 <UART_SetConfig+0xdc>)
 800a3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f4:	0800a429 	.word	0x0800a429
 800a3f8:	0800a441 	.word	0x0800a441
 800a3fc:	0800a441 	.word	0x0800a441
 800a400:	0800a441 	.word	0x0800a441
 800a404:	0800a435 	.word	0x0800a435
 800a408:	0800a441 	.word	0x0800a441
 800a40c:	0800a441 	.word	0x0800a441
 800a410:	0800a441 	.word	0x0800a441
 800a414:	0800a42f 	.word	0x0800a42f
 800a418:	0800a441 	.word	0x0800a441
 800a41c:	0800a441 	.word	0x0800a441
 800a420:	0800a441 	.word	0x0800a441
 800a424:	0800a43b 	.word	0x0800a43b
 800a428:	2300      	movs	r3, #0
 800a42a:	77fb      	strb	r3, [r7, #31]
 800a42c:	e117      	b.n	800a65e <UART_SetConfig+0x346>
 800a42e:	2302      	movs	r3, #2
 800a430:	77fb      	strb	r3, [r7, #31]
 800a432:	e114      	b.n	800a65e <UART_SetConfig+0x346>
 800a434:	2304      	movs	r3, #4
 800a436:	77fb      	strb	r3, [r7, #31]
 800a438:	e111      	b.n	800a65e <UART_SetConfig+0x346>
 800a43a:	2308      	movs	r3, #8
 800a43c:	77fb      	strb	r3, [r7, #31]
 800a43e:	e10e      	b.n	800a65e <UART_SetConfig+0x346>
 800a440:	2310      	movs	r3, #16
 800a442:	77fb      	strb	r3, [r7, #31]
 800a444:	e10b      	b.n	800a65e <UART_SetConfig+0x346>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a69      	ldr	r2, [pc, #420]	; (800a5f0 <UART_SetConfig+0x2d8>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d120      	bne.n	800a492 <UART_SetConfig+0x17a>
 800a450:	4b65      	ldr	r3, [pc, #404]	; (800a5e8 <UART_SetConfig+0x2d0>)
 800a452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a456:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a45a:	2b30      	cmp	r3, #48	; 0x30
 800a45c:	d013      	beq.n	800a486 <UART_SetConfig+0x16e>
 800a45e:	2b30      	cmp	r3, #48	; 0x30
 800a460:	d814      	bhi.n	800a48c <UART_SetConfig+0x174>
 800a462:	2b20      	cmp	r3, #32
 800a464:	d009      	beq.n	800a47a <UART_SetConfig+0x162>
 800a466:	2b20      	cmp	r3, #32
 800a468:	d810      	bhi.n	800a48c <UART_SetConfig+0x174>
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d002      	beq.n	800a474 <UART_SetConfig+0x15c>
 800a46e:	2b10      	cmp	r3, #16
 800a470:	d006      	beq.n	800a480 <UART_SetConfig+0x168>
 800a472:	e00b      	b.n	800a48c <UART_SetConfig+0x174>
 800a474:	2300      	movs	r3, #0
 800a476:	77fb      	strb	r3, [r7, #31]
 800a478:	e0f1      	b.n	800a65e <UART_SetConfig+0x346>
 800a47a:	2302      	movs	r3, #2
 800a47c:	77fb      	strb	r3, [r7, #31]
 800a47e:	e0ee      	b.n	800a65e <UART_SetConfig+0x346>
 800a480:	2304      	movs	r3, #4
 800a482:	77fb      	strb	r3, [r7, #31]
 800a484:	e0eb      	b.n	800a65e <UART_SetConfig+0x346>
 800a486:	2308      	movs	r3, #8
 800a488:	77fb      	strb	r3, [r7, #31]
 800a48a:	e0e8      	b.n	800a65e <UART_SetConfig+0x346>
 800a48c:	2310      	movs	r3, #16
 800a48e:	77fb      	strb	r3, [r7, #31]
 800a490:	e0e5      	b.n	800a65e <UART_SetConfig+0x346>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a57      	ldr	r2, [pc, #348]	; (800a5f4 <UART_SetConfig+0x2dc>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d120      	bne.n	800a4de <UART_SetConfig+0x1c6>
 800a49c:	4b52      	ldr	r3, [pc, #328]	; (800a5e8 <UART_SetConfig+0x2d0>)
 800a49e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a4a6:	2bc0      	cmp	r3, #192	; 0xc0
 800a4a8:	d013      	beq.n	800a4d2 <UART_SetConfig+0x1ba>
 800a4aa:	2bc0      	cmp	r3, #192	; 0xc0
 800a4ac:	d814      	bhi.n	800a4d8 <UART_SetConfig+0x1c0>
 800a4ae:	2b80      	cmp	r3, #128	; 0x80
 800a4b0:	d009      	beq.n	800a4c6 <UART_SetConfig+0x1ae>
 800a4b2:	2b80      	cmp	r3, #128	; 0x80
 800a4b4:	d810      	bhi.n	800a4d8 <UART_SetConfig+0x1c0>
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d002      	beq.n	800a4c0 <UART_SetConfig+0x1a8>
 800a4ba:	2b40      	cmp	r3, #64	; 0x40
 800a4bc:	d006      	beq.n	800a4cc <UART_SetConfig+0x1b4>
 800a4be:	e00b      	b.n	800a4d8 <UART_SetConfig+0x1c0>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	77fb      	strb	r3, [r7, #31]
 800a4c4:	e0cb      	b.n	800a65e <UART_SetConfig+0x346>
 800a4c6:	2302      	movs	r3, #2
 800a4c8:	77fb      	strb	r3, [r7, #31]
 800a4ca:	e0c8      	b.n	800a65e <UART_SetConfig+0x346>
 800a4cc:	2304      	movs	r3, #4
 800a4ce:	77fb      	strb	r3, [r7, #31]
 800a4d0:	e0c5      	b.n	800a65e <UART_SetConfig+0x346>
 800a4d2:	2308      	movs	r3, #8
 800a4d4:	77fb      	strb	r3, [r7, #31]
 800a4d6:	e0c2      	b.n	800a65e <UART_SetConfig+0x346>
 800a4d8:	2310      	movs	r3, #16
 800a4da:	77fb      	strb	r3, [r7, #31]
 800a4dc:	e0bf      	b.n	800a65e <UART_SetConfig+0x346>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a45      	ldr	r2, [pc, #276]	; (800a5f8 <UART_SetConfig+0x2e0>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d125      	bne.n	800a534 <UART_SetConfig+0x21c>
 800a4e8:	4b3f      	ldr	r3, [pc, #252]	; (800a5e8 <UART_SetConfig+0x2d0>)
 800a4ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4f6:	d017      	beq.n	800a528 <UART_SetConfig+0x210>
 800a4f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4fc:	d817      	bhi.n	800a52e <UART_SetConfig+0x216>
 800a4fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a502:	d00b      	beq.n	800a51c <UART_SetConfig+0x204>
 800a504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a508:	d811      	bhi.n	800a52e <UART_SetConfig+0x216>
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d003      	beq.n	800a516 <UART_SetConfig+0x1fe>
 800a50e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a512:	d006      	beq.n	800a522 <UART_SetConfig+0x20a>
 800a514:	e00b      	b.n	800a52e <UART_SetConfig+0x216>
 800a516:	2300      	movs	r3, #0
 800a518:	77fb      	strb	r3, [r7, #31]
 800a51a:	e0a0      	b.n	800a65e <UART_SetConfig+0x346>
 800a51c:	2302      	movs	r3, #2
 800a51e:	77fb      	strb	r3, [r7, #31]
 800a520:	e09d      	b.n	800a65e <UART_SetConfig+0x346>
 800a522:	2304      	movs	r3, #4
 800a524:	77fb      	strb	r3, [r7, #31]
 800a526:	e09a      	b.n	800a65e <UART_SetConfig+0x346>
 800a528:	2308      	movs	r3, #8
 800a52a:	77fb      	strb	r3, [r7, #31]
 800a52c:	e097      	b.n	800a65e <UART_SetConfig+0x346>
 800a52e:	2310      	movs	r3, #16
 800a530:	77fb      	strb	r3, [r7, #31]
 800a532:	e094      	b.n	800a65e <UART_SetConfig+0x346>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a30      	ldr	r2, [pc, #192]	; (800a5fc <UART_SetConfig+0x2e4>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d125      	bne.n	800a58a <UART_SetConfig+0x272>
 800a53e:	4b2a      	ldr	r3, [pc, #168]	; (800a5e8 <UART_SetConfig+0x2d0>)
 800a540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a544:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a548:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a54c:	d017      	beq.n	800a57e <UART_SetConfig+0x266>
 800a54e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a552:	d817      	bhi.n	800a584 <UART_SetConfig+0x26c>
 800a554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a558:	d00b      	beq.n	800a572 <UART_SetConfig+0x25a>
 800a55a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a55e:	d811      	bhi.n	800a584 <UART_SetConfig+0x26c>
 800a560:	2b00      	cmp	r3, #0
 800a562:	d003      	beq.n	800a56c <UART_SetConfig+0x254>
 800a564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a568:	d006      	beq.n	800a578 <UART_SetConfig+0x260>
 800a56a:	e00b      	b.n	800a584 <UART_SetConfig+0x26c>
 800a56c:	2301      	movs	r3, #1
 800a56e:	77fb      	strb	r3, [r7, #31]
 800a570:	e075      	b.n	800a65e <UART_SetConfig+0x346>
 800a572:	2302      	movs	r3, #2
 800a574:	77fb      	strb	r3, [r7, #31]
 800a576:	e072      	b.n	800a65e <UART_SetConfig+0x346>
 800a578:	2304      	movs	r3, #4
 800a57a:	77fb      	strb	r3, [r7, #31]
 800a57c:	e06f      	b.n	800a65e <UART_SetConfig+0x346>
 800a57e:	2308      	movs	r3, #8
 800a580:	77fb      	strb	r3, [r7, #31]
 800a582:	e06c      	b.n	800a65e <UART_SetConfig+0x346>
 800a584:	2310      	movs	r3, #16
 800a586:	77fb      	strb	r3, [r7, #31]
 800a588:	e069      	b.n	800a65e <UART_SetConfig+0x346>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a1c      	ldr	r2, [pc, #112]	; (800a600 <UART_SetConfig+0x2e8>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d137      	bne.n	800a604 <UART_SetConfig+0x2ec>
 800a594:	4b14      	ldr	r3, [pc, #80]	; (800a5e8 <UART_SetConfig+0x2d0>)
 800a596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a59a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a59e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a5a2:	d017      	beq.n	800a5d4 <UART_SetConfig+0x2bc>
 800a5a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a5a8:	d817      	bhi.n	800a5da <UART_SetConfig+0x2c2>
 800a5aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5ae:	d00b      	beq.n	800a5c8 <UART_SetConfig+0x2b0>
 800a5b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5b4:	d811      	bhi.n	800a5da <UART_SetConfig+0x2c2>
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d003      	beq.n	800a5c2 <UART_SetConfig+0x2aa>
 800a5ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5be:	d006      	beq.n	800a5ce <UART_SetConfig+0x2b6>
 800a5c0:	e00b      	b.n	800a5da <UART_SetConfig+0x2c2>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	77fb      	strb	r3, [r7, #31]
 800a5c6:	e04a      	b.n	800a65e <UART_SetConfig+0x346>
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	77fb      	strb	r3, [r7, #31]
 800a5cc:	e047      	b.n	800a65e <UART_SetConfig+0x346>
 800a5ce:	2304      	movs	r3, #4
 800a5d0:	77fb      	strb	r3, [r7, #31]
 800a5d2:	e044      	b.n	800a65e <UART_SetConfig+0x346>
 800a5d4:	2308      	movs	r3, #8
 800a5d6:	77fb      	strb	r3, [r7, #31]
 800a5d8:	e041      	b.n	800a65e <UART_SetConfig+0x346>
 800a5da:	2310      	movs	r3, #16
 800a5dc:	77fb      	strb	r3, [r7, #31]
 800a5de:	e03e      	b.n	800a65e <UART_SetConfig+0x346>
 800a5e0:	efff69f3 	.word	0xefff69f3
 800a5e4:	40011000 	.word	0x40011000
 800a5e8:	40023800 	.word	0x40023800
 800a5ec:	40004400 	.word	0x40004400
 800a5f0:	40004800 	.word	0x40004800
 800a5f4:	40004c00 	.word	0x40004c00
 800a5f8:	40005000 	.word	0x40005000
 800a5fc:	40011400 	.word	0x40011400
 800a600:	40007800 	.word	0x40007800
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a71      	ldr	r2, [pc, #452]	; (800a7d0 <UART_SetConfig+0x4b8>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d125      	bne.n	800a65a <UART_SetConfig+0x342>
 800a60e:	4b71      	ldr	r3, [pc, #452]	; (800a7d4 <UART_SetConfig+0x4bc>)
 800a610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a618:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a61c:	d017      	beq.n	800a64e <UART_SetConfig+0x336>
 800a61e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a622:	d817      	bhi.n	800a654 <UART_SetConfig+0x33c>
 800a624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a628:	d00b      	beq.n	800a642 <UART_SetConfig+0x32a>
 800a62a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a62e:	d811      	bhi.n	800a654 <UART_SetConfig+0x33c>
 800a630:	2b00      	cmp	r3, #0
 800a632:	d003      	beq.n	800a63c <UART_SetConfig+0x324>
 800a634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a638:	d006      	beq.n	800a648 <UART_SetConfig+0x330>
 800a63a:	e00b      	b.n	800a654 <UART_SetConfig+0x33c>
 800a63c:	2300      	movs	r3, #0
 800a63e:	77fb      	strb	r3, [r7, #31]
 800a640:	e00d      	b.n	800a65e <UART_SetConfig+0x346>
 800a642:	2302      	movs	r3, #2
 800a644:	77fb      	strb	r3, [r7, #31]
 800a646:	e00a      	b.n	800a65e <UART_SetConfig+0x346>
 800a648:	2304      	movs	r3, #4
 800a64a:	77fb      	strb	r3, [r7, #31]
 800a64c:	e007      	b.n	800a65e <UART_SetConfig+0x346>
 800a64e:	2308      	movs	r3, #8
 800a650:	77fb      	strb	r3, [r7, #31]
 800a652:	e004      	b.n	800a65e <UART_SetConfig+0x346>
 800a654:	2310      	movs	r3, #16
 800a656:	77fb      	strb	r3, [r7, #31]
 800a658:	e001      	b.n	800a65e <UART_SetConfig+0x346>
 800a65a:	2310      	movs	r3, #16
 800a65c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	69db      	ldr	r3, [r3, #28]
 800a662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a666:	d15a      	bne.n	800a71e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800a668:	7ffb      	ldrb	r3, [r7, #31]
 800a66a:	2b08      	cmp	r3, #8
 800a66c:	d827      	bhi.n	800a6be <UART_SetConfig+0x3a6>
 800a66e:	a201      	add	r2, pc, #4	; (adr r2, 800a674 <UART_SetConfig+0x35c>)
 800a670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a674:	0800a699 	.word	0x0800a699
 800a678:	0800a6a1 	.word	0x0800a6a1
 800a67c:	0800a6a9 	.word	0x0800a6a9
 800a680:	0800a6bf 	.word	0x0800a6bf
 800a684:	0800a6af 	.word	0x0800a6af
 800a688:	0800a6bf 	.word	0x0800a6bf
 800a68c:	0800a6bf 	.word	0x0800a6bf
 800a690:	0800a6bf 	.word	0x0800a6bf
 800a694:	0800a6b7 	.word	0x0800a6b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a698:	f7fd fa82 	bl	8007ba0 <HAL_RCC_GetPCLK1Freq>
 800a69c:	61b8      	str	r0, [r7, #24]
        break;
 800a69e:	e013      	b.n	800a6c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6a0:	f7fd fa92 	bl	8007bc8 <HAL_RCC_GetPCLK2Freq>
 800a6a4:	61b8      	str	r0, [r7, #24]
        break;
 800a6a6:	e00f      	b.n	800a6c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6a8:	4b4b      	ldr	r3, [pc, #300]	; (800a7d8 <UART_SetConfig+0x4c0>)
 800a6aa:	61bb      	str	r3, [r7, #24]
        break;
 800a6ac:	e00c      	b.n	800a6c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6ae:	f7fd f9b5 	bl	8007a1c <HAL_RCC_GetSysClockFreq>
 800a6b2:	61b8      	str	r0, [r7, #24]
        break;
 800a6b4:	e008      	b.n	800a6c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6ba:	61bb      	str	r3, [r7, #24]
        break;
 800a6bc:	e004      	b.n	800a6c8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	77bb      	strb	r3, [r7, #30]
        break;
 800a6c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d074      	beq.n	800a7b8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	005a      	lsls	r2, r3, #1
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	085b      	lsrs	r3, r3, #1
 800a6d8:	441a      	add	r2, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	2b0f      	cmp	r3, #15
 800a6e8:	d916      	bls.n	800a718 <UART_SetConfig+0x400>
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6f0:	d212      	bcs.n	800a718 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	f023 030f 	bic.w	r3, r3, #15
 800a6fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	085b      	lsrs	r3, r3, #1
 800a700:	b29b      	uxth	r3, r3
 800a702:	f003 0307 	and.w	r3, r3, #7
 800a706:	b29a      	uxth	r2, r3
 800a708:	89fb      	ldrh	r3, [r7, #14]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	89fa      	ldrh	r2, [r7, #14]
 800a714:	60da      	str	r2, [r3, #12]
 800a716:	e04f      	b.n	800a7b8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	77bb      	strb	r3, [r7, #30]
 800a71c:	e04c      	b.n	800a7b8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a71e:	7ffb      	ldrb	r3, [r7, #31]
 800a720:	2b08      	cmp	r3, #8
 800a722:	d828      	bhi.n	800a776 <UART_SetConfig+0x45e>
 800a724:	a201      	add	r2, pc, #4	; (adr r2, 800a72c <UART_SetConfig+0x414>)
 800a726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a72a:	bf00      	nop
 800a72c:	0800a751 	.word	0x0800a751
 800a730:	0800a759 	.word	0x0800a759
 800a734:	0800a761 	.word	0x0800a761
 800a738:	0800a777 	.word	0x0800a777
 800a73c:	0800a767 	.word	0x0800a767
 800a740:	0800a777 	.word	0x0800a777
 800a744:	0800a777 	.word	0x0800a777
 800a748:	0800a777 	.word	0x0800a777
 800a74c:	0800a76f 	.word	0x0800a76f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a750:	f7fd fa26 	bl	8007ba0 <HAL_RCC_GetPCLK1Freq>
 800a754:	61b8      	str	r0, [r7, #24]
        break;
 800a756:	e013      	b.n	800a780 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a758:	f7fd fa36 	bl	8007bc8 <HAL_RCC_GetPCLK2Freq>
 800a75c:	61b8      	str	r0, [r7, #24]
        break;
 800a75e:	e00f      	b.n	800a780 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a760:	4b1d      	ldr	r3, [pc, #116]	; (800a7d8 <UART_SetConfig+0x4c0>)
 800a762:	61bb      	str	r3, [r7, #24]
        break;
 800a764:	e00c      	b.n	800a780 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a766:	f7fd f959 	bl	8007a1c <HAL_RCC_GetSysClockFreq>
 800a76a:	61b8      	str	r0, [r7, #24]
        break;
 800a76c:	e008      	b.n	800a780 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a76e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a772:	61bb      	str	r3, [r7, #24]
        break;
 800a774:	e004      	b.n	800a780 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800a776:	2300      	movs	r3, #0
 800a778:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	77bb      	strb	r3, [r7, #30]
        break;
 800a77e:	bf00      	nop
    }

    if (pclk != 0U)
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d018      	beq.n	800a7b8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	085a      	lsrs	r2, r3, #1
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	441a      	add	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	fbb2 f3f3 	udiv	r3, r2, r3
 800a798:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	2b0f      	cmp	r3, #15
 800a79e:	d909      	bls.n	800a7b4 <UART_SetConfig+0x49c>
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7a6:	d205      	bcs.n	800a7b4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	b29a      	uxth	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	60da      	str	r2, [r3, #12]
 800a7b2:	e001      	b.n	800a7b8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a7c4:	7fbb      	ldrb	r3, [r7, #30]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3720      	adds	r7, #32
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	40007c00 	.word	0x40007c00
 800a7d4:	40023800 	.word	0x40023800
 800a7d8:	00f42400 	.word	0x00f42400

0800a7dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e8:	f003 0301 	and.w	r3, r3, #1
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00a      	beq.n	800a806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	430a      	orrs	r2, r1
 800a804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80a:	f003 0302 	and.w	r3, r3, #2
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00a      	beq.n	800a828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	430a      	orrs	r2, r1
 800a826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82c:	f003 0304 	and.w	r3, r3, #4
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00a      	beq.n	800a84a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	430a      	orrs	r2, r1
 800a848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84e:	f003 0308 	and.w	r3, r3, #8
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00a      	beq.n	800a86c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	430a      	orrs	r2, r1
 800a86a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a870:	f003 0310 	and.w	r3, r3, #16
 800a874:	2b00      	cmp	r3, #0
 800a876:	d00a      	beq.n	800a88e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	430a      	orrs	r2, r1
 800a88c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a892:	f003 0320 	and.w	r3, r3, #32
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00a      	beq.n	800a8b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	430a      	orrs	r2, r1
 800a8ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d01a      	beq.n	800a8f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	430a      	orrs	r2, r1
 800a8d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8da:	d10a      	bne.n	800a8f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	430a      	orrs	r2, r1
 800a8f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00a      	beq.n	800a914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	430a      	orrs	r2, r1
 800a912:	605a      	str	r2, [r3, #4]
  }
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af02      	add	r7, sp, #8
 800a926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a930:	f7f9 fc88 	bl	8004244 <HAL_GetTick>
 800a934:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 0308 	and.w	r3, r3, #8
 800a940:	2b08      	cmp	r3, #8
 800a942:	d10e      	bne.n	800a962 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a944:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a948:	9300      	str	r3, [sp, #0]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 f817 	bl	800a986 <UART_WaitOnFlagUntilTimeout>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d001      	beq.n	800a962 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e00d      	b.n	800a97e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2220      	movs	r2, #32
 800a966:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2220      	movs	r2, #32
 800a96c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b09c      	sub	sp, #112	; 0x70
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	60f8      	str	r0, [r7, #12]
 800a98e:	60b9      	str	r1, [r7, #8]
 800a990:	603b      	str	r3, [r7, #0]
 800a992:	4613      	mov	r3, r2
 800a994:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a996:	e0a5      	b.n	800aae4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a99a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a99e:	f000 80a1 	beq.w	800aae4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9a2:	f7f9 fc4f 	bl	8004244 <HAL_GetTick>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	1ad3      	subs	r3, r2, r3
 800a9ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d302      	bcc.n	800a9b8 <UART_WaitOnFlagUntilTimeout+0x32>
 800a9b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d13e      	bne.n	800aa36 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9c0:	e853 3f00 	ldrex	r3, [r3]
 800a9c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a9cc:	667b      	str	r3, [r7, #100]	; 0x64
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9de:	e841 2300 	strex	r3, r2, [r1]
 800a9e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a9e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d1e6      	bne.n	800a9b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	3308      	adds	r3, #8
 800a9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9f4:	e853 3f00 	ldrex	r3, [r3]
 800a9f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fc:	f023 0301 	bic.w	r3, r3, #1
 800aa00:	663b      	str	r3, [r7, #96]	; 0x60
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	3308      	adds	r3, #8
 800aa08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa0a:	64ba      	str	r2, [r7, #72]	; 0x48
 800aa0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa12:	e841 2300 	strex	r3, r2, [r1]
 800aa16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aa18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1e5      	bne.n	800a9ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2220      	movs	r2, #32
 800aa22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2220      	movs	r2, #32
 800aa28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800aa32:	2303      	movs	r3, #3
 800aa34:	e067      	b.n	800ab06 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 0304 	and.w	r3, r3, #4
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d04f      	beq.n	800aae4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	69db      	ldr	r3, [r3, #28]
 800aa4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa52:	d147      	bne.n	800aae4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa66:	e853 3f00 	ldrex	r3, [r3]
 800aa6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa72:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa7c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa84:	e841 2300 	strex	r3, r2, [r1]
 800aa88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1e6      	bne.n	800aa5e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	3308      	adds	r3, #8
 800aa96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	e853 3f00 	ldrex	r3, [r3]
 800aa9e:	613b      	str	r3, [r7, #16]
   return(result);
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	f023 0301 	bic.w	r3, r3, #1
 800aaa6:	66bb      	str	r3, [r7, #104]	; 0x68
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	3308      	adds	r3, #8
 800aaae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aab0:	623a      	str	r2, [r7, #32]
 800aab2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab4:	69f9      	ldr	r1, [r7, #28]
 800aab6:	6a3a      	ldr	r2, [r7, #32]
 800aab8:	e841 2300 	strex	r3, r2, [r1]
 800aabc:	61bb      	str	r3, [r7, #24]
   return(result);
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1e5      	bne.n	800aa90 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2220      	movs	r2, #32
 800aac8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2220      	movs	r2, #32
 800aace:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2220      	movs	r2, #32
 800aad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800aae0:	2303      	movs	r3, #3
 800aae2:	e010      	b.n	800ab06 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	69da      	ldr	r2, [r3, #28]
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	4013      	ands	r3, r2
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	bf0c      	ite	eq
 800aaf4:	2301      	moveq	r3, #1
 800aaf6:	2300      	movne	r3, #0
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	461a      	mov	r2, r3
 800aafc:	79fb      	ldrb	r3, [r7, #7]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	f43f af4a 	beq.w	800a998 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3770      	adds	r7, #112	; 0x70
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
	...

0800ab10 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d121      	bne.n	800ab66 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	4b27      	ldr	r3, [pc, #156]	; (800abc4 <FMC_SDRAM_Init+0xb4>)
 800ab28:	4013      	ands	r3, r2
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	6851      	ldr	r1, [r2, #4]
 800ab2e:	683a      	ldr	r2, [r7, #0]
 800ab30:	6892      	ldr	r2, [r2, #8]
 800ab32:	4311      	orrs	r1, r2
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	68d2      	ldr	r2, [r2, #12]
 800ab38:	4311      	orrs	r1, r2
 800ab3a:	683a      	ldr	r2, [r7, #0]
 800ab3c:	6912      	ldr	r2, [r2, #16]
 800ab3e:	4311      	orrs	r1, r2
 800ab40:	683a      	ldr	r2, [r7, #0]
 800ab42:	6952      	ldr	r2, [r2, #20]
 800ab44:	4311      	orrs	r1, r2
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	6992      	ldr	r2, [r2, #24]
 800ab4a:	4311      	orrs	r1, r2
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	69d2      	ldr	r2, [r2, #28]
 800ab50:	4311      	orrs	r1, r2
 800ab52:	683a      	ldr	r2, [r7, #0]
 800ab54:	6a12      	ldr	r2, [r2, #32]
 800ab56:	4311      	orrs	r1, r2
 800ab58:	683a      	ldr	r2, [r7, #0]
 800ab5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ab5c:	430a      	orrs	r2, r1
 800ab5e:	431a      	orrs	r2, r3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	601a      	str	r2, [r3, #0]
 800ab64:	e026      	b.n	800abb4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	69d9      	ldr	r1, [r3, #28]
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	4319      	orrs	r1, r3
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7c:	430b      	orrs	r3, r1
 800ab7e:	431a      	orrs	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685a      	ldr	r2, [r3, #4]
 800ab88:	4b0e      	ldr	r3, [pc, #56]	; (800abc4 <FMC_SDRAM_Init+0xb4>)
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	6851      	ldr	r1, [r2, #4]
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	6892      	ldr	r2, [r2, #8]
 800ab94:	4311      	orrs	r1, r2
 800ab96:	683a      	ldr	r2, [r7, #0]
 800ab98:	68d2      	ldr	r2, [r2, #12]
 800ab9a:	4311      	orrs	r1, r2
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	6912      	ldr	r2, [r2, #16]
 800aba0:	4311      	orrs	r1, r2
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	6952      	ldr	r2, [r2, #20]
 800aba6:	4311      	orrs	r1, r2
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	6992      	ldr	r2, [r2, #24]
 800abac:	430a      	orrs	r2, r1
 800abae:	431a      	orrs	r2, r3
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	ffff8000 	.word	0xffff8000

0800abc8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d128      	bne.n	800ac2c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	1e59      	subs	r1, r3, #1
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	3b01      	subs	r3, #1
 800abee:	011b      	lsls	r3, r3, #4
 800abf0:	4319      	orrs	r1, r3
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	3b01      	subs	r3, #1
 800abf8:	021b      	lsls	r3, r3, #8
 800abfa:	4319      	orrs	r1, r3
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	3b01      	subs	r3, #1
 800ac02:	031b      	lsls	r3, r3, #12
 800ac04:	4319      	orrs	r1, r3
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	041b      	lsls	r3, r3, #16
 800ac0e:	4319      	orrs	r1, r3
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	695b      	ldr	r3, [r3, #20]
 800ac14:	3b01      	subs	r3, #1
 800ac16:	051b      	lsls	r3, r3, #20
 800ac18:	4319      	orrs	r1, r3
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	699b      	ldr	r3, [r3, #24]
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	061b      	lsls	r3, r3, #24
 800ac22:	430b      	orrs	r3, r1
 800ac24:	431a      	orrs	r2, r3
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	609a      	str	r2, [r3, #8]
 800ac2a:	e02d      	b.n	800ac88 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	689a      	ldr	r2, [r3, #8]
 800ac30:	4b19      	ldr	r3, [pc, #100]	; (800ac98 <FMC_SDRAM_Timing_Init+0xd0>)
 800ac32:	4013      	ands	r3, r2
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	68d2      	ldr	r2, [r2, #12]
 800ac38:	3a01      	subs	r2, #1
 800ac3a:	0311      	lsls	r1, r2, #12
 800ac3c:	68ba      	ldr	r2, [r7, #8]
 800ac3e:	6952      	ldr	r2, [r2, #20]
 800ac40:	3a01      	subs	r2, #1
 800ac42:	0512      	lsls	r2, r2, #20
 800ac44:	430a      	orrs	r2, r1
 800ac46:	431a      	orrs	r2, r3
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	1e59      	subs	r1, r3, #1
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	3b01      	subs	r3, #1
 800ac60:	011b      	lsls	r3, r3, #4
 800ac62:	4319      	orrs	r1, r3
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	021b      	lsls	r3, r3, #8
 800ac6c:	4319      	orrs	r1, r3
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	3b01      	subs	r3, #1
 800ac74:	041b      	lsls	r3, r3, #16
 800ac76:	4319      	orrs	r1, r3
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	061b      	lsls	r3, r3, #24
 800ac80:	430b      	orrs	r3, r1
 800ac82:	431a      	orrs	r2, r3
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	ff0f0fff 	.word	0xff0f0fff

0800ac9c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	691a      	ldr	r2, [r3, #16]
 800acac:	4b0c      	ldr	r3, [pc, #48]	; (800ace0 <FMC_SDRAM_SendCommand+0x44>)
 800acae:	4013      	ands	r3, r2
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	6811      	ldr	r1, [r2, #0]
 800acb4:	68ba      	ldr	r2, [r7, #8]
 800acb6:	6852      	ldr	r2, [r2, #4]
 800acb8:	4311      	orrs	r1, r2
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	6892      	ldr	r2, [r2, #8]
 800acbe:	3a01      	subs	r2, #1
 800acc0:	0152      	lsls	r2, r2, #5
 800acc2:	4311      	orrs	r1, r2
 800acc4:	68ba      	ldr	r2, [r7, #8]
 800acc6:	68d2      	ldr	r2, [r2, #12]
 800acc8:	0252      	lsls	r2, r2, #9
 800acca:	430a      	orrs	r2, r1
 800accc:	431a      	orrs	r2, r3
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3714      	adds	r7, #20
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr
 800ace0:	ffc00000 	.word	0xffc00000

0800ace4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	695a      	ldr	r2, [r3, #20]
 800acf2:	4b07      	ldr	r3, [pc, #28]	; (800ad10 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800acf4:	4013      	ands	r3, r2
 800acf6:	683a      	ldr	r2, [r7, #0]
 800acf8:	0052      	lsls	r2, r2, #1
 800acfa:	431a      	orrs	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	370c      	adds	r7, #12
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	ffffc001 	.word	0xffffc001

0800ad14 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ad22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad26:	2b84      	cmp	r3, #132	; 0x84
 800ad28:	d005      	beq.n	800ad36 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ad2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	4413      	add	r3, r2
 800ad32:	3303      	adds	r3, #3
 800ad34:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ad36:	68fb      	ldr	r3, [r7, #12]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3714      	adds	r7, #20
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ad48:	f001 fa02 	bl	800c150 <vTaskStartScheduler>
  
  return osOK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ad52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad54:	b089      	sub	sp, #36	; 0x24
 800ad56:	af04      	add	r7, sp, #16
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	695b      	ldr	r3, [r3, #20]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d020      	beq.n	800ada6 <osThreadCreate+0x54>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	699b      	ldr	r3, [r3, #24]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d01c      	beq.n	800ada6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	685c      	ldr	r4, [r3, #4]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681d      	ldr	r5, [r3, #0]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	691e      	ldr	r6, [r3, #16]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7ff ffc8 	bl	800ad14 <makeFreeRtosPriority>
 800ad84:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ad8e:	9202      	str	r2, [sp, #8]
 800ad90:	9301      	str	r3, [sp, #4]
 800ad92:	9100      	str	r1, [sp, #0]
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	4632      	mov	r2, r6
 800ad98:	4629      	mov	r1, r5
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f000 ff5e 	bl	800bc5c <xTaskCreateStatic>
 800ada0:	4603      	mov	r3, r0
 800ada2:	60fb      	str	r3, [r7, #12]
 800ada4:	e01c      	b.n	800ade0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685c      	ldr	r4, [r3, #4]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800adb2:	b29e      	uxth	r6, r3
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800adba:	4618      	mov	r0, r3
 800adbc:	f7ff ffaa 	bl	800ad14 <makeFreeRtosPriority>
 800adc0:	4602      	mov	r2, r0
 800adc2:	f107 030c 	add.w	r3, r7, #12
 800adc6:	9301      	str	r3, [sp, #4]
 800adc8:	9200      	str	r2, [sp, #0]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	4632      	mov	r2, r6
 800adce:	4629      	mov	r1, r5
 800add0:	4620      	mov	r0, r4
 800add2:	f000 ffa6 	bl	800bd22 <xTaskCreate>
 800add6:	4603      	mov	r3, r0
 800add8:	2b01      	cmp	r3, #1
 800adda:	d001      	beq.n	800ade0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800addc:	2300      	movs	r3, #0
 800adde:	e000      	b.n	800ade2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ade0:	68fb      	ldr	r3, [r7, #12]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3714      	adds	r7, #20
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800adea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b084      	sub	sp, #16
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d001      	beq.n	800ae00 <osDelay+0x16>
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	e000      	b.n	800ae02 <osDelay+0x18>
 800ae00:	2301      	movs	r3, #1
 800ae02:	4618      	mov	r0, r3
 800ae04:	f001 f96e 	bl	800c0e4 <vTaskDelay>
  
  return osOK;
 800ae08:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b086      	sub	sp, #24
 800ae16:	af02      	add	r7, sp, #8
 800ae18:	6078      	str	r0, [r7, #4]
 800ae1a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00f      	beq.n	800ae44 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d10a      	bne.n	800ae40 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	2203      	movs	r2, #3
 800ae30:	9200      	str	r2, [sp, #0]
 800ae32:	2200      	movs	r2, #0
 800ae34:	2100      	movs	r1, #0
 800ae36:	2001      	movs	r0, #1
 800ae38:	f000 f964 	bl	800b104 <xQueueGenericCreateStatic>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	e016      	b.n	800ae6e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ae40:	2300      	movs	r3, #0
 800ae42:	e014      	b.n	800ae6e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d110      	bne.n	800ae6c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ae4a:	2203      	movs	r2, #3
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	2001      	movs	r0, #1
 800ae50:	f000 f9da 	bl	800b208 <xQueueGenericCreate>
 800ae54:	60f8      	str	r0, [r7, #12]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d005      	beq.n	800ae68 <osSemaphoreCreate+0x56>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	2200      	movs	r2, #0
 800ae60:	2100      	movs	r1, #0
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f000 fa32 	bl	800b2cc <xQueueGenericSend>
      return sema;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	e000      	b.n	800ae6e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ae6c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ae76:	b590      	push	{r4, r7, lr}
 800ae78:	b085      	sub	sp, #20
 800ae7a:	af02      	add	r7, sp, #8
 800ae7c:	6078      	str	r0, [r7, #4]
 800ae7e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d011      	beq.n	800aeac <osMessageCreate+0x36>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00d      	beq.n	800aeac <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6818      	ldr	r0, [r3, #0]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6859      	ldr	r1, [r3, #4]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	689a      	ldr	r2, [r3, #8]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	2400      	movs	r4, #0
 800aea2:	9400      	str	r4, [sp, #0]
 800aea4:	f000 f92e 	bl	800b104 <xQueueGenericCreateStatic>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	e008      	b.n	800aebe <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6818      	ldr	r0, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	f000 f9a6 	bl	800b208 <xQueueGenericCreate>
 800aebc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	370c      	adds	r7, #12
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd90      	pop	{r4, r7, pc}

0800aec6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aec6:	b480      	push	{r7}
 800aec8:	b083      	sub	sp, #12
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f103 0208 	add.w	r2, r3, #8
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f04f 32ff 	mov.w	r2, #4294967295
 800aede:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f103 0208 	add.w	r2, r3, #8
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f103 0208 	add.w	r2, r3, #8
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aefa:	bf00      	nop
 800aefc:	370c      	adds	r7, #12
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr

0800af06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800af06:	b480      	push	{r7}
 800af08:	b083      	sub	sp, #12
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af14:	bf00      	nop
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	689a      	ldr	r2, [r3, #8]
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	1c5a      	adds	r2, r3, #1
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	601a      	str	r2, [r3, #0]
}
 800af5c:	bf00      	nop
 800af5e:	3714      	adds	r7, #20
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af7e:	d103      	bne.n	800af88 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	60fb      	str	r3, [r7, #12]
 800af86:	e00c      	b.n	800afa2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	3308      	adds	r3, #8
 800af8c:	60fb      	str	r3, [r7, #12]
 800af8e:	e002      	b.n	800af96 <vListInsert+0x2e>
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	60fb      	str	r3, [r7, #12]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	68ba      	ldr	r2, [r7, #8]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d2f6      	bcs.n	800af90 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	685a      	ldr	r2, [r3, #4]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	683a      	ldr	r2, [r7, #0]
 800afbc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	1c5a      	adds	r2, r3, #1
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	601a      	str	r2, [r3, #0]
}
 800afce:	bf00      	nop
 800afd0:	3714      	adds	r7, #20
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr

0800afda <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800afda:	b480      	push	{r7}
 800afdc:	b085      	sub	sp, #20
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	691b      	ldr	r3, [r3, #16]
 800afe6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	6892      	ldr	r2, [r2, #8]
 800aff0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	6852      	ldr	r2, [r2, #4]
 800affa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	429a      	cmp	r2, r3
 800b004:	d103      	bne.n	800b00e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	689a      	ldr	r2, [r3, #8]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	1e5a      	subs	r2, r3, #1
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3714      	adds	r7, #20
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
	...

0800b030 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d10c      	bne.n	800b05e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b048:	b672      	cpsid	i
 800b04a:	f383 8811 	msr	BASEPRI, r3
 800b04e:	f3bf 8f6f 	isb	sy
 800b052:	f3bf 8f4f 	dsb	sy
 800b056:	b662      	cpsie	i
 800b058:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b05a:	bf00      	nop
 800b05c:	e7fe      	b.n	800b05c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b05e:	f001 ffed 	bl	800d03c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b06a:	68f9      	ldr	r1, [r7, #12]
 800b06c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b06e:	fb01 f303 	mul.w	r3, r1, r3
 800b072:	441a      	add	r2, r3
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2200      	movs	r2, #0
 800b07c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b08e:	3b01      	subs	r3, #1
 800b090:	68f9      	ldr	r1, [r7, #12]
 800b092:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b094:	fb01 f303 	mul.w	r3, r1, r3
 800b098:	441a      	add	r2, r3
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	22ff      	movs	r2, #255	; 0xff
 800b0a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	22ff      	movs	r2, #255	; 0xff
 800b0aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d114      	bne.n	800b0de <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d01a      	beq.n	800b0f2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	3310      	adds	r3, #16
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f001 faa3 	bl	800c60c <xTaskRemoveFromEventList>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d012      	beq.n	800b0f2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b0cc:	4b0c      	ldr	r3, [pc, #48]	; (800b100 <xQueueGenericReset+0xd0>)
 800b0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0d2:	601a      	str	r2, [r3, #0]
 800b0d4:	f3bf 8f4f 	dsb	sy
 800b0d8:	f3bf 8f6f 	isb	sy
 800b0dc:	e009      	b.n	800b0f2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	3310      	adds	r3, #16
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7ff feef 	bl	800aec6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	3324      	adds	r3, #36	; 0x24
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7ff feea 	bl	800aec6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b0f2:	f001 ffd7 	bl	800d0a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b0f6:	2301      	movs	r3, #1
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	e000ed04 	.word	0xe000ed04

0800b104 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b104:	b580      	push	{r7, lr}
 800b106:	b08e      	sub	sp, #56	; 0x38
 800b108:	af02      	add	r7, sp, #8
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
 800b110:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d10c      	bne.n	800b132 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11c:	b672      	cpsid	i
 800b11e:	f383 8811 	msr	BASEPRI, r3
 800b122:	f3bf 8f6f 	isb	sy
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	b662      	cpsie	i
 800b12c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b12e:	bf00      	nop
 800b130:	e7fe      	b.n	800b130 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d10c      	bne.n	800b152 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13c:	b672      	cpsid	i
 800b13e:	f383 8811 	msr	BASEPRI, r3
 800b142:	f3bf 8f6f 	isb	sy
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	b662      	cpsie	i
 800b14c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b14e:	bf00      	nop
 800b150:	e7fe      	b.n	800b150 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <xQueueGenericCreateStatic+0x5a>
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d001      	beq.n	800b162 <xQueueGenericCreateStatic+0x5e>
 800b15e:	2301      	movs	r3, #1
 800b160:	e000      	b.n	800b164 <xQueueGenericCreateStatic+0x60>
 800b162:	2300      	movs	r3, #0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d10c      	bne.n	800b182 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16c:	b672      	cpsid	i
 800b16e:	f383 8811 	msr	BASEPRI, r3
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	b662      	cpsie	i
 800b17c:	623b      	str	r3, [r7, #32]
}
 800b17e:	bf00      	nop
 800b180:	e7fe      	b.n	800b180 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d102      	bne.n	800b18e <xQueueGenericCreateStatic+0x8a>
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d101      	bne.n	800b192 <xQueueGenericCreateStatic+0x8e>
 800b18e:	2301      	movs	r3, #1
 800b190:	e000      	b.n	800b194 <xQueueGenericCreateStatic+0x90>
 800b192:	2300      	movs	r3, #0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10c      	bne.n	800b1b2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19c:	b672      	cpsid	i
 800b19e:	f383 8811 	msr	BASEPRI, r3
 800b1a2:	f3bf 8f6f 	isb	sy
 800b1a6:	f3bf 8f4f 	dsb	sy
 800b1aa:	b662      	cpsie	i
 800b1ac:	61fb      	str	r3, [r7, #28]
}
 800b1ae:	bf00      	nop
 800b1b0:	e7fe      	b.n	800b1b0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b1b2:	2348      	movs	r3, #72	; 0x48
 800b1b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	2b48      	cmp	r3, #72	; 0x48
 800b1ba:	d00c      	beq.n	800b1d6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c0:	b672      	cpsid	i
 800b1c2:	f383 8811 	msr	BASEPRI, r3
 800b1c6:	f3bf 8f6f 	isb	sy
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	b662      	cpsie	i
 800b1d0:	61bb      	str	r3, [r7, #24]
}
 800b1d2:	bf00      	nop
 800b1d4:	e7fe      	b.n	800b1d4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b1d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00d      	beq.n	800b1fe <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b1ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	68b9      	ldr	r1, [r7, #8]
 800b1f8:	68f8      	ldr	r0, [r7, #12]
 800b1fa:	f000 f847 	bl	800b28c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b200:	4618      	mov	r0, r3
 800b202:	3730      	adds	r7, #48	; 0x30
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b08a      	sub	sp, #40	; 0x28
 800b20c:	af02      	add	r7, sp, #8
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	4613      	mov	r3, r2
 800b214:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10c      	bne.n	800b236 <xQueueGenericCreate+0x2e>
	__asm volatile
 800b21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b220:	b672      	cpsid	i
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	b662      	cpsie	i
 800b230:	613b      	str	r3, [r7, #16]
}
 800b232:	bf00      	nop
 800b234:	e7fe      	b.n	800b234 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d102      	bne.n	800b242 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	61fb      	str	r3, [r7, #28]
 800b240:	e004      	b.n	800b24c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	fb02 f303 	mul.w	r3, r2, r3
 800b24a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	3348      	adds	r3, #72	; 0x48
 800b250:	4618      	mov	r0, r3
 800b252:	f002 f81f 	bl	800d294 <pvPortMalloc>
 800b256:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d011      	beq.n	800b282 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	3348      	adds	r3, #72	; 0x48
 800b266:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	2200      	movs	r2, #0
 800b26c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b270:	79fa      	ldrb	r2, [r7, #7]
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	4613      	mov	r3, r2
 800b278:	697a      	ldr	r2, [r7, #20]
 800b27a:	68b9      	ldr	r1, [r7, #8]
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f000 f805 	bl	800b28c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b282:	69bb      	ldr	r3, [r7, #24]
	}
 800b284:	4618      	mov	r0, r3
 800b286:	3720      	adds	r7, #32
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
 800b298:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d103      	bne.n	800b2a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	69ba      	ldr	r2, [r7, #24]
 800b2a4:	601a      	str	r2, [r3, #0]
 800b2a6:	e002      	b.n	800b2ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	68ba      	ldr	r2, [r7, #8]
 800b2b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b2ba:	2101      	movs	r1, #1
 800b2bc:	69b8      	ldr	r0, [r7, #24]
 800b2be:	f7ff feb7 	bl	800b030 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b2c2:	bf00      	nop
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
	...

0800b2cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b08e      	sub	sp, #56	; 0x38
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
 800b2d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d10c      	bne.n	800b302 <xQueueGenericSend+0x36>
	__asm volatile
 800b2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ec:	b672      	cpsid	i
 800b2ee:	f383 8811 	msr	BASEPRI, r3
 800b2f2:	f3bf 8f6f 	isb	sy
 800b2f6:	f3bf 8f4f 	dsb	sy
 800b2fa:	b662      	cpsie	i
 800b2fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b2fe:	bf00      	nop
 800b300:	e7fe      	b.n	800b300 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d103      	bne.n	800b310 <xQueueGenericSend+0x44>
 800b308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d101      	bne.n	800b314 <xQueueGenericSend+0x48>
 800b310:	2301      	movs	r3, #1
 800b312:	e000      	b.n	800b316 <xQueueGenericSend+0x4a>
 800b314:	2300      	movs	r3, #0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d10c      	bne.n	800b334 <xQueueGenericSend+0x68>
	__asm volatile
 800b31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31e:	b672      	cpsid	i
 800b320:	f383 8811 	msr	BASEPRI, r3
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	b662      	cpsie	i
 800b32e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b330:	bf00      	nop
 800b332:	e7fe      	b.n	800b332 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	2b02      	cmp	r3, #2
 800b338:	d103      	bne.n	800b342 <xQueueGenericSend+0x76>
 800b33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d101      	bne.n	800b346 <xQueueGenericSend+0x7a>
 800b342:	2301      	movs	r3, #1
 800b344:	e000      	b.n	800b348 <xQueueGenericSend+0x7c>
 800b346:	2300      	movs	r3, #0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d10c      	bne.n	800b366 <xQueueGenericSend+0x9a>
	__asm volatile
 800b34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b350:	b672      	cpsid	i
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	b662      	cpsie	i
 800b360:	623b      	str	r3, [r7, #32]
}
 800b362:	bf00      	nop
 800b364:	e7fe      	b.n	800b364 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b366:	f001 fb19 	bl	800c99c <xTaskGetSchedulerState>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d102      	bne.n	800b376 <xQueueGenericSend+0xaa>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d101      	bne.n	800b37a <xQueueGenericSend+0xae>
 800b376:	2301      	movs	r3, #1
 800b378:	e000      	b.n	800b37c <xQueueGenericSend+0xb0>
 800b37a:	2300      	movs	r3, #0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d10c      	bne.n	800b39a <xQueueGenericSend+0xce>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	b672      	cpsid	i
 800b386:	f383 8811 	msr	BASEPRI, r3
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	b662      	cpsie	i
 800b394:	61fb      	str	r3, [r7, #28]
}
 800b396:	bf00      	nop
 800b398:	e7fe      	b.n	800b398 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b39a:	f001 fe4f 	bl	800d03c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d302      	bcc.n	800b3b0 <xQueueGenericSend+0xe4>
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	d129      	bne.n	800b404 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	68b9      	ldr	r1, [r7, #8]
 800b3b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3b6:	f000 fb41 	bl	800ba3c <prvCopyDataToQueue>
 800b3ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d010      	beq.n	800b3e6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c6:	3324      	adds	r3, #36	; 0x24
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f001 f91f 	bl	800c60c <xTaskRemoveFromEventList>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d013      	beq.n	800b3fc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b3d4:	4b3f      	ldr	r3, [pc, #252]	; (800b4d4 <xQueueGenericSend+0x208>)
 800b3d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3da:	601a      	str	r2, [r3, #0]
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	f3bf 8f6f 	isb	sy
 800b3e4:	e00a      	b.n	800b3fc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d007      	beq.n	800b3fc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b3ec:	4b39      	ldr	r3, [pc, #228]	; (800b4d4 <xQueueGenericSend+0x208>)
 800b3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3f2:	601a      	str	r2, [r3, #0]
 800b3f4:	f3bf 8f4f 	dsb	sy
 800b3f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b3fc:	f001 fe52 	bl	800d0a4 <vPortExitCritical>
				return pdPASS;
 800b400:	2301      	movs	r3, #1
 800b402:	e063      	b.n	800b4cc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d103      	bne.n	800b412 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b40a:	f001 fe4b 	bl	800d0a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b40e:	2300      	movs	r3, #0
 800b410:	e05c      	b.n	800b4cc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b414:	2b00      	cmp	r3, #0
 800b416:	d106      	bne.n	800b426 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b418:	f107 0314 	add.w	r3, r7, #20
 800b41c:	4618      	mov	r0, r3
 800b41e:	f001 f959 	bl	800c6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b422:	2301      	movs	r3, #1
 800b424:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b426:	f001 fe3d 	bl	800d0a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b42a:	f000 feff 	bl	800c22c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b42e:	f001 fe05 	bl	800d03c <vPortEnterCritical>
 800b432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b434:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b438:	b25b      	sxtb	r3, r3
 800b43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43e:	d103      	bne.n	800b448 <xQueueGenericSend+0x17c>
 800b440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b442:	2200      	movs	r2, #0
 800b444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b44e:	b25b      	sxtb	r3, r3
 800b450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b454:	d103      	bne.n	800b45e <xQueueGenericSend+0x192>
 800b456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b45e:	f001 fe21 	bl	800d0a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b462:	1d3a      	adds	r2, r7, #4
 800b464:	f107 0314 	add.w	r3, r7, #20
 800b468:	4611      	mov	r1, r2
 800b46a:	4618      	mov	r0, r3
 800b46c:	f001 f948 	bl	800c700 <xTaskCheckForTimeOut>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d124      	bne.n	800b4c0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b476:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b478:	f000 fbd8 	bl	800bc2c <prvIsQueueFull>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d018      	beq.n	800b4b4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b484:	3310      	adds	r3, #16
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	4611      	mov	r1, r2
 800b48a:	4618      	mov	r0, r3
 800b48c:	f001 f898 	bl	800c5c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b492:	f000 fb63 	bl	800bb5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b496:	f000 fed7 	bl	800c248 <xTaskResumeAll>
 800b49a:	4603      	mov	r3, r0
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f47f af7c 	bne.w	800b39a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b4a2:	4b0c      	ldr	r3, [pc, #48]	; (800b4d4 <xQueueGenericSend+0x208>)
 800b4a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4a8:	601a      	str	r2, [r3, #0]
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	e772      	b.n	800b39a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b4b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4b6:	f000 fb51 	bl	800bb5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4ba:	f000 fec5 	bl	800c248 <xTaskResumeAll>
 800b4be:	e76c      	b.n	800b39a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b4c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4c2:	f000 fb4b 	bl	800bb5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b4c6:	f000 febf 	bl	800c248 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b4ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3738      	adds	r7, #56	; 0x38
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	e000ed04 	.word	0xe000ed04

0800b4d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b08e      	sub	sp, #56	; 0x38
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
 800b4e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10c      	bne.n	800b50a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f4:	b672      	cpsid	i
 800b4f6:	f383 8811 	msr	BASEPRI, r3
 800b4fa:	f3bf 8f6f 	isb	sy
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	b662      	cpsie	i
 800b504:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b506:	bf00      	nop
 800b508:	e7fe      	b.n	800b508 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d103      	bne.n	800b518 <xQueueGenericSendFromISR+0x40>
 800b510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b514:	2b00      	cmp	r3, #0
 800b516:	d101      	bne.n	800b51c <xQueueGenericSendFromISR+0x44>
 800b518:	2301      	movs	r3, #1
 800b51a:	e000      	b.n	800b51e <xQueueGenericSendFromISR+0x46>
 800b51c:	2300      	movs	r3, #0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10c      	bne.n	800b53c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b526:	b672      	cpsid	i
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	b662      	cpsie	i
 800b536:	623b      	str	r3, [r7, #32]
}
 800b538:	bf00      	nop
 800b53a:	e7fe      	b.n	800b53a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	2b02      	cmp	r3, #2
 800b540:	d103      	bne.n	800b54a <xQueueGenericSendFromISR+0x72>
 800b542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b546:	2b01      	cmp	r3, #1
 800b548:	d101      	bne.n	800b54e <xQueueGenericSendFromISR+0x76>
 800b54a:	2301      	movs	r3, #1
 800b54c:	e000      	b.n	800b550 <xQueueGenericSendFromISR+0x78>
 800b54e:	2300      	movs	r3, #0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10c      	bne.n	800b56e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800b554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b558:	b672      	cpsid	i
 800b55a:	f383 8811 	msr	BASEPRI, r3
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	f3bf 8f4f 	dsb	sy
 800b566:	b662      	cpsie	i
 800b568:	61fb      	str	r3, [r7, #28]
}
 800b56a:	bf00      	nop
 800b56c:	e7fe      	b.n	800b56c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b56e:	f001 fe4d 	bl	800d20c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b572:	f3ef 8211 	mrs	r2, BASEPRI
 800b576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57a:	b672      	cpsid	i
 800b57c:	f383 8811 	msr	BASEPRI, r3
 800b580:	f3bf 8f6f 	isb	sy
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	b662      	cpsie	i
 800b58a:	61ba      	str	r2, [r7, #24]
 800b58c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b58e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b590:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d302      	bcc.n	800b5a4 <xQueueGenericSendFromISR+0xcc>
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	2b02      	cmp	r3, #2
 800b5a2:	d12c      	bne.n	800b5fe <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b5ae:	683a      	ldr	r2, [r7, #0]
 800b5b0:	68b9      	ldr	r1, [r7, #8]
 800b5b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5b4:	f000 fa42 	bl	800ba3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b5b8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c0:	d112      	bne.n	800b5e8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d016      	beq.n	800b5f8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5cc:	3324      	adds	r3, #36	; 0x24
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f001 f81c 	bl	800c60c <xTaskRemoveFromEventList>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d00e      	beq.n	800b5f8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00b      	beq.n	800b5f8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	e007      	b.n	800b5f8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b5e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	b25a      	sxtb	r2, r3
 800b5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b5fc:	e001      	b.n	800b602 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b5fe:	2300      	movs	r3, #0
 800b600:	637b      	str	r3, [r7, #52]	; 0x34
 800b602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b604:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b60c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b60e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b610:	4618      	mov	r0, r3
 800b612:	3738      	adds	r7, #56	; 0x38
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08c      	sub	sp, #48	; 0x30
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b624:	2300      	movs	r3, #0
 800b626:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10c      	bne.n	800b64c <xQueueReceive+0x34>
	__asm volatile
 800b632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b636:	b672      	cpsid	i
 800b638:	f383 8811 	msr	BASEPRI, r3
 800b63c:	f3bf 8f6f 	isb	sy
 800b640:	f3bf 8f4f 	dsb	sy
 800b644:	b662      	cpsie	i
 800b646:	623b      	str	r3, [r7, #32]
}
 800b648:	bf00      	nop
 800b64a:	e7fe      	b.n	800b64a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d103      	bne.n	800b65a <xQueueReceive+0x42>
 800b652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b656:	2b00      	cmp	r3, #0
 800b658:	d101      	bne.n	800b65e <xQueueReceive+0x46>
 800b65a:	2301      	movs	r3, #1
 800b65c:	e000      	b.n	800b660 <xQueueReceive+0x48>
 800b65e:	2300      	movs	r3, #0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d10c      	bne.n	800b67e <xQueueReceive+0x66>
	__asm volatile
 800b664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b668:	b672      	cpsid	i
 800b66a:	f383 8811 	msr	BASEPRI, r3
 800b66e:	f3bf 8f6f 	isb	sy
 800b672:	f3bf 8f4f 	dsb	sy
 800b676:	b662      	cpsie	i
 800b678:	61fb      	str	r3, [r7, #28]
}
 800b67a:	bf00      	nop
 800b67c:	e7fe      	b.n	800b67c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b67e:	f001 f98d 	bl	800c99c <xTaskGetSchedulerState>
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d102      	bne.n	800b68e <xQueueReceive+0x76>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d101      	bne.n	800b692 <xQueueReceive+0x7a>
 800b68e:	2301      	movs	r3, #1
 800b690:	e000      	b.n	800b694 <xQueueReceive+0x7c>
 800b692:	2300      	movs	r3, #0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d10c      	bne.n	800b6b2 <xQueueReceive+0x9a>
	__asm volatile
 800b698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69c:	b672      	cpsid	i
 800b69e:	f383 8811 	msr	BASEPRI, r3
 800b6a2:	f3bf 8f6f 	isb	sy
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	b662      	cpsie	i
 800b6ac:	61bb      	str	r3, [r7, #24]
}
 800b6ae:	bf00      	nop
 800b6b0:	e7fe      	b.n	800b6b0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b6b2:	f001 fcc3 	bl	800d03c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d01f      	beq.n	800b702 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b6c2:	68b9      	ldr	r1, [r7, #8]
 800b6c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6c6:	f000 fa23 	bl	800bb10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6cc:	1e5a      	subs	r2, r3, #1
 800b6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00f      	beq.n	800b6fa <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6dc:	3310      	adds	r3, #16
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f000 ff94 	bl	800c60c <xTaskRemoveFromEventList>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d007      	beq.n	800b6fa <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b6ea:	4b3d      	ldr	r3, [pc, #244]	; (800b7e0 <xQueueReceive+0x1c8>)
 800b6ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6f0:	601a      	str	r2, [r3, #0]
 800b6f2:	f3bf 8f4f 	dsb	sy
 800b6f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b6fa:	f001 fcd3 	bl	800d0a4 <vPortExitCritical>
				return pdPASS;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e069      	b.n	800b7d6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d103      	bne.n	800b710 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b708:	f001 fccc 	bl	800d0a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b70c:	2300      	movs	r3, #0
 800b70e:	e062      	b.n	800b7d6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b712:	2b00      	cmp	r3, #0
 800b714:	d106      	bne.n	800b724 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b716:	f107 0310 	add.w	r3, r7, #16
 800b71a:	4618      	mov	r0, r3
 800b71c:	f000 ffda 	bl	800c6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b720:	2301      	movs	r3, #1
 800b722:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b724:	f001 fcbe 	bl	800d0a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b728:	f000 fd80 	bl	800c22c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b72c:	f001 fc86 	bl	800d03c <vPortEnterCritical>
 800b730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b732:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b736:	b25b      	sxtb	r3, r3
 800b738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b73c:	d103      	bne.n	800b746 <xQueueReceive+0x12e>
 800b73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b740:	2200      	movs	r2, #0
 800b742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b74c:	b25b      	sxtb	r3, r3
 800b74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b752:	d103      	bne.n	800b75c <xQueueReceive+0x144>
 800b754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b756:	2200      	movs	r2, #0
 800b758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b75c:	f001 fca2 	bl	800d0a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b760:	1d3a      	adds	r2, r7, #4
 800b762:	f107 0310 	add.w	r3, r7, #16
 800b766:	4611      	mov	r1, r2
 800b768:	4618      	mov	r0, r3
 800b76a:	f000 ffc9 	bl	800c700 <xTaskCheckForTimeOut>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d123      	bne.n	800b7bc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b776:	f000 fa43 	bl	800bc00 <prvIsQueueEmpty>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d017      	beq.n	800b7b0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b782:	3324      	adds	r3, #36	; 0x24
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	4611      	mov	r1, r2
 800b788:	4618      	mov	r0, r3
 800b78a:	f000 ff19 	bl	800c5c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b78e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b790:	f000 f9e4 	bl	800bb5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b794:	f000 fd58 	bl	800c248 <xTaskResumeAll>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d189      	bne.n	800b6b2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800b79e:	4b10      	ldr	r3, [pc, #64]	; (800b7e0 <xQueueReceive+0x1c8>)
 800b7a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7a4:	601a      	str	r2, [r3, #0]
 800b7a6:	f3bf 8f4f 	dsb	sy
 800b7aa:	f3bf 8f6f 	isb	sy
 800b7ae:	e780      	b.n	800b6b2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b7b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7b2:	f000 f9d3 	bl	800bb5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7b6:	f000 fd47 	bl	800c248 <xTaskResumeAll>
 800b7ba:	e77a      	b.n	800b6b2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b7bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7be:	f000 f9cd 	bl	800bb5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7c2:	f000 fd41 	bl	800c248 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b7c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7c8:	f000 fa1a 	bl	800bc00 <prvIsQueueEmpty>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f43f af6f 	beq.w	800b6b2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b7d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3730      	adds	r7, #48	; 0x30
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	e000ed04 	.word	0xe000ed04

0800b7e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b08e      	sub	sp, #56	; 0x38
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d10c      	bne.n	800b81a <xQueueSemaphoreTake+0x36>
	__asm volatile
 800b800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b804:	b672      	cpsid	i
 800b806:	f383 8811 	msr	BASEPRI, r3
 800b80a:	f3bf 8f6f 	isb	sy
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	b662      	cpsie	i
 800b814:	623b      	str	r3, [r7, #32]
}
 800b816:	bf00      	nop
 800b818:	e7fe      	b.n	800b818 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00c      	beq.n	800b83c <xQueueSemaphoreTake+0x58>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b826:	b672      	cpsid	i
 800b828:	f383 8811 	msr	BASEPRI, r3
 800b82c:	f3bf 8f6f 	isb	sy
 800b830:	f3bf 8f4f 	dsb	sy
 800b834:	b662      	cpsie	i
 800b836:	61fb      	str	r3, [r7, #28]
}
 800b838:	bf00      	nop
 800b83a:	e7fe      	b.n	800b83a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b83c:	f001 f8ae 	bl	800c99c <xTaskGetSchedulerState>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d102      	bne.n	800b84c <xQueueSemaphoreTake+0x68>
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d101      	bne.n	800b850 <xQueueSemaphoreTake+0x6c>
 800b84c:	2301      	movs	r3, #1
 800b84e:	e000      	b.n	800b852 <xQueueSemaphoreTake+0x6e>
 800b850:	2300      	movs	r3, #0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d10c      	bne.n	800b870 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85a:	b672      	cpsid	i
 800b85c:	f383 8811 	msr	BASEPRI, r3
 800b860:	f3bf 8f6f 	isb	sy
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	b662      	cpsie	i
 800b86a:	61bb      	str	r3, [r7, #24]
}
 800b86c:	bf00      	nop
 800b86e:	e7fe      	b.n	800b86e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b870:	f001 fbe4 	bl	800d03c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b878:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d024      	beq.n	800b8ca <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b882:	1e5a      	subs	r2, r3, #1
 800b884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b886:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d104      	bne.n	800b89a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b890:	f001 fa4a 	bl	800cd28 <pvTaskIncrementMutexHeldCount>
 800b894:	4602      	mov	r2, r0
 800b896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b898:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89c:	691b      	ldr	r3, [r3, #16]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00f      	beq.n	800b8c2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a4:	3310      	adds	r3, #16
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f000 feb0 	bl	800c60c <xTaskRemoveFromEventList>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d007      	beq.n	800b8c2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b8b2:	4b55      	ldr	r3, [pc, #340]	; (800ba08 <xQueueSemaphoreTake+0x224>)
 800b8b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8b8:	601a      	str	r2, [r3, #0]
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b8c2:	f001 fbef 	bl	800d0a4 <vPortExitCritical>
				return pdPASS;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e099      	b.n	800b9fe <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d113      	bne.n	800b8f8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00c      	beq.n	800b8f0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800b8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8da:	b672      	cpsid	i
 800b8dc:	f383 8811 	msr	BASEPRI, r3
 800b8e0:	f3bf 8f6f 	isb	sy
 800b8e4:	f3bf 8f4f 	dsb	sy
 800b8e8:	b662      	cpsie	i
 800b8ea:	617b      	str	r3, [r7, #20]
}
 800b8ec:	bf00      	nop
 800b8ee:	e7fe      	b.n	800b8ee <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b8f0:	f001 fbd8 	bl	800d0a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	e082      	b.n	800b9fe <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d106      	bne.n	800b90c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8fe:	f107 030c 	add.w	r3, r7, #12
 800b902:	4618      	mov	r0, r3
 800b904:	f000 fee6 	bl	800c6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b908:	2301      	movs	r3, #1
 800b90a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b90c:	f001 fbca 	bl	800d0a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b910:	f000 fc8c 	bl	800c22c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b914:	f001 fb92 	bl	800d03c <vPortEnterCritical>
 800b918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b91e:	b25b      	sxtb	r3, r3
 800b920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b924:	d103      	bne.n	800b92e <xQueueSemaphoreTake+0x14a>
 800b926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b934:	b25b      	sxtb	r3, r3
 800b936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b93a:	d103      	bne.n	800b944 <xQueueSemaphoreTake+0x160>
 800b93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93e:	2200      	movs	r2, #0
 800b940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b944:	f001 fbae 	bl	800d0a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b948:	463a      	mov	r2, r7
 800b94a:	f107 030c 	add.w	r3, r7, #12
 800b94e:	4611      	mov	r1, r2
 800b950:	4618      	mov	r0, r3
 800b952:	f000 fed5 	bl	800c700 <xTaskCheckForTimeOut>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d132      	bne.n	800b9c2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b95c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b95e:	f000 f94f 	bl	800bc00 <prvIsQueueEmpty>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d026      	beq.n	800b9b6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d109      	bne.n	800b984 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800b970:	f001 fb64 	bl	800d03c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	4618      	mov	r0, r3
 800b97a:	f001 f82d 	bl	800c9d8 <xTaskPriorityInherit>
 800b97e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b980:	f001 fb90 	bl	800d0a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b986:	3324      	adds	r3, #36	; 0x24
 800b988:	683a      	ldr	r2, [r7, #0]
 800b98a:	4611      	mov	r1, r2
 800b98c:	4618      	mov	r0, r3
 800b98e:	f000 fe17 	bl	800c5c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b994:	f000 f8e2 	bl	800bb5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b998:	f000 fc56 	bl	800c248 <xTaskResumeAll>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f47f af66 	bne.w	800b870 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800b9a4:	4b18      	ldr	r3, [pc, #96]	; (800ba08 <xQueueSemaphoreTake+0x224>)
 800b9a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9aa:	601a      	str	r2, [r3, #0]
 800b9ac:	f3bf 8f4f 	dsb	sy
 800b9b0:	f3bf 8f6f 	isb	sy
 800b9b4:	e75c      	b.n	800b870 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b9b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9b8:	f000 f8d0 	bl	800bb5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b9bc:	f000 fc44 	bl	800c248 <xTaskResumeAll>
 800b9c0:	e756      	b.n	800b870 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b9c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9c4:	f000 f8ca 	bl	800bb5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b9c8:	f000 fc3e 	bl	800c248 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b9cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9ce:	f000 f917 	bl	800bc00 <prvIsQueueEmpty>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f43f af4b 	beq.w	800b870 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00d      	beq.n	800b9fc <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800b9e0:	f001 fb2c 	bl	800d03c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b9e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9e6:	f000 f811 	bl	800ba0c <prvGetDisinheritPriorityAfterTimeout>
 800b9ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f001 f8fa 	bl	800cbec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b9f8:	f001 fb54 	bl	800d0a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b9fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3738      	adds	r7, #56	; 0x38
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	e000ed04 	.word	0xe000ed04

0800ba0c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d006      	beq.n	800ba2a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f1c3 0307 	rsb	r3, r3, #7
 800ba26:	60fb      	str	r3, [r7, #12]
 800ba28:	e001      	b.n	800ba2e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
	}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3714      	adds	r7, #20
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b086      	sub	sp, #24
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10d      	bne.n	800ba76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d14d      	bne.n	800bafe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	4618      	mov	r0, r3
 800ba68:	f001 f836 	bl	800cad8 <xTaskPriorityDisinherit>
 800ba6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2200      	movs	r2, #0
 800ba72:	609a      	str	r2, [r3, #8]
 800ba74:	e043      	b.n	800bafe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d119      	bne.n	800bab0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6858      	ldr	r0, [r3, #4]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba84:	461a      	mov	r2, r3
 800ba86:	68b9      	ldr	r1, [r7, #8]
 800ba88:	f001 fe0e 	bl	800d6a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	685a      	ldr	r2, [r3, #4]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba94:	441a      	add	r2, r3
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	685a      	ldr	r2, [r3, #4]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d32b      	bcc.n	800bafe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	605a      	str	r2, [r3, #4]
 800baae:	e026      	b.n	800bafe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	68d8      	ldr	r0, [r3, #12]
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab8:	461a      	mov	r2, r3
 800baba:	68b9      	ldr	r1, [r7, #8]
 800babc:	f001 fdf4 	bl	800d6a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	68da      	ldr	r2, [r3, #12]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac8:	425b      	negs	r3, r3
 800baca:	441a      	add	r2, r3
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	68da      	ldr	r2, [r3, #12]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d207      	bcs.n	800baec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	689a      	ldr	r2, [r3, #8]
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae4:	425b      	negs	r3, r3
 800bae6:	441a      	add	r2, r3
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d105      	bne.n	800bafe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d002      	beq.n	800bafe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	3b01      	subs	r3, #1
 800bafc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	1c5a      	adds	r2, r3, #1
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bb06:	697b      	ldr	r3, [r7, #20]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3718      	adds	r7, #24
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d018      	beq.n	800bb54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	68da      	ldr	r2, [r3, #12]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb2a:	441a      	add	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	68da      	ldr	r2, [r3, #12]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d303      	bcc.n	800bb44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	68d9      	ldr	r1, [r3, #12]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	6838      	ldr	r0, [r7, #0]
 800bb50:	f001 fdaa 	bl	800d6a8 <memcpy>
	}
}
 800bb54:	bf00      	nop
 800bb56:	3708      	adds	r7, #8
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bb64:	f001 fa6a 	bl	800d03c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb70:	e011      	b.n	800bb96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d012      	beq.n	800bba0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	3324      	adds	r3, #36	; 0x24
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f000 fd44 	bl	800c60c <xTaskRemoveFromEventList>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d001      	beq.n	800bb8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bb8a:	f000 fe1f 	bl	800c7cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bb8e:	7bfb      	ldrb	r3, [r7, #15]
 800bb90:	3b01      	subs	r3, #1
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	dce9      	bgt.n	800bb72 <prvUnlockQueue+0x16>
 800bb9e:	e000      	b.n	800bba2 <prvUnlockQueue+0x46>
					break;
 800bba0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	22ff      	movs	r2, #255	; 0xff
 800bba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bbaa:	f001 fa7b 	bl	800d0a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bbae:	f001 fa45 	bl	800d03c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bbba:	e011      	b.n	800bbe0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	691b      	ldr	r3, [r3, #16]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d012      	beq.n	800bbea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	3310      	adds	r3, #16
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f000 fd1f 	bl	800c60c <xTaskRemoveFromEventList>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d001      	beq.n	800bbd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bbd4:	f000 fdfa 	bl	800c7cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bbd8:	7bbb      	ldrb	r3, [r7, #14]
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bbe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	dce9      	bgt.n	800bbbc <prvUnlockQueue+0x60>
 800bbe8:	e000      	b.n	800bbec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bbea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	22ff      	movs	r2, #255	; 0xff
 800bbf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bbf4:	f001 fa56 	bl	800d0a4 <vPortExitCritical>
}
 800bbf8:	bf00      	nop
 800bbfa:	3710      	adds	r7, #16
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc08:	f001 fa18 	bl	800d03c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d102      	bne.n	800bc1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bc14:	2301      	movs	r3, #1
 800bc16:	60fb      	str	r3, [r7, #12]
 800bc18:	e001      	b.n	800bc1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc1e:	f001 fa41 	bl	800d0a4 <vPortExitCritical>

	return xReturn;
 800bc22:	68fb      	ldr	r3, [r7, #12]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3710      	adds	r7, #16
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc34:	f001 fa02 	bl	800d03c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d102      	bne.n	800bc4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bc44:	2301      	movs	r3, #1
 800bc46:	60fb      	str	r3, [r7, #12]
 800bc48:	e001      	b.n	800bc4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc4e:	f001 fa29 	bl	800d0a4 <vPortExitCritical>

	return xReturn;
 800bc52:	68fb      	ldr	r3, [r7, #12]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3710      	adds	r7, #16
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b08e      	sub	sp, #56	; 0x38
 800bc60:	af04      	add	r7, sp, #16
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	607a      	str	r2, [r7, #4]
 800bc68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10c      	bne.n	800bc8a <xTaskCreateStatic+0x2e>
	__asm volatile
 800bc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc74:	b672      	cpsid	i
 800bc76:	f383 8811 	msr	BASEPRI, r3
 800bc7a:	f3bf 8f6f 	isb	sy
 800bc7e:	f3bf 8f4f 	dsb	sy
 800bc82:	b662      	cpsie	i
 800bc84:	623b      	str	r3, [r7, #32]
}
 800bc86:	bf00      	nop
 800bc88:	e7fe      	b.n	800bc88 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10c      	bne.n	800bcaa <xTaskCreateStatic+0x4e>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc94:	b672      	cpsid	i
 800bc96:	f383 8811 	msr	BASEPRI, r3
 800bc9a:	f3bf 8f6f 	isb	sy
 800bc9e:	f3bf 8f4f 	dsb	sy
 800bca2:	b662      	cpsie	i
 800bca4:	61fb      	str	r3, [r7, #28]
}
 800bca6:	bf00      	nop
 800bca8:	e7fe      	b.n	800bca8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bcaa:	23b4      	movs	r3, #180	; 0xb4
 800bcac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	2bb4      	cmp	r3, #180	; 0xb4
 800bcb2:	d00c      	beq.n	800bcce <xTaskCreateStatic+0x72>
	__asm volatile
 800bcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb8:	b672      	cpsid	i
 800bcba:	f383 8811 	msr	BASEPRI, r3
 800bcbe:	f3bf 8f6f 	isb	sy
 800bcc2:	f3bf 8f4f 	dsb	sy
 800bcc6:	b662      	cpsie	i
 800bcc8:	61bb      	str	r3, [r7, #24]
}
 800bcca:	bf00      	nop
 800bccc:	e7fe      	b.n	800bccc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bcce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d01e      	beq.n	800bd14 <xTaskCreateStatic+0xb8>
 800bcd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d01b      	beq.n	800bd14 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bce4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce8:	2202      	movs	r2, #2
 800bcea:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bcee:	2300      	movs	r3, #0
 800bcf0:	9303      	str	r3, [sp, #12]
 800bcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf4:	9302      	str	r3, [sp, #8]
 800bcf6:	f107 0314 	add.w	r3, r7, #20
 800bcfa:	9301      	str	r3, [sp, #4]
 800bcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	68b9      	ldr	r1, [r7, #8]
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	f000 f850 	bl	800bdac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd0e:	f000 f8ed 	bl	800beec <prvAddNewTaskToReadyList>
 800bd12:	e001      	b.n	800bd18 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800bd14:	2300      	movs	r3, #0
 800bd16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bd18:	697b      	ldr	r3, [r7, #20]
	}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3728      	adds	r7, #40	; 0x28
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}

0800bd22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b08c      	sub	sp, #48	; 0x30
 800bd26:	af04      	add	r7, sp, #16
 800bd28:	60f8      	str	r0, [r7, #12]
 800bd2a:	60b9      	str	r1, [r7, #8]
 800bd2c:	603b      	str	r3, [r7, #0]
 800bd2e:	4613      	mov	r3, r2
 800bd30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd32:	88fb      	ldrh	r3, [r7, #6]
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4618      	mov	r0, r3
 800bd38:	f001 faac 	bl	800d294 <pvPortMalloc>
 800bd3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00e      	beq.n	800bd62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd44:	20b4      	movs	r0, #180	; 0xb4
 800bd46:	f001 faa5 	bl	800d294 <pvPortMalloc>
 800bd4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d003      	beq.n	800bd5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bd52:	69fb      	ldr	r3, [r7, #28]
 800bd54:	697a      	ldr	r2, [r7, #20]
 800bd56:	631a      	str	r2, [r3, #48]	; 0x30
 800bd58:	e005      	b.n	800bd66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bd5a:	6978      	ldr	r0, [r7, #20]
 800bd5c:	f001 fb64 	bl	800d428 <vPortFree>
 800bd60:	e001      	b.n	800bd66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bd62:	2300      	movs	r3, #0
 800bd64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bd66:	69fb      	ldr	r3, [r7, #28]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d017      	beq.n	800bd9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd74:	88fa      	ldrh	r2, [r7, #6]
 800bd76:	2300      	movs	r3, #0
 800bd78:	9303      	str	r3, [sp, #12]
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	9302      	str	r3, [sp, #8]
 800bd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd80:	9301      	str	r3, [sp, #4]
 800bd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd84:	9300      	str	r3, [sp, #0]
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	68b9      	ldr	r1, [r7, #8]
 800bd8a:	68f8      	ldr	r0, [r7, #12]
 800bd8c:	f000 f80e 	bl	800bdac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd90:	69f8      	ldr	r0, [r7, #28]
 800bd92:	f000 f8ab 	bl	800beec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd96:	2301      	movs	r3, #1
 800bd98:	61bb      	str	r3, [r7, #24]
 800bd9a:	e002      	b.n	800bda2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd9c:	f04f 33ff 	mov.w	r3, #4294967295
 800bda0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bda2:	69bb      	ldr	r3, [r7, #24]
	}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3720      	adds	r7, #32
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b088      	sub	sp, #32
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	607a      	str	r2, [r7, #4]
 800bdb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdbe:	6879      	ldr	r1, [r7, #4]
 800bdc0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bdc4:	440b      	add	r3, r1
 800bdc6:	009b      	lsls	r3, r3, #2
 800bdc8:	4413      	add	r3, r2
 800bdca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	f023 0307 	bic.w	r3, r3, #7
 800bdd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	f003 0307 	and.w	r3, r3, #7
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d00c      	beq.n	800bdf8 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800bdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde2:	b672      	cpsid	i
 800bde4:	f383 8811 	msr	BASEPRI, r3
 800bde8:	f3bf 8f6f 	isb	sy
 800bdec:	f3bf 8f4f 	dsb	sy
 800bdf0:	b662      	cpsie	i
 800bdf2:	617b      	str	r3, [r7, #20]
}
 800bdf4:	bf00      	nop
 800bdf6:	e7fe      	b.n	800bdf6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d01f      	beq.n	800be3e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bdfe:	2300      	movs	r3, #0
 800be00:	61fb      	str	r3, [r7, #28]
 800be02:	e012      	b.n	800be2a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800be04:	68ba      	ldr	r2, [r7, #8]
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	4413      	add	r3, r2
 800be0a:	7819      	ldrb	r1, [r3, #0]
 800be0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	4413      	add	r3, r2
 800be12:	3334      	adds	r3, #52	; 0x34
 800be14:	460a      	mov	r2, r1
 800be16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800be18:	68ba      	ldr	r2, [r7, #8]
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	4413      	add	r3, r2
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d006      	beq.n	800be32 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	3301      	adds	r3, #1
 800be28:	61fb      	str	r3, [r7, #28]
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	2b0f      	cmp	r3, #15
 800be2e:	d9e9      	bls.n	800be04 <prvInitialiseNewTask+0x58>
 800be30:	e000      	b.n	800be34 <prvInitialiseNewTask+0x88>
			{
				break;
 800be32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be36:	2200      	movs	r2, #0
 800be38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800be3c:	e003      	b.n	800be46 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800be3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be40:	2200      	movs	r2, #0
 800be42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800be46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be48:	2b06      	cmp	r3, #6
 800be4a:	d901      	bls.n	800be50 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800be4c:	2306      	movs	r3, #6
 800be4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800be50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800be56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800be5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5e:	2200      	movs	r2, #0
 800be60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	3304      	adds	r3, #4
 800be66:	4618      	mov	r0, r3
 800be68:	f7ff f84d 	bl	800af06 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800be6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6e:	3318      	adds	r3, #24
 800be70:	4618      	mov	r0, r3
 800be72:	f7ff f848 	bl	800af06 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7e:	f1c3 0207 	rsb	r2, r3, #7
 800be82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800be8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8e:	2200      	movs	r2, #0
 800be90:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be96:	2200      	movs	r2, #0
 800be98:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800be9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9e:	334c      	adds	r3, #76	; 0x4c
 800bea0:	2260      	movs	r2, #96	; 0x60
 800bea2:	2100      	movs	r1, #0
 800bea4:	4618      	mov	r0, r3
 800bea6:	f001 fc0d 	bl	800d6c4 <memset>
 800beaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beac:	4a0c      	ldr	r2, [pc, #48]	; (800bee0 <prvInitialiseNewTask+0x134>)
 800beae:	651a      	str	r2, [r3, #80]	; 0x50
 800beb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb2:	4a0c      	ldr	r2, [pc, #48]	; (800bee4 <prvInitialiseNewTask+0x138>)
 800beb4:	655a      	str	r2, [r3, #84]	; 0x54
 800beb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb8:	4a0b      	ldr	r2, [pc, #44]	; (800bee8 <prvInitialiseNewTask+0x13c>)
 800beba:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bebc:	683a      	ldr	r2, [r7, #0]
 800bebe:	68f9      	ldr	r1, [r7, #12]
 800bec0:	69b8      	ldr	r0, [r7, #24]
 800bec2:	f000 ffab 	bl	800ce1c <pxPortInitialiseStack>
 800bec6:	4602      	mov	r2, r0
 800bec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800becc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d002      	beq.n	800bed8 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bed6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bed8:	bf00      	nop
 800beda:	3720      	adds	r7, #32
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	0800f8f8 	.word	0x0800f8f8
 800bee4:	0800f918 	.word	0x0800f918
 800bee8:	0800f8d8 	.word	0x0800f8d8

0800beec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bef4:	f001 f8a2 	bl	800d03c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bef8:	4b2a      	ldr	r3, [pc, #168]	; (800bfa4 <prvAddNewTaskToReadyList+0xb8>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	3301      	adds	r3, #1
 800befe:	4a29      	ldr	r2, [pc, #164]	; (800bfa4 <prvAddNewTaskToReadyList+0xb8>)
 800bf00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bf02:	4b29      	ldr	r3, [pc, #164]	; (800bfa8 <prvAddNewTaskToReadyList+0xbc>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d109      	bne.n	800bf1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bf0a:	4a27      	ldr	r2, [pc, #156]	; (800bfa8 <prvAddNewTaskToReadyList+0xbc>)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bf10:	4b24      	ldr	r3, [pc, #144]	; (800bfa4 <prvAddNewTaskToReadyList+0xb8>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d110      	bne.n	800bf3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bf18:	f000 fc7c 	bl	800c814 <prvInitialiseTaskLists>
 800bf1c:	e00d      	b.n	800bf3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bf1e:	4b23      	ldr	r3, [pc, #140]	; (800bfac <prvAddNewTaskToReadyList+0xc0>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d109      	bne.n	800bf3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bf26:	4b20      	ldr	r3, [pc, #128]	; (800bfa8 <prvAddNewTaskToReadyList+0xbc>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d802      	bhi.n	800bf3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bf34:	4a1c      	ldr	r2, [pc, #112]	; (800bfa8 <prvAddNewTaskToReadyList+0xbc>)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bf3a:	4b1d      	ldr	r3, [pc, #116]	; (800bfb0 <prvAddNewTaskToReadyList+0xc4>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	4a1b      	ldr	r2, [pc, #108]	; (800bfb0 <prvAddNewTaskToReadyList+0xc4>)
 800bf42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf48:	2201      	movs	r2, #1
 800bf4a:	409a      	lsls	r2, r3
 800bf4c:	4b19      	ldr	r3, [pc, #100]	; (800bfb4 <prvAddNewTaskToReadyList+0xc8>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4313      	orrs	r3, r2
 800bf52:	4a18      	ldr	r2, [pc, #96]	; (800bfb4 <prvAddNewTaskToReadyList+0xc8>)
 800bf54:	6013      	str	r3, [r2, #0]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	4413      	add	r3, r2
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	4a15      	ldr	r2, [pc, #84]	; (800bfb8 <prvAddNewTaskToReadyList+0xcc>)
 800bf64:	441a      	add	r2, r3
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	3304      	adds	r3, #4
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	4610      	mov	r0, r2
 800bf6e:	f7fe ffd7 	bl	800af20 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bf72:	f001 f897 	bl	800d0a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bf76:	4b0d      	ldr	r3, [pc, #52]	; (800bfac <prvAddNewTaskToReadyList+0xc0>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00e      	beq.n	800bf9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bf7e:	4b0a      	ldr	r3, [pc, #40]	; (800bfa8 <prvAddNewTaskToReadyList+0xbc>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d207      	bcs.n	800bf9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bf8c:	4b0b      	ldr	r3, [pc, #44]	; (800bfbc <prvAddNewTaskToReadyList+0xd0>)
 800bf8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf92:	601a      	str	r2, [r3, #0]
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf9c:	bf00      	nop
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	20000660 	.word	0x20000660
 800bfa8:	20000560 	.word	0x20000560
 800bfac:	2000066c 	.word	0x2000066c
 800bfb0:	2000067c 	.word	0x2000067c
 800bfb4:	20000668 	.word	0x20000668
 800bfb8:	20000564 	.word	0x20000564
 800bfbc:	e000ed04 	.word	0xe000ed04

0800bfc0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800bfc8:	f001 f838 	bl	800d03c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d102      	bne.n	800bfd8 <vTaskDelete+0x18>
 800bfd2:	4b3a      	ldr	r3, [pc, #232]	; (800c0bc <vTaskDelete+0xfc>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	e000      	b.n	800bfda <vTaskDelete+0x1a>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	3304      	adds	r3, #4
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7fe fffa 	bl	800afda <uxListRemove>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d115      	bne.n	800c018 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bff0:	4933      	ldr	r1, [pc, #204]	; (800c0c0 <vTaskDelete+0x100>)
 800bff2:	4613      	mov	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4413      	add	r3, r2
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	440b      	add	r3, r1
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d10a      	bne.n	800c018 <vTaskDelete+0x58>
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c006:	2201      	movs	r2, #1
 800c008:	fa02 f303 	lsl.w	r3, r2, r3
 800c00c:	43da      	mvns	r2, r3
 800c00e:	4b2d      	ldr	r3, [pc, #180]	; (800c0c4 <vTaskDelete+0x104>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4013      	ands	r3, r2
 800c014:	4a2b      	ldr	r2, [pc, #172]	; (800c0c4 <vTaskDelete+0x104>)
 800c016:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d004      	beq.n	800c02a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	3318      	adds	r3, #24
 800c024:	4618      	mov	r0, r3
 800c026:	f7fe ffd8 	bl	800afda <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c02a:	4b27      	ldr	r3, [pc, #156]	; (800c0c8 <vTaskDelete+0x108>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	3301      	adds	r3, #1
 800c030:	4a25      	ldr	r2, [pc, #148]	; (800c0c8 <vTaskDelete+0x108>)
 800c032:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c034:	4b21      	ldr	r3, [pc, #132]	; (800c0bc <vTaskDelete+0xfc>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	68fa      	ldr	r2, [r7, #12]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d10b      	bne.n	800c056 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	3304      	adds	r3, #4
 800c042:	4619      	mov	r1, r3
 800c044:	4821      	ldr	r0, [pc, #132]	; (800c0cc <vTaskDelete+0x10c>)
 800c046:	f7fe ff6b 	bl	800af20 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c04a:	4b21      	ldr	r3, [pc, #132]	; (800c0d0 <vTaskDelete+0x110>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	3301      	adds	r3, #1
 800c050:	4a1f      	ldr	r2, [pc, #124]	; (800c0d0 <vTaskDelete+0x110>)
 800c052:	6013      	str	r3, [r2, #0]
 800c054:	e009      	b.n	800c06a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c056:	4b1f      	ldr	r3, [pc, #124]	; (800c0d4 <vTaskDelete+0x114>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	3b01      	subs	r3, #1
 800c05c:	4a1d      	ldr	r2, [pc, #116]	; (800c0d4 <vTaskDelete+0x114>)
 800c05e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800c060:	68f8      	ldr	r0, [r7, #12]
 800c062:	f000 fc45 	bl	800c8f0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c066:	f000 fc79 	bl	800c95c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800c06a:	f001 f81b 	bl	800d0a4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c06e:	4b1a      	ldr	r3, [pc, #104]	; (800c0d8 <vTaskDelete+0x118>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d01d      	beq.n	800c0b2 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800c076:	4b11      	ldr	r3, [pc, #68]	; (800c0bc <vTaskDelete+0xfc>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68fa      	ldr	r2, [r7, #12]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d118      	bne.n	800c0b2 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c080:	4b16      	ldr	r3, [pc, #88]	; (800c0dc <vTaskDelete+0x11c>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d00c      	beq.n	800c0a2 <vTaskDelete+0xe2>
	__asm volatile
 800c088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c08c:	b672      	cpsid	i
 800c08e:	f383 8811 	msr	BASEPRI, r3
 800c092:	f3bf 8f6f 	isb	sy
 800c096:	f3bf 8f4f 	dsb	sy
 800c09a:	b662      	cpsie	i
 800c09c:	60bb      	str	r3, [r7, #8]
}
 800c09e:	bf00      	nop
 800c0a0:	e7fe      	b.n	800c0a0 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800c0a2:	4b0f      	ldr	r3, [pc, #60]	; (800c0e0 <vTaskDelete+0x120>)
 800c0a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0a8:	601a      	str	r2, [r3, #0]
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c0b2:	bf00      	nop
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20000560 	.word	0x20000560
 800c0c0:	20000564 	.word	0x20000564
 800c0c4:	20000668 	.word	0x20000668
 800c0c8:	2000067c 	.word	0x2000067c
 800c0cc:	20000634 	.word	0x20000634
 800c0d0:	20000648 	.word	0x20000648
 800c0d4:	20000660 	.word	0x20000660
 800c0d8:	2000066c 	.word	0x2000066c
 800c0dc:	20000688 	.word	0x20000688
 800c0e0:	e000ed04 	.word	0xe000ed04

0800c0e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d019      	beq.n	800c12a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c0f6:	4b14      	ldr	r3, [pc, #80]	; (800c148 <vTaskDelay+0x64>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00c      	beq.n	800c118 <vTaskDelay+0x34>
	__asm volatile
 800c0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c102:	b672      	cpsid	i
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	b662      	cpsie	i
 800c112:	60bb      	str	r3, [r7, #8]
}
 800c114:	bf00      	nop
 800c116:	e7fe      	b.n	800c116 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c118:	f000 f888 	bl	800c22c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c11c:	2100      	movs	r1, #0
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 fe16 	bl	800cd50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c124:	f000 f890 	bl	800c248 <xTaskResumeAll>
 800c128:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d107      	bne.n	800c140 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c130:	4b06      	ldr	r3, [pc, #24]	; (800c14c <vTaskDelay+0x68>)
 800c132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c136:	601a      	str	r2, [r3, #0]
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c140:	bf00      	nop
 800c142:	3710      	adds	r7, #16
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	20000688 	.word	0x20000688
 800c14c:	e000ed04 	.word	0xe000ed04

0800c150 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b08a      	sub	sp, #40	; 0x28
 800c154:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c156:	2300      	movs	r3, #0
 800c158:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c15a:	2300      	movs	r3, #0
 800c15c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c15e:	463a      	mov	r2, r7
 800c160:	1d39      	adds	r1, r7, #4
 800c162:	f107 0308 	add.w	r3, r7, #8
 800c166:	4618      	mov	r0, r3
 800c168:	f7f4 f9ce 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c16c:	6839      	ldr	r1, [r7, #0]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	68ba      	ldr	r2, [r7, #8]
 800c172:	9202      	str	r2, [sp, #8]
 800c174:	9301      	str	r3, [sp, #4]
 800c176:	2300      	movs	r3, #0
 800c178:	9300      	str	r3, [sp, #0]
 800c17a:	2300      	movs	r3, #0
 800c17c:	460a      	mov	r2, r1
 800c17e:	4923      	ldr	r1, [pc, #140]	; (800c20c <vTaskStartScheduler+0xbc>)
 800c180:	4823      	ldr	r0, [pc, #140]	; (800c210 <vTaskStartScheduler+0xc0>)
 800c182:	f7ff fd6b 	bl	800bc5c <xTaskCreateStatic>
 800c186:	4603      	mov	r3, r0
 800c188:	4a22      	ldr	r2, [pc, #136]	; (800c214 <vTaskStartScheduler+0xc4>)
 800c18a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c18c:	4b21      	ldr	r3, [pc, #132]	; (800c214 <vTaskStartScheduler+0xc4>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d002      	beq.n	800c19a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c194:	2301      	movs	r3, #1
 800c196:	617b      	str	r3, [r7, #20]
 800c198:	e001      	b.n	800c19e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c19a:	2300      	movs	r3, #0
 800c19c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d11d      	bne.n	800c1e0 <vTaskStartScheduler+0x90>
	__asm volatile
 800c1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a8:	b672      	cpsid	i
 800c1aa:	f383 8811 	msr	BASEPRI, r3
 800c1ae:	f3bf 8f6f 	isb	sy
 800c1b2:	f3bf 8f4f 	dsb	sy
 800c1b6:	b662      	cpsie	i
 800c1b8:	613b      	str	r3, [r7, #16]
}
 800c1ba:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c1bc:	4b16      	ldr	r3, [pc, #88]	; (800c218 <vTaskStartScheduler+0xc8>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	334c      	adds	r3, #76	; 0x4c
 800c1c2:	4a16      	ldr	r2, [pc, #88]	; (800c21c <vTaskStartScheduler+0xcc>)
 800c1c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c1c6:	4b16      	ldr	r3, [pc, #88]	; (800c220 <vTaskStartScheduler+0xd0>)
 800c1c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c1ce:	4b15      	ldr	r3, [pc, #84]	; (800c224 <vTaskStartScheduler+0xd4>)
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c1d4:	4b14      	ldr	r3, [pc, #80]	; (800c228 <vTaskStartScheduler+0xd8>)
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c1da:	f000 feb1 	bl	800cf40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c1de:	e010      	b.n	800c202 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e6:	d10c      	bne.n	800c202 <vTaskStartScheduler+0xb2>
	__asm volatile
 800c1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ec:	b672      	cpsid	i
 800c1ee:	f383 8811 	msr	BASEPRI, r3
 800c1f2:	f3bf 8f6f 	isb	sy
 800c1f6:	f3bf 8f4f 	dsb	sy
 800c1fa:	b662      	cpsie	i
 800c1fc:	60fb      	str	r3, [r7, #12]
}
 800c1fe:	bf00      	nop
 800c200:	e7fe      	b.n	800c200 <vTaskStartScheduler+0xb0>
}
 800c202:	bf00      	nop
 800c204:	3718      	adds	r7, #24
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	0800d984 	.word	0x0800d984
 800c210:	0800c7e5 	.word	0x0800c7e5
 800c214:	20000684 	.word	0x20000684
 800c218:	20000560 	.word	0x20000560
 800c21c:	2000005c 	.word	0x2000005c
 800c220:	20000680 	.word	0x20000680
 800c224:	2000066c 	.word	0x2000066c
 800c228:	20000664 	.word	0x20000664

0800c22c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c22c:	b480      	push	{r7}
 800c22e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c230:	4b04      	ldr	r3, [pc, #16]	; (800c244 <vTaskSuspendAll+0x18>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	3301      	adds	r3, #1
 800c236:	4a03      	ldr	r2, [pc, #12]	; (800c244 <vTaskSuspendAll+0x18>)
 800c238:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c23a:	bf00      	nop
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr
 800c244:	20000688 	.word	0x20000688

0800c248 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c24e:	2300      	movs	r3, #0
 800c250:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c252:	2300      	movs	r3, #0
 800c254:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c256:	4b42      	ldr	r3, [pc, #264]	; (800c360 <xTaskResumeAll+0x118>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d10c      	bne.n	800c278 <xTaskResumeAll+0x30>
	__asm volatile
 800c25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c262:	b672      	cpsid	i
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	b662      	cpsie	i
 800c272:	603b      	str	r3, [r7, #0]
}
 800c274:	bf00      	nop
 800c276:	e7fe      	b.n	800c276 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c278:	f000 fee0 	bl	800d03c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c27c:	4b38      	ldr	r3, [pc, #224]	; (800c360 <xTaskResumeAll+0x118>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	3b01      	subs	r3, #1
 800c282:	4a37      	ldr	r2, [pc, #220]	; (800c360 <xTaskResumeAll+0x118>)
 800c284:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c286:	4b36      	ldr	r3, [pc, #216]	; (800c360 <xTaskResumeAll+0x118>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d161      	bne.n	800c352 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c28e:	4b35      	ldr	r3, [pc, #212]	; (800c364 <xTaskResumeAll+0x11c>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d05d      	beq.n	800c352 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c296:	e02e      	b.n	800c2f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c298:	4b33      	ldr	r3, [pc, #204]	; (800c368 <xTaskResumeAll+0x120>)
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	3318      	adds	r3, #24
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7fe fe98 	bl	800afda <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	3304      	adds	r3, #4
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7fe fe93 	bl	800afda <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	409a      	lsls	r2, r3
 800c2bc:	4b2b      	ldr	r3, [pc, #172]	; (800c36c <xTaskResumeAll+0x124>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	4a2a      	ldr	r2, [pc, #168]	; (800c36c <xTaskResumeAll+0x124>)
 800c2c4:	6013      	str	r3, [r2, #0]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4413      	add	r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	4a27      	ldr	r2, [pc, #156]	; (800c370 <xTaskResumeAll+0x128>)
 800c2d4:	441a      	add	r2, r3
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	3304      	adds	r3, #4
 800c2da:	4619      	mov	r1, r3
 800c2dc:	4610      	mov	r0, r2
 800c2de:	f7fe fe1f 	bl	800af20 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2e6:	4b23      	ldr	r3, [pc, #140]	; (800c374 <xTaskResumeAll+0x12c>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d302      	bcc.n	800c2f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c2f0:	4b21      	ldr	r3, [pc, #132]	; (800c378 <xTaskResumeAll+0x130>)
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2f6:	4b1c      	ldr	r3, [pc, #112]	; (800c368 <xTaskResumeAll+0x120>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1cc      	bne.n	800c298 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d001      	beq.n	800c308 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c304:	f000 fb2a 	bl	800c95c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c308:	4b1c      	ldr	r3, [pc, #112]	; (800c37c <xTaskResumeAll+0x134>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d010      	beq.n	800c336 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c314:	f000 f836 	bl	800c384 <xTaskIncrementTick>
 800c318:	4603      	mov	r3, r0
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d002      	beq.n	800c324 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c31e:	4b16      	ldr	r3, [pc, #88]	; (800c378 <xTaskResumeAll+0x130>)
 800c320:	2201      	movs	r2, #1
 800c322:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	3b01      	subs	r3, #1
 800c328:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d1f1      	bne.n	800c314 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800c330:	4b12      	ldr	r3, [pc, #72]	; (800c37c <xTaskResumeAll+0x134>)
 800c332:	2200      	movs	r2, #0
 800c334:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c336:	4b10      	ldr	r3, [pc, #64]	; (800c378 <xTaskResumeAll+0x130>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d009      	beq.n	800c352 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c33e:	2301      	movs	r3, #1
 800c340:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c342:	4b0f      	ldr	r3, [pc, #60]	; (800c380 <xTaskResumeAll+0x138>)
 800c344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c348:	601a      	str	r2, [r3, #0]
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c352:	f000 fea7 	bl	800d0a4 <vPortExitCritical>

	return xAlreadyYielded;
 800c356:	68bb      	ldr	r3, [r7, #8]
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	20000688 	.word	0x20000688
 800c364:	20000660 	.word	0x20000660
 800c368:	20000620 	.word	0x20000620
 800c36c:	20000668 	.word	0x20000668
 800c370:	20000564 	.word	0x20000564
 800c374:	20000560 	.word	0x20000560
 800c378:	20000674 	.word	0x20000674
 800c37c:	20000670 	.word	0x20000670
 800c380:	e000ed04 	.word	0xe000ed04

0800c384 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b086      	sub	sp, #24
 800c388:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c38a:	2300      	movs	r3, #0
 800c38c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c38e:	4b4f      	ldr	r3, [pc, #316]	; (800c4cc <xTaskIncrementTick+0x148>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	f040 808a 	bne.w	800c4ac <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c398:	4b4d      	ldr	r3, [pc, #308]	; (800c4d0 <xTaskIncrementTick+0x14c>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	3301      	adds	r3, #1
 800c39e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c3a0:	4a4b      	ldr	r2, [pc, #300]	; (800c4d0 <xTaskIncrementTick+0x14c>)
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d122      	bne.n	800c3f2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c3ac:	4b49      	ldr	r3, [pc, #292]	; (800c4d4 <xTaskIncrementTick+0x150>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d00c      	beq.n	800c3d0 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ba:	b672      	cpsid	i
 800c3bc:	f383 8811 	msr	BASEPRI, r3
 800c3c0:	f3bf 8f6f 	isb	sy
 800c3c4:	f3bf 8f4f 	dsb	sy
 800c3c8:	b662      	cpsie	i
 800c3ca:	603b      	str	r3, [r7, #0]
}
 800c3cc:	bf00      	nop
 800c3ce:	e7fe      	b.n	800c3ce <xTaskIncrementTick+0x4a>
 800c3d0:	4b40      	ldr	r3, [pc, #256]	; (800c4d4 <xTaskIncrementTick+0x150>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	60fb      	str	r3, [r7, #12]
 800c3d6:	4b40      	ldr	r3, [pc, #256]	; (800c4d8 <xTaskIncrementTick+0x154>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a3e      	ldr	r2, [pc, #248]	; (800c4d4 <xTaskIncrementTick+0x150>)
 800c3dc:	6013      	str	r3, [r2, #0]
 800c3de:	4a3e      	ldr	r2, [pc, #248]	; (800c4d8 <xTaskIncrementTick+0x154>)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6013      	str	r3, [r2, #0]
 800c3e4:	4b3d      	ldr	r3, [pc, #244]	; (800c4dc <xTaskIncrementTick+0x158>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	4a3c      	ldr	r2, [pc, #240]	; (800c4dc <xTaskIncrementTick+0x158>)
 800c3ec:	6013      	str	r3, [r2, #0]
 800c3ee:	f000 fab5 	bl	800c95c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c3f2:	4b3b      	ldr	r3, [pc, #236]	; (800c4e0 <xTaskIncrementTick+0x15c>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	693a      	ldr	r2, [r7, #16]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d348      	bcc.n	800c48e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3fc:	4b35      	ldr	r3, [pc, #212]	; (800c4d4 <xTaskIncrementTick+0x150>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d104      	bne.n	800c410 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c406:	4b36      	ldr	r3, [pc, #216]	; (800c4e0 <xTaskIncrementTick+0x15c>)
 800c408:	f04f 32ff 	mov.w	r2, #4294967295
 800c40c:	601a      	str	r2, [r3, #0]
					break;
 800c40e:	e03e      	b.n	800c48e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c410:	4b30      	ldr	r3, [pc, #192]	; (800c4d4 <xTaskIncrementTick+0x150>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c420:	693a      	ldr	r2, [r7, #16]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	429a      	cmp	r2, r3
 800c426:	d203      	bcs.n	800c430 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c428:	4a2d      	ldr	r2, [pc, #180]	; (800c4e0 <xTaskIncrementTick+0x15c>)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c42e:	e02e      	b.n	800c48e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	3304      	adds	r3, #4
 800c434:	4618      	mov	r0, r3
 800c436:	f7fe fdd0 	bl	800afda <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d004      	beq.n	800c44c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	3318      	adds	r3, #24
 800c446:	4618      	mov	r0, r3
 800c448:	f7fe fdc7 	bl	800afda <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c450:	2201      	movs	r2, #1
 800c452:	409a      	lsls	r2, r3
 800c454:	4b23      	ldr	r3, [pc, #140]	; (800c4e4 <xTaskIncrementTick+0x160>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4313      	orrs	r3, r2
 800c45a:	4a22      	ldr	r2, [pc, #136]	; (800c4e4 <xTaskIncrementTick+0x160>)
 800c45c:	6013      	str	r3, [r2, #0]
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c462:	4613      	mov	r3, r2
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	4413      	add	r3, r2
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	4a1f      	ldr	r2, [pc, #124]	; (800c4e8 <xTaskIncrementTick+0x164>)
 800c46c:	441a      	add	r2, r3
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	3304      	adds	r3, #4
 800c472:	4619      	mov	r1, r3
 800c474:	4610      	mov	r0, r2
 800c476:	f7fe fd53 	bl	800af20 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c47e:	4b1b      	ldr	r3, [pc, #108]	; (800c4ec <xTaskIncrementTick+0x168>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c484:	429a      	cmp	r2, r3
 800c486:	d3b9      	bcc.n	800c3fc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c488:	2301      	movs	r3, #1
 800c48a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c48c:	e7b6      	b.n	800c3fc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c48e:	4b17      	ldr	r3, [pc, #92]	; (800c4ec <xTaskIncrementTick+0x168>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c494:	4914      	ldr	r1, [pc, #80]	; (800c4e8 <xTaskIncrementTick+0x164>)
 800c496:	4613      	mov	r3, r2
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	4413      	add	r3, r2
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	440b      	add	r3, r1
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d907      	bls.n	800c4b6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	617b      	str	r3, [r7, #20]
 800c4aa:	e004      	b.n	800c4b6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c4ac:	4b10      	ldr	r3, [pc, #64]	; (800c4f0 <xTaskIncrementTick+0x16c>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	4a0f      	ldr	r2, [pc, #60]	; (800c4f0 <xTaskIncrementTick+0x16c>)
 800c4b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c4b6:	4b0f      	ldr	r3, [pc, #60]	; (800c4f4 <xTaskIncrementTick+0x170>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d001      	beq.n	800c4c2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c4c2:	697b      	ldr	r3, [r7, #20]
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3718      	adds	r7, #24
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	20000688 	.word	0x20000688
 800c4d0:	20000664 	.word	0x20000664
 800c4d4:	20000618 	.word	0x20000618
 800c4d8:	2000061c 	.word	0x2000061c
 800c4dc:	20000678 	.word	0x20000678
 800c4e0:	20000680 	.word	0x20000680
 800c4e4:	20000668 	.word	0x20000668
 800c4e8:	20000564 	.word	0x20000564
 800c4ec:	20000560 	.word	0x20000560
 800c4f0:	20000670 	.word	0x20000670
 800c4f4:	20000674 	.word	0x20000674

0800c4f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b087      	sub	sp, #28
 800c4fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c4fe:	4b2a      	ldr	r3, [pc, #168]	; (800c5a8 <vTaskSwitchContext+0xb0>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d003      	beq.n	800c50e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c506:	4b29      	ldr	r3, [pc, #164]	; (800c5ac <vTaskSwitchContext+0xb4>)
 800c508:	2201      	movs	r2, #1
 800c50a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c50c:	e046      	b.n	800c59c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c50e:	4b27      	ldr	r3, [pc, #156]	; (800c5ac <vTaskSwitchContext+0xb4>)
 800c510:	2200      	movs	r2, #0
 800c512:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c514:	4b26      	ldr	r3, [pc, #152]	; (800c5b0 <vTaskSwitchContext+0xb8>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	fab3 f383 	clz	r3, r3
 800c520:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c522:	7afb      	ldrb	r3, [r7, #11]
 800c524:	f1c3 031f 	rsb	r3, r3, #31
 800c528:	617b      	str	r3, [r7, #20]
 800c52a:	4922      	ldr	r1, [pc, #136]	; (800c5b4 <vTaskSwitchContext+0xbc>)
 800c52c:	697a      	ldr	r2, [r7, #20]
 800c52e:	4613      	mov	r3, r2
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	4413      	add	r3, r2
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	440b      	add	r3, r1
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d10c      	bne.n	800c558 <vTaskSwitchContext+0x60>
	__asm volatile
 800c53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c542:	b672      	cpsid	i
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	b662      	cpsie	i
 800c552:	607b      	str	r3, [r7, #4]
}
 800c554:	bf00      	nop
 800c556:	e7fe      	b.n	800c556 <vTaskSwitchContext+0x5e>
 800c558:	697a      	ldr	r2, [r7, #20]
 800c55a:	4613      	mov	r3, r2
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	4413      	add	r3, r2
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	4a14      	ldr	r2, [pc, #80]	; (800c5b4 <vTaskSwitchContext+0xbc>)
 800c564:	4413      	add	r3, r2
 800c566:	613b      	str	r3, [r7, #16]
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	685a      	ldr	r2, [r3, #4]
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	605a      	str	r2, [r3, #4]
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	685a      	ldr	r2, [r3, #4]
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	3308      	adds	r3, #8
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d104      	bne.n	800c588 <vTaskSwitchContext+0x90>
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	685a      	ldr	r2, [r3, #4]
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	605a      	str	r2, [r3, #4]
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	4a0a      	ldr	r2, [pc, #40]	; (800c5b8 <vTaskSwitchContext+0xc0>)
 800c590:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c592:	4b09      	ldr	r3, [pc, #36]	; (800c5b8 <vTaskSwitchContext+0xc0>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	334c      	adds	r3, #76	; 0x4c
 800c598:	4a08      	ldr	r2, [pc, #32]	; (800c5bc <vTaskSwitchContext+0xc4>)
 800c59a:	6013      	str	r3, [r2, #0]
}
 800c59c:	bf00      	nop
 800c59e:	371c      	adds	r7, #28
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr
 800c5a8:	20000688 	.word	0x20000688
 800c5ac:	20000674 	.word	0x20000674
 800c5b0:	20000668 	.word	0x20000668
 800c5b4:	20000564 	.word	0x20000564
 800c5b8:	20000560 	.word	0x20000560
 800c5bc:	2000005c 	.word	0x2000005c

0800c5c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d10c      	bne.n	800c5ea <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d4:	b672      	cpsid	i
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	b662      	cpsie	i
 800c5e4:	60fb      	str	r3, [r7, #12]
}
 800c5e6:	bf00      	nop
 800c5e8:	e7fe      	b.n	800c5e8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c5ea:	4b07      	ldr	r3, [pc, #28]	; (800c608 <vTaskPlaceOnEventList+0x48>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	3318      	adds	r3, #24
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f7fe fcb8 	bl	800af68 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c5f8:	2101      	movs	r1, #1
 800c5fa:	6838      	ldr	r0, [r7, #0]
 800c5fc:	f000 fba8 	bl	800cd50 <prvAddCurrentTaskToDelayedList>
}
 800c600:	bf00      	nop
 800c602:	3710      	adds	r7, #16
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}
 800c608:	20000560 	.word	0x20000560

0800c60c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b086      	sub	sp, #24
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d10c      	bne.n	800c63c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c626:	b672      	cpsid	i
 800c628:	f383 8811 	msr	BASEPRI, r3
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	b662      	cpsie	i
 800c636:	60fb      	str	r3, [r7, #12]
}
 800c638:	bf00      	nop
 800c63a:	e7fe      	b.n	800c63a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	3318      	adds	r3, #24
 800c640:	4618      	mov	r0, r3
 800c642:	f7fe fcca 	bl	800afda <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c646:	4b1d      	ldr	r3, [pc, #116]	; (800c6bc <xTaskRemoveFromEventList+0xb0>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d11c      	bne.n	800c688 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	3304      	adds	r3, #4
 800c652:	4618      	mov	r0, r3
 800c654:	f7fe fcc1 	bl	800afda <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65c:	2201      	movs	r2, #1
 800c65e:	409a      	lsls	r2, r3
 800c660:	4b17      	ldr	r3, [pc, #92]	; (800c6c0 <xTaskRemoveFromEventList+0xb4>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4313      	orrs	r3, r2
 800c666:	4a16      	ldr	r2, [pc, #88]	; (800c6c0 <xTaskRemoveFromEventList+0xb4>)
 800c668:	6013      	str	r3, [r2, #0]
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c66e:	4613      	mov	r3, r2
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4413      	add	r3, r2
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	4a13      	ldr	r2, [pc, #76]	; (800c6c4 <xTaskRemoveFromEventList+0xb8>)
 800c678:	441a      	add	r2, r3
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	3304      	adds	r3, #4
 800c67e:	4619      	mov	r1, r3
 800c680:	4610      	mov	r0, r2
 800c682:	f7fe fc4d 	bl	800af20 <vListInsertEnd>
 800c686:	e005      	b.n	800c694 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	3318      	adds	r3, #24
 800c68c:	4619      	mov	r1, r3
 800c68e:	480e      	ldr	r0, [pc, #56]	; (800c6c8 <xTaskRemoveFromEventList+0xbc>)
 800c690:	f7fe fc46 	bl	800af20 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c698:	4b0c      	ldr	r3, [pc, #48]	; (800c6cc <xTaskRemoveFromEventList+0xc0>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d905      	bls.n	800c6ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c6a6:	4b0a      	ldr	r3, [pc, #40]	; (800c6d0 <xTaskRemoveFromEventList+0xc4>)
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	601a      	str	r2, [r3, #0]
 800c6ac:	e001      	b.n	800c6b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c6b2:	697b      	ldr	r3, [r7, #20]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3718      	adds	r7, #24
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	20000688 	.word	0x20000688
 800c6c0:	20000668 	.word	0x20000668
 800c6c4:	20000564 	.word	0x20000564
 800c6c8:	20000620 	.word	0x20000620
 800c6cc:	20000560 	.word	0x20000560
 800c6d0:	20000674 	.word	0x20000674

0800c6d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c6dc:	4b06      	ldr	r3, [pc, #24]	; (800c6f8 <vTaskInternalSetTimeOutState+0x24>)
 800c6de:	681a      	ldr	r2, [r3, #0]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c6e4:	4b05      	ldr	r3, [pc, #20]	; (800c6fc <vTaskInternalSetTimeOutState+0x28>)
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	605a      	str	r2, [r3, #4]
}
 800c6ec:	bf00      	nop
 800c6ee:	370c      	adds	r7, #12
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr
 800c6f8:	20000678 	.word	0x20000678
 800c6fc:	20000664 	.word	0x20000664

0800c700 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b088      	sub	sp, #32
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d10c      	bne.n	800c72a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800c710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c714:	b672      	cpsid	i
 800c716:	f383 8811 	msr	BASEPRI, r3
 800c71a:	f3bf 8f6f 	isb	sy
 800c71e:	f3bf 8f4f 	dsb	sy
 800c722:	b662      	cpsie	i
 800c724:	613b      	str	r3, [r7, #16]
}
 800c726:	bf00      	nop
 800c728:	e7fe      	b.n	800c728 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d10c      	bne.n	800c74a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800c730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c734:	b672      	cpsid	i
 800c736:	f383 8811 	msr	BASEPRI, r3
 800c73a:	f3bf 8f6f 	isb	sy
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	b662      	cpsie	i
 800c744:	60fb      	str	r3, [r7, #12]
}
 800c746:	bf00      	nop
 800c748:	e7fe      	b.n	800c748 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800c74a:	f000 fc77 	bl	800d03c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c74e:	4b1d      	ldr	r3, [pc, #116]	; (800c7c4 <xTaskCheckForTimeOut+0xc4>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	69ba      	ldr	r2, [r7, #24]
 800c75a:	1ad3      	subs	r3, r2, r3
 800c75c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c766:	d102      	bne.n	800c76e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c768:	2300      	movs	r3, #0
 800c76a:	61fb      	str	r3, [r7, #28]
 800c76c:	e023      	b.n	800c7b6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	4b15      	ldr	r3, [pc, #84]	; (800c7c8 <xTaskCheckForTimeOut+0xc8>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	429a      	cmp	r2, r3
 800c778:	d007      	beq.n	800c78a <xTaskCheckForTimeOut+0x8a>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	69ba      	ldr	r2, [r7, #24]
 800c780:	429a      	cmp	r2, r3
 800c782:	d302      	bcc.n	800c78a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c784:	2301      	movs	r3, #1
 800c786:	61fb      	str	r3, [r7, #28]
 800c788:	e015      	b.n	800c7b6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	697a      	ldr	r2, [r7, #20]
 800c790:	429a      	cmp	r2, r3
 800c792:	d20b      	bcs.n	800c7ac <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	1ad2      	subs	r2, r2, r3
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f7ff ff97 	bl	800c6d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	61fb      	str	r3, [r7, #28]
 800c7aa:	e004      	b.n	800c7b6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c7b6:	f000 fc75 	bl	800d0a4 <vPortExitCritical>

	return xReturn;
 800c7ba:	69fb      	ldr	r3, [r7, #28]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3720      	adds	r7, #32
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	20000664 	.word	0x20000664
 800c7c8:	20000678 	.word	0x20000678

0800c7cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c7d0:	4b03      	ldr	r3, [pc, #12]	; (800c7e0 <vTaskMissedYield+0x14>)
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	601a      	str	r2, [r3, #0]
}
 800c7d6:	bf00      	nop
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr
 800c7e0:	20000674 	.word	0x20000674

0800c7e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c7ec:	f000 f852 	bl	800c894 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c7f0:	4b06      	ldr	r3, [pc, #24]	; (800c80c <prvIdleTask+0x28>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	d9f9      	bls.n	800c7ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800c7f8:	4b05      	ldr	r3, [pc, #20]	; (800c810 <prvIdleTask+0x2c>)
 800c7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7fe:	601a      	str	r2, [r3, #0]
 800c800:	f3bf 8f4f 	dsb	sy
 800c804:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c808:	e7f0      	b.n	800c7ec <prvIdleTask+0x8>
 800c80a:	bf00      	nop
 800c80c:	20000564 	.word	0x20000564
 800c810:	e000ed04 	.word	0xe000ed04

0800c814 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c81a:	2300      	movs	r3, #0
 800c81c:	607b      	str	r3, [r7, #4]
 800c81e:	e00c      	b.n	800c83a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	4613      	mov	r3, r2
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	4413      	add	r3, r2
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	4a12      	ldr	r2, [pc, #72]	; (800c874 <prvInitialiseTaskLists+0x60>)
 800c82c:	4413      	add	r3, r2
 800c82e:	4618      	mov	r0, r3
 800c830:	f7fe fb49 	bl	800aec6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	3301      	adds	r3, #1
 800c838:	607b      	str	r3, [r7, #4]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2b06      	cmp	r3, #6
 800c83e:	d9ef      	bls.n	800c820 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c840:	480d      	ldr	r0, [pc, #52]	; (800c878 <prvInitialiseTaskLists+0x64>)
 800c842:	f7fe fb40 	bl	800aec6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c846:	480d      	ldr	r0, [pc, #52]	; (800c87c <prvInitialiseTaskLists+0x68>)
 800c848:	f7fe fb3d 	bl	800aec6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c84c:	480c      	ldr	r0, [pc, #48]	; (800c880 <prvInitialiseTaskLists+0x6c>)
 800c84e:	f7fe fb3a 	bl	800aec6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c852:	480c      	ldr	r0, [pc, #48]	; (800c884 <prvInitialiseTaskLists+0x70>)
 800c854:	f7fe fb37 	bl	800aec6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c858:	480b      	ldr	r0, [pc, #44]	; (800c888 <prvInitialiseTaskLists+0x74>)
 800c85a:	f7fe fb34 	bl	800aec6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c85e:	4b0b      	ldr	r3, [pc, #44]	; (800c88c <prvInitialiseTaskLists+0x78>)
 800c860:	4a05      	ldr	r2, [pc, #20]	; (800c878 <prvInitialiseTaskLists+0x64>)
 800c862:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c864:	4b0a      	ldr	r3, [pc, #40]	; (800c890 <prvInitialiseTaskLists+0x7c>)
 800c866:	4a05      	ldr	r2, [pc, #20]	; (800c87c <prvInitialiseTaskLists+0x68>)
 800c868:	601a      	str	r2, [r3, #0]
}
 800c86a:	bf00      	nop
 800c86c:	3708      	adds	r7, #8
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	20000564 	.word	0x20000564
 800c878:	200005f0 	.word	0x200005f0
 800c87c:	20000604 	.word	0x20000604
 800c880:	20000620 	.word	0x20000620
 800c884:	20000634 	.word	0x20000634
 800c888:	2000064c 	.word	0x2000064c
 800c88c:	20000618 	.word	0x20000618
 800c890:	2000061c 	.word	0x2000061c

0800c894 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c89a:	e019      	b.n	800c8d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c89c:	f000 fbce 	bl	800d03c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8a0:	4b10      	ldr	r3, [pc, #64]	; (800c8e4 <prvCheckTasksWaitingTermination+0x50>)
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	3304      	adds	r3, #4
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fe fb94 	bl	800afda <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c8b2:	4b0d      	ldr	r3, [pc, #52]	; (800c8e8 <prvCheckTasksWaitingTermination+0x54>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	3b01      	subs	r3, #1
 800c8b8:	4a0b      	ldr	r2, [pc, #44]	; (800c8e8 <prvCheckTasksWaitingTermination+0x54>)
 800c8ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c8bc:	4b0b      	ldr	r3, [pc, #44]	; (800c8ec <prvCheckTasksWaitingTermination+0x58>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	4a0a      	ldr	r2, [pc, #40]	; (800c8ec <prvCheckTasksWaitingTermination+0x58>)
 800c8c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c8c6:	f000 fbed 	bl	800d0a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 f810 	bl	800c8f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c8d0:	4b06      	ldr	r3, [pc, #24]	; (800c8ec <prvCheckTasksWaitingTermination+0x58>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d1e1      	bne.n	800c89c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c8d8:	bf00      	nop
 800c8da:	bf00      	nop
 800c8dc:	3708      	adds	r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	20000634 	.word	0x20000634
 800c8e8:	20000660 	.word	0x20000660
 800c8ec:	20000648 	.word	0x20000648

0800c8f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	334c      	adds	r3, #76	; 0x4c
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f000 fef7 	bl	800d6f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d108      	bne.n	800c91e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c910:	4618      	mov	r0, r3
 800c912:	f000 fd89 	bl	800d428 <vPortFree>
				vPortFree( pxTCB );
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 fd86 	bl	800d428 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c91c:	e01a      	b.n	800c954 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c924:	2b01      	cmp	r3, #1
 800c926:	d103      	bne.n	800c930 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 fd7d 	bl	800d428 <vPortFree>
	}
 800c92e:	e011      	b.n	800c954 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c936:	2b02      	cmp	r3, #2
 800c938:	d00c      	beq.n	800c954 <prvDeleteTCB+0x64>
	__asm volatile
 800c93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93e:	b672      	cpsid	i
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	b662      	cpsie	i
 800c94e:	60fb      	str	r3, [r7, #12]
}
 800c950:	bf00      	nop
 800c952:	e7fe      	b.n	800c952 <prvDeleteTCB+0x62>
	}
 800c954:	bf00      	nop
 800c956:	3710      	adds	r7, #16
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c962:	4b0c      	ldr	r3, [pc, #48]	; (800c994 <prvResetNextTaskUnblockTime+0x38>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d104      	bne.n	800c976 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c96c:	4b0a      	ldr	r3, [pc, #40]	; (800c998 <prvResetNextTaskUnblockTime+0x3c>)
 800c96e:	f04f 32ff 	mov.w	r2, #4294967295
 800c972:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c974:	e008      	b.n	800c988 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c976:	4b07      	ldr	r3, [pc, #28]	; (800c994 <prvResetNextTaskUnblockTime+0x38>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	4a04      	ldr	r2, [pc, #16]	; (800c998 <prvResetNextTaskUnblockTime+0x3c>)
 800c986:	6013      	str	r3, [r2, #0]
}
 800c988:	bf00      	nop
 800c98a:	370c      	adds	r7, #12
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr
 800c994:	20000618 	.word	0x20000618
 800c998:	20000680 	.word	0x20000680

0800c99c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c9a2:	4b0b      	ldr	r3, [pc, #44]	; (800c9d0 <xTaskGetSchedulerState+0x34>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d102      	bne.n	800c9b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	607b      	str	r3, [r7, #4]
 800c9ae:	e008      	b.n	800c9c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9b0:	4b08      	ldr	r3, [pc, #32]	; (800c9d4 <xTaskGetSchedulerState+0x38>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d102      	bne.n	800c9be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c9b8:	2302      	movs	r3, #2
 800c9ba:	607b      	str	r3, [r7, #4]
 800c9bc:	e001      	b.n	800c9c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c9c2:	687b      	ldr	r3, [r7, #4]
	}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	370c      	adds	r7, #12
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr
 800c9d0:	2000066c 	.word	0x2000066c
 800c9d4:	20000688 	.word	0x20000688

0800c9d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b084      	sub	sp, #16
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d069      	beq.n	800cac2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9f2:	4b36      	ldr	r3, [pc, #216]	; (800cacc <xTaskPriorityInherit+0xf4>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d259      	bcs.n	800cab0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	699b      	ldr	r3, [r3, #24]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	db06      	blt.n	800ca12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca04:	4b31      	ldr	r3, [pc, #196]	; (800cacc <xTaskPriorityInherit+0xf4>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca0a:	f1c3 0207 	rsb	r2, r3, #7
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	6959      	ldr	r1, [r3, #20]
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	4413      	add	r3, r2
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	4a2b      	ldr	r2, [pc, #172]	; (800cad0 <xTaskPriorityInherit+0xf8>)
 800ca24:	4413      	add	r3, r2
 800ca26:	4299      	cmp	r1, r3
 800ca28:	d13a      	bne.n	800caa0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	3304      	adds	r3, #4
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fe fad3 	bl	800afda <uxListRemove>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d115      	bne.n	800ca66 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca3e:	4924      	ldr	r1, [pc, #144]	; (800cad0 <xTaskPriorityInherit+0xf8>)
 800ca40:	4613      	mov	r3, r2
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	4413      	add	r3, r2
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	440b      	add	r3, r1
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10a      	bne.n	800ca66 <xTaskPriorityInherit+0x8e>
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca54:	2201      	movs	r2, #1
 800ca56:	fa02 f303 	lsl.w	r3, r2, r3
 800ca5a:	43da      	mvns	r2, r3
 800ca5c:	4b1d      	ldr	r3, [pc, #116]	; (800cad4 <xTaskPriorityInherit+0xfc>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4013      	ands	r3, r2
 800ca62:	4a1c      	ldr	r2, [pc, #112]	; (800cad4 <xTaskPriorityInherit+0xfc>)
 800ca64:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ca66:	4b19      	ldr	r3, [pc, #100]	; (800cacc <xTaskPriorityInherit+0xf4>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca74:	2201      	movs	r2, #1
 800ca76:	409a      	lsls	r2, r3
 800ca78:	4b16      	ldr	r3, [pc, #88]	; (800cad4 <xTaskPriorityInherit+0xfc>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	4a15      	ldr	r2, [pc, #84]	; (800cad4 <xTaskPriorityInherit+0xfc>)
 800ca80:	6013      	str	r3, [r2, #0]
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca86:	4613      	mov	r3, r2
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	4413      	add	r3, r2
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	4a10      	ldr	r2, [pc, #64]	; (800cad0 <xTaskPriorityInherit+0xf8>)
 800ca90:	441a      	add	r2, r3
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	3304      	adds	r3, #4
 800ca96:	4619      	mov	r1, r3
 800ca98:	4610      	mov	r0, r2
 800ca9a:	f7fe fa41 	bl	800af20 <vListInsertEnd>
 800ca9e:	e004      	b.n	800caaa <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800caa0:	4b0a      	ldr	r3, [pc, #40]	; (800cacc <xTaskPriorityInherit+0xf4>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800caaa:	2301      	movs	r3, #1
 800caac:	60fb      	str	r3, [r7, #12]
 800caae:	e008      	b.n	800cac2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cab4:	4b05      	ldr	r3, [pc, #20]	; (800cacc <xTaskPriorityInherit+0xf4>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caba:	429a      	cmp	r2, r3
 800cabc:	d201      	bcs.n	800cac2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cabe:	2301      	movs	r3, #1
 800cac0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cac2:	68fb      	ldr	r3, [r7, #12]
	}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3710      	adds	r7, #16
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	20000560 	.word	0x20000560
 800cad0:	20000564 	.word	0x20000564
 800cad4:	20000668 	.word	0x20000668

0800cad8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b086      	sub	sp, #24
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cae4:	2300      	movs	r3, #0
 800cae6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d072      	beq.n	800cbd4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800caee:	4b3c      	ldr	r3, [pc, #240]	; (800cbe0 <xTaskPriorityDisinherit+0x108>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	693a      	ldr	r2, [r7, #16]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d00c      	beq.n	800cb12 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800caf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafc:	b672      	cpsid	i
 800cafe:	f383 8811 	msr	BASEPRI, r3
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	b662      	cpsie	i
 800cb0c:	60fb      	str	r3, [r7, #12]
}
 800cb0e:	bf00      	nop
 800cb10:	e7fe      	b.n	800cb10 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d10c      	bne.n	800cb34 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800cb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1e:	b672      	cpsid	i
 800cb20:	f383 8811 	msr	BASEPRI, r3
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	b662      	cpsie	i
 800cb2e:	60bb      	str	r3, [r7, #8]
}
 800cb30:	bf00      	nop
 800cb32:	e7fe      	b.n	800cb32 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb38:	1e5a      	subs	r2, r3, #1
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d044      	beq.n	800cbd4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d140      	bne.n	800cbd4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	3304      	adds	r3, #4
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7fe fa3f 	bl	800afda <uxListRemove>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d115      	bne.n	800cb8e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb66:	491f      	ldr	r1, [pc, #124]	; (800cbe4 <xTaskPriorityDisinherit+0x10c>)
 800cb68:	4613      	mov	r3, r2
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	4413      	add	r3, r2
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	440b      	add	r3, r1
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d10a      	bne.n	800cb8e <xTaskPriorityDisinherit+0xb6>
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb82:	43da      	mvns	r2, r3
 800cb84:	4b18      	ldr	r3, [pc, #96]	; (800cbe8 <xTaskPriorityDisinherit+0x110>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4013      	ands	r3, r2
 800cb8a:	4a17      	ldr	r2, [pc, #92]	; (800cbe8 <xTaskPriorityDisinherit+0x110>)
 800cb8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb9a:	f1c3 0207 	rsb	r2, r3, #7
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba6:	2201      	movs	r2, #1
 800cba8:	409a      	lsls	r2, r3
 800cbaa:	4b0f      	ldr	r3, [pc, #60]	; (800cbe8 <xTaskPriorityDisinherit+0x110>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	4a0d      	ldr	r2, [pc, #52]	; (800cbe8 <xTaskPriorityDisinherit+0x110>)
 800cbb2:	6013      	str	r3, [r2, #0]
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbb8:	4613      	mov	r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	4413      	add	r3, r2
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	4a08      	ldr	r2, [pc, #32]	; (800cbe4 <xTaskPriorityDisinherit+0x10c>)
 800cbc2:	441a      	add	r2, r3
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	3304      	adds	r3, #4
 800cbc8:	4619      	mov	r1, r3
 800cbca:	4610      	mov	r0, r2
 800cbcc:	f7fe f9a8 	bl	800af20 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cbd4:	697b      	ldr	r3, [r7, #20]
	}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3718      	adds	r7, #24
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	20000560 	.word	0x20000560
 800cbe4:	20000564 	.word	0x20000564
 800cbe8:	20000668 	.word	0x20000668

0800cbec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b088      	sub	sp, #32
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f000 8087 	beq.w	800cd14 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d10c      	bne.n	800cc28 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800cc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc12:	b672      	cpsid	i
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	b662      	cpsie	i
 800cc22:	60fb      	str	r3, [r7, #12]
}
 800cc24:	bf00      	nop
 800cc26:	e7fe      	b.n	800cc26 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cc28:	69bb      	ldr	r3, [r7, #24]
 800cc2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc2c:	683a      	ldr	r2, [r7, #0]
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d902      	bls.n	800cc38 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	61fb      	str	r3, [r7, #28]
 800cc36:	e002      	b.n	800cc3e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc3c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc42:	69fa      	ldr	r2, [r7, #28]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d065      	beq.n	800cd14 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc4c:	697a      	ldr	r2, [r7, #20]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d160      	bne.n	800cd14 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cc52:	4b32      	ldr	r3, [pc, #200]	; (800cd1c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	69ba      	ldr	r2, [r7, #24]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d10c      	bne.n	800cc76 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800cc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc60:	b672      	cpsid	i
 800cc62:	f383 8811 	msr	BASEPRI, r3
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	b662      	cpsie	i
 800cc70:	60bb      	str	r3, [r7, #8]
}
 800cc72:	bf00      	nop
 800cc74:	e7fe      	b.n	800cc74 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc7a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	69fa      	ldr	r2, [r7, #28]
 800cc80:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cc82:	69bb      	ldr	r3, [r7, #24]
 800cc84:	699b      	ldr	r3, [r3, #24]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	db04      	blt.n	800cc94 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	f1c3 0207 	rsb	r2, r3, #7
 800cc90:	69bb      	ldr	r3, [r7, #24]
 800cc92:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cc94:	69bb      	ldr	r3, [r7, #24]
 800cc96:	6959      	ldr	r1, [r3, #20]
 800cc98:	693a      	ldr	r2, [r7, #16]
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	4413      	add	r3, r2
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	4a1f      	ldr	r2, [pc, #124]	; (800cd20 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800cca4:	4413      	add	r3, r2
 800cca6:	4299      	cmp	r1, r3
 800cca8:	d134      	bne.n	800cd14 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	3304      	adds	r3, #4
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7fe f993 	bl	800afda <uxListRemove>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d115      	bne.n	800cce6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccbe:	4918      	ldr	r1, [pc, #96]	; (800cd20 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	4413      	add	r3, r2
 800ccc6:	009b      	lsls	r3, r3, #2
 800ccc8:	440b      	add	r3, r1
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d10a      	bne.n	800cce6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800ccd0:	69bb      	ldr	r3, [r7, #24]
 800ccd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	fa02 f303 	lsl.w	r3, r2, r3
 800ccda:	43da      	mvns	r2, r3
 800ccdc:	4b11      	ldr	r3, [pc, #68]	; (800cd24 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4013      	ands	r3, r2
 800cce2:	4a10      	ldr	r2, [pc, #64]	; (800cd24 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800cce4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cce6:	69bb      	ldr	r3, [r7, #24]
 800cce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccea:	2201      	movs	r2, #1
 800ccec:	409a      	lsls	r2, r3
 800ccee:	4b0d      	ldr	r3, [pc, #52]	; (800cd24 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	4a0b      	ldr	r2, [pc, #44]	; (800cd24 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ccf6:	6013      	str	r3, [r2, #0]
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccfc:	4613      	mov	r3, r2
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	4413      	add	r3, r2
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	4a06      	ldr	r2, [pc, #24]	; (800cd20 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800cd06:	441a      	add	r2, r3
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	3304      	adds	r3, #4
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	4610      	mov	r0, r2
 800cd10:	f7fe f906 	bl	800af20 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd14:	bf00      	nop
 800cd16:	3720      	adds	r7, #32
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	20000560 	.word	0x20000560
 800cd20:	20000564 	.word	0x20000564
 800cd24:	20000668 	.word	0x20000668

0800cd28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cd28:	b480      	push	{r7}
 800cd2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cd2c:	4b07      	ldr	r3, [pc, #28]	; (800cd4c <pvTaskIncrementMutexHeldCount+0x24>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d004      	beq.n	800cd3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cd34:	4b05      	ldr	r3, [pc, #20]	; (800cd4c <pvTaskIncrementMutexHeldCount+0x24>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cd3a:	3201      	adds	r2, #1
 800cd3c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800cd3e:	4b03      	ldr	r3, [pc, #12]	; (800cd4c <pvTaskIncrementMutexHeldCount+0x24>)
 800cd40:	681b      	ldr	r3, [r3, #0]
	}
 800cd42:	4618      	mov	r0, r3
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr
 800cd4c:	20000560 	.word	0x20000560

0800cd50 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cd5a:	4b29      	ldr	r3, [pc, #164]	; (800ce00 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd60:	4b28      	ldr	r3, [pc, #160]	; (800ce04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	3304      	adds	r3, #4
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fe f937 	bl	800afda <uxListRemove>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10b      	bne.n	800cd8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cd72:	4b24      	ldr	r3, [pc, #144]	; (800ce04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd78:	2201      	movs	r2, #1
 800cd7a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd7e:	43da      	mvns	r2, r3
 800cd80:	4b21      	ldr	r3, [pc, #132]	; (800ce08 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4013      	ands	r3, r2
 800cd86:	4a20      	ldr	r2, [pc, #128]	; (800ce08 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cd88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd90:	d10a      	bne.n	800cda8 <prvAddCurrentTaskToDelayedList+0x58>
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d007      	beq.n	800cda8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd98:	4b1a      	ldr	r3, [pc, #104]	; (800ce04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	3304      	adds	r3, #4
 800cd9e:	4619      	mov	r1, r3
 800cda0:	481a      	ldr	r0, [pc, #104]	; (800ce0c <prvAddCurrentTaskToDelayedList+0xbc>)
 800cda2:	f7fe f8bd 	bl	800af20 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cda6:	e026      	b.n	800cdf6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	4413      	add	r3, r2
 800cdae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cdb0:	4b14      	ldr	r3, [pc, #80]	; (800ce04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cdb8:	68ba      	ldr	r2, [r7, #8]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d209      	bcs.n	800cdd4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdc0:	4b13      	ldr	r3, [pc, #76]	; (800ce10 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cdc2:	681a      	ldr	r2, [r3, #0]
 800cdc4:	4b0f      	ldr	r3, [pc, #60]	; (800ce04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	3304      	adds	r3, #4
 800cdca:	4619      	mov	r1, r3
 800cdcc:	4610      	mov	r0, r2
 800cdce:	f7fe f8cb 	bl	800af68 <vListInsert>
}
 800cdd2:	e010      	b.n	800cdf6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdd4:	4b0f      	ldr	r3, [pc, #60]	; (800ce14 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	4b0a      	ldr	r3, [pc, #40]	; (800ce04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	3304      	adds	r3, #4
 800cdde:	4619      	mov	r1, r3
 800cde0:	4610      	mov	r0, r2
 800cde2:	f7fe f8c1 	bl	800af68 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cde6:	4b0c      	ldr	r3, [pc, #48]	; (800ce18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	68ba      	ldr	r2, [r7, #8]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d202      	bcs.n	800cdf6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cdf0:	4a09      	ldr	r2, [pc, #36]	; (800ce18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	6013      	str	r3, [r2, #0]
}
 800cdf6:	bf00      	nop
 800cdf8:	3710      	adds	r7, #16
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	20000664 	.word	0x20000664
 800ce04:	20000560 	.word	0x20000560
 800ce08:	20000668 	.word	0x20000668
 800ce0c:	2000064c 	.word	0x2000064c
 800ce10:	2000061c 	.word	0x2000061c
 800ce14:	20000618 	.word	0x20000618
 800ce18:	20000680 	.word	0x20000680

0800ce1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	60f8      	str	r0, [r7, #12]
 800ce24:	60b9      	str	r1, [r7, #8]
 800ce26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	3b04      	subs	r3, #4
 800ce2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ce34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	3b04      	subs	r3, #4
 800ce3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	f023 0201 	bic.w	r2, r3, #1
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	3b04      	subs	r3, #4
 800ce4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ce4c:	4a0c      	ldr	r2, [pc, #48]	; (800ce80 <pxPortInitialiseStack+0x64>)
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	3b14      	subs	r3, #20
 800ce56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	3b04      	subs	r3, #4
 800ce62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f06f 0202 	mvn.w	r2, #2
 800ce6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	3b20      	subs	r3, #32
 800ce70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ce72:	68fb      	ldr	r3, [r7, #12]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3714      	adds	r7, #20
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr
 800ce80:	0800ce85 	.word	0x0800ce85

0800ce84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ce84:	b480      	push	{r7}
 800ce86:	b085      	sub	sp, #20
 800ce88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ce8e:	4b14      	ldr	r3, [pc, #80]	; (800cee0 <prvTaskExitError+0x5c>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce96:	d00c      	beq.n	800ceb2 <prvTaskExitError+0x2e>
	__asm volatile
 800ce98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9c:	b672      	cpsid	i
 800ce9e:	f383 8811 	msr	BASEPRI, r3
 800cea2:	f3bf 8f6f 	isb	sy
 800cea6:	f3bf 8f4f 	dsb	sy
 800ceaa:	b662      	cpsie	i
 800ceac:	60fb      	str	r3, [r7, #12]
}
 800ceae:	bf00      	nop
 800ceb0:	e7fe      	b.n	800ceb0 <prvTaskExitError+0x2c>
	__asm volatile
 800ceb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb6:	b672      	cpsid	i
 800ceb8:	f383 8811 	msr	BASEPRI, r3
 800cebc:	f3bf 8f6f 	isb	sy
 800cec0:	f3bf 8f4f 	dsb	sy
 800cec4:	b662      	cpsie	i
 800cec6:	60bb      	str	r3, [r7, #8]
}
 800cec8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ceca:	bf00      	nop
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d0fc      	beq.n	800cecc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ced2:	bf00      	nop
 800ced4:	bf00      	nop
 800ced6:	3714      	adds	r7, #20
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	20000058 	.word	0x20000058
	...

0800cef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cef0:	4b07      	ldr	r3, [pc, #28]	; (800cf10 <pxCurrentTCBConst2>)
 800cef2:	6819      	ldr	r1, [r3, #0]
 800cef4:	6808      	ldr	r0, [r1, #0]
 800cef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cefa:	f380 8809 	msr	PSP, r0
 800cefe:	f3bf 8f6f 	isb	sy
 800cf02:	f04f 0000 	mov.w	r0, #0
 800cf06:	f380 8811 	msr	BASEPRI, r0
 800cf0a:	4770      	bx	lr
 800cf0c:	f3af 8000 	nop.w

0800cf10 <pxCurrentTCBConst2>:
 800cf10:	20000560 	.word	0x20000560
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cf14:	bf00      	nop
 800cf16:	bf00      	nop

0800cf18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cf18:	4808      	ldr	r0, [pc, #32]	; (800cf3c <prvPortStartFirstTask+0x24>)
 800cf1a:	6800      	ldr	r0, [r0, #0]
 800cf1c:	6800      	ldr	r0, [r0, #0]
 800cf1e:	f380 8808 	msr	MSP, r0
 800cf22:	f04f 0000 	mov.w	r0, #0
 800cf26:	f380 8814 	msr	CONTROL, r0
 800cf2a:	b662      	cpsie	i
 800cf2c:	b661      	cpsie	f
 800cf2e:	f3bf 8f4f 	dsb	sy
 800cf32:	f3bf 8f6f 	isb	sy
 800cf36:	df00      	svc	0
 800cf38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cf3a:	bf00      	nop
 800cf3c:	e000ed08 	.word	0xe000ed08

0800cf40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cf46:	4b37      	ldr	r3, [pc, #220]	; (800d024 <xPortStartScheduler+0xe4>)
 800cf48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	22ff      	movs	r2, #255	; 0xff
 800cf56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cf60:	78fb      	ldrb	r3, [r7, #3]
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cf68:	b2da      	uxtb	r2, r3
 800cf6a:	4b2f      	ldr	r3, [pc, #188]	; (800d028 <xPortStartScheduler+0xe8>)
 800cf6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cf6e:	4b2f      	ldr	r3, [pc, #188]	; (800d02c <xPortStartScheduler+0xec>)
 800cf70:	2207      	movs	r2, #7
 800cf72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cf74:	e009      	b.n	800cf8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cf76:	4b2d      	ldr	r3, [pc, #180]	; (800d02c <xPortStartScheduler+0xec>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	4a2b      	ldr	r2, [pc, #172]	; (800d02c <xPortStartScheduler+0xec>)
 800cf7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cf80:	78fb      	ldrb	r3, [r7, #3]
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	005b      	lsls	r3, r3, #1
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cf8a:	78fb      	ldrb	r3, [r7, #3]
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf92:	2b80      	cmp	r3, #128	; 0x80
 800cf94:	d0ef      	beq.n	800cf76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cf96:	4b25      	ldr	r3, [pc, #148]	; (800d02c <xPortStartScheduler+0xec>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f1c3 0307 	rsb	r3, r3, #7
 800cf9e:	2b04      	cmp	r3, #4
 800cfa0:	d00c      	beq.n	800cfbc <xPortStartScheduler+0x7c>
	__asm volatile
 800cfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa6:	b672      	cpsid	i
 800cfa8:	f383 8811 	msr	BASEPRI, r3
 800cfac:	f3bf 8f6f 	isb	sy
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	b662      	cpsie	i
 800cfb6:	60bb      	str	r3, [r7, #8]
}
 800cfb8:	bf00      	nop
 800cfba:	e7fe      	b.n	800cfba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cfbc:	4b1b      	ldr	r3, [pc, #108]	; (800d02c <xPortStartScheduler+0xec>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	021b      	lsls	r3, r3, #8
 800cfc2:	4a1a      	ldr	r2, [pc, #104]	; (800d02c <xPortStartScheduler+0xec>)
 800cfc4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cfc6:	4b19      	ldr	r3, [pc, #100]	; (800d02c <xPortStartScheduler+0xec>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cfce:	4a17      	ldr	r2, [pc, #92]	; (800d02c <xPortStartScheduler+0xec>)
 800cfd0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	b2da      	uxtb	r2, r3
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cfda:	4b15      	ldr	r3, [pc, #84]	; (800d030 <xPortStartScheduler+0xf0>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a14      	ldr	r2, [pc, #80]	; (800d030 <xPortStartScheduler+0xf0>)
 800cfe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cfe4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cfe6:	4b12      	ldr	r3, [pc, #72]	; (800d030 <xPortStartScheduler+0xf0>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a11      	ldr	r2, [pc, #68]	; (800d030 <xPortStartScheduler+0xf0>)
 800cfec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cff0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cff2:	f000 f8dd 	bl	800d1b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cff6:	4b0f      	ldr	r3, [pc, #60]	; (800d034 <xPortStartScheduler+0xf4>)
 800cff8:	2200      	movs	r2, #0
 800cffa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cffc:	f000 f8fc 	bl	800d1f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d000:	4b0d      	ldr	r3, [pc, #52]	; (800d038 <xPortStartScheduler+0xf8>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a0c      	ldr	r2, [pc, #48]	; (800d038 <xPortStartScheduler+0xf8>)
 800d006:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d00a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d00c:	f7ff ff84 	bl	800cf18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d010:	f7ff fa72 	bl	800c4f8 <vTaskSwitchContext>
	prvTaskExitError();
 800d014:	f7ff ff36 	bl	800ce84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d018:	2300      	movs	r3, #0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	e000e400 	.word	0xe000e400
 800d028:	2000068c 	.word	0x2000068c
 800d02c:	20000690 	.word	0x20000690
 800d030:	e000ed20 	.word	0xe000ed20
 800d034:	20000058 	.word	0x20000058
 800d038:	e000ef34 	.word	0xe000ef34

0800d03c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
	__asm volatile
 800d042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d046:	b672      	cpsid	i
 800d048:	f383 8811 	msr	BASEPRI, r3
 800d04c:	f3bf 8f6f 	isb	sy
 800d050:	f3bf 8f4f 	dsb	sy
 800d054:	b662      	cpsie	i
 800d056:	607b      	str	r3, [r7, #4]
}
 800d058:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d05a:	4b10      	ldr	r3, [pc, #64]	; (800d09c <vPortEnterCritical+0x60>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	3301      	adds	r3, #1
 800d060:	4a0e      	ldr	r2, [pc, #56]	; (800d09c <vPortEnterCritical+0x60>)
 800d062:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d064:	4b0d      	ldr	r3, [pc, #52]	; (800d09c <vPortEnterCritical+0x60>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d111      	bne.n	800d090 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d06c:	4b0c      	ldr	r3, [pc, #48]	; (800d0a0 <vPortEnterCritical+0x64>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	b2db      	uxtb	r3, r3
 800d072:	2b00      	cmp	r3, #0
 800d074:	d00c      	beq.n	800d090 <vPortEnterCritical+0x54>
	__asm volatile
 800d076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07a:	b672      	cpsid	i
 800d07c:	f383 8811 	msr	BASEPRI, r3
 800d080:	f3bf 8f6f 	isb	sy
 800d084:	f3bf 8f4f 	dsb	sy
 800d088:	b662      	cpsie	i
 800d08a:	603b      	str	r3, [r7, #0]
}
 800d08c:	bf00      	nop
 800d08e:	e7fe      	b.n	800d08e <vPortEnterCritical+0x52>
	}
}
 800d090:	bf00      	nop
 800d092:	370c      	adds	r7, #12
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr
 800d09c:	20000058 	.word	0x20000058
 800d0a0:	e000ed04 	.word	0xe000ed04

0800d0a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d0aa:	4b13      	ldr	r3, [pc, #76]	; (800d0f8 <vPortExitCritical+0x54>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d10c      	bne.n	800d0cc <vPortExitCritical+0x28>
	__asm volatile
 800d0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b6:	b672      	cpsid	i
 800d0b8:	f383 8811 	msr	BASEPRI, r3
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	b662      	cpsie	i
 800d0c6:	607b      	str	r3, [r7, #4]
}
 800d0c8:	bf00      	nop
 800d0ca:	e7fe      	b.n	800d0ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d0cc:	4b0a      	ldr	r3, [pc, #40]	; (800d0f8 <vPortExitCritical+0x54>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	3b01      	subs	r3, #1
 800d0d2:	4a09      	ldr	r2, [pc, #36]	; (800d0f8 <vPortExitCritical+0x54>)
 800d0d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d0d6:	4b08      	ldr	r3, [pc, #32]	; (800d0f8 <vPortExitCritical+0x54>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d105      	bne.n	800d0ea <vPortExitCritical+0x46>
 800d0de:	2300      	movs	r3, #0
 800d0e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	f383 8811 	msr	BASEPRI, r3
}
 800d0e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d0ea:	bf00      	nop
 800d0ec:	370c      	adds	r7, #12
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop
 800d0f8:	20000058 	.word	0x20000058
 800d0fc:	00000000 	.word	0x00000000

0800d100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d100:	f3ef 8009 	mrs	r0, PSP
 800d104:	f3bf 8f6f 	isb	sy
 800d108:	4b15      	ldr	r3, [pc, #84]	; (800d160 <pxCurrentTCBConst>)
 800d10a:	681a      	ldr	r2, [r3, #0]
 800d10c:	f01e 0f10 	tst.w	lr, #16
 800d110:	bf08      	it	eq
 800d112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d11a:	6010      	str	r0, [r2, #0]
 800d11c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d120:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d124:	b672      	cpsid	i
 800d126:	f380 8811 	msr	BASEPRI, r0
 800d12a:	f3bf 8f4f 	dsb	sy
 800d12e:	f3bf 8f6f 	isb	sy
 800d132:	b662      	cpsie	i
 800d134:	f7ff f9e0 	bl	800c4f8 <vTaskSwitchContext>
 800d138:	f04f 0000 	mov.w	r0, #0
 800d13c:	f380 8811 	msr	BASEPRI, r0
 800d140:	bc09      	pop	{r0, r3}
 800d142:	6819      	ldr	r1, [r3, #0]
 800d144:	6808      	ldr	r0, [r1, #0]
 800d146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d14a:	f01e 0f10 	tst.w	lr, #16
 800d14e:	bf08      	it	eq
 800d150:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d154:	f380 8809 	msr	PSP, r0
 800d158:	f3bf 8f6f 	isb	sy
 800d15c:	4770      	bx	lr
 800d15e:	bf00      	nop

0800d160 <pxCurrentTCBConst>:
 800d160:	20000560 	.word	0x20000560
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d164:	bf00      	nop
 800d166:	bf00      	nop

0800d168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
	__asm volatile
 800d16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d172:	b672      	cpsid	i
 800d174:	f383 8811 	msr	BASEPRI, r3
 800d178:	f3bf 8f6f 	isb	sy
 800d17c:	f3bf 8f4f 	dsb	sy
 800d180:	b662      	cpsie	i
 800d182:	607b      	str	r3, [r7, #4]
}
 800d184:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d186:	f7ff f8fd 	bl	800c384 <xTaskIncrementTick>
 800d18a:	4603      	mov	r3, r0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d003      	beq.n	800d198 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d190:	4b06      	ldr	r3, [pc, #24]	; (800d1ac <SysTick_Handler+0x44>)
 800d192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d196:	601a      	str	r2, [r3, #0]
 800d198:	2300      	movs	r3, #0
 800d19a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	f383 8811 	msr	BASEPRI, r3
}
 800d1a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d1a4:	bf00      	nop
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	e000ed04 	.word	0xe000ed04

0800d1b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d1b4:	4b0b      	ldr	r3, [pc, #44]	; (800d1e4 <vPortSetupTimerInterrupt+0x34>)
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d1ba:	4b0b      	ldr	r3, [pc, #44]	; (800d1e8 <vPortSetupTimerInterrupt+0x38>)
 800d1bc:	2200      	movs	r2, #0
 800d1be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d1c0:	4b0a      	ldr	r3, [pc, #40]	; (800d1ec <vPortSetupTimerInterrupt+0x3c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a0a      	ldr	r2, [pc, #40]	; (800d1f0 <vPortSetupTimerInterrupt+0x40>)
 800d1c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d1ca:	099b      	lsrs	r3, r3, #6
 800d1cc:	4a09      	ldr	r2, [pc, #36]	; (800d1f4 <vPortSetupTimerInterrupt+0x44>)
 800d1ce:	3b01      	subs	r3, #1
 800d1d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d1d2:	4b04      	ldr	r3, [pc, #16]	; (800d1e4 <vPortSetupTimerInterrupt+0x34>)
 800d1d4:	2207      	movs	r2, #7
 800d1d6:	601a      	str	r2, [r3, #0]
}
 800d1d8:	bf00      	nop
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr
 800d1e2:	bf00      	nop
 800d1e4:	e000e010 	.word	0xe000e010
 800d1e8:	e000e018 	.word	0xe000e018
 800d1ec:	2000004c 	.word	0x2000004c
 800d1f0:	10624dd3 	.word	0x10624dd3
 800d1f4:	e000e014 	.word	0xe000e014

0800d1f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d1f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d208 <vPortEnableVFP+0x10>
 800d1fc:	6801      	ldr	r1, [r0, #0]
 800d1fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d202:	6001      	str	r1, [r0, #0]
 800d204:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d206:	bf00      	nop
 800d208:	e000ed88 	.word	0xe000ed88

0800d20c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d20c:	b480      	push	{r7}
 800d20e:	b085      	sub	sp, #20
 800d210:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d212:	f3ef 8305 	mrs	r3, IPSR
 800d216:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2b0f      	cmp	r3, #15
 800d21c:	d916      	bls.n	800d24c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d21e:	4a19      	ldr	r2, [pc, #100]	; (800d284 <vPortValidateInterruptPriority+0x78>)
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	4413      	add	r3, r2
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d228:	4b17      	ldr	r3, [pc, #92]	; (800d288 <vPortValidateInterruptPriority+0x7c>)
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	7afa      	ldrb	r2, [r7, #11]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d20c      	bcs.n	800d24c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800d232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d236:	b672      	cpsid	i
 800d238:	f383 8811 	msr	BASEPRI, r3
 800d23c:	f3bf 8f6f 	isb	sy
 800d240:	f3bf 8f4f 	dsb	sy
 800d244:	b662      	cpsie	i
 800d246:	607b      	str	r3, [r7, #4]
}
 800d248:	bf00      	nop
 800d24a:	e7fe      	b.n	800d24a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d24c:	4b0f      	ldr	r3, [pc, #60]	; (800d28c <vPortValidateInterruptPriority+0x80>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d254:	4b0e      	ldr	r3, [pc, #56]	; (800d290 <vPortValidateInterruptPriority+0x84>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d90c      	bls.n	800d276 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800d25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d260:	b672      	cpsid	i
 800d262:	f383 8811 	msr	BASEPRI, r3
 800d266:	f3bf 8f6f 	isb	sy
 800d26a:	f3bf 8f4f 	dsb	sy
 800d26e:	b662      	cpsie	i
 800d270:	603b      	str	r3, [r7, #0]
}
 800d272:	bf00      	nop
 800d274:	e7fe      	b.n	800d274 <vPortValidateInterruptPriority+0x68>
	}
 800d276:	bf00      	nop
 800d278:	3714      	adds	r7, #20
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	e000e3f0 	.word	0xe000e3f0
 800d288:	2000068c 	.word	0x2000068c
 800d28c:	e000ed0c 	.word	0xe000ed0c
 800d290:	20000690 	.word	0x20000690

0800d294 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b08a      	sub	sp, #40	; 0x28
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d29c:	2300      	movs	r3, #0
 800d29e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d2a0:	f7fe ffc4 	bl	800c22c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d2a4:	4b5b      	ldr	r3, [pc, #364]	; (800d414 <pvPortMalloc+0x180>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d101      	bne.n	800d2b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d2ac:	f000 f91a 	bl	800d4e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d2b0:	4b59      	ldr	r3, [pc, #356]	; (800d418 <pvPortMalloc+0x184>)
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	4013      	ands	r3, r2
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	f040 8092 	bne.w	800d3e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d01f      	beq.n	800d304 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d2c4:	2208      	movs	r2, #8
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f003 0307 	and.w	r3, r3, #7
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d016      	beq.n	800d304 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f023 0307 	bic.w	r3, r3, #7
 800d2dc:	3308      	adds	r3, #8
 800d2de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f003 0307 	and.w	r3, r3, #7
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00c      	beq.n	800d304 <pvPortMalloc+0x70>
	__asm volatile
 800d2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ee:	b672      	cpsid	i
 800d2f0:	f383 8811 	msr	BASEPRI, r3
 800d2f4:	f3bf 8f6f 	isb	sy
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	b662      	cpsie	i
 800d2fe:	617b      	str	r3, [r7, #20]
}
 800d300:	bf00      	nop
 800d302:	e7fe      	b.n	800d302 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d06b      	beq.n	800d3e2 <pvPortMalloc+0x14e>
 800d30a:	4b44      	ldr	r3, [pc, #272]	; (800d41c <pvPortMalloc+0x188>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	429a      	cmp	r2, r3
 800d312:	d866      	bhi.n	800d3e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d314:	4b42      	ldr	r3, [pc, #264]	; (800d420 <pvPortMalloc+0x18c>)
 800d316:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d318:	4b41      	ldr	r3, [pc, #260]	; (800d420 <pvPortMalloc+0x18c>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d31e:	e004      	b.n	800d32a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d322:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	429a      	cmp	r2, r3
 800d332:	d903      	bls.n	800d33c <pvPortMalloc+0xa8>
 800d334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d1f1      	bne.n	800d320 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d33c:	4b35      	ldr	r3, [pc, #212]	; (800d414 <pvPortMalloc+0x180>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d342:	429a      	cmp	r2, r3
 800d344:	d04d      	beq.n	800d3e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d346:	6a3b      	ldr	r3, [r7, #32]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2208      	movs	r2, #8
 800d34c:	4413      	add	r3, r2
 800d34e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	6a3b      	ldr	r3, [r7, #32]
 800d356:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35a:	685a      	ldr	r2, [r3, #4]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	1ad2      	subs	r2, r2, r3
 800d360:	2308      	movs	r3, #8
 800d362:	005b      	lsls	r3, r3, #1
 800d364:	429a      	cmp	r2, r3
 800d366:	d921      	bls.n	800d3ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4413      	add	r3, r2
 800d36e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	f003 0307 	and.w	r3, r3, #7
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00c      	beq.n	800d394 <pvPortMalloc+0x100>
	__asm volatile
 800d37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37e:	b672      	cpsid	i
 800d380:	f383 8811 	msr	BASEPRI, r3
 800d384:	f3bf 8f6f 	isb	sy
 800d388:	f3bf 8f4f 	dsb	sy
 800d38c:	b662      	cpsie	i
 800d38e:	613b      	str	r3, [r7, #16]
}
 800d390:	bf00      	nop
 800d392:	e7fe      	b.n	800d392 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d396:	685a      	ldr	r2, [r3, #4]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	1ad2      	subs	r2, r2, r3
 800d39c:	69bb      	ldr	r3, [r7, #24]
 800d39e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d3a6:	69b8      	ldr	r0, [r7, #24]
 800d3a8:	f000 f8fe 	bl	800d5a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d3ac:	4b1b      	ldr	r3, [pc, #108]	; (800d41c <pvPortMalloc+0x188>)
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	1ad3      	subs	r3, r2, r3
 800d3b6:	4a19      	ldr	r2, [pc, #100]	; (800d41c <pvPortMalloc+0x188>)
 800d3b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d3ba:	4b18      	ldr	r3, [pc, #96]	; (800d41c <pvPortMalloc+0x188>)
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	4b19      	ldr	r3, [pc, #100]	; (800d424 <pvPortMalloc+0x190>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d203      	bcs.n	800d3ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d3c6:	4b15      	ldr	r3, [pc, #84]	; (800d41c <pvPortMalloc+0x188>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4a16      	ldr	r2, [pc, #88]	; (800d424 <pvPortMalloc+0x190>)
 800d3cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d0:	685a      	ldr	r2, [r3, #4]
 800d3d2:	4b11      	ldr	r3, [pc, #68]	; (800d418 <pvPortMalloc+0x184>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	431a      	orrs	r2, r3
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3de:	2200      	movs	r2, #0
 800d3e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d3e2:	f7fe ff31 	bl	800c248 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	f003 0307 	and.w	r3, r3, #7
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00c      	beq.n	800d40a <pvPortMalloc+0x176>
	__asm volatile
 800d3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f4:	b672      	cpsid	i
 800d3f6:	f383 8811 	msr	BASEPRI, r3
 800d3fa:	f3bf 8f6f 	isb	sy
 800d3fe:	f3bf 8f4f 	dsb	sy
 800d402:	b662      	cpsie	i
 800d404:	60fb      	str	r3, [r7, #12]
}
 800d406:	bf00      	nop
 800d408:	e7fe      	b.n	800d408 <pvPortMalloc+0x174>
	return pvReturn;
 800d40a:	69fb      	ldr	r3, [r7, #28]
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3728      	adds	r7, #40	; 0x28
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	2000429c 	.word	0x2000429c
 800d418:	200042a8 	.word	0x200042a8
 800d41c:	200042a0 	.word	0x200042a0
 800d420:	20004294 	.word	0x20004294
 800d424:	200042a4 	.word	0x200042a4

0800d428 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b086      	sub	sp, #24
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d04c      	beq.n	800d4d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d43a:	2308      	movs	r3, #8
 800d43c:	425b      	negs	r3, r3
 800d43e:	697a      	ldr	r2, [r7, #20]
 800d440:	4413      	add	r3, r2
 800d442:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	685a      	ldr	r2, [r3, #4]
 800d44c:	4b23      	ldr	r3, [pc, #140]	; (800d4dc <vPortFree+0xb4>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4013      	ands	r3, r2
 800d452:	2b00      	cmp	r3, #0
 800d454:	d10c      	bne.n	800d470 <vPortFree+0x48>
	__asm volatile
 800d456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45a:	b672      	cpsid	i
 800d45c:	f383 8811 	msr	BASEPRI, r3
 800d460:	f3bf 8f6f 	isb	sy
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	b662      	cpsie	i
 800d46a:	60fb      	str	r3, [r7, #12]
}
 800d46c:	bf00      	nop
 800d46e:	e7fe      	b.n	800d46e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d00c      	beq.n	800d492 <vPortFree+0x6a>
	__asm volatile
 800d478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d47c:	b672      	cpsid	i
 800d47e:	f383 8811 	msr	BASEPRI, r3
 800d482:	f3bf 8f6f 	isb	sy
 800d486:	f3bf 8f4f 	dsb	sy
 800d48a:	b662      	cpsie	i
 800d48c:	60bb      	str	r3, [r7, #8]
}
 800d48e:	bf00      	nop
 800d490:	e7fe      	b.n	800d490 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	685a      	ldr	r2, [r3, #4]
 800d496:	4b11      	ldr	r3, [pc, #68]	; (800d4dc <vPortFree+0xb4>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	4013      	ands	r3, r2
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d019      	beq.n	800d4d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d115      	bne.n	800d4d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	685a      	ldr	r2, [r3, #4]
 800d4ac:	4b0b      	ldr	r3, [pc, #44]	; (800d4dc <vPortFree+0xb4>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	43db      	mvns	r3, r3
 800d4b2:	401a      	ands	r2, r3
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d4b8:	f7fe feb8 	bl	800c22c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	685a      	ldr	r2, [r3, #4]
 800d4c0:	4b07      	ldr	r3, [pc, #28]	; (800d4e0 <vPortFree+0xb8>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	4a06      	ldr	r2, [pc, #24]	; (800d4e0 <vPortFree+0xb8>)
 800d4c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d4ca:	6938      	ldr	r0, [r7, #16]
 800d4cc:	f000 f86c 	bl	800d5a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d4d0:	f7fe feba 	bl	800c248 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d4d4:	bf00      	nop
 800d4d6:	3718      	adds	r7, #24
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	200042a8 	.word	0x200042a8
 800d4e0:	200042a0 	.word	0x200042a0

0800d4e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d4ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d4ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d4f0:	4b27      	ldr	r3, [pc, #156]	; (800d590 <prvHeapInit+0xac>)
 800d4f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f003 0307 	and.w	r3, r3, #7
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d00c      	beq.n	800d518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	3307      	adds	r3, #7
 800d502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f023 0307 	bic.w	r3, r3, #7
 800d50a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d50c:	68ba      	ldr	r2, [r7, #8]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	1ad3      	subs	r3, r2, r3
 800d512:	4a1f      	ldr	r2, [pc, #124]	; (800d590 <prvHeapInit+0xac>)
 800d514:	4413      	add	r3, r2
 800d516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d51c:	4a1d      	ldr	r2, [pc, #116]	; (800d594 <prvHeapInit+0xb0>)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d522:	4b1c      	ldr	r3, [pc, #112]	; (800d594 <prvHeapInit+0xb0>)
 800d524:	2200      	movs	r2, #0
 800d526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	68ba      	ldr	r2, [r7, #8]
 800d52c:	4413      	add	r3, r2
 800d52e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d530:	2208      	movs	r2, #8
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	1a9b      	subs	r3, r3, r2
 800d536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f023 0307 	bic.w	r3, r3, #7
 800d53e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	4a15      	ldr	r2, [pc, #84]	; (800d598 <prvHeapInit+0xb4>)
 800d544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d546:	4b14      	ldr	r3, [pc, #80]	; (800d598 <prvHeapInit+0xb4>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	2200      	movs	r2, #0
 800d54c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d54e:	4b12      	ldr	r3, [pc, #72]	; (800d598 <prvHeapInit+0xb4>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	2200      	movs	r2, #0
 800d554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	68fa      	ldr	r2, [r7, #12]
 800d55e:	1ad2      	subs	r2, r2, r3
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d564:	4b0c      	ldr	r3, [pc, #48]	; (800d598 <prvHeapInit+0xb4>)
 800d566:	681a      	ldr	r2, [r3, #0]
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	4a0a      	ldr	r2, [pc, #40]	; (800d59c <prvHeapInit+0xb8>)
 800d572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	4a09      	ldr	r2, [pc, #36]	; (800d5a0 <prvHeapInit+0xbc>)
 800d57a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d57c:	4b09      	ldr	r3, [pc, #36]	; (800d5a4 <prvHeapInit+0xc0>)
 800d57e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d582:	601a      	str	r2, [r3, #0]
}
 800d584:	bf00      	nop
 800d586:	3714      	adds	r7, #20
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr
 800d590:	20000694 	.word	0x20000694
 800d594:	20004294 	.word	0x20004294
 800d598:	2000429c 	.word	0x2000429c
 800d59c:	200042a4 	.word	0x200042a4
 800d5a0:	200042a0 	.word	0x200042a0
 800d5a4:	200042a8 	.word	0x200042a8

0800d5a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b085      	sub	sp, #20
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d5b0:	4b28      	ldr	r3, [pc, #160]	; (800d654 <prvInsertBlockIntoFreeList+0xac>)
 800d5b2:	60fb      	str	r3, [r7, #12]
 800d5b4:	e002      	b.n	800d5bc <prvInsertBlockIntoFreeList+0x14>
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	60fb      	str	r3, [r7, #12]
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d8f7      	bhi.n	800d5b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	68ba      	ldr	r2, [r7, #8]
 800d5d0:	4413      	add	r3, r2
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d108      	bne.n	800d5ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	685a      	ldr	r2, [r3, #4]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	441a      	add	r2, r3
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	68ba      	ldr	r2, [r7, #8]
 800d5f4:	441a      	add	r2, r3
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d118      	bne.n	800d630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	4b15      	ldr	r3, [pc, #84]	; (800d658 <prvInsertBlockIntoFreeList+0xb0>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	429a      	cmp	r2, r3
 800d608:	d00d      	beq.n	800d626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	685a      	ldr	r2, [r3, #4]
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	441a      	add	r2, r3
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	681a      	ldr	r2, [r3, #0]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	601a      	str	r2, [r3, #0]
 800d624:	e008      	b.n	800d638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d626:	4b0c      	ldr	r3, [pc, #48]	; (800d658 <prvInsertBlockIntoFreeList+0xb0>)
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	601a      	str	r2, [r3, #0]
 800d62e:	e003      	b.n	800d638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d638:	68fa      	ldr	r2, [r7, #12]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d002      	beq.n	800d646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d646:	bf00      	nop
 800d648:	3714      	adds	r7, #20
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	20004294 	.word	0x20004294
 800d658:	2000429c 	.word	0x2000429c

0800d65c <__libc_init_array>:
 800d65c:	b570      	push	{r4, r5, r6, lr}
 800d65e:	4d0d      	ldr	r5, [pc, #52]	; (800d694 <__libc_init_array+0x38>)
 800d660:	4c0d      	ldr	r4, [pc, #52]	; (800d698 <__libc_init_array+0x3c>)
 800d662:	1b64      	subs	r4, r4, r5
 800d664:	10a4      	asrs	r4, r4, #2
 800d666:	2600      	movs	r6, #0
 800d668:	42a6      	cmp	r6, r4
 800d66a:	d109      	bne.n	800d680 <__libc_init_array+0x24>
 800d66c:	4d0b      	ldr	r5, [pc, #44]	; (800d69c <__libc_init_array+0x40>)
 800d66e:	4c0c      	ldr	r4, [pc, #48]	; (800d6a0 <__libc_init_array+0x44>)
 800d670:	f000 f8f6 	bl	800d860 <_init>
 800d674:	1b64      	subs	r4, r4, r5
 800d676:	10a4      	asrs	r4, r4, #2
 800d678:	2600      	movs	r6, #0
 800d67a:	42a6      	cmp	r6, r4
 800d67c:	d105      	bne.n	800d68a <__libc_init_array+0x2e>
 800d67e:	bd70      	pop	{r4, r5, r6, pc}
 800d680:	f855 3b04 	ldr.w	r3, [r5], #4
 800d684:	4798      	blx	r3
 800d686:	3601      	adds	r6, #1
 800d688:	e7ee      	b.n	800d668 <__libc_init_array+0xc>
 800d68a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d68e:	4798      	blx	r3
 800d690:	3601      	adds	r6, #1
 800d692:	e7f2      	b.n	800d67a <__libc_init_array+0x1e>
 800d694:	0800f940 	.word	0x0800f940
 800d698:	0800f940 	.word	0x0800f940
 800d69c:	0800f940 	.word	0x0800f940
 800d6a0:	0800f944 	.word	0x0800f944

0800d6a4 <__retarget_lock_acquire_recursive>:
 800d6a4:	4770      	bx	lr

0800d6a6 <__retarget_lock_release_recursive>:
 800d6a6:	4770      	bx	lr

0800d6a8 <memcpy>:
 800d6a8:	440a      	add	r2, r1
 800d6aa:	4291      	cmp	r1, r2
 800d6ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6b0:	d100      	bne.n	800d6b4 <memcpy+0xc>
 800d6b2:	4770      	bx	lr
 800d6b4:	b510      	push	{r4, lr}
 800d6b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6be:	4291      	cmp	r1, r2
 800d6c0:	d1f9      	bne.n	800d6b6 <memcpy+0xe>
 800d6c2:	bd10      	pop	{r4, pc}

0800d6c4 <memset>:
 800d6c4:	4402      	add	r2, r0
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d100      	bne.n	800d6ce <memset+0xa>
 800d6cc:	4770      	bx	lr
 800d6ce:	f803 1b01 	strb.w	r1, [r3], #1
 800d6d2:	e7f9      	b.n	800d6c8 <memset+0x4>

0800d6d4 <cleanup_glue>:
 800d6d4:	b538      	push	{r3, r4, r5, lr}
 800d6d6:	460c      	mov	r4, r1
 800d6d8:	6809      	ldr	r1, [r1, #0]
 800d6da:	4605      	mov	r5, r0
 800d6dc:	b109      	cbz	r1, 800d6e2 <cleanup_glue+0xe>
 800d6de:	f7ff fff9 	bl	800d6d4 <cleanup_glue>
 800d6e2:	4621      	mov	r1, r4
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6ea:	f000 b869 	b.w	800d7c0 <_free_r>
	...

0800d6f0 <_reclaim_reent>:
 800d6f0:	4b2c      	ldr	r3, [pc, #176]	; (800d7a4 <_reclaim_reent+0xb4>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4283      	cmp	r3, r0
 800d6f6:	b570      	push	{r4, r5, r6, lr}
 800d6f8:	4604      	mov	r4, r0
 800d6fa:	d051      	beq.n	800d7a0 <_reclaim_reent+0xb0>
 800d6fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d6fe:	b143      	cbz	r3, 800d712 <_reclaim_reent+0x22>
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d14a      	bne.n	800d79c <_reclaim_reent+0xac>
 800d706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d708:	6819      	ldr	r1, [r3, #0]
 800d70a:	b111      	cbz	r1, 800d712 <_reclaim_reent+0x22>
 800d70c:	4620      	mov	r0, r4
 800d70e:	f000 f857 	bl	800d7c0 <_free_r>
 800d712:	6961      	ldr	r1, [r4, #20]
 800d714:	b111      	cbz	r1, 800d71c <_reclaim_reent+0x2c>
 800d716:	4620      	mov	r0, r4
 800d718:	f000 f852 	bl	800d7c0 <_free_r>
 800d71c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d71e:	b111      	cbz	r1, 800d726 <_reclaim_reent+0x36>
 800d720:	4620      	mov	r0, r4
 800d722:	f000 f84d 	bl	800d7c0 <_free_r>
 800d726:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d728:	b111      	cbz	r1, 800d730 <_reclaim_reent+0x40>
 800d72a:	4620      	mov	r0, r4
 800d72c:	f000 f848 	bl	800d7c0 <_free_r>
 800d730:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d732:	b111      	cbz	r1, 800d73a <_reclaim_reent+0x4a>
 800d734:	4620      	mov	r0, r4
 800d736:	f000 f843 	bl	800d7c0 <_free_r>
 800d73a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d73c:	b111      	cbz	r1, 800d744 <_reclaim_reent+0x54>
 800d73e:	4620      	mov	r0, r4
 800d740:	f000 f83e 	bl	800d7c0 <_free_r>
 800d744:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d746:	b111      	cbz	r1, 800d74e <_reclaim_reent+0x5e>
 800d748:	4620      	mov	r0, r4
 800d74a:	f000 f839 	bl	800d7c0 <_free_r>
 800d74e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d750:	b111      	cbz	r1, 800d758 <_reclaim_reent+0x68>
 800d752:	4620      	mov	r0, r4
 800d754:	f000 f834 	bl	800d7c0 <_free_r>
 800d758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d75a:	b111      	cbz	r1, 800d762 <_reclaim_reent+0x72>
 800d75c:	4620      	mov	r0, r4
 800d75e:	f000 f82f 	bl	800d7c0 <_free_r>
 800d762:	69a3      	ldr	r3, [r4, #24]
 800d764:	b1e3      	cbz	r3, 800d7a0 <_reclaim_reent+0xb0>
 800d766:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d768:	4620      	mov	r0, r4
 800d76a:	4798      	blx	r3
 800d76c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d76e:	b1b9      	cbz	r1, 800d7a0 <_reclaim_reent+0xb0>
 800d770:	4620      	mov	r0, r4
 800d772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d776:	f7ff bfad 	b.w	800d6d4 <cleanup_glue>
 800d77a:	5949      	ldr	r1, [r1, r5]
 800d77c:	b941      	cbnz	r1, 800d790 <_reclaim_reent+0xa0>
 800d77e:	3504      	adds	r5, #4
 800d780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d782:	2d80      	cmp	r5, #128	; 0x80
 800d784:	68d9      	ldr	r1, [r3, #12]
 800d786:	d1f8      	bne.n	800d77a <_reclaim_reent+0x8a>
 800d788:	4620      	mov	r0, r4
 800d78a:	f000 f819 	bl	800d7c0 <_free_r>
 800d78e:	e7ba      	b.n	800d706 <_reclaim_reent+0x16>
 800d790:	680e      	ldr	r6, [r1, #0]
 800d792:	4620      	mov	r0, r4
 800d794:	f000 f814 	bl	800d7c0 <_free_r>
 800d798:	4631      	mov	r1, r6
 800d79a:	e7ef      	b.n	800d77c <_reclaim_reent+0x8c>
 800d79c:	2500      	movs	r5, #0
 800d79e:	e7ef      	b.n	800d780 <_reclaim_reent+0x90>
 800d7a0:	bd70      	pop	{r4, r5, r6, pc}
 800d7a2:	bf00      	nop
 800d7a4:	2000005c 	.word	0x2000005c

0800d7a8 <__malloc_lock>:
 800d7a8:	4801      	ldr	r0, [pc, #4]	; (800d7b0 <__malloc_lock+0x8>)
 800d7aa:	f7ff bf7b 	b.w	800d6a4 <__retarget_lock_acquire_recursive>
 800d7ae:	bf00      	nop
 800d7b0:	200049ec 	.word	0x200049ec

0800d7b4 <__malloc_unlock>:
 800d7b4:	4801      	ldr	r0, [pc, #4]	; (800d7bc <__malloc_unlock+0x8>)
 800d7b6:	f7ff bf76 	b.w	800d6a6 <__retarget_lock_release_recursive>
 800d7ba:	bf00      	nop
 800d7bc:	200049ec 	.word	0x200049ec

0800d7c0 <_free_r>:
 800d7c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7c2:	2900      	cmp	r1, #0
 800d7c4:	d048      	beq.n	800d858 <_free_r+0x98>
 800d7c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7ca:	9001      	str	r0, [sp, #4]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	f1a1 0404 	sub.w	r4, r1, #4
 800d7d2:	bfb8      	it	lt
 800d7d4:	18e4      	addlt	r4, r4, r3
 800d7d6:	f7ff ffe7 	bl	800d7a8 <__malloc_lock>
 800d7da:	4a20      	ldr	r2, [pc, #128]	; (800d85c <_free_r+0x9c>)
 800d7dc:	9801      	ldr	r0, [sp, #4]
 800d7de:	6813      	ldr	r3, [r2, #0]
 800d7e0:	4615      	mov	r5, r2
 800d7e2:	b933      	cbnz	r3, 800d7f2 <_free_r+0x32>
 800d7e4:	6063      	str	r3, [r4, #4]
 800d7e6:	6014      	str	r4, [r2, #0]
 800d7e8:	b003      	add	sp, #12
 800d7ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d7ee:	f7ff bfe1 	b.w	800d7b4 <__malloc_unlock>
 800d7f2:	42a3      	cmp	r3, r4
 800d7f4:	d90b      	bls.n	800d80e <_free_r+0x4e>
 800d7f6:	6821      	ldr	r1, [r4, #0]
 800d7f8:	1862      	adds	r2, r4, r1
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	bf04      	itt	eq
 800d7fe:	681a      	ldreq	r2, [r3, #0]
 800d800:	685b      	ldreq	r3, [r3, #4]
 800d802:	6063      	str	r3, [r4, #4]
 800d804:	bf04      	itt	eq
 800d806:	1852      	addeq	r2, r2, r1
 800d808:	6022      	streq	r2, [r4, #0]
 800d80a:	602c      	str	r4, [r5, #0]
 800d80c:	e7ec      	b.n	800d7e8 <_free_r+0x28>
 800d80e:	461a      	mov	r2, r3
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	b10b      	cbz	r3, 800d818 <_free_r+0x58>
 800d814:	42a3      	cmp	r3, r4
 800d816:	d9fa      	bls.n	800d80e <_free_r+0x4e>
 800d818:	6811      	ldr	r1, [r2, #0]
 800d81a:	1855      	adds	r5, r2, r1
 800d81c:	42a5      	cmp	r5, r4
 800d81e:	d10b      	bne.n	800d838 <_free_r+0x78>
 800d820:	6824      	ldr	r4, [r4, #0]
 800d822:	4421      	add	r1, r4
 800d824:	1854      	adds	r4, r2, r1
 800d826:	42a3      	cmp	r3, r4
 800d828:	6011      	str	r1, [r2, #0]
 800d82a:	d1dd      	bne.n	800d7e8 <_free_r+0x28>
 800d82c:	681c      	ldr	r4, [r3, #0]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	6053      	str	r3, [r2, #4]
 800d832:	4421      	add	r1, r4
 800d834:	6011      	str	r1, [r2, #0]
 800d836:	e7d7      	b.n	800d7e8 <_free_r+0x28>
 800d838:	d902      	bls.n	800d840 <_free_r+0x80>
 800d83a:	230c      	movs	r3, #12
 800d83c:	6003      	str	r3, [r0, #0]
 800d83e:	e7d3      	b.n	800d7e8 <_free_r+0x28>
 800d840:	6825      	ldr	r5, [r4, #0]
 800d842:	1961      	adds	r1, r4, r5
 800d844:	428b      	cmp	r3, r1
 800d846:	bf04      	itt	eq
 800d848:	6819      	ldreq	r1, [r3, #0]
 800d84a:	685b      	ldreq	r3, [r3, #4]
 800d84c:	6063      	str	r3, [r4, #4]
 800d84e:	bf04      	itt	eq
 800d850:	1949      	addeq	r1, r1, r5
 800d852:	6021      	streq	r1, [r4, #0]
 800d854:	6054      	str	r4, [r2, #4]
 800d856:	e7c7      	b.n	800d7e8 <_free_r+0x28>
 800d858:	b003      	add	sp, #12
 800d85a:	bd30      	pop	{r4, r5, pc}
 800d85c:	200042ac 	.word	0x200042ac

0800d860 <_init>:
 800d860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d862:	bf00      	nop
 800d864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d866:	bc08      	pop	{r3}
 800d868:	469e      	mov	lr, r3
 800d86a:	4770      	bx	lr

0800d86c <_fini>:
 800d86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86e:	bf00      	nop
 800d870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d872:	bc08      	pop	{r3}
 800d874:	469e      	mov	lr, r3
 800d876:	4770      	bx	lr
